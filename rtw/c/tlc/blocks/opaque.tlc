%% 
%% $Revision: 1.1.6.7 $
%% 
%%
%% Copyright 1994-2004 The MathWorks, Inc.
%%
%% Abstract: Opaque block target file

%implements Opaque "C"

%% Function: BlockTypeSetup ====================================================
%% Abstract:
%%
%function BlockTypeSetup(block,system) void
  %assign ::CompiledModel.IncludeLibsrc = 1
  %assign protoBuf  = GetModelUserFcnPrototypes()
  %assign baseHFile = GetBaseFile("SystemHeader")
  %<SLibSetModelFileAttribute(baseHFile,"Typedefs",protoBuf)>
  %<CGIRBlockRegisterFixPointFunctions()>
%endfunction

%% Fucntion: generateType ======================================================
%% Abstract:
%%
%function generateType(block, system, fcnType) Output
  %assign fileName = TLCFileName + "_" + fcnType
  %<GENERATE_TYPE(block, fcnType, fileName, system)>
  %assign unused = UNLOAD_GENERATE_TYPE(block, fileName)
%endfunction

%% Fucntion: generatePort ======================================================
%% Abstract:
%%
%function generatePort(block, portIdx, fcnType) void
  %assign fileName = TLCFileName + "_" + fcnType
  %assign retVal = GENERATE_TYPE(block, fcnType, fileName, portIdx)
  %assign unused = UNLOAD_GENERATE_TYPE(block, fileName)
  %return retVal
%endfunction

%% Function: BlockInstanceSetup ================================================
%% Abstract:
%%
%function BlockInstanceSetup(block, system) void
  %<LibBlockSetIsExpressionCompliant(block)>
  %<LibBlockSetCustomStorageComplianceLevel(block, 2)>
  %if !block.SkipBlockFcn
    %if GenerateInterfaceAPI
      %% Create a parameter group for ASAP2 data definition
      %foreach prmIdx = Parameters[0]
        %if Parameter[prmIdx].Name == "InputValues"
          %assign group  = SLibCreateParameterGroup(block,"Lookup1D")
          %assign tmpVar = SLibAddMember(block,group,Parameter[prmIdx])
          %assign tmpVar = SLibAddMember(block,group,Parameter[prmIdx+1])
        %elseif Parameter[prmIdx].Name == "RowIndex"
          %assign group  = SLibCreateParameterGroup(block,"Lookup2D")
          %assign tmpVar = SLibAddMember(block, group, Parameter[prmIdx])
          %assign tmpVar = SLibAddMember(block, group, Parameter[prmIdx+1])
          %assign tmpVar = SLibAddMember(block, group, Parameter[prmIdx+2])
        %endif
      %endforeach
    %endif
    %if block.OpaqueBlockMethode.HasInstanceSetup
      %<generateType(block, system, "BlockInstanceSetup")>
    %endif
  %endif
%endfunction

%% Function: Start =============================================================
%% Abstract:
%%   This function calls the generated start function of the opaques
%%   block TLC implementation.
%%
%function Start(block, system) Output
  %if block.OpaqueBlockMethode.HasStart
    %<generateType(block, system, "Start")>
  %endif
%endfunction

%% Function: InitializeConditions  =============================================
%% Abstract:
%%   This function calls the generated initialize conditions function of the
%%   opaques block TLC implementation.
%%
%function InitializeConditions(block, system) Output
  %if block.OpaqueBlockMethode.HasInitializeConditions
    %<generateType(block, system, "InitializeConditions")>
  %endif
%endfunction

%% Function: Update ============================================================
%% Abstract:
%%   This function calls the generated update function of the opaques
%%   block TLC implementation.
%%
%function Update(block, system) Output
  %if block.OpaqueBlockMethode.HasUpdate
    %<generateType(block, system, "Update")>
  %endif
%endfunction

%% Function: Outputs ===========================================================
%% Abstract:
%%   This function calls the generated output function of the opaques
%%   block TLC implementation.
%%
%function Outputs(block, system) Output 
  %if block.OpaqueBlockMethode.HasOutputs
    %<generateType(block, system, "Outputs")>
  %endif
%endfunction

%% Function: Derivatives =======================================================
%% Abstract:
%%   This function calls the generated derivatives function of the opaques
%%   block TLC implementation.
%%
%function Derivatives(block, system) Output
  %if block.OpaqueBlockMethode.HasDerivatives
    %<generateType(block, system, "Derivatives")>
  %endif
%endfunction

%% Function: Projection ========================================================
%% Abstract:
%%   This function calls the generated projection function of the opaques
%%   block TLC implementation.
%%
%function Projection(block, system) Output
  %if block.OpaqueBlockMethode.HasProjection
    %<generateType(block, system, "Projection")>
  %endif
%endfunction

%% Function: ZeroCrossings =====================================================
%% Abstract:
%%   This function calls the generated zero crossings function of the opaques
%%   block TLC implementation.
%%
%function ZeroCrossings(block, system) Output
  %if block.OpaqueBlockMethode.HasZeroCrossings
    %<generateType(block, system, "ZeroCrossings")>
  %endif
%endfunction

%% Function: Enable ============================================================
%% Abstract:
%%   This function calls the generated enable function of the opaques
%%   block TLC implementation.
%%
%function Enable(block, system) Output
  %if block.OpaqueBlockMethode.HasEnable
    %<generateType(block, system, "Enable")>
  %endif
%endfunction

%% Function: Disable ===========================================================
%% Abstract:
%%   This function calls the generated disable function of the opaques
%%   block TLC implementation.
%%
%function Disable(block, system) Output
  %if block.OpaqueBlockMethode.HasDisable
    %<generateType(block, system, "Disable")>
  %endif
%endfunction

%% Function: Terminate =========================================================
%% Abstract:
%%   This function calls the generated terminate function of the opaques
%%   block TLC implementation.
%%
%function Terminate(block, system) Output
  %if block.OpaqueBlockMethode.HasTerminate
    %<generateType(block, system, "Terminate")>
  %endif
%endfunction

%% Function: BlockOutputSignal =================================================
%% Abstract:
%%   This function calls the generated BlockOutputSignal function of the opaques
%%   block TLC implementation.
%%
%function BlockOutputSignal(block, system, portIdx, ucv, lcv, idx, retType) void
  %assign fileName = TLCFileName + "_BlockOutputSignal"
  %assign retVal = GENERATE_TYPE(block, "BlockOutputSignal", fileName, ...
    system, portIdx, ucv, lcv, idx, retType)
  %assign unused = UNLOAD_GENERATE_TYPE(block, fileName)
  %return retVal
%endfunction

%% Function: BlockOutputComment ================================================
%% Abstract:
%%   This function calls the generated BlockOutputComment function of the
%%   opaques block TLC implementation.
%%
%function BlockOutputComment(block, portIdx) void
  %return generatePort(block, portIdx, "BlockOutputComment")
%endfunction

%% Function: BlockOutputDescription ============================================
%% Abstract:
%%   This function calls the generated BlockOutputDescription function of the
%%   opaques block TLC implementation.
%%
%function BlockOutputDescription(block, portIdx) void
  %return generatePort(block, portIdx, "BlockOutputDescription")
%endfunction

%% Function: BlockOutputRequirements ===========================================
%% Abstract:
%%   This function calls the generated BlockOutputRequirements function of the
%%   opaques block TLC implementation.
%%
%function BlockOutputRequirements(block, portIdx) void
  %return generatePort(block, portIdx, "BlockOutputRequirements")
%endfunction

%% [EOF] opaque.tlc
