%% $Revision: 1.1.6.3 $
%% 
%%
%% Copyright 1994-2003 The MathWorks, Inc.
%%
%% Abstract:
%%      Step block target file. 
%%

%implements Step "C"

%% Function: BlockInstanceSetup ==============================================
%% Abstract:
%%   Set expression folding compliance
%%
%function BlockInstanceSetup(block, system) void
  %<LibBlockSetIsExpressionCompliant(block)>
%endfunction


%% Function: Outputs ==========================================================
%%
%function Outputs(block, system) Output
  %assign time = "currentTime"
  %assign ntime = SIZE(Time.Value, 1)
  %if NumNonsampledZCs > 0
    if (%<RTMIs("MajorTimeStep")>) {
      real_T currentTime = %<LibGetTaskTimeFromTID(block)>;
      %if ntime > 1
	%assign rollVars = ["Mode", "<param>/Time"]
	%roll sigIdx = RollRegions, lcv = RollThreshold, block, "Roller", rollVars
	  %assign m = LibBlockMode("", lcv, sigIdx)
	  %assign stepTime = LibBlockParameter(Time, "", lcv, sigIdx)
	  %<m> = (%<time> >= %<stepTime>) ? 1 : 0;
	%endroll
      %else
	%assign stepTime = LibBlockParameter(Time, "", "", 0)
	if (%<time> >= %<stepTime>) {
	  %assign rollVars = ["Mode"]
	  %roll sigIdx = RollRegions, lcv = RollThreshold, block, "Roller", rollVars
	    %<LibBlockMode("", lcv, sigIdx)> = 1;
	  %endroll
	} else {
	  %assign rollVars = ["Mode"]
	  %roll sigIdx = RollRegions, lcv = RollThreshold, block, "Roller", rollVars
	    %<LibBlockMode("", lcv, sigIdx)> = 0;
	  %endroll
	}
      %endif
    }
    /* Output value */
    %assign rollVars = ["Mode", "Y", "<param>/Before", "<param>/After"]
    %roll sigIdx = RollRegions, lcv = RollThreshold, block, "Roller", rollVars
      %assign m = LibBlockMode("", lcv, sigIdx)
      %assign y = LibBlockOutputSignal(0, "", lcv, sigIdx)
      %assign before = LibBlockParameter(Before, "", lcv, sigIdx)
      %assign after = LibBlockParameter(After, "", lcv, sigIdx)
      %<y> = (%<m> == 1) ? %<after> : %<before>;
    %endroll
  %else
    {
      real_T currentTime = %<LibGetTaskTimeFromTID(block)>;
      %if ntime > 1
	%assign rollVars = ["Y", "P"]
	%roll idx = RollRegions, lcv = RollThreshold, block, "Roller", rollVars
	  %assign y = LibBlockOutputSignal(0, "", lcv, idx)
	  if (%<time> < %<LibBlockParameter(Time, "", lcv, idx)>) {
	    %<y> = %<LibBlockParameter(Before, "", lcv, idx)>;
	  } else {
	    %<y> = %<LibBlockParameter(After, "", lcv, idx)>;
	  }
	%endroll
      %else
	if (%<time> < %<LibBlockParameter(Time, "", "", 0)>) {
	  %assign rollVars = ["Y", "<param>/Before"]
	  %roll idx = RollRegions, lcv = RollThreshold, block, "Roller", rollVars
	    %assign y = LibBlockOutputSignal(0, "", lcv, idx)
	    %<y> = %<LibBlockParameter(Before, "", lcv, idx)>;
	  %endroll
	} else {
	  %assign rollVars = ["Y", "<param>/After"]
	  %roll idx = RollRegions, lcv = RollThreshold, block, "Roller", rollVars
	    %assign y = LibBlockOutputSignal(0, "", lcv, idx)
	    %<y> = %<LibBlockParameter(After, "", lcv, idx)>;
	  %endroll
	}
      %endif
    }
  %endif

%endfunction %% Outputs

%% Function: ZeroCrossings =====================================================
%% Abstract:
%%      NSZC[i] = time - stepTime[i];
%%
%function ZeroCrossings(block, system) Output
  /* %<Type> Block: %<Name> */
  %% ZC indices are always contiguous for this block
  %assign rollVars = ["NSZC", "<param>/Time"]
  %assign time  = LibGetT()
  %roll sigIdx = RollRegions, lcv = RollThreshold, block, "Roller", rollVars
    %<LibBlockNonSampledZC("",lcv,sigIdx)> = \
    %<time> - %<LibBlockParameter(Time,"", lcv, sigIdx)>;
  %endroll
    
%endfunction
 
%% EOF step.tlc
