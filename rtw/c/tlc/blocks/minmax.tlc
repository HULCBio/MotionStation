%% $Revision: 1.1.6.2 $
%% 
%% 
%% Copyright 1994-2003 The MathWorks, Inc.
%%
%% Abstract: MinMax block target file.

%implements MinMax "C"

%% Function: BlockInstanceSetup ===============================================
%% Abstract:
%%      Have mdlhdr.tlc include rtlibsrc.h
%%
%function BlockInstanceSetup(block, system) void
  %<LibBlockSetIsExpressionCompliant(block)>
  %if EXISTS("FixPtRoundingMode")
    %%
    %<FixPt_Setup(block, system)>
    %%
    %%<FixPt_LibBlockSetIsExpressionCompliant(block,system)>\
    %%
  %endif
%endfunction

%% Function: Outputs ==========================================================
%% Abstract:
%%      This block determines the min/max signal of each element of its
%%      input ports.  It can operate in of two modes:
%%
%%      Single-input port: determine min/max of vector input
%%      Multi-Input port:  determine min/max of parallel vector elements
%%
%% Outputs
%%
%function Outputs(block, system) Output
  %if !EXISTS("FixPtRoundingMode") %% UseFixPtCode
  %if ParamSettings.Function == "min"
    %assign operator = "<"
    %assign output   = "rtmin"
  %else
    %assign operator = ">"
    %assign output   = "rtmax"
  %endif
  %assign uDType = LibBlockInputSignalDataTypeId(0)
  %assign uDTname = LibGetDataTypeNameFromId(uDType)
  %assign uDType = LibGetDataTypeIdAliasedThruToFromId(uDType)
  %if NumDataInputPorts == 1
    %% Single Input Vector Mode
    %assign y = LibBlockOutputSignal(0, "", "", 0)
    %assign u = LibBlockInputSignal(0, "", "", 0)
    %if LibBlockInputSignalWidth(0) == 1
      %<y> = %<u>;
    %else
      %assign rollVars = ["U"]
      %assign rollRegions1 = LibGetRollRegions1(RollRegions)
      %if NumNonsampledZCs > 0
        %assign m = LibBlockMode("", "",0)
        if (%<RTMIs("MajorTimeStep")>) {
          %<uDTname> %<output> = %<u>;

          %<m> = 0;
          %roll sigIdx = rollRegions1, lcv=RollThreshold,block,"Roller",rollVars
            %assign u = LibBlockInputSignal(0, "", lcv, sigIdx)
            if (%<u> %<operator> %<output>) {
              %<output> = %<u>;
              %if lcv != ""
                %<m> = %<sigIdx> + %<lcv>;
              %else
                %<m> = %<sigIdx>;
              %endif
            }
          %endroll
        }
        %% To get correct input signal region, need to use roller
        %% This is because LibBlockInputSignal(0, m, "", 0) always returns
        %% the name of the first region which is not always desired.
        /* Set output to the input that mode specifies */
        {
          boolean_T done = FALSE;

          %roll sigIdx = RollRegions, lcv=RollThreshold,block,"Roller",rollVars
            %if lcv != ""
              if (done) break;
              if (%<m> == %<sigIdx> + %<lcv>) {
                %<y> = %<LibBlockInputSignal(0, "", lcv, sigIdx)>;
                done = TRUE;
                break;
              }
            %else
              if (%<m> == %<sigIdx>) {
                %<y> = %<LibBlockInputSignal(0, "", lcv, sigIdx)>;
                done = TRUE;
              }
            %endif
          %endroll
        }
      %else %% NumNonsampledZCs == 0
        {
          %<uDTname> %<output> = %<u>;
        \

	  %roll sigIdx=rollRegions1, lcv=RollThreshold,block,"Roller",rollVars
            %assign u = LibBlockInputSignal(0, "", lcv, sigIdx)
	    %if LibMathFcnExists(ParamSettings.Function, uDType)
	      %<output> = %<LibGenMathFcnCall(ParamSettings.Function, ...
		                               uDType, "%<u>",output)>;
	    %else
	      %%START_ASSERT
	      if (%<u> %<operator> %<output>) {
	        %<output> = %<u>;
              }
	      %%END_ASSERT
	    %endif
          %endroll
          %<y> = %<output>;
        }
      %endif
    %endif
  %elseif NumDataInputPorts > 1
    %% Block determines min/max for parallel vector elements
    %assign twoScalarInputs = (NumDataInputPorts == 2) && ...
      (DataInputPort[0].Width + DataInputPort[1].Width) == 2
    %if twoScalarInputs
      %assign u0 = LibBlockInputSignal(0, "", "", 0)
      %assign u1 = LibBlockInputSignal(1, "", "", 0)
      %if NumNonsampledZCs > 0
        %assign m = LibBlockMode("", "",0)
        if (%<RTMIs("MajorTimeStep")>) {
          %<m> = (%<u0> %<operator> %<u1>) ? 0: 1;
        }
        if (%<m> == 0) {
          %<LibBlockOutputSignal(0, "", "", 0)> = %<u0>;
        } else {
          %<LibBlockOutputSignal(0, "", "", 0)> = %<u1>;
        }
      %else %% NumNonsampledZCs == 0
      %if LibMathFcnExists(ParamSettings.Function, uDType)
	%<LibBlockOutputSignal(0, "", "", 0)> =  ...
	  %<LibGenMathFcnCall(ParamSettings.Function, uDType, "%<u0>","%<u1>")>;
      %else
	%%START_ASSERT
	if (%<u0> %<operator> %<u1>) {
	 %<LibBlockOutputSignal(0, "", "", 0)> = %<u0>;
	} else {
	 %<LibBlockOutputSignal(0, "", "", 0)> = %<u1>;
	}
	%%END_ASSERT
      %endif
      %endif

    %else
      %if NumNonsampledZCs > 0
      %assign rollVars = ["Mode","U","Y"]
        %roll sigIdx = RollRegions, lcv = RollThreshold,block,"Roller",rollVars
          %assign m = LibBlockMode("", lcv,sigIdx)
          if (%<RTMIs("MajorTimeStep")>) {
            %<uDTname> %<output>;

            /* Find %<output> value across all ports, save port index in mode */
            %foreach portIdx = NumDataInputPorts
              %assign u = LibBlockInputSignal(portIdx, "", lcv, sigIdx)
              %if (portIdx == 0)
                %<output> = %<u>;
                %<m> = %<portIdx>;
              %else
                if (%<u> %<operator> %<output>) {
                  %<m> = %<portIdx>;
                  %<output> = %<u>;
                }
              %endif
            %endforeach
          }
          %% Because tlc doesn't handle ports as strings, i.e. run time port
          %% selection, generate as a series of if statements.
          /* Using port saved in mode, write the output */
          %assign prefixstring = "if"
          %foreach portIdx = NumDataInputPorts
            %<prefixstring> (%<m> == %<portIdx>) {
            %<LibBlockOutputSignal(0, "", lcv, sigIdx)> = ...
              %<LibBlockInputSignal(portIdx,"", lcv, sigIdx)>;
            %assign prefixstring = "} else if "
          %endforeach
          }
        %endroll
      %else %% NumNonsampledZCs == 0
        {
          %<uDTname> %<output>;
        \

        %assign rollVars = ["U","Y"]
          %roll sigIdx = RollRegions, lcv=RollThreshold,block,"Roller",rollVars
            %foreach portIdx = NumDataInputPorts
              %assign u = LibBlockInputSignal(portIdx, "", lcv, sigIdx)
              %if (portIdx == 0)
                %<output> = %<u>;
              %else
		%if LibMathFcnExists(ParamSettings.Function, uDType)
		  %<output> = %<LibGenMathFcnCall(ParamSettings.Function, ...
		                                  uDType, "%<u>",output)>;
		%else
		  %%START_ASSERT
		  if (%<u> %<operator> %<output>) {
		   %<output> = %<u>;
		  }
		  %%END_ASSERT
                %endif
	      %endif
            %endforeach
            %<LibBlockOutputSignal(0, "", lcv, sigIdx)> = %<output>;
          %endroll
        }
      %endif
    %endif
  %endif  %% NumDataInputPorts
  %else
    %%
    %assign y0IsComplex   = LibBlockOutputSignalIsComplex(0)
    %%
    %assign casesToHandle = 1 + y0IsComplex
    %%
    %if ParamSettings.Function == "min"
      %%
      %assign nameForComment = "Fixed-Point Minimum"
      %%
      %assign opStr = ">"
      %%
    %elseif ParamSettings.Function == "max"
      %%
      %assign nameForComment = "Fixed-Point Maximum"
      %%
      %assign opStr = "<"
      %%
    %endif
    %%
    %% create header comment
    %%
    %openfile commentBuffer
    * %<nameForComment>: %<MaskBlockName>
    *
    %%
    %% add general comments
    %%
    %<FixPt_GeneralComments()>\
    %%
    %% END: header comment
    %%
    %closefile commentBuffer
    %<LibCacheBlockComment(block,commentBuffer)>\
    %%
    %openfile outBuffer
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%
    %% Get output data type
    %%
    %assign y0DT = FixPt_GetOutputDataType(0)
    %%
    %% define temporary variable to hold cast versions of inputs
    %%
    %assign castInLabel = "castIn1"
    %%
    %openfile gutsOfAdd
    %%
    %assign castInWasUsed = 0
    %%
    %%  Handle case of multiple input port
    %%  element by element vector min/max
    %%
    %if NumDataInputPorts > 1
      %%
      %% Roll around signal width (Note: a curly brace is opened and closed
      %% by the loop roller.  Therefore, if the block is not going to roll
      %% we need to open and close them ourselves).
      %%
      %assign rollVars = ["U", "Y"]
      %%
      %roll sigIdx = RollRegions, lcv = RollThreshold, block, "Roller", rollVars
	%%
	%% Get output
	%%
	%assign y0Label = LibBlockOutputSignal(0, "", lcv, sigIdx)
	%%
	%% Get input
	%%
	%assign uiDT = FixPt_GetInputDataType(0)
	%assign uiLabel = LibBlockInputSignal(0, "", lcv, sigIdx)
	%%
	%% cast first input to outputs data type
	%%
	%assign vecStrCastU0 = FixPt_Fix2Fix(y0Label,y0DT,...
	  uiLabel,uiDT,...
	  FixPtRoundingMode,FixPtSaturationMode)
	%%
	%if SIZE(vecStrCastU0,1) != 3
	  %%
	  %% input was directly cast into output
	  %% so no special treatment for second input
	  %%
	  %assign treatU1Special = 0
	%else
	  %%
	  %if vecStrCastU0[0] != "trivial"
	    %%
	    %% cast not trivial 
	    %% so input is directly cast into output
	    %% rather than put non-trivial statement in
	    %% both the condition and in the assignment
	    %%
	    %<vecStrCastU0[2]>
	    %%
	    %% so no special treatment for second input
	    %%
	    %assign treatU1Special = 0
	  %else
	    %% first cast is trivial so
	    %% optimize code to make only one assignment to output
	    %% for first two inputs
	    %%
	    %assign treatU1Special = 1
	  %endif
	%endif
	%%
	%% handle each input port
	%%
	%foreach iii = (NumDataInputPorts-1)
	  %%
	  %assign ipIdx = iii + 1
	  %%
	  %% Get ith input
	  %%
	  %assign uiDT = FixPt_GetInputDataType(ipIdx)
	  %assign uiLabel = LibBlockInputSignal(ipIdx, "", lcv, sigIdx)
	  %%
	  %% cast current input to outputs data type
	  %%
	  %assign vecStrCastUi = FixPt_Fix2Fix(castInLabel,y0DT,...
	    uiLabel,    uiDT,...
	    FixPtRoundingMode,FixPtSaturationMode)
	  %%
	  %if SIZE(vecStrCastUi,1) != 3
	    %%
	    %% cast used temp var
	    %%
	    %assign castInWasUsed = 1
	    %%
	    %assign refUi = castInLabel
	  %else
	    %if vecStrCastUi[0] != "trivial"
	      %%
	      %% cast not trivial 
	      %% so input is directly cast into TEMP var
	      %% rather than put non-trivial statement in
	      %% both the condition and in the assignment
	      %%
	      %<vecStrCastUi[2]>
	      %%
	      %assign castInWasUsed = 1
	      %%
	      %assign refUi = castInLabel
	    %else
	      %assign refUi = vecStrCastUi[1]
	    %endif
	  %endif
	  %%
	  %if ( ipIdx == 1 ) && ( treatU1Special )
	    %%
	    if ( %<vecStrCastU0[1]> %<opStr> %<refUi> )
	    {
	      %<y0Label> = %<refUi>;
	    }
	    else
	    {
	      %<y0Label> = %<vecStrCastU0[1]>;
	    }
	  %else
	    if ( %<y0Label> %<opStr> %<refUi> )
	    {
	      %<y0Label> = %<refUi>;
	    }
	  %endif
	%endforeach %% each input
      %endroll
      %%
      %% case of single input port "collapsed"
      %% to form scalar output
    %else
      %%
      %assign uiDT = FixPt_GetInputDataType(0)
      %%
      %assign y0Label = LibBlockOutputSignal(0, "", "", "re0")
      %%
      %assign uiLabel = LibBlockInputSignal(0, "", "", "re0")
      %%
      %% cast input to outputs data type
      %% and use result to initialize output
      %%
      %<FixPt_Fix2FixAlwaysOutput(y0Label,y0DT,...
	uiLabel,uiDT,...
	FixPtRoundingMode,FixPtSaturationMode)>\
      %%
      %assign curRollRegions = LibRemoveRollRegions(RollRegions,0)
      %%
      %if SIZE(curRollRegions,0)
	%%
	%% Roll around input
	%%
	%assign rollVars = ["U"]
	%%
	%roll sigIdx = curRollRegions, lcv = RollThreshold, block, "Roller", rollVars
	  %%
	  %assign uiLabel = LibBlockInputSignal(0, "", lcv, sigIdx)
	  %%
	  %% cast current input to outputs data type
	  %%
	  %assign vecStrCastUi = FixPt_Fix2Fix(castInLabel,y0DT,...
	    uiLabel,    uiDT,...
	    FixPtRoundingMode,FixPtSaturationMode)
	  %%
	  %if SIZE(vecStrCastUi,1) != 3
	    %%
	    %% cast used temp var
	    %%
	    %assign castInWasUsed = 1
	    %%
	    %assign refUi = castInLabel
	  %else
	    %if vecStrCastUi[0] != "trivial"
	      %%
	      %% cast not trivial 
	      %% so input is directly cast into TEMP var
	      %% rather than put non-trivial statement in
	      %% both the condition and in the assignment
	      %%
	      %<vecStrCastUi[2]>
	      %%
	      %assign castInWasUsed = 1
	      %%
	      %assign refUi = castInLabel
	    %else
	      %assign refUi = vecStrCastUi[1]
	    %endif
	  %endif
	  %%
	  if ( %<y0Label> %<opStr> %<refUi> )
	  {
	    %<y0Label> = %<refUi>;
	  }
	  %%
	%endroll
      %endif
    %endif   %% Number of input ports
    %%
    %closefile gutsOfAdd
    %%
    %if castInWasUsed
      {
	%<y0DT.NativeType> %<castInLabel>;

	%<gutsOfAdd>\
      }
    %else
      %<gutsOfAdd>\
    %endif
    %%
    %% blank line for formating

    %closefile outBuffer
    %return outBuffer
  %endif
%endfunction

%% Function: BlockOutputSignal =================================================
%% Abstract:
%%      Return an output expression.  This function *may*
%%      be used by Simulink when optimizing the Block IO data structure.
%%
%function BlockOutputSignal(block,system,portIdx,ucv,lcv,idx,retType) void
  %assign yDataType = LibBlockOutputSignalAliasedThruDataTypeId(0)
  %switch retType
    %case "Signal"
      %assign u0 = LibBlockInputSignal(0,ucv,lcv,idx)
      %assign u1 = LibBlockInputSignal(1,ucv,lcv,idx)
      %switch yDataType
	%case tSS_DOUBLE
	%case tSS_SINGLE
	%case tSS_UINT8
	%case tSS_UINT16
	%case tSS_UINT32
	%case tSS_INT8
	%case tSS_INT16
	%case tSS_INT32
	  %return LibGenMathFcnCall(ParamSettings.Function, yDataType, u0, u1)
      %default
	%%START_ASSERT
	%assign errTxt = "Unsupported data type: %<yDataType>"
	%<LibBlockReportError(block,errTxt)>
	%%END_ASSERT
      %endswitch
    %default
      %%START_ASSERT
      %assign errTxt = "Unsupported return type: %<retType>"
      %<LibBlockReportError(block,errTxt)>
      %%END_ASSERT
  %endswitch
%endfunction


%% Function: ZeroCrossings =====================================================
%% Abstract:
%%
%function ZeroCrossings(block, system) Output
  /* %<Type> Block: %<Name> */
  %if ParamSettings.Function == "min"
    %assign operator = "<"
    %assign output   = "rtmin"
  %else
    %assign operator = ">"
    %assign output   = "rtmax"
  %endif
  %assign uDType = LibBlockInputSignalDataTypeId(0)
  %assign uDTname = LibGetDataTypeNameFromId(uDType)
  %assign uDType = LibGetDataTypeIdAliasedThruToFromId(uDType)
  %if NumDataInputPorts == 1
    %% Single Input Vector Mode
    %assign zc = LibBlockNonSampledZC("", "", 0)
    %assign u  = LibBlockInputSignal(0, "", "", 0)
    %if LibBlockInputSignalWidth(0) == 1
      %<zc> = %<u>;
    %else
      %assign rollVars = ["U"]
      %assign rollRegions1 = LibGetRollRegions1(RollRegions)
      %assign m = LibBlockMode("", "",0)
      {
        %<uDTname> %<output> = %<u>;
        %roll sigIdx = rollRegions1, lcv=RollThreshold,block,"Roller",rollVars
          %assign u = LibBlockInputSignal(0, "", lcv, sigIdx)
          if (%<u> %<operator> %<output>) {
            %<output> = %<u>;
          }
        %endroll
        %% To get correct input signal, need to use roller.
        %% This is because LibBlockInputSignal(0, m, "", 0) always returns
        %% the name of the first region which is not always desired.
        /* Use input that mode specifies the subtract from new %<output> */
        {
          boolean_T done = FALSE;

          %roll sigIdx = RollRegions, lcv=RollThreshold,block,"Roller",rollVars
            %if lcv != ""
              if (done) break;
              if (%<m> == %<sigIdx> + %<lcv>) {
                %<zc> = %<output> - %<LibBlockInputSignal(0, "", lcv, sigIdx)>;
                done = TRUE;
                break;
              }
            %else
              if (%<m> == %<sigIdx>) {
                %<zc> = %<output> - %<LibBlockInputSignal(0, "", lcv, sigIdx)>;
                done = TRUE;
              }
            %endif
          %endroll
        }
      }
    %endif
  %else
    %assign twoScalarInputs = (NumDataInputPorts == 2) && ...
      (DataInputPort[0].Width + DataInputPort[1].Width) == 2
    %if twoScalarInputs
      %assign u0 = LibBlockInputSignal(0, "", "", 0)
      %assign u1 = LibBlockInputSignal(1, "", "", 0)
      %assign zc = LibBlockNonSampledZC("","",0)
      %assign m  = LibBlockMode("", "", 0)
      if (%<u0> %<operator> %<u1>) {
        if (%<m> == 0) {
          %<zc> = %<u0> - %<LibBlockInputSignal( 0, "", "", 0)>;
        } else {
          %<zc> = %<u0> - %<LibBlockInputSignal( 1, "", "", 0)>;
        }
      } else {
        if (%<m> == 0) {
          %<zc> = %<u1> - %<LibBlockInputSignal( 0, "", "", 0)>;
        } else {
          %<zc> = %<u1> - %<LibBlockInputSignal( 1, "", "", 0)>;
        }
      }
    %else
      %% Assume zc indexes are not contiguous, do each element separately.
      %foreach idx = NumNonsampledZCs
        %assign zc = LibBlockNonSampledZC("","",idx)
        %assign m  = LibBlockMode("", "", NonsampledZC[idx].MapIdx)
        {
            %<uDTname> %<output> = ...
              %<LibBlockInputSignal(0, "", "", NonsampledZC[idx].MapIdx)>;

          /* Find %<output> value across all ports for ZC %<idx> */
          %foreach zeroPortIdx = NumDataInputPorts-1
            %assign offsetIdx = zeroPortIdx + 1
            %if LibBlockInputSignalWidth(offsetIdx) == 1
              %assign u = LibBlockInputSignal(offsetIdx, "", "", 0)
            %else
              %assign u = ...
                LibBlockInputSignal(offsetIdx, "", "", NonsampledZC[idx].MapIdx)
            %endif
            if (%<u> %<operator> %<output>) {
              %<output> = %<u>;
            }
          %endforeach
          %% Because tlc doesn't handle ports as strings, i.e. run time port
          %% selection, generate as a series of if statements.
          /* Detect when a new port has the %<output> value */
          %assign prefixstring = "if"
          %foreach portIdx = NumDataInputPorts
            %assign u = ...
              LibBlockInputSignal(portIdx, "", "", NonsampledZC[idx].MapIdx)
            %<prefixstring> (%<m> == %<portIdx>) {
              %<zc> = %<output> - %<u>;
              %assign prefixstring = "} else if "
            %endforeach
          }
        }
      %endforeach
    %endif
  %endif

%endfunction

%% [EOF] minmax.tlc
