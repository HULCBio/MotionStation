%% ============================================================================
%% File: prm_constwithinit.tlc
%%
%% Abstract:
%%   
%%   
%% $Revision: 1.1.6.1 $ 
%% $Date: 2003/10/14 18:02:44 $
%%
%% Copyright 1994-2003 The MathWorks, Inc.
%% 
%% ============================================================================
%selectfile NULL_FILE

%if EXISTS("_PRM_CONSTWITHINIT_") == 0
%assign _PRM_CONSTANTWITHINIT_ = 1

%include "prm_cacheutils.tlc"


%% Function: SLibCacheConstPrmWithInitBuffers ==================================
%% Abstract:
%%   Generate the definition & instantiation buffers for constant parameters
%%
%function SLibCacheConstPrmWithInitBuffers(startIdx) void

  %% Create parameter buffers
  %<SLibCreatePrmBuffer("ConstWithInit", "Typedef")>
  %<SLibCreatePrmBuffer("ConstWithInit", "Instance")>

  %% Generate the typedef & instantiation buffers for const parameters with init
  %assign result = FcnGenConstPrmWithInitBuffers(startIdx)
  %<SLibSetPrmBufferPart("ConstWithInit", "Typedef",   "Code", result[0])>
  %<SLibSetPrmBufferPart("ConstWithInit", "Instance",  "Code", result[1])>
  
%endfunction %% SLibCacheConstPrmWithInitBuffers


%% Function: FcnGenConstPrmWithInitBuffers =====================================
%% Abstract:
%%   Generate the constant parameters with initialization definition buffer
%%
%function FcnGenConstPrmWithInitBuffers(startIdx) void
  
  %assign typedefBuffer = ""
  %assign instBuffer = ""
  %assign structIsEmpty = TLC_TRUE

  %foreach prmIdx = NumConstPrmsWithInit
    %assign mdlParam = Parameter[startIdx+prmIdx]
    %assert SLibGenConstPrmWithInit(mdlParam)
    
    %% Generate buffer parts for this parameter
    %assign locResult = SLibGenBuffersForOneConstPrm(mdlParam, structIsEmpty)
    %assign typedefPart = locResult[0]
    %assign instPart    = locResult[1]
    %assign macroPart   = locResult[2]

    %% Never generate macros for constant parameters with dynamic initialization
    %assert ISEMPTY(macroPart)

    %% Add buffers for this parameter to caches
    %if !ISEMPTY(typedefPart)
      %assert (!ISEMPTY(instPart))
      %assign typedefBuffer = typedefBuffer + typedefPart
      %assign instBuffer    = instBuffer    + instPart

      %if structIsEmpty
	%assign structIsEmpty = TLC_FALSE
      %endif
      
    %endif
  %endforeach

  %% Complete buffers for parameter structure (typedef & instantiation)
  %if !WHITE_SPACE(typedefBuffer)
    %openfile tmpBuf
    %<SLibAddPreStructTypedefPragma(tConstParamWithInitType)>\   
    typedef struct _%<tConstParamWithInitType> {
      %<typedefBuffer>
    } %<tConstParamWithInitType>;
    %<SLibAddPostStructTypedefPragma(tConstParamWithInitType)>\   
    %closefile tmpBuf
    %assign typedefBuffer = tmpBuf
  %endif

  %if !WHITE_SPACE(instBuffer)
    %openfile tmpBuf
    %<SLibAddPreStructDeclarePragma(tConstParamWithInitStruct)>\
    %<tConstParamWithInitType> %<tConstParamWithInitStruct> = {
      %<instBuffer>
    };
    %<SLibAddPostStructDeclarePragma(tConstParamWithInitStruct)>\
    %closefile tmpBuf
    %assign instBuffer = tmpBuf
  %endif
  
  %assign result = ["", ""]
  %assign result[0] = typedefBuffer
  %assign result[1] = instBuffer

  %return result %% [typedefBuffer, instBuffer]

%endfunction %% FcnGenConstPrmWithInitBuffers


%endif %% EXISTS("_PRM_CONSTWITHINIT_")

%% [EOF] prm_constwithinit.tlc