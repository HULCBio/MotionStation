%% ============================================================================
%% $RCSfile: report.tlc,v $
%% $Revision: 1.25.4.8 $
%% $Date: 2004/04/14 23:48:40 $
%%
%% Copyright 1994-2004 The MathWorks, Inc.
%%
%% Abstract:
%%   This file create a HTML report of the generated code. 
%%

%if EXISTS("_RTW_REPORT_") == 0
%assign _RTW_REPORT_ = 1

%% Function: DumpModelOptimizationTable =======================================
%% Abstract:
%%
%function DumpModelOptimizationTable() Output
  
  %assign green = "<FONT COLOR=\"green\">green</FONT>"
  %assign red   = "<FONT COLOR=\"red\">red</FONT>"

  The following table lists selected code generation options.
  Options prefixed with an ellipsis (...)
  depend on a main configuration option. Settings which
  result in less efficient code are marked in %<red>.
  
  /%
  The following table lists the available and chosen code 
  generation optimization types. If an optimization type has
  an ellipsis ("...") as an prefix, then it depends
  on the value (on/off) of the optimization at the top of the row.
  If a value is marked in %<red>, the chosen setting results in 
  non-optimal code.
  %/
  <BR><BR>
  
  %assign rec = FEVAL("rtwprivate", "rtwreport", "getModelInfo")
  %if !ISEMPTY(rec) 
    <TABLE BORDER="1" CELLPADDING="5" CELLSPACING="1">
    <TR><TD><B> Optimization Types <TD> Value [On/Off] </B></TR>
    %with rec
      %foreach idx = NumberOfOptimizations
        %with Optimizations[idx]
          %assign depNames  = " "
          %assign depValues = " "
          %if NumberOfDependencies > 0
            %foreach subIdx = NumberOfDependencies
              %with Dependent[subIdx]
                %assign depNames = depNames + "<BR> . . . %<Name>"
                %assign color = (Value == "off") ? ...
                  (Negation ? "green":"red"):(Negation ? "red":"green")
                %assign depValues = depValues + ...
                  "<BR> <FONT COLOR=\"%<color>\"> %<Value> </FONT> "
              %endwith
            %endforeach
          %endif
          %assign color = (Value == "off") ? ...
            (Negation ? "green":"red"):(Negation ? "red":"green") 
          <TR><TD> %<Name> %<depNames> <TD>\
          <FONT COLOR="%<color>"> %<Value> </FONT> %<depValues> </TR>
        %endwith
      %endforeach
    %endwith
    </TABLE>
  %endif
  %with ReducedBlocks
  %if NumReducedBlocks > 0
  <BR>
  <A HREF="%<reducedBlockFileName>" TARGET="rtwreport_document_frame"> List of blocks </A>eliminated as a result of block reduction optimization.
  %endif
  %endwith
  %with InsertedHiddenBlocks
  %if NumInsertedHiddenBlocks > 0
    <BR>
    <A HREF="%<insertedBlockFileName>" TARGET="rtwreport_document_frame"> List of inserted blocks. </A>
  %endif
  %endwith
  
%endfunction

%% Function: DumpReducedBlockTable =======================================
%% Abstract: Create html file which contains eliminated block list.
%%
%function DumpReducedBlockTable(REDTBL_FILE) Output
  %with ReducedBlocks
  %if NumReducedBlocks > 0
  %selectfile NULL_FILE
  %openfile  tmp_buf = "%<REDTBL_FILE>"
  <HTML>
  <HEAD>
  <TITLE>%<Name> Code Generation Report</TITLE>
  </HEAD>
  <BR>
  List of blocks eliminated as a result of block reduction optimization.
  <BR><BR>
  <TABLE BORDER="1" CELLPADDING="5" CELLSPACING="1">
  <TR><TD><B> Block <TD> Description </B></TR>
    %foreach bIdx = NumReducedBlocks
      %assign b = Block[bIdx]
      %assign linkname = FEVAL("rtwprivate","rtwctags_expand", b.Name, "blue")
     <TR><TD> %<linkname> <TD> %<b.OptimizationInfo> </TR>
    %endforeach
  </TABLE>
  </HTML>
  %closefile tmp_buf
  %endif
  %endwith
%endfunction
  
%% Function: DumpInsertedBlockTable =======================================
%% Abstract: 
%%
%function DumpInsertededBlockTable(REDTBL_FILE) Output
  %with InsertedHiddenBlocks
  %if NumInsertedHiddenBlocks > 0 
    %selectfile NULL_FILE
    %openfile  tmp_buf = "%<REDTBL_FILE>"
    <HTML>
    <HEAD>
    <TITLE>%<Name> Code Generation Report</TITLE>
    </HEAD>
    <BR>
    List of inserted blocks.
    <BR><BR>
    <TABLE BORDER="1" CELLPADDING="5" CELLSPACING="1">
    <TR><TD><B> Inserted Block <TD> Source <TD> Destination <TD> Comment </B></TR>
    %foreach bIdx = NumInsertedHiddenBlocks
      %if Block[bIdx].Type != "RateTransition"
	%continue
      %endif
      %with Block[bIdx]
	%assign name = FEVAL("strrep", Name, "<", "\&lt;") 
	%assign name = FEVAL("strrep", name, ">", "\&gt;")
	%if NumSrcBlks > 0
	  %assign srcBlkStr = FEVAL("rtwprivate","rtwctags_expand", SrcBlock[0].Name, "blue") 
	  %assign srcBlkStr = srcBlkStr + " at outport %<SrcBlock[0].OutputPort>"
	%else
	  %assign srcBlkStr = ""
	%endif
	%assign changeLine = ""
	%assign dstBlkStr = ""
	%if NumDstBlks > 0
	  %foreach idx = NumDstBlks
	    %assign dstBlkStr = dstBlkStr + changeLine + ...
	      FEVAL("rtwprivate","rtwctags_expand", DstBlock[idx].Name, "blue")
	    %assign dstBlkStr = dstBlkStr + " at inport %<DstBlock[idx].InputPort>"
	    %assign changeLine = "<P>"
	  %endforeach
	%else
	  %assign dstBlkStr = ""
	%endif
	<TR><TD> %<Type> block: %<name> <TD> %<srcBlkStr> <TD> %<dstBlkStr> <TD> %<InsertInfo> </TR>
      %endwith
    %endforeach
    </TABLE>
    </HTML>
    %closefile tmp_buf
  %endif
  %endwith
%endfunction


%% Function: DumpTargetSpecificOptimizationTable ==============================
%%
%%
%function DumpTargetSpecificOptimizationTable() Output
  
  <TABLE BORDER="1" CELLPADDING="5" CELLSPACING="1">
  <TR><TD><B> Optimization Types <TD> Value [On/Off] </B></TR>
  %%
  <TR><TD> MAT-file logging <TD>\
  %if MatFileLogging == 1
    <FONT COLOR="red"> on </FONT></TR>
  %else
    <FONT COLOR="green"> off </FONT></TR>
  %endif
  %%
  <TR><TD> Single output/update function <TD>\
  %if CombineOutputUpdateFcns == 1
    <FONT COLOR="green"> on </FONT></TR>
  %else
    <FONT COLOR="red"> off </FONT></TR>
  %endif
  %%
  <TR><TD> Inline invariant signals <TD>\
  %if InlineInvariantSignals == 1
    <FONT COLOR="green"> on </FONT></TR>
  %else
    <FONT COLOR="red"> off </FONT></TR>
  %endif
  %%
  <TR><TD> Local block outputs <TD>\
  %if LocalBlockOutputs == 1
    <FONT COLOR="green"> on </FONT></TR>
  %else
    <FONT COLOR="red"> off </FONT></TR>
  %endif
  %%
  <TR><TD> Initialize internal data <TD>\
  %if ZeroInternalMemoryAtStartup == 1
    <FONT COLOR="red"> on </FONT></TR>
  %else
    <FONT COLOR="green"> off </FONT></TR>
  %endif
  %%
  <TR><TD> Initialize external I/O data <TD>\
  %if ZeroExternalMemoryAtStartup == 1
    <FONT COLOR="red"> on </FONT></TR>
  %else
    <FONT COLOR="green"> off </FONT></TR>
  %endif
  %%
  </TABLE>
%endfunction

%% Function: SaturationCodeOptionsIsEmpty =====================================
%% Abstract:
%%   
%%
%function SaturationCodeOptionsIsEmpty() void
  %<LibTrapCacheAssert(RTWReportSaturationCodeOptions)>
  %return WHITE_SPACE(RTWReportSaturationCodeOptions)
%endfunction

%% Function: CacheSaturationCodeOptions =======================================
%% Abstract:
%%
%function CacheSaturationCodeOptions() Output
  %<LibAddToCompiledModel("RTWReportSaturationCodeOptions", 0)>

  %openfile tmpBuffer
  
  %with CompiledModel
    %foreach sysIdx = NumSystems
      %assign system = System[sysIdx]
      %with system
	%foreach blkIdx = NumBlocks+NumVirtualOutportBlocks
	  %assign block = Block[blkIdx]
	  %with block
	    %if ISFIELD(block, "ParamSettings")
	      %with ParamSettings
		%if ISFIELD(ParamSettings, "SaturateOnOverflow")
		  %if SaturateOnOverflow == "Needed"
		    %assign doSaturate = 1
		  %elseif SaturateOnOverflow == "NeededButOff"
		    %assign doSaturate = 0
		  %else
		    %assign doSaturate = -1
		  %endif
		  %if doSaturate > -1
		    <TR><TD> %<FEVAL("rtwctags_expand", block.Name, ...
		      "#117755")> <TD>\
		    %if doSaturate
		      <FONT COLOR="red"> on </FONT></TR>
		    %else
		      <FONT COLOR="green"> off </FONT></TR>
		    %endif
		  %endif
		%endif
	      %endwith
	    %endif
	  %endwith %% block
	%endforeach %% blkIdx
      %endwith %% system
    %endforeach %% sysIdx
  %endwith %% CompiledModel
  
  %closefile tmpBuffer
  %assign ::CompiledModel.RTWReportSaturationCodeOptions = tmpBuffer
  
%endfunction

%% Function: DumpSaturationCodeOptions ========================================
%% Abstract:
%%
%function DumpSaturationCodeOptions() Output
  %assign docroot = FEVAL("docroot")
  %assign filesep = FEVAL("filesep")
  %assign tagfile = "%<docroot>%<filesep>mapfiles%<filesep>rtw_ug.map"
  %assign link = FEVAL("rtwprivate", "rtwreport", "expandLink", ...
    tagfile, "rtw_saturate_ovflow_opt")
  
  The following table lists all blocks with optional saturate
  output on integer overflow. 
  <A HREF="%<link>"
  TARGET="rtwreport_document_frame">Saturation on integer overflow</A> 
  increases code size and should be selected only when necessary.
  <BR><BR>
  
  <TABLE BORDER="1" CELLPADDING="5" CELLSPACING="1">
  <TR><TD><B> Block saturates on integer overflow <TD> Value [On/Off] </B></TR>
  %<LibTrapCacheAssert(RTWReportSaturationCodeOptions)>
  %<RTWReportSaturationCodeOptions>
  </TABLE>
%endfunction

%% Function: DumpEnforceIntegerDowncast =======================================
%% Abstract:
%%
%function DumpEnforceIntegerDowncast() Output
  %assign green = "<FONT COLOR=\"green\">green</FONT>"
  %assign red   = "<FONT COLOR=\"red\">red</FONT>"
  %assign rec = FEVAL("rtwprivate", "rtwreport", "getEnforceIntegerDowncast")
  %if !ISEMPTY(rec)
    %assign color = (rec.Value == "off") ? "green":"red"
    %assign value = "<FONT COLOR=\"%<color>\"> %<rec.Value> </FONT>"
  %else
    %assign value = "<FONT COLOR=\"gray\"> unknown </FONT>"
  %endif
  %assign docroot = FEVAL("docroot")
  %assign filesep = FEVAL("filesep")
  %assign tagfile = "%<docroot>%<filesep>mapfiles%<filesep>rtw_ug.map"
  %assign link = FEVAL("rtwprivate", "rtwreport", "expandLink", ...
    tagfile, "rtw_enforce_int_downcast")
  
  
  The code generation option 
  <A HREF="%<link>" TARGET="rtwreport_document_frame"> 
  Enforce integer downcast 
  </A>
  refers to 8-bit operations on 16-bit microprocessors, and 8 and
  16-bit operations on 32-bit microprocessors. To ensure consistency between
  simulation and code generation, the results of expressions
  involving 8 and 16-bit integer signals must be
  explicitly down casted.
  Deselecting this option improves code efficiency. 
  The primary effect of deselecting this option is that expressions involving
  8 and 16-bit arithmetic are less likely to overflow in code than they
  are in simulation.
  We recommend that you turn this option on for safety.  Turn the
  option off only if you are concerned with generating the smallest possible
  code, and you know that 8 and 16-bit signals will not overflow.  
  Currently, the option is %<value> in this model.
%endfunction

%% Function: DumpStaticCodeDependencies =======================================
%% Abstract:
%%
%function DumpStaticCodeDependencies() Output
  
  The generated code depends on these header files.
  <BR><BR>
  
  <TABLE BORDER="1" CELLPADDING="5" CELLSPACING="1">
  <TR><TD><B> Relative path from the MATLAB root directory  </B></TR>
  <TR><TD> extern/include/tmwtypes.h </TR>
  <TR><TD> simulink/include/simstruc_types.h </TR>
  %if CompiledModel.IncludeLibsrc
    <TR><TD> rtw/c/libsrc/rtlibsrc.h </TR>
  %endif
  %if MatFileLogging == 1
    <TR><TD> rtw/c/libsrc/rt_logging.h </TR>
  %endif
  %if ExtMode == 1
    <TR><TD> rtw/c/src/ext_work.h </TR>
  %endif
  </TABLE>
  
  %if CompiledModel.IncludeLibsrc
    <BR><BR>
    The generated code depends on the external functions located in
    ($MATLAB_ROOT)/rtw/c/libsrc.
  %endif  
%endfunction

%% Function: DumpStateflowSpecificOptions =====================================
%% Abstract:
%%
%function DumpStateflowSpecificOptions(rec) Output
  %assign docroot = FEVAL("docroot")
  %assign filesep = FEVAL("filesep")
  %assign tagfile = "%<docroot>%<filesep>mapfiles%<filesep>stateflow.map"
  %assign link = FEVAL("rtwprivate", "rtwreport", "expandLink", ...
    tagfile, "CHART_DIALOG")
  
  The following table lists chart 
  options that influence code efficiency. To
  achieve the most efficient code, 
  <A HREF= "%<link>" 
  TARGET="rtwreport_document_frame"> Strong Data Typing with Simulink I/O</A>
  should always be selected (on). It is also recommended that 
  <A HREF= "%<link>" 
  TARGET="rtwreport_document_frame"> Enable C-like Bit Operations</A>
  is consistent for all charts.
  
  <BR><BR>
  
  <TABLE BORDER="1" CELLPADDING="5" CELLSPACING="1">
  <TR><TD><B> Chart name </B>
  %with rec.Chart[0]
    %foreach optIdx = NumberOfOptions
      <TD><B> %<Option[optIdx].Name> <BR> [On/Off] </B>
    %endforeach
    </TR>
  %endwith
  %foreach chartIdx = rec.NumberOfCharts
    %with rec.Chart[chartIdx]
      <TR><TD> %<Name>
      %foreach optIdx = NumberOfOptions
	%with Option[optIdx]
	  %if Negation < 0 %% neutral
	    %assign color = "blue"
	  %else
	    %assign color = Value  ? ...
	      (Negation ? "red":"green"):(Negation ? "green":"red")
	  %endif
	  %assign v = Value ? "on" : "off"
	  <TD> <FONT COLOR="%<color>"> %<v> </FONT>
	%endwith
      %endforeach
      </TR>
    %endwith
  %endforeach
  </TABLE>
%endfunction

%% Function: DumpSignalInitializationInfo =====================================
%% Abstract:
%%
%function DumpSignalInitializationInfo() Output
  %assign docroot = FEVAL("docroot")
  %assign filesep = FEVAL("filesep")
  %assign tagfile = "%<docroot>%<filesep>mapfiles%<filesep>ecoder.map"
  %assign link = FEVAL("rtwprivate", "rtwreport", "expandLink", ...
    tagfile, "rtw_ecoder_basic_codegen_opt")
  
  Non-zero, non-static data is always initialized. Initializing data to zero
  may be redundant for your application. Initialization code is optionally
  generated with the
  <A HREF="%<link>" 
   TARGET="rtwreport_document_frame"> Initialize internal data </A> and
  <A HREF="%<link>" 
   TARGET="rtwreport_document_frame"> Initialize external I/O data </A>
  options.
  
  /%
  The Real-Time Workshop Embedded Coder initialized all non-zero non-static 
  data wheter 
  <A HREF="%<docroot>/toolbox/rtw/rtw_ug/cp_emb12.html" 
   TARGET="rtwreport_document_frame"> Initialize internal data </A> and
  <A HREF="%<docroot>/toolbox/rtw/rtw_ug/cp_emb12.html" 
   TARGET="rtwreport_document_frame"> Initialize external I/O data </A>
  is seleceted or not. Enabling those options forces Real-Time Workshop 
  Embedded Coder to initialize zero non-static data to.
  %/
%endfunction

%% Function: DumpAdditionalInformation ========================================
%% Abstract:
%%
%function DumpAdditionalInformation() Output
  %assign docroot = FEVAL("docroot")
  %assign filesep = FEVAL("filesep")
  %assign tagfile  = "%<docroot>%<filesep>mapfiles%<filesep>rtw_ug.map"
  
  <UL>
%%  <LI><A HREF="%<docroot>/toolbox/rtw/rtw_ug/opt_mod9.html"
  <LI><A HREF="%<FEVAL("rtwprivate", "rtwreport", "expandLink", ...
    tagfile, "rtw_saturate_ovflow_opt")>"
         TARGET="rtwreport_document_frame">Use of Data Types</A></LI>
  <LI><A HREF="%<FEVAL("rtwprivate", "rtwreport", "expandLink", ...
    tagfile, "rtw_interface_sigs_ext_code")>" 
         TARGET="rtwreport_document_frame">Interfacing Signals to External
	 Code</A></LI>
  <LI><A HREF="%<FEVAL("rtwprivate", "rtwreport", "expandLink", ...
    tagfile, "rtw_nonvirtual_subsys_codegen")>"
         TARGET="rtwreport_document_frame">Preserving function names and
	 boundaries</A></LI>
  </UL>
%endfunction

%% Function: DumpSummary ======================================================
%% Abstract:
%%
%function DumpSummary() Output
  
  Real-Time Workshop code generated for Simulink model "%<Name>.mdl". 
  <BR><BR>
  
  <TABLE CELLPADDING="1" CELLSPACING="1">
  
  <TR><TD>Model Version              <TD>: %<ModelVersion></TR>
  <TR><TD>Real-Time Workshop version <TD>: %<Version></TR>
%if GenerateFullHeader
  <TR><TD>C source code generated on <TD>: %<TLC_TIME></TR>
%endif
  </TABLE>
%if CompiledModel.ModelReferenceTargetType == "NONE"
  <BR>
  <TABLE CELLPADDING="1" CELLSPACING="1">
  <TR><TD>Configuration Settings at the Time of Code Generation <TD>: <a href="matlab: rtwprivate rtw_view_code_configset %<Name>"> click to open </a></TR>
  </TABLE>
%endif  
%endfunction

%% Function: CreateHTMLReportMainFcn ====================================
%% Abstract:
%%
%function CreateHTMLReportMainFcn() Output
%%
%% Start of the RTW HTML code generation
%%
%assign rptFileName           = "%<Name>_codegen_rpt.html"
%assign rptContentFileName    = "%<Name>_contents.html" 
%assign rptSurveyFileName     = "%<Name>_survey.html"
%assign rptSubsystemsFileName = "%<Name>_subsystems.html"
%assign buildDir        = FEVAL("rtwprivate", "rtwattic", "getBuildDir")
%assign htmlDir         = "%<buildDir>/html"
%assign ::reducedBlockFileName   = "%<htmlDir>/%<Name>_redblock.html"
%assign ::insertedBlockFileName  = "%<htmlDir>/%<Name>_intblock.html"
%if FEVAL("exist",htmlDir,"dir") || FEVAL("mkdir", buildDir, "html")

%if ::RTWVerbose
  %selectfile STDOUT
  ### Creating HTML report file %<rptFileName>
  %selectfile NULL_FILE
%endif

%<CacheSaturationCodeOptions()>

%with CompiledModel
%assign rptFileName = "%<htmlDir>/%<rptFileName>"
%%
%% Generate the RTW report frame file
%%
%openfile rptFrameFile = "%<rptFileName>"
<HTML>
<HEAD>
<TITLE>%<Name> Code Generation Report</TITLE>
</HEAD>

<FRAMESET Cols="25%,75%" CELLSPACING=0>
<FRAME scrolling="auto" SRC="%<rptContentFileName>" NAME="rtwreport_contents_frame">
<FRAME scrolling="auto" SRC="%<rptSurveyFileName>"  NAME="rtwreport_document_frame">
</FRAMESET>
<FRAMESET Cols="100%,*">
<FRAME scrolling="auto" SRC="%<rptSurveyFileName>"  NAME="rtwreport_document_frame">
<FRAME>
</FRAMESET>

</HTML>
%closefile rptFrameFile
%% global Variables
%%
%assign systemMap = "{"
%foreach sysIdx = NumSubsystems
  %assign systemMap = systemMap + ...
    "'%<LibUnmangledPathName(Subsystem[sysIdx].Name)>',"
%endforeach
%assign systemMap = systemMap + "}"
%matlab rtwprivate("rtwattic", "setSystemMap", systemMap)
%%
%assign sfChartRec = FEVAL("rtwprivate","rtwreport","getStateflowChartOptions")
%if ISEMPTY(sfChartRec) || sfChartRec.NumberOfCharts == 0
  %assign bSfChartRec = 0
%else
  %assign bSfChartRec = 1
%endif
%%
%% Generate the RTW Report contents file
%%
%matlab rtwprivate("rtwattic","setContentsFileName","%<htmlDir>/%<rptContentFileName>")
%openfile rptContentFile = "%<htmlDir>/%<rptContentFileName>"
<HTML>
<HEAD>
</HEAD>
<BODY BGCOLOR=#eeeeee  LINK="0033CC" VLINK="#666666">

<TABLE BORDER="0" CELLSPACING="0" CELLPADDING="1" WIDTH="100%" BGCOLOR="#ffffff">
 <TR><TD><B><FONT COLOR=#000000>Contents</FONT></B></TD></TR>
 <TR><TD><A HREF="%<rptSurveyFileName>#summary"\
  TARGET="rtwreport_document_frame">Summary</A></TD><TR>
%if CodeFormat == "Embedded-C"  
%% keep the hook here for profile report to be inserted
  <TR><TD><A Additional information</A></TD><TR>
  <TR><TD></TD><TR>
%endif %% CodeFormat == "Embedded-C"
%assign cdFeatOn = FEVAL("feature", "CodeReuseDiagnostics")
%if cdFeatOn
  <TR><TD><B><FONT COLOR=#000000>Subsystems</FONT></B></TD></TR>
  <TR><TD><A HREF="%<rptSubsystemsFileName>#codemap"\
  TARGET="rtwreport_document_frame">Code mapping</A></TD><TR>
  <TR><TD><A HREF="%<rptSubsystemsFileName>#codeexcepts"\
  TARGET="rtwreport_document_frame">Code reuse exceptions</A></TD><TR>
  </TABLE>
%endif  
<!--REPLACE_WITH_GENERATED_FILES-->

</BODY>
</HTML>
%closefile rptContentFile
%%
%% Generate the RTW Report document / survey
%%
%openfile rptSurveyFile = "%<htmlDir>/%<rptSurveyFileName>"
<HTML>
<HEAD>
<TITLE>RTW Report - Code generation report summary for %<Name></TITLE>
</HEAD>
<BODY BGCOLOR=#ffffff LINK="0033CC" VLINK="#666666">
<FONT SIZE=+4 COLOR=#000066> Code Generation Report for %<Name></B></FONT>
<P CLASS="margin">
<A NAME="summary"><FONT SIZE=+2 COLOR=#000066> <B CLASS="midprod"> 
 Summary </B></FONT></A>
 <P CLASS="margin">  
 %<DumpSummary()> 
</BODY>
</HTML>
%closefile rptSurveyFile

%openfile rptSubsystemsFile = "%<htmlDir>/%<rptSubsystemsFileName>"
<HTML>
<HEAD>
<TITLE>RTW Report - Nonvirtual subsystems in %<Name></TITLE>
</HEAD>
<BODY BGCOLOR=#ffffff LINK="0033CC" VLINK="#666666">
<FONT SIZE=+4 COLOR=#000066> Nonvirtual subsystems in %<Name></B></FONT>
<P CLASS="margin">
<A NAME="codemap"><FONT SIZE=+2 COLOR=#000066> <B CLASS="midprod"> 
 Code Mapping </B></FONT></A>
 <P CLASS="margin">  
The following table:
<ul>

<li> provides a mapping from the non-virtual subsystems in the model to
functions or Reused functions in the generated code and 

<li> notes exceptions that caused some non-virtual subsystems to not reuse code
even though they were assigned a Reuse Setting ('RTW System Code' entry 
on the Subsystem Block Dialog) of 'Auto' or 'Reused Function'.

</ul>
<BR>
 %% Get the diagnostics from MATLAB in table form
 %assign tableEntries = FEVAL("rtwprivate","rtwreport",...
   "getSubsysDiag", rptSubsystemsFileName)
 %assign tabSize = SIZE(tableEntries)[1]
 %if tabSize > 0
   <TABLE BORDER="1" CELLPADDING="5" CELLSPACING="1">
   %foreach tIdx = SIZE(tableEntries)[1]
     %<tableEntries[tIdx]>
   %endforeach
   </TABLE>
 %else
   <B>No non-virtual subsystems in model</B>
 %endif
<BR>
<BR>
%% Get the reuse blockers for various subsystems
<A NAME="codeexcepts"><FONT SIZE=+2 COLOR=#000066> <B CLASS="midprod"> 
 Code Reuse Exceptions</B></FONT></A>
 <P CLASS="margin">  

The following section provides details on each exception that caused
a non-virtual subsystem with a Reuse Setting of 
<ul>

<li> 'Auto' to become an inlined code segment, 

<li> 'Auto' to become a non-reusable function without arguments, or

<li> 'Reused Function' to become a non-reusable function without arguments.

</ul>

<B>Note</B>: This section does not report graphically identical non-virtual
subsystems marked as 'Auto' that were not reused due to differences in their
functional properties (such as dimensions, datatypes, work vectors, parameters,
etc.).  You may identify reasons for non-reuse in such cases by
inspecting the differences in the functional attributes of the
subsystems in the model or in the inlined generated code.

<BR>
<BR>
 %assign blockers = FEVAL("rtwprivate","rtwreport",...
   "getReuseBlockers")
 %assign tSize = SIZE(blockers)[1]
 %if tSize > 0
   %foreach tIdx = SIZE(blockers)[1]
     %<blockers[tIdx]>
   %endforeach
 %else
   <B>No reuse exceptions in model</B>
 %endif

 </BODY>
</HTML>

%closefile rptSubsystemsFile

%<DumpReducedBlockTable(reducedBlockFileName)>
%<DumpInsertededBlockTable(insertedBlockFileName)>
%endwith %% CompiledModel 

%%
%matlab rtwprivate("rtwattic", "setReportFileName", rptFileName)
%% we'' bring up the browser in makertw/genHTMLreport phase.
%%matlab rtwprivate("rtwshowhtml", rptFileName)
%endif %% FEVAL("mkdir", buildDir, "html")
%endfunction

%% Create HTML report
%<CreateHTMLReportMainFcn()>
%endif %% _RTW_REPORT_

%% [EOF] report.tlc

