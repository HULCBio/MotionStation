%% 
%% $Revision: 1.1.6.6 $
%% 
%%
%% Copyright 1994-2004 The MathWorks, Inc.
%%
%% Abstract: Opaque block library

%if FEVAL("feature","rtwcgir") > 0
  %if ISFIELD(CompiledModel, "OrigName")
    %include "%<CompiledModel.OrigName>_aux.tlc"
  %else
    %include "%<CompiledModel.Name>_aux.tlc"
  %endif
%endif

%function SLibCGIRAccessLocalVar(varIndex) void
  %assign localBO = CompiledModel.BlockOutputs.LocalBlockOutput[varIndex]
  %assign localBO.DeclareInFcnScope = 1
  %<ReAssignLocalBlockOutputTID(localBO)>
%endfunction

%function SLibCGIRBlockOutputSignal(portIdx, ucv, lcv, sigIdx) void  
  %if LibBlockOutputSignalIsExpr(portIdx)
    %assign srcSys = CompiledModel.System[BlockIdx[0]]
    %assign srcBlk = srcSys.Block[BlockIdx[2]]
    %return SLibBlockOutputSignal(srcBlk,srcSys,portIdx,ucv,lcv,sigIdx,"Signal")
  %else
    %return FcnGetInputOrOutputSignal("output", portIdx, ucv, lcv, sigIdx)
  %endif
%endfunction %% SLibCGIRBlockOutputSignal

%function SLibCGIRBlockDWork(dwIdx,  ucv, lcv, indexExpr) void
  %return LibBlockDWork(DWork[dwIdx], ucv, lcv, indexExpr)
%endfunction

%function SLibCGIRAssignDWork(dwIdx,  ucv, lcv, indexExpr, rhs) void
  %return LibBlockAssignDWork(DWork[dwIdx], ucv, lcv, indexExpr, rhs)
%endfunction

%function SLibCGIRBlockDWorkSrc(dwSrc,  ucv, lcv, indexExpr) void
  %return LibBlockDWork(dwSrc, ucv, lcv, indexExpr)
%endfunction

%function SLibCGIRAssignDWorkSrc(dwSrc,  ucv, lcv, indexExpr, rhs) void
  %return LibBlockAssignDWork(dwSrc, ucv, lcv, indexExpr, rhs)
%endfunction

%function SLibCGIRBlockParameter(prmIdx, ucv, lcv, indexExpr) void
  %return LibBlockParameter(Parameter[prmIdx],  ucv, lcv, indexExpr)
%endfunction

%function SLibCGIRParamBaseAddr(parmIdx, ucv, lcv, indexExpr) void
  %assign nRows = SIZE(Parameter[parmIdx].Value, 0)  
  %if nRows > 1
    %return(LibBlockMatrixParameterBaseAddr(Parameter[parmIdx]))
  %else
    %return(LibBlockParameterBaseAddr(Parameter[parmIdx]))
  %endif
%endfunction

%function SLibCGIRBlockNSZC(zcIdx, ucv, lcv, indexExpr) void
  %assign zc = CompiledModel.NonsampledZCs.NonsampledZC[NSZC[zcIdx].RecIdx]
  %return SLibNonSampledZCState(zc, ucv, lcv, indexExpr)
%endfunction

%function SLibCGIRBlockZCE(zcIdx, ucv, lcv, indexExpr) void
  %assign zc = CompiledModel.ZCEvents.ZCEvent[ZCE[zcIdx].RecIdx]
  %return SLibPrevZCState(zc, ucv, lcv, indexExpr)
%endfunction

%function SLibCGIRZCFcn(zcDir, pzc, zcSig) void
  %return "%<tRZCFcn>(%<zcDir>, &%<pzc>, %<zcSig>)"
%endfunction


%function SLibCGIROutPortSignal(port, ucv, lcv, indexExpr) void
  %assign extOut = CompiledModel.ExternalOutputs.ExternalOutput[port]
  %assign sysIdx = extOut.Block[0]
  %assign blkIdx = extOut.Block[1]
  %assign outportBlock = System[sysIdx].Block[blkIdx]
  %with outportBlock
    %assign retVal = ...
      LibBlockDstSignalLocation("outportblk", ucv, lcv, indexExpr)
  %endwith
  %return retVal
%endfunction

%function SLibCGIRGetLoopVarName(sysIdx, blkIdx) void
  %return GetLoopVariableName(CompiledModel.System[sysIdx].Block[blkIdx])
%endfunction

%% Function: SLibCGIRGenSystemFcnCall ==========================================
%% Abstract:
%%    Generates (inlines) function call to a existing system function.
%%
%function SLibCGIRGenSystemFcnCall(sysIdx, callSiteIdx, fcnType) Output
  %if sysIdx >= 0
    %assign ss = CompiledModel.System[sysIdx]
    %if !LibSystemFcnIsEmpty(ss, fcnType)
      %<LibGenSystemFcnCall(ss, fcnType, callSiteIdx)>\
    %endif
  %endif
%endfunction %%SLibCGIRGenSystemFcnCall
