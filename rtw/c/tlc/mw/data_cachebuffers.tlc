%% ============================================================================
%% File: data_cachebuffers.tlc
%%
%% Abstract:
%%   
%%   
%% $Revision: 1.1.6.1 $ 
%% $Date: 2003/04/19 05:46:23 $
%%
%% Copyright 1994-2003 The MathWorks, Inc.
%% 
%% ============================================================================
%selectfile NULL_FILE

%%
%% USAGE OF DATA BUFFERS:
%% ----------------------
%% - Declaration: 
%%   - Code to specify visibility & data type of shared data.
%%   - Does not allocate memory.
%%   - Written into a header file (e.g., model_private.h).
%%
%%   For example:
%%     extern real_T K;
%%
%% - Instance:
%%   - Code to instantiate data elements (parameters, signals, states, etc.).
%%   - Allocates memory.
%%   - Written into a source file (e.g., model.c)
%%
%%   For example:
%%     real_T K = 5.0;
%%
%% - Typedef:
%%   - Code to define a new data type (used mostly for structures).
%%   - Does not allocate memory.
%%   - Written into a header file (e.g., model_types.h)
%%
%%   For example:
%%     typedef struct _model_Parameters {
%%       real_T p1;
%%       ...
%%     } model_Parameters;
%%


%if EXISTS("_DATA_CACHEBUFFERS_") == 0
%assign _DATA_CACHEBUFFERS_ = 1

%include "prm_cachebuffers.tlc"
%include "data_customdata.tlc"

%% Function: SLibCacheDataBuffers =============================================
%% Abstract:
%%   Cache the declaration & instantiation buffers for:
%%   - CustomData
%%   - Parameters
%%   - BlockIO    (still needs to be reorganized)
%%   - DWorks     (still needs to be reorganized)
%%
%function SLibCacheDataBuffers() void

  %<LibResetBlockFcnAccessed()>
  %<SLibCachePrmBuffers()>
  %<SLibCacheCustomDataBuffers()>
  %<SLibGenConstBlkIOCache()>
  %<LibCacheModelStructureInstance()>
  %<LibCacheModelStructureDefinitions()>
  
%endfunction %% SLibCacheDataBuffers


%endif %% EXISTS("_DATA_CACHEBUFFERS_")

%% [EOF] data_cachebuffers.tlc