%%
%% $Revision: 1.1.6.12 $
%%
%%
%% Copyright 1994-2002 The MathWorks, Inc.
%%
%% Abstract:
%%   Library for generating special rtModel macros
%%

%if EXISTS("_RTMSPECMACS_") == 0
%assign _RTMSPECMACS_ = 1

%% Function: RTMSpecAccsGetT ===================================================
%% Abstract:
%%   Generate a special access for getting "T"
%%
%function RTMSpecAccsGetT(accRec, rtmName) void
  %if ::ModelReferenceTargetWithGlobalTiming
    %if IsModelReferenceForASimstructBasedTarget()
      %assign simS = RTMDispatchToAccessFcn("MdlRefSfcnS","get","","", rtmName)
      %return "ssGetT(%<simS>)"
    %else
      %assign base = "%<::tMdlRefTimingBridge>->taskTime"
      %return "( *((real_T *)(%<base>[0])) )"
    %endif
  %endif
  %if IsModelReferenceForASimstructBasedTarget()
    %assign simS = RTMDispatchToAccessFcn("MdlRefSfcnS","get","","", rtmName)
    %return "ssGetT(%<simS>)"
  %endif
  %if CodeFormat == "Embedded-C"
    %if RTMTaskTimeIsReqFcnForTID(0)
      %assign accStr = RTMDispatchToAccessFcn("TaskTime0", "get", "", "", rtmName)
      %assign accStr = "%<accStr>"
    %elseif RTMTimePtrIsReqFcn()
      %assign accStr = RTMDispatchToAccessFcn("TPtr", "get", "", "", rtmName)
      %assign accStr = "%<accStr>[0]"
    %else
      %assign accStr = "" %% Undefined
    %endif
  %else
    %assign accStr = RTMDispatchToAccessFcn("TPtr", "get", "", "", rtmName)
    %assign accStr = "%<accStr>[0]"
  %endif

  %return accStr
%endfunction %% RTMSpecAccsT


%% Function: RTMSpecAccsSetT ===================================================
%% Abstract:
%%   Generate a special access for setting "T"
%%
%function RTMSpecAccsSetT(accRec, rtmName, val) void
  %if ::ModelReferenceTargetWithGlobalTiming
    %assign accStr = ""
  %elseif GenerateGRTWrapper
    %assign accStr = "rtmSetErrorStatus(%<rtmName>, NULL) /* Not in use*/"
  %else
    %assign accStr = RTMDispatchToAccessFcn("TPtr", "get", "", "", rtmName)
    %assign accStr = "%<accStr>[0] = (%<val>)"
  %endif

  %return accStr
%endfunction %% RTMSpecAccsT


%% Function: RTMSpecAccsGetTimeOfLastOutput ====================================
%% Abstract:
%%   Generate a special access for getting "TimeOfLastOutput"
%%
%function RTMSpecAccsGetTimeOfLastOutput(accRec, rtmName) void
  %if IsModelReferenceForASimstructBasedTarget()
    %assign simS = RTMDispatchToAccessFcn("MdlRefSfcnS","get","","", rtmName)
    %return "ssGetTimeOfLastOutput(%<simS>)"
  %endif
  %if RTMChildSfunctionIsReqFcn()
    %return RTMDispatchToAccessFcn("_TimeOfLastOutput", "get", "", "", rtmName)
  %else
    %return ""
  %endif

%endfunction %% RTMSpecAccsGetTimeOfLastOutput


%% Function: RTMSpecAccsSetTimeOfLastOutput ====================================
%% Abstract:
%%   Generate a special access for setting "TimeOfLastOutput"
%%
%function RTMSpecAccsSetTimeOfLastOutput(accRec, rtmName, val) void
  %if CodeFormat == "Embedded-C"
    %assign accStr = "" %% Undefined
  %else
    %assign accStr = RTMDispatchToAccessFcn("_TimeOfLastOutput", "get", "", "", rtmName)
    %assign accStr = "%<accStr> = (%<val>)"
  %endif
  %return accStr
%endfunction %% RTMSpecAccsSetTimeOfLastOutput


%% Function: RTMSpecAccsGetTStart ==============================================
%% Abstract:
%%   Generate a special access for getting "TStart"
%%
%function RTMSpecAccsGetTStart(accRec, rtmName) void
  %if IsModelReferenceForASimstructBasedTarget()
    %assign simS = RTMDispatchToAccessFcn("MdlRefSfcnS","get","","", rtmName)
    %return "ssGetTStart(%<simS>)"
  %endif
  %if RTMChildSfunctionIsReqFcn()
    %assign accStr = RTMDispatchToAccessFcn("StartTime", "get", "", "", rtmName)
  %else
    %assign accStr = ""
  %endif

  %return accStr
%endfunction %% RTMSpecAccsGetTStart


%% Function: RTMSpecAccsSetTStart ==============================================
%% Abstract:
%%   Generate a special access for setting "TStart"
%%
%function RTMSpecAccsSetTStart(accRec, rtmName, val) void
  %if RTMChildSfunctionIsReqFcn()
    %assign accStr = RTMDispatchToAccessFcn("StartTime", "get", "", "", rtmName)
    %assign accStr = "%<accStr> = (%<val>)"
  %else
    %assign accStr = "" %% Undefined
  %endif

  %return accStr
%endfunction %% RTMSpecAccsSetTStart


%% Function: RTMSpecAccsGetTFinal ==============================================
%% Abstract:
%%   Generate a special access for getting "TFinal"
%%
%function RTMSpecAccsGetTFinal(accRec, rtmName) void
  %if IsModelReferenceForASimstructBasedTarget()
    %assign simS = RTMDispatchToAccessFcn("MdlRefSfcnS","get","","", rtmName)
    %return "ssGetTFinal(%<simS>)"
  %elseif IsModelReferenceRTWTarget()
    %return ""
  %endif
  %if RTMTFinalIsReqFcn()
    %return RTMDispatchToAccessFcn("FinalTime", "get", "", "", rtmName)
  %else
    %return ""
  %endif
%endfunction %% RTMSpecAccsGetTFinal

%% Function: RTMSpecAccsSetTFinal ==============================================
%% Abstract:
%%   Generate a special access for setting "TFinal"
%%
%function RTMSpecAccsSetTFinal(accRec, rtmName, val) void
  %if RTMTFinalIsReqFcn()
    %assign accStr = RTMDispatchToAccessFcn("FinalTime", "get", "", "", rtmName)
    %assign accStr = "%<accStr> = (%<val>)"
  %else
    %assign accStr = ""
  %endif

  %return accStr
%endfunction %% RTMSpecAccsSetTFinal


%% Function: UpdateGetStopRequestStrIfNecessary ===============================
%% Abstract:
%%    For ert, we may not need the stop requested flag.
%function UpdateGetStopRequestStrIfNecessary(accStr)
  %if CodeFormat == "Embedded-C" && !GenerateGRTWrapper
    %if !(ExtMode || MatFileLogging || RTMStopReqAccessed())
      %assign accStr = "" %% Undefined
    %endif
  %endif

  %return accStr
%endfunction %% UpdateGetStopRequestStrIfNecessary


%% Function: UpdateSetStopRequestStrIfNecessary ===============================
%% Abstract:
%%     For ert, we may not need the stop requested flag.
%function UpdateSetStopRequestStrIfNecessary(accStr, rtmName, val)
  %if CodeFormat == "Embedded-C"
    %if (ExtMode || MatFileLogging || RTMStopReqAccessed())
      %if !SuppressErrorStatus && !IsModelReferenceForASimstructBasedTarget()
	%if GenerateGRTWrapper
	  %assign setErrStat = ""
	%else
	  %assign setErrStat = "if (%<val>)" + ...
	    RTMDispatchToAccessFcn("ErrorStatus", "get", "", "", rtmName) + ...
	    " = \"Stop Requested\""
	%endif
	%assign accStr = "%<accStr>;%<setErrStat>"
      %endif
    %else
      %assign accStr = "" %% Undefined
    %endif
  %endif

  %return accStr
%endfunction %% UpdateSetStopRequestStrIfNecessary

%% Function: RTMSpecAccsGetStopRequested =======================================
%% Abstract:
%%   Generate a special access for getting "StopRequested"
%%
%function RTMSpecAccsGetStopRequested(accRec, rtmName) void
  %assign accStr = RTMDispatchToAccessFcn("StopRequestedFlag", "get", ...
    "", "", rtmName)

  %assign accStr = UpdateGetStopRequestStrIfNecessary(accStr)

  %return accStr
%endfunction %% RTMSpecAccsGetStopRequested


%% Function: RTMSpecAccsSetStopRequested =======================================
%% Abstract:
%%   Generate a special access for setting "StopRequested"
%%
%function RTMSpecAccsSetStopRequested(accRec, rtmName, val) void
  %assign accStr = RTMDispatchToAccessFcn("StopRequestedFlag", "get", ...
    "", "", rtmName)
  %assign accStr = "%<accStr> = (%<val>)"

  %assign accStr = UpdateSetStopRequestStrIfNecessary(accStr, rtmName, val)

  %return accStr
%endfunction %% RTMSpecAccsSetStopRequested


%% Function: RTMSpecAccsGetStopRequestedPtr ====================================
%% Abstract:
%%   Generate a special access for getting "StopRequested"
%%
%function RTMSpecAccsGetStopRequestedPtr(accRec, rtmName) void
  %assign accStr = RTMDispatchToAccessFcn("StopRequestedFlag", "get", ...
    "", "", rtmName)

  %assign accStr = "&(%<accStr>)"
  %assign accStr = UpdateGetStopRequestStrIfNecessary(accStr)

  %return accStr
%endfunction %% RTMSpecAccsGetStopRequestedPtr


%% Function: RTMSpecAccsGetStopRequestedValStoredAsPtr =========================
%% Abstract:
%%   Generate a special access for getting "StopRequested"
%%   Get StopRequestedFlag when it is a pointer
%%
%function RTMSpecAccsGetStopRequestedValStoredAsPtr(accRec, rtmName) void
  %assert IsModelReferenceTarget()

  %assign accStr = RTMDispatchToAccessFcn("StopRequestedFlag", "get", ...
    "", "", rtmName)

  %assign accStr = "*(%<accStr>)"

  %assign accStr = UpdateGetStopRequestStrIfNecessary(accStr)

  %return accStr
%endfunction %% RTMSpecAccsGetStopRequestedValStoredAsPtr


%% Function:  RTMSpecAccsSetStopRequestedValStoredAsPtr  =======================
%% Abstract:
%%   Generate a special access for setting "StopRequested"
%%   Set StopRequestedFlag when it is a pointer
%%
%function RTMSpecAccsSetStopRequestedValStoredAsPtr(accRec, rtmName, val) void
  %assert IsModelReferenceTarget()
  %assign accStr = RTMDispatchToAccessFcn("StopRequestedFlag", "get", ...
    "", "", rtmName)

  %assign accStr = "*(%<accStr>) = (%<val>)"

  %assign accStr = UpdateSetStopRequestStrIfNecessary(accStr, rtmName, val)

  %return accStr
%endfunction %% RTMSpecAccsSetStopRequestedValStoredAsPtr


%% Function: RTMSpecAccsGetStopRequestedPtrStoredAsPtr  ========================
%% Abstract:
%%   Generate a special access for getting "StopRequested"
%%   Get Addr of StopRequestedFlag when it is a pointer
%%
%function RTMSpecAccsGetStopRequestedPtrStoredAsPtr(accRec, rtmName) void
  %assert IsModelReferenceTarget()
  %assign accStr = RTMDispatchToAccessFcn("StopRequestedFlag", "get", ...
    "", "", rtmName)

  %assign accStr = "(%<accStr>)"

  %assign accStr = UpdateGetStopRequestStrIfNecessary(accStr)

  %return accStr
%endfunction %% RTMSpecAccsGetStopRequestedPtrStoredAsPtr


%% Function: RTMSpecAccsSetStopRequestedPtrStoredAsPtr  ========================
%% Abstract:
%%   Generate a special access for setting "StopRequested"
%%   Set StopRequestedFlag when it is a pointer.
%%
%function RTMSpecAccsSetStopRequestedPtrStoredAsPtr(accRec, rtmName, val) void
  %assert IsModelReferenceTarget()
  %assign accStr = RTMDispatchToAccessFcn("StopRequestedFlag", "get", ...
    "", "", rtmName)

  %assign accStr = "%<accStr> = (%<val>)"

  %return accStr
%endfunction %% RTMSpecAccsSetStopRequestedPtrStoredAsPtr


%% Function: RTMSpecAccsGetErrorStatus =========================================
%% Abstract:
%%   Generate a special access for getting "ErrorStatus"
%%
%function RTMSpecAccsGetErrorStatus(accRec, rtmName) void
  %if !SuppressErrorStatus
    %assign accStr = RTMDispatchToAccessFcn("ErrorStatusFlag", "get", ...
      "", "", rtmName)
    %assign accStr = "(%<accStr>)"
  %else
    %assign accStr = "((void*) 0)" %% Undefined
  %endif

  %return accStr
%endfunction %% RTMSpecAccsGetErrorStatus


%% Function: RTMSpecAccsSetErrorStatus =========================================
%% Abstract:
%%   Generate a special access for setting "ErrorStatus"
%%
%function RTMSpecAccsSetErrorStatus(accRec, rtmName, val) void
  %if !SuppressErrorStatus
    %assign accStr = RTMDispatchToAccessFcn("ErrorStatusFlag", "get", ...
      "", "", rtmName)
    %assign accStr = "(%<accStr> = (%<val>))"
  %else
    %assign accStr = "((void) 0)"
  %endif

  %return accStr
%endfunction %% RTMSpecAccsSetErrorStatus

%% Function: RTMSpecAccsGetTaskTime0 =========================================
%% Abstract:
%%   Generate a special access for getting "TaskTime0"
%%
%function RTMSpecAccsGetTaskTime0(accRec, rtmName) void
  %assert IsModelReferenceTarget()
  %assign accStr = RTMDispatchToAccessFcn("TaskTimePointer0", "get", ...
    "", "", rtmName)
  %return "*(%<accStr>)"
%endfunction %% RTMSpecAccsGetTaskTime0


%% Function: RTMSpecAccsSetTaskTime0 =========================================
%% Abstract:
%%   Generate a special access for setting "TaskTime0"
%%
%function RTMSpecAccsSetTaskTime0(accRec, rtmName, val) void
  %assert IsModelReferenceTarget()
  %assign accStr = RTMDispatchToAccessFcn("TaskTimePointer0", "get", ...
    "", "", rtmName)
  %assign accStr = "%<accStr> = (%<val>)"
  %return accStr
%endfunction %% RTMSpecAccsSetTaskTime0

%% Function: RTMSpecAccsGetErrorStatusPointer ==================================
%% Abstract:
%%   Generate a special access for getting "ErrorStatus"
%%
%function RTMSpecAccsGetErrorStatusPointer(accRec, rtmName) void
  %assert IsModelReferenceTarget()
  %if !SuppressErrorStatus
    %assign accStr = RTMDispatchToAccessFcn("ErrorStatusFlag", "get", ...
      "", "", rtmName)
    %assign accStr = "*(%<accStr>)"
  %else
    %assign accStr = "((void*) 0)" %% Undefined
  %endif

  %return accStr
%endfunction %% RTMSpecAccsGetErrorStatusPointer


%% Function: RTMSpecAccsSetErrorStatusPointer ==================================
%% Abstract:
%%   Generate a special access for setting "ErrorStatus"
%%
%function RTMSpecAccsSetErrorStatusPointer(accRec, rtmName, val) void
  %assert IsModelReferenceTarget()
  %if !SuppressErrorStatus
    %assign accStr = RTMDispatchToAccessFcn("ErrorStatusFlag", "get", ...
      "", "", rtmName)
    %assign accStr = "*(%<accStr>) = (%<val>)"
  %else
    %assign accStr = "((void) 0)"
  %endif

  %return accStr
%endfunction %% RTMSpecAccsSetErrorStatusPointer

%% Function: RTMSpecAccsGetErrorStatusPointerPointer ===========================
%% Abstract:
%%   Generate a special access for getting "ErrorStatusPointer"
%%
%function RTMSpecAccsGetErrorStatusPointerPointer(accRec, rtmName) void
  %if HasModelReferenceBlocks() || IsModelReferenceTarget()
    %if !SuppressErrorStatus
      %assign accStr = RTMDispatchToAccessFcn("ErrorStatusFlag", "get", ...
	"", "", rtmName)
      %if !IsModelReferenceTarget()
	%assign accStr = "&(%<accStr>)"
      %endif
    %else
      %assign accStr = "((void*) 0)"
    %endif
  %else
    %assign accStr = "" %% Undefined
  %endif

  %return accStr
%endfunction %% RTMSpecAccsGetErrorStatusPointerPointer


%% Function: RTMSpecAccsSetErrorStatusPointerPointer ===========================
%% Abstract:
%%   Generate a special access for setting "ErrorStatusPointer"
%%
%function RTMSpecAccsSetErrorStatusPointerPointer(accRec, rtmName, val) void
  %assert IsModelReferenceTarget()
  %if !SuppressErrorStatus
    %assign accStr = RTMDispatchToAccessFcn("ErrorStatusFlag", "get", ...
      "", "", rtmName)
    %assign accStr = "(%<accStr> = (%<val>))"
  %else
    %assign accStr = "((void) 0)"
  %endif

  %return accStr
%endfunction %% RTMSpecAccsSetErrorStatusPointerPointer

%% Function: RTMSpecAccsGetSimTimeStepPointer ==================================
%% Abstract:
%%   Generate a special access for getting "SimTimeStep"
%%
%function RTMSpecAccsGetSimTimeStepPointer(accRec, rtmName) void
  %assert IsModelReferenceTarget()
  %if LibIsContinuous(0)
    %assign accStr = RTMDispatchToAccessFcn("SimTimeStepPtr", "get", ...
      "", "", rtmName)
    %assign accStr = "*(%<accStr>)"
  %else
    %assign accStr = "((void*) 0)" %% Undefined
  %endif

  %return accStr
%endfunction %% RTMSpecAccsGetSimTimeStepPointer


%% Function: RTMSpecAccsGetSimTimeStepPointerPointer ===========================
%% Abstract:
%%   Generate a special access for getting "SimTimeStepPointer"
%%
%function RTMSpecAccsGetSimTimeStepPointerPointer(accRec, rtmName) void
  %assert IsModelReferenceTarget()
  %if LibIsContinuous(0)
    %assign accStr = RTMDispatchToAccessFcn("SimTimeStepPtr", "get", ...
      "", "", rtmName)
  %else
    %assign accStr = "((void*) 0)" %% Undefined
  %endif

  %return accStr
%endfunction %% RTMSpecAccsGetSimTimeStepPointerPointer


%% Function: RTMSpecAccsSetSimTimeStepPointerPointer ===========================
%% Abstract:
%%   Generate a special access for setting "SimTimeStepPointer"
%%
%function RTMSpecAccsSetSimTimeStepPointerPointer(accRec, rtmName, val) void
  %assert IsModelReferenceTarget()
  %if LibIsContinuous(0)
    %assign accStr = RTMDispatchToAccessFcn("SimTimeStepPtr", "get", ...
      "", "", rtmName)
    %assign accStr = "%<accStr> = (%<val>)"
  %else
    %assign accStr = "((void) 0)"
  %endif

  %return accStr
%endfunction %% RTMSpecAccsSetSimTimeStepPointerPointer

%% Function: RTMSpecAccsGetTPtr ================================================
%% Abstract:
%%   Generate a special access for getting "TPtr"
%%
%function RTMSpecAccsGetTPtr(accRec, rtmName) void
  %if ::ModelReferenceTargetWithGlobalTiming
    %if IsModelReferenceForASimstructBasedTarget()
      %assign simS = RTMDispatchToAccessFcn("MdlRefSfcnS","get","","", rtmName)
      %return "_ssGetTPtr(%<simS>)"
    %else
      %return ""
    %endif
  %endif
  %assign accStr = "" %% assume
  %if (CodeFormat != "Embedded-C") || LibIsContinuous(0) || ...
    NumChildSFunctions || GenerateGRTWrapper
    %assign accStr = RTMDispatchToAccessFcn("TimePtr", "get", "", "", rtmName)
  %else
    %if(MatFileLogging || ExtMode)
      %assign accStr = RTMDispatchToAccessFcn("TaskTime0", "get", "", "", rtmName)
      %assign accStr = "&"+accStr
    %endif
  %endif

  %return accStr
%endfunction %% RTMSpecAccsGetTPtr


%% Function: RTMSpecAccsSetTPtr ================================================
%% Abstract:
%%   Generate a special access for setting "TPtr"
%%
%function RTMSpecAccsSetTPtr(accRec, rtmName, val) void
  %if ::ModelReferenceTargetWithGlobalTiming
    %assign accStr = ""
  %elseif (CodeFormat != "Embedded-C") || LibIsContinuous(0) || ...
    NumChildSFunctions || GenerateGRTWrapper
    %assign accStr = RTMDispatchToAccessFcn("TimePtr","get", "", "", rtmName)
    %assign accStr = "%<accStr> = (%<val>)"
  %else
    %assign accStr = "" %% Undefined
  %endif

  %return accStr
%endfunction %% RTMSpecAccsSetTPtr


%% Function: RTMSpecAccsIsMajorTimeStep ========================================
%% Abstract:
%%   Generate a special access for checking "MajorTimeStep"
%%
%function RTMSpecAccsIsMajorTimeStep(accRec, rtmName) void
  %if IsModelReferenceForASimstructBasedTarget()
    %assign simS = RTMDispatchToAccessFcn("MdlRefSfcnS","get","","", rtmName)
    %return "ssIsMajorTimeStep(%<simS>)"
  %elseif IsModelReferenceRTWTarget()
    %if LibIsContinuous(0)
      %assign accStr = RTMDispatchToAccessFcn("SimTimeStep","get","","", rtmName)

      %assign accStr = "(%<accStr>) == MAJOR_TIME_STEP"
      %return accStr
    %else
      %return "(1)"
    %endif
  %endif
  %if (CodeFormat == "Embedded-C") && !LibIsContinuous(0)
    %assign accStr = ""
  %else
    %assign accStr = RTMDispatchToAccessFcn("SimTimeStep","get","","", rtmName)

    %assign accStr = "(%<accStr>) == MAJOR_TIME_STEP"
  %endif
  %return accStr
%endfunction %% RTMSpecAccsIsMajorTimeStep


%% Function: RTMSpecAccsIsMinorTimeStep ========================================
%% Abstract:
%%   Generate a special access for checking "MinorTimeStep"
%%
%function RTMSpecAccsIsMinorTimeStep(accRec, rtmName) void
  %if IsModelReferenceForASimstructBasedTarget()
    %assign simS = RTMDispatchToAccessFcn("MdlRefSfcnS","get","","", rtmName)
    %return "ssIsMinorTimeStep(%<simS>)"
  %elseif IsModelReferenceRTWTarget()
    %if !LibIsContinuous(0)
      %return "(1)"
    %else
      %assign accStr = RTMDispatchToAccessFcn("SimTimeStep","get","","", rtmName)

      %assign accStr = "(%<accStr>) == MINOR_TIME_STEP"
      %return accStr
    %endif
  %else
    %if (CodeFormat == "Embedded-C") && !NumContStates
      %assign accStr = ""
    %else
      %assign accStr = RTMDispatchToAccessFcn("SimTimeStep","get","","", rtmName)

      %assign accStr = "(%<accStr>) == MINOR_TIME_STEP"
    %endif
  %endif
  %return accStr
%endfunction %% RTMSpecAccsIsMinorTimeStep


%% Function: RTMSpecAccsIsFirstInitCond ========================================
%% Abstract:
%%   Generate a special access for checking "FirstInitCond"
%%
%function RTMSpecAccsIsFirstInitCond(accRec, rtmName) void

  %if IsModelReferenceForASimstructBasedTarget()
    %assign simS = RTMDispatchToAccessFcn("MdlRefSfcnS","get","","", rtmName)
    %return "ssIsFirstInitCond(%<simS>)"
  %endif

  %% All non-simstruct based model reference targets, that use the
  %% global timing engine, get the firstInitCond from that structure.
  %if ::ModelReferenceTargetWithGlobalTiming
    %return "( *(%<::tMdlRefTimingBridge>->firstInitCond) )"
  %endif

  %assign accStr = "" %% assume
  %if CodeFormat == "Embedded-C"
    %if SLibGetIsFirstInitCondAccessed()
      %if SLibNeedAbsoluteTime() && !RTMFirstInitCondFlagIsReqFcn()
	%% Access TStart field when it exists, otherwise,
	%% TStart is 0.0. TStart exists when RTMChildSfunctionIsReqFcn()
	%assign accStr = RTMChildSfunctionIsReqFcn() ? ...
	  RTMDispatchToAccessFcn("TStart","get","","", rtmName) : ...
	  "0.0"
	%% We need find a task maintaining absolute time.
	%% Absolute time could be maintained by subrate taske.
	%% task0 might not maintain absolute time.
	%%
        %foreach idx = CompiledModel.NumSampleTimes
	  %if SLibNeedAbsoluteTimeForTID(idx)
	    %assign tidHasAbsoluteTimer = idx
	    %break
	  %endif
	%endforeach
	%if IsModelReferenceTarget()
	  %% RTMsGetTaskTimeForTIDGivenRTM is the same as
	  %% LibGetTaskTime. The only difference is that, when we use
	  %% LibGetTaskTime, the body of the macro will contain the
	  %% global rtM. This is invalid for model reference. Instead,
	  %% we call the low level function, to use rtmName instead of
	  %% tSimStruct. (see RTMsGetTaskTimeForTID)
	  %assign accStr = "%<RTMsGetTaskTimeForTIDGivenRTM(-1, ...
	    rtmName, tidHasAbsoluteTimer)> == (%<accStr>)"
	%else
	  %assign accStr = "%<LibGetTaskTime(tidHasAbsoluteTimer)> == (%<accStr>)"
	%endif
      %else
	%assign accStr = RTMDispatchToAccessFcn("FirstInitCondFlag", "get", ...
	  "", "", rtmName)
	%assign accStr = "(%<accStr>)"
      %endif
    %endif
  %else
    %assign accStr = RTMDispatchToAccessFcn("TStart","get","","", rtmName)

    %assign accStr = "rtmGetT(%<rtmName>) == (%<accStr>)"
  %endif

  %return accStr
%endfunction %% RTMSpecAccsIsFirstInitCond


%% Function: RTMSpecAccsSetFirstInitCond ========================================
%% Abstract:
%%   Generate a special access for setting "FirstInitCond"
%%
%function RTMSpecAccsSetFirstInitCond(accRec, rtmName, val) void
  %assign accStr = "" %% assume
  %if RTMFirstInitCondFlagIsReqFcn()
    %assign accStr = RTMDispatchToAccessFcn("FirstInitCondFlag", "get", ...
      "", "", rtmName)
    %assign accStr = "(%<accStr> = (%<val>))"
  %endif

  %return accStr
%endfunction %% RTMSpecAccsSetFirstInitCond


%% Function: RTMSpecAccsSetSampleHitInTask =====================================
%% Abstract:
%%   Generate a special access for setting "SampleHitInTask"
%%
%function RTMSpecAccsSetSampleHitInTask(accRec, rtmName, val) void
  %assign accStr = "" %% assume
  %if CodeFormat != "Embedded-C" && ...
    CompiledModel.FixedStepOpts.SolverMode == "MultiTasking"
    %assign ptshp   = RTMDispatchToAccessFcn("PerTaskSampleHitsPtr", ...
      "get", "", "", rtmName)
    %assign nst     = RTMDispatchToAccessFcn("NumSampleTimes", ...
      "get", "", "", rtmName)

    %assign tj      = accRec.Args[0]
    %assign ti      = accRec.Args[1]

    %assign accStr  = "(%<ptshp>)[(%<tj>)+((%<ti>) * (%<nst>))]=(%<val>)"
  %else
    %assign accStr = "" %% Undefined
  %endif

  %return accStr
%endfunction %% RTMSpecAccsSetSampleHitInTask


%% Function: RTMSpecAccsIsContinuousTask =======================================
%% Abstract:
%%   Generate a special access for checking "ContinuousTask"
%%
%function RTMSpecAccsIsContinuousTask(accRec, rtmName) void
  %assign accStr = "" %% assume
  %assign tid    = accRec.Args[0]

  %if CodeFormat != "Embedded-C" || GenerateGRTWrapper 
    %if LibIsContinuous(0)
      %if CompiledModel.FixedStepOpts.SolverMode == "MultiTasking" && ...
	CompiledModel.FixedStepOpts.TID01EQ
	%assign accStr = "(%<tid>) <= 1"
      %else
	%assign accStr = "(%<tid>) == 0"
      %endif
    %else
      %assign accStr = "0"
    %endif
  %endif

  %return accStr
%endfunction %% RTMSpecAccsIsContinuousTask


%% Function: FcnSpecAccsNonERTGetTaskTime ======================================
%% Abstract:
%%   Generate a special access for getting "TaskTime"
%%
%function FcnSpecAccsNonERTGetTaskTime(accRec, rtmName, forSfcn) void
  %assign arg1   = accRec.Args[0]

  %assign tp     = RTMDispatchToAccessFcn("TPtr", "get", "", "", rtmName)
  %if forSfcn
    %assign sstid  = "(ssGetSampleTimeTaskIDPtr(S))[%<arg1>]"
  %else
    %assign sstid  = RTMDispatchToAccessFcn("SampleTimeTaskID", "get", ...
      "%<arg1>", "", rtmName)
  %endif

  %return "%<tp>[%<sstid>]"
%endfunction %% FcnSpecAccsTaskTime


%% Function: RTMSpecAccsGetTaskTime ============================================
%% Abstract:
%%   Generate a special access for getting "TaskTime",
%%  for Embedded-C, this is inlined, return empty macro
%%
%function RTMSpecAccsGetTaskTime(accRec, rtmName) void

  %if ::ModelReferenceTargetWithGlobalTiming
    %assign tid  = accRec.Args[0]
    %assign indx = "%<::tMdlRefGlobalTID>[%<tid>]"
    %if IsModelReferenceForASimstructBasedTarget()
      %assign simS = RTMDispatchToAccessFcn("MdlRefSfcnS","get","","", rtmName)
      %assign accStr = "(ssGetTPtr(%<simS>))[%<indx>]"
    %else
      %assign base = "%<::tMdlRefTimingBridge>->taskTime"
      %assign accStr = "( *((real_T *)(%<base>[%<indx>])) )"
    %endif
    %return accStr
  %endif

  %if CodeFormat != "Embedded-C" || GenerateGRTWrapper
    %assign accStr = FcnSpecAccsNonERTGetTaskTime(accRec, rtmName, TLC_FALSE)
  %else
    %assign accStr = ""
  %endif

  %return accStr
%endfunction %% RTMSpecAccsTaskTime


%% Function: RTMSpecAccsSetTaskTime ============================================
%% Abstract:
%%   Generate a special access for setting "TaskTime"
%%
%function RTMSpecAccsSetTaskTime(accRec, rtmName, val) void
  %if CodeFormat == "Embedded-C" && !GenerateGRTWrapper
    %assign accStr = "" %% Undefined
  %else
    %assign arg1   = accRec.Args[0]
    %assign tp     = RTMDispatchToAccessFcn("TPtr", "get", "", "", rtmName)
    %assign accStr = "%<tp>[%<arg1>] = (%<val>)"
  %endif
  %return accStr
%endfunction %% RTMSpecAccsTaskTime


%% Function: FcnSpecAccsNonERTIsSampleHit ======================================
%% Abstract:
%%   Generate a special access for checking "IsSampleHit" for non-ERT format
%%
%function FcnSpecAccsNonERTIsSampleHit(args, rtmName, forSfcn) void
  %assign accStr = "" %% assume
  %assign sti    = args[0]
  %assign tid    = args[1]

  %if forSfcn
    %assign sstid  = "(ssGetSampleTimeTaskIDPtr(S))[%<sti>]"
  %else
    %assign sstid  = RTMDispatchToAccessFcn("SampleTimeTaskID", "get", ...
      "%<sti>", "", rtmName)
  %endif

  %if CompiledModel.SolverType != "FixedStep" || ...
      CompiledModel.FixedStepOpts.SolverMode != "MultiTasking"
    %assign shp = RTMDispatchToAccessFcn("SampleHitPtr", "get", ...
      "", "", rtmName)
    %assign accStr = "%<shp>[%<sstid>]"
    %if LibIsContinuous(0)
      %assign accStr = "(rtmIsMajorTimeStep(%<rtmName>) " + ...
	"&& %<accStr>)"
    %endif
  %else
    %assign accStr = "(%<sstid> == (%<tid>))"
  %endif

  %return accStr
%endfunction %% FcnSpecAccsNonERTIsSampleHit


%% Function: FcnSpecAccsERTIsSampleHit ======================================
%% Abstract:
%%   Generate a special access for checking "IsSampleHit" for ERT format
%%
%function FcnSpecAccsERTIsSampleHit(args, rtmName) void
  %if CompiledModel.NumSynchronousSampleTimes > 1 || ...
    (ExtMode && GenerateGRTWrapper)
    %return FcnSpecAccsNonERTIsSampleHit(args, rtmName, TLC_FALSE)
  %elseif CompiledModel.NumSynchronousSampleTimes > 1
    %return "ssIsSampleHit_obsolete__use_TLC_fcn_LibIsSampleHit"
  %endif
%endfunction %% FcnSpecAccsERTIsSampleHit


%% Function: RTMSpecAccsIsSampleHit ============================================
%% Abstract:
%%   Generate a special access for checking "IsSampleHit"
%%
%function RTMSpecAccsIsSampleHit(accRec, rtmName) void
  %assign accStr = "" %% assume
  %if CodeFormat == "Embedded-C"
    %if ::ModelReferenceTargetWithGlobalTiming
      %assign sti = accRec.Args[0]
      %if IsModelReferenceForASimstructBasedTarget()
	%assign simS = RTMDispatchToAccessFcn("MdlRefSfcnS","get","","",rtmName)
	%return "( (ssGetSampleHitPtr(%<simS>))[%<::tMdlRefGlobalTID>[%<sti>]] == 1 )"
      %else
	%assign base  = "%<::tMdlRefTimingBridge>->taskCounter"
	%assign indx  = "%<::tMdlRefGlobalTID>[%<sti>]"
        %assign dtype = "%<::tMdlRefTimingBridge>->taskCounterDataType == SS_UINT8"
        %return "((%<dtype>) ? (*((int8_T *)(%<base>[%<indx>])) == 0) "...
          ": (*((int_T *)(%<base>[%<indx>])) == 0))"
      %endif
    %elseif CompiledModel.NumSynchronousSampleTimes > 1 || ...
      (ExtMode && GenerateGRTWrapper)
      %assign accStr = FcnSpecAccsERTIsSampleHit(accRec.Args, rtmName)
    %endif
  %else
    %assign accStr = FcnSpecAccsNonERTIsSampleHit(accRec.Args, rtmName, TLC_FALSE)
  %endif

  %return accStr
%endfunction %% RTMSpecAccsIsSampleHit


%% Function: FcnSpecAccsNonERTIsSpecialSampleHit ===============================
%% Abstract:
%%   Generate a special access for checking "IsSpecialSampleHit"
%%
%function FcnSpecAccsNonERTIsSpecialSampleHit(accRec, rtmName, forSfcn) void
  %assign accStr = "" %% assume
  %assign sti    = accRec.Args[0]
  %assign tid    = accRec.Args[2]

  %if CompiledModel.SolverType == "FixedStep" && ...
      CompiledModel.FixedStepOpts.SolverMode == "MultiTasking"
    %if forSfcn
      %assign sstid  = "(ssGetSampleTimeTaskIDPtr(S))[%<sti>]"
    %else
      %assign sstid  = RTMDispatchToAccessFcn("SampleTimeTaskID", "get", ...
	"%<sti>", "", rtmName)
    %endif

    %assign ptshp = RTMDispatchToAccessFcn("PerTaskSampleHitsPtr", ...
      "get", "", "", rtmName)
    %assign nst   = RTMDispatchToAccessFcn("NumSampleTimes", ...
      "get", "", "", rtmName)

    %assign accStr = "%<ptshp>[%<sstid>+((%<tid>) * (%<nst>))]"

    %if LibIsContinuous(0)
      %assign accStr = "(rtmIsMajorTimeStep(%<rtmName>) && %<accStr>)"
    %endif
  %else
    %assign argArr = ["%<accRec.Args[0]>", "%<accRec.Args[2]>"]
    %assign accStr = FcnSpecAccsNonERTIsSampleHit(argArr, rtmName, forSfcn)
  %endif

  %return accStr
%endfunction %% FcnSpecAccsNonERTIsSpecialSampleHit


%% Function: FcnSpecAccsERTIsSpecialSampleHit ==================================
%% Abstract:
%%   Generate a special access for checking "IsSpecialSampleHit" for ERT format
%%
%function FcnSpecAccsERTIsSpecialSampleHit(accRec, rtmName) void
  %return "ssIsSpecialSampleHit_obsolete__use_TLC_fcn_LibIsSpecialSampleHit"
%endfunction %% FcnSpecAccsERTIsSpecialSampleHit


%% Function: RTMSpecAccsIsSpecialSampleHit =====================================
%% Abstract:
%%   Generate a special access for checking "IsSpecialSampleHit"
%%
%function RTMSpecAccsIsSpecialSampleHit(accRec, rtmName) void
  %assign accStr = "" %% assume
  %if CodeFormat == "Embedded-C"
    %if CompiledModel.NumSynchronousSampleTimes > 1
      %if ::ModelReferenceTargetWithGlobalTiming && !SLibSingleTasking()
	%assign sti       = accRec.Args[0]
	%assign promo_sti = accRec.Args[1]
	%if IsModelReferenceForASimstructBasedTarget()
	  %assign simS = RTMDispatchToAccessFcn("MdlRefSfcnS","get","","",rtmName)
	  %assign nTs  = "ssGetNumRootSampleTimes(%<simS>)"
	  %assign indexer = "%<::tMdlRefGlobalTID>[%<sti>] + " ...
	    "%<nTs>*%<::tMdlRefGlobalTID>[%<promo_sti>]"
	  %return "(ssGetPerTaskSampleHitsPtr(%<simS>))[%<indexer>]"
	%else
	  %assign base  = "(%<::tMdlRefTimingBridge>->rateTransition)"
	  %assign nTs   = "%<::tMdlRefTimingBridge>->nTasks"
	  %assign indx  = "%<::tMdlRefGlobalTID>[%<sti>] + " ...
	    "%<nTs>*%<::tMdlRefGlobalTID>[%<promo_sti>]"
	  %return "( *(%<base>[%<indx>]) )"
	%endif
      %else
	%assign accStr = FcnSpecAccsERTIsSpecialSampleHit(accRec,rtmName)
      %endif
    %endif
  %else
    %assign accStr = FcnSpecAccsNonERTIsSpecialSampleHit(accRec, rtmName, TLC_FALSE)
  %endif
  %return accStr
%endfunction %% RTMSpecAccsIsSpecialSampleHit


%% Function: RTMSpecAccsTaskRunsThisBaseStep ====================================
%% Abstract:
%%   Generate the ERT macro body for getting access to clock tick counters
%%
%function RTMSpecAccsTaskRunsThisBaseStep(accRec, rtmName) void
  %assign accStr = "" %% assume
  %if CodeFormat == "Embedded-C" && ...
    !ModelReferenceTargetWithGlobalTiming && ...
    !IsModelReferenceForASimstructBasedTarget() && ...
    CompiledModel.NumSynchronousSampleTimes > 1 && !SLibSingleTasking()
    %assign idx = accRec.Args[0]
    %assign accStr = "((rtm)->Timing.TaskCounters.TID[(%<idx>)] == 0)"
  %endif
  %return accStr
%endfunction

%% Function: RTMSpecAccsUpdateSubrateTaskTime ==================================
%% Abstract:
%%   Generate the ERT macro body for rtmUpdateSubrateTaskTime
%% We inlined rtmUpdateSubrateTaskTime, don't need this macro.
%%
%function RTMSpecAccsUpdateSubrateTaskTime(accRec, rtmName) void
  %return ""
%endfunction


%% Function: RTMSpecAccsUpdateRealAbsoluteTime ==================================
%% Abstract:
%%   Generate the ERT macro body for rtmUpdateRealAbsoluteTime
%%
%%   Since each task, including tid0, has its own timer and update absolute time
%%   by calling rtmUpdateRealAbsoluteTimeForTID. we don't need treat timer
%%   for tid0 sperately. This macro should be obsolete
%function RTMSpecAccsUpdateRealAbsoluteTime(accRec, rtmName) void
  %return ""
%endfunction


%% Function: RTMSpecAccsUpdateIntegerAbsoluteTime ==============================
%% Abstract:
%%   Generate the ERT macro body for rtmUpdateIntegerAbsoluteTime
%%
%%   This should be obselete. Since each task has its own timer, we don't need treat timer
%%   for tid0 sperately. However, if SLibNeedObsAbsoluteTime("") return truce, old Macro will
%%   be generated.
%function RTMSpecAccsUpdateIntegerAbsoluteTime(accRec, rtmName) void
  %return ""
%endfunction


%% Function: RTMSpecAccsGetClockTick ===========================================
%%
%function RTMSpecAccsGetClockTick(accRec, rtmName) void
  %assert ::ModelReferenceTargetWithGlobalTiming
  %assign args = IDNUM(accRec.Name)
  %assert ISEQUAL(args[0],"ClockTick")
  %assign sti  = args[1]
  %assign dtypeId = CompiledModel.SampleTime[sti].ClockTickDataTypeId
  %if dtypeId == tSS_TIMER_UINT32_PAIR
    %assign dtype = "uint32_T"
  %else
    %assign dtype = LibGetDataTypeNameFromId(dtypeId)
  %endif
  %assign base = "%<::tMdlRefTimingBridge>->clockTick"
  %assign indx = "%<::tMdlRefGlobalTID>[%<sti>]"
  %return "( *((%<dtype>*)(%<base>[%<indx>])) )"
%endfunction


%% Function: RTMSpecAccsGetClockTickH ===========================================
%%
%function RTMSpecAccsGetClockTickH(accRec, rtmName) void
  %assert ::ModelReferenceTargetWithGlobalTiming
  %assign args = IDNUM(accRec.Name)
  %assert ISEQUAL(args[0],"ClockTickH")
  %assign sti  = args[1]
  %assign base = "%<::tMdlRefTimingBridge>->clockTickH"
  %assign indx = "%<::tMdlRefGlobalTID>[%<sti>]"
  %return "( *((uint32_T*)(%<base>[%<indx>])) )"
%endfunction


%% Function: FcnGetArgStrForRec ================================================
%% Abstract:
%%   Get the string of additional args for a record.
%%
%function FcnGetArgStrForRec(theRec) void
  %assign retStr = ""
  %assign args   = theRec.Args
  %foreach argIdx = theRec.NumArgs
    %assign retStr = retStr + ", "
    %assign thisarg = args[argIdx]
    %assign retStr = retStr + thisarg
  %endforeach
  %return retStr
%endfunction %% FcnGetArgStrForRec

%endif %% _RTMSPECMACS_

%% [EOF] rtmspecmacs.ttlc
