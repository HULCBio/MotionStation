%% ============================================================================
%% $RCSfile: sfcnmid.tlc,v $
%% $Revision: 1.18.4.3 $ 
%% $Date: 2004/04/14 23:48:53 $
%%
%% Abstract:
%%   This system file creates model_mid.h for S-Function code format
%%
%% Pete Szpak
%% October 09, 1997
%% Copyright 1994-2004 The MathWorks, Inc.
%%
%selectfile NULL_FILE

%% ============================================================================
%% The S-Function file model_mid.h is created as follows:
%%
%% /* File banner */
%%
%% #include <...>
%%
%% static RegNumInputPorts() {...}
%% static RegNumInputPorts() {...}
%%   
%% void  *model_malloc(SimStruct *model_S)
%% {
%%   Necessary RTW declarations
%%   Declare accessed SimStruct variables
%%     
%%   Decalare and setup local SimStruct
%%   Non-finite assignments
%%   Register embedded S-Functions
%%   Block instance data
%%   {
%%     User declarations ..... LibMdlRegCustomCode(buffer, "declaration")
%%     User entry code ....... LibMdlRegCustomCode(buffer, "execution")
%%     User exit code ........ LibMdlRegCustomCode(buffer, "trailer")
%%   }
%% }
%%
%% /* [EOF] model_mid.h */

%if EXISTS("_SFCNMID_") == 0
%assign _SFCNMID_ = 1

%realformat "CONCISE"

%assign opFile = SLibAddModelFile("SystemHeader","Simulink","%<OrigName>_mid")

%openfile bannerBuf
/*
* %<OrigName>_mid.h
*
%<SLibCommonHeaderInfo()>\
*
  %<SLibGenSourcesComment()>
*/
%closefile bannerBuf
%<SLibSetModelFileAttribute(opFile, "Banner", bannerBuf)>
%undef bannerBuf
 
%% Include these for multiple levels of RTW s-functions
%openfile tmpBuf
#include "simstruc.h"
#include "%<Name>.h"
%closefile tmpBuf
%<SLibSetModelFileAttribute(opFile, "Includes", tmpBuf)>
%undef tmpBuf

%% If we are using const blockio or parameters, extern them
%assign pubFile = SLibAddModelFile("SystemHeader","Simulink","%<OrigName>_sf")
%openfile externBuf
%if !LibParametersStructIsEmpty()
  extern %<tParametersType> %<OrigName>_DefaultParameters;
%endif
%if !LibConstBlockIOStructIsEmpty()
  extern %<tConstBlockIOType> %<tInvariantSignals>;
%endif
%closefile externBuf
%if !WHITE_SPACE(externBuf)
  %<SLibSetModelFileAttribute(pubFile, "ExternData", externBuf)>
%endif
%undef externBuf

%openfile fcnsBuf
%% ===========================================================================
%% Parameter Tuning information to map parameters.
%%
%if ParameterTuning == 1

  #include "mdl_info.h"
  #include "%<Name>_pt.c"
%endif

static const char_T *RT_MEMORY_ALLOCATION_ERROR = ...
  "memory allocation error in RTW generated S-Function";

#if defined(MATLAB_MEX_FILE) || defined(RT_MALLOC)
static int_T RegNumInputPorts(SimStruct *S, int_T nInputPorts) {
  _ssSetNumInputPorts(S,nInputPorts);
  return TRUE;
}

static int_T RegNumOutputPorts(SimStruct *S, int_T nOutputPorts) {
  _ssSetNumOutputPorts(S,nOutputPorts);
  return TRUE;
}
#endif

/* instance data for model: %<OrigName> */
void *%<OrigName>_malloc(SimStruct *%<tChildSimStruct>)
{
  %<MIDLocalSDeclarations>\
  %<MIDLocalSRegistration>\
  %%
  %% Buffer up register code, and declare any accessed simstruct variables
  %%
  %openfile tmpBuffer
  %<LibDumpNonFiniteAssignmentCache()>\
  %<MIDSFunctionRegistration>\
  %<MIDBlockInstanceData>\
  %if !LibRegFcnUserDeclarationIsEmpty()
    %<"{">
    %<LibDumpRegFcnUserDeclarationCode()>
  %endif
  %<LibDumpRegFcnUserEntryCode()>\
  %<LibDumpRegFcnUserExitCode()>\
  %if !LibRegFcnUserDeclarationIsEmpty()
    %<"}">
  %endif
  %closefile tmpBuffer
  %if !WHITE_SPACE(tmpBuffer)
    {
      %<tmpBuffer>\
    }
  %endif
  
  return NULL;
}
%closefile fcnsBuf

%<SLibSetModelFileAttribute(opFile, "Functions", fcnsBuf)>

%with CompiledModel
  %undef MIDLocalSDeclarations
  %undef MIDLocalSRegistration
  %undef MIDSFunctionRegistration
  %undef MIDBlockInstanceData
%endwith
%undef tmpBuffer
%undef fcnsBuf


%selectfile NULL_FILE

%endif  %% _SFCNMID_

%% [EOF] sfcnmid.tlc
