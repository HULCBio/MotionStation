%% ============================================================================
%% File : commonhdr_extiolib.tlc
%%
%% Abstract:
%%   This system TLC library file contains functions that are common
%%   between the different code generators for producing the the model's
%%   external IO definition.
%%
%% $Revision: 1.1.8.6 $ 
%% Copyright 1994-2004 The MathWorks, Inc.
%%
%% ============================================================================

%if EXISTS("_COMMONHDR_EXTIOLIB_") == 0
%assign _COMMONHDR_EXTIOLIB_ = 1

%% ============================================================================
%% Create global cache variables to hold each structure definition
%% ============================================================================

%<LibAddToCompiledModel("ExportedGlobalSignalsDefn", 0)>
%<LibAddToCompiledModel("ImportedExternSignalsDefn", 0)>
%<LibAddToCompiledModel("ImportedExternPointerSignalsDefn", 0)>
%<LibAddToCompiledModel("ExportedGlobalDWorkDefn", 0)>
%<LibAddToCompiledModel("ImportedExternDWorkDefn", 0)>
%<LibAddToCompiledModel("ImportedExternPointerDWorkDefn", 0)>
%<LibAddToCompiledModel("ExternalInputsStructDefn", 0)>
%<LibAddToCompiledModel("ExternalOutputsStructDefn", 0)> 

%% Function: FcnGenerateBlockIOExternalSignalDefinition =======================
%% Abstract:
%%   Generate the definition of an external signal from block io
%%
%function FcnGenerateBlockIOExternalSignalDefinition(bo) void
  %openfile tmpFcnBuf
  %with bo
    %if !ISEMPTY(SigSrc)
      %assign blkName = SLibGrBlockName(GrSrc)
      %assign tick    = "'"
    %else
      %assign blkName = "Multiple Blocks"
      %assign tick    = ""
    %endif

    %assign descStr = SLibGetDescriptionForData(bo)
    %assign descStr = ISEMPTY(descStr) ? "" : "\n* " + descStr + "\n"

    %assign comment  = "/* %<tick>%<STRING(blkName)>%<tick>%<descStr> */"
    %assign dataType = SLibGetRecordDataTypeName(bo, "")
    %assign star = (bo.StorageClass == "ImportedExternPointer") ? "*" : ""
    %assign optWidth = (bo.StorageClass == "ImportedExternPointer") ? ...
      "" : LibOptionalVectorWidth(Width)
    extern %<bo.StorageTypeQualifier> %<dataType> ...
      %<star>%<Identifier>%<optWidth>; %<comment>
  %endwith
  %closefile tmpFcnBuf
  %return tmpFcnBuf
%endfunction


%% Function: FcnGenerateRootInportExternalSignalDefinition ====================
%% Abstract:
%%   Generate the definition of an external signal from the root imports
%%
%function FcnGenerateRootInportExternalSignalDefinition(ei, portNum) void
  %openfile tmpFcnBuf
  %with ei
    %assign descStr = SLibGetDescriptionForData(ei)
    %assign descStr = ISEMPTY(descStr) ? "" : "\n* " + descStr + "\n"

    %assign comment  = "/* '%<ei.BlockName>'%<descStr> */"
    %assign dataType  = SLibGetRecordDataTypeName(ei, "")
    %assign star = (ei.StorageClass == "ImportedExternPointer") ? "*" : ""
    %assign optWidth = (ei.StorageClass == "ImportedExternPointer") ? ...
      "" : LibOptionalVectorWidth(Width)
    extern %<ei.StorageTypeQualifier> %<dataType> ...
      %<star>%<Identifier>%<optWidth>; %<comment>
  %endwith
  %closefile tmpFcnBuf
  %return tmpFcnBuf
%endfunction


%% Function: FcnGenerateBlockDWorkExternalDefinition =======================
%% Abstract:
%%   Generate the definition of an external dwork for a block
%%
%function FcnGenerateBlockDWorkExternalDefinition(dwRec) void
  %openfile tmpFcnBuf
  %with dwRec
  %if dwRec.StorageClass == "Custom"
    %% do nothing
  %else
    %assign descStr = SLibGetDescriptionForData(dwRec)
    %assign descStr = ISEMPTY(descStr) ? "" : "\n* " + descStr + "\n"
    
    %assign comment  = "/* %<LibBlockDWorkOwnerComment(dwRec)>%<descStr> */"
    %assign dataType = SLibGetRecordDataTypeName(dwRec, "")
    %assign star = (dwRec.StorageClass == "ImportedExternPointer") ? ...
      "*" : ""
    %assign optWidth = (dwRec.StorageClass == "ImportedExternPointer") ? ...
      "" : LibOptionalVectorWidth(dwRec.Width)
    %assign typeQualifier = dwRec.StorageTypeQualifier
    %assign identifier    = dwRec.Identifier
    extern %<typeQualifier> %<dataType> %<star>%<identifier>%<optWidth>; %<comment>
  %endif
  %endwith
  %closefile tmpFcnBuf
  %return tmpFcnBuf
%endfunction


%% Function: LibCacheExportedGlobalSignalsDefinition ==========================
%% Abstract:
%%      Cache the exported global signals
%%
%function LibCacheExportedGlobalSignalsDefinition() void
  %if CompiledModel.NumExportedGlobalSignals > 0
    %openfile tmpFcnBuffer
    %if CompiledModel.Name == "mextsignals"
      %% Required for internal testing of textsignals model in simulink
      %% engine directory.
      #define myqual
    %endif
    %% external root inport signals
    %if ExternalInputs.NumExportedGlobalSignals > 0
      %foreach idx = ExternalInputs.NumExternalInputs
	%assign extInp = ExternalInputs.ExternalInput[idx]
	%if extInp.StorageClass == "ExportedGlobal"
	  %<FcnGenerateRootInportExternalSignalDefinition(extInp, idx+1)>\
	%endif
      %endforeach
    %endif
    %% external block io signals
    %if BlockOutputs.NumExportedGlobalSignals > 0
      %foreach boIdx = BlockOutputs.NumExternalBlockOutputs
	%assign bo = BlockOutputs.ExternalBlockOutput[boIdx]
	%if bo.StorageClass == "ExportedGlobal"
	  %<FcnGenerateBlockIOExternalSignalDefinition(bo)>\
	%endif
      %endforeach
    %endif
    %closefile tmpFcnBuffer
    %assign ::CompiledModel.ExportedGlobalSignalsDefn = tmpFcnBuffer
  %else
    %assign ::CompiledModel.ExportedGlobalSignalsDefn = ""
  %endif
%endfunction %% LibCacheExportedGlobalSignalsDefinition

	  
	  
%% Function: LibCacheImportedExternSignalsDefinition ==========================
%% Abstract:
%%      Cache the imported extern signals
%%
%function LibCacheImportedExternSignalsDefinition() void
  %if CompiledModel.NumImportedExternSignals > 0
    %openfile tmpFcnBuffer
    %% external block io signals
    %if BlockOutputs.NumImportedExternSignals > 0
      %foreach boIdx = BlockOutputs.NumExternalBlockOutputs
	%assign bo = BlockOutputs.ExternalBlockOutput[boIdx]
	%if bo.StorageClass == "ImportedExtern"
	  %<FcnGenerateBlockIOExternalSignalDefinition(bo)>\
	%endif
      %endforeach
    %endif
    %% external root inport signals
    %if ExternalInputs.NumImportedExternSignals > 0
      %foreach idx = ExternalInputs.NumExternalInputs
	%assign extInp = ExternalInputs.ExternalInput[idx]
	%if extInp.StorageClass == "ImportedExtern"
	  %<FcnGenerateRootInportExternalSignalDefinition(extInp, idx+1)>\
	%endif
      %endforeach
    %endif
    %closefile tmpFcnBuffer
    %assign ::CompiledModel.ImportedExternSignalsDefn = tmpFcnBuffer
  %else
    %assign ::CompiledModel.ImportedExternSignalsDefn = ""
  %endif
%endfunction


%% Function: LibCacheImportedExternPointerSignalsDefinition ===================
%% Abstract:
%%      Cache the imported extern pointer signals
%%
%function LibCacheImportedExternPointerSignalsDefinition() void
  %if CompiledModel.NumImportedExternPointerSignals > 0
    %openfile tmpFcnBuffer
    %% external block io signals
    %if BlockOutputs.NumImportedExternPointerSignals > 0
      %foreach boIdx = BlockOutputs.NumExternalBlockOutputs
	%assign bo = BlockOutputs.ExternalBlockOutput[boIdx]
	%if bo.StorageClass == "ImportedExternPointer"
	  %<FcnGenerateBlockIOExternalSignalDefinition(bo)>\
	%endif
      %endforeach
    %endif
    %% external root inport signals
    %if ExternalInputs.NumImportedExternPointerSignals > 0
      %foreach idx = ExternalInputs.NumExternalInputs
	%assign extInp = ExternalInputs.ExternalInput[idx]
	%if extInp.StorageClass == "ImportedExternPointer"
	  %<FcnGenerateRootInportExternalSignalDefinition(extInp, idx+1)>\
	%endif
      %endforeach
    %endif
    %closefile tmpFcnBuffer
    %assign ::CompiledModel.ImportedExternPointerSignalsDefn = tmpFcnBuffer
  %else
    %assign ::CompiledModel.ImportedExternPointerSignalsDefn = ""
  %endif
%endfunction


%% Function: LibCacheExternalInputsStructDefinition ===========================
%% Abstract:
%%   Cache the external inputs struct definitions in to a buffer that will be 
%%   sent to the output stream latter.
%%
%function LibCacheExternalInputsStructDefinition() void
  %if NumModelInputs > 0
    %openfile tmpFcnBuffer
    %foreach idx = ExternalInputs.NumExternalInputs
      %assign extInp = ExternalInputs.ExternalInput[idx]
      %with extInp
	%if extInp.StorageClass != "Auto"
	  %continue
	%endif
	%assign dataType  = SLibGetRecordDataTypeName(extInp, "")
        %assign optWidth = LibOptionalVectorWidth(Width)
	%if CodeFormat == "S-Function" && !Accelerator
	  %<dataType> *%<Identifier>%<optWidth>; \
	%else
	  %<dataType> %<Identifier>%<optWidth>; \
	%endif
	/* '%<STRING(extInp.BlockName)>' */
	%if extInp.Padding != 0
	  %assign optPadWidth = LibOptionalVectorWidth(extInp.Padding)
	  char pad_%<Identifier>%<optPadWidth>;
	%endif
      %endwith %% extInp
    %endforeach
    %closefile tmpFcnBuffer
    %assign ::CompiledModel.ExternalInputsStructDefn = tmpFcnBuffer
  %else
    %assign ::CompiledModel.ExternalInputsStructDefn = ""
  %endif
%endfunction


%% Function: LibCacheExternalOutputsStructDefinition ==========================
%% Abstract:
%%   Cache the external outputs struct definitions in to a buffer that will be 
%%   sent to the output stream latter.
%%
%function LibCacheExternalOutputsStructDefinition() void
  %if NumModelOutputs > 0
    %openfile tmpFcnBuffer
    %foreach idx = ExternalOutputs.NumExternalOutputs
      %assign extOut       = ExternalOutputs.ExternalOutput[idx]
      %assign sysIdx       = extOut.Block[0]
      %assign blkIdx       = extOut.Block[1]
      %assign outportBlock = System[sysIdx].Block[blkIdx]
      %if SLibExternalOutputIsVirtual(outportBlock)
        %continue
      %endif
      %with outportBlock
	%assign portWidth = LibBlockInputSignalWidth(0)
	%assign dataType  = LibBlockInputSignalDataTypeName(0, "")
      %endwith %% outportBlock
      %assign optWidth = LibOptionalVectorWidth(portWidth)
      %if CodeFormat == "S-Function"
	%<dataType> *%<outportBlock.Identifier>%<optWidth>; \
      %else
	%<dataType> %<outportBlock.Identifier>%<optWidth>; \
      %endif
      /* '%<STRING(outportBlock.Name)>' */
      %if extOut.Padding != 0
	%assign optPadWidth = LibOptionalVectorWidth(extOut.Padding)
	char pad_%<outportBlock.Identifier>%<optPadWidth>;
      %endif
    %endforeach
    %closefile tmpFcnBuffer
    %assign ::CompiledModel.ExternalOutputsStructDefn = tmpFcnBuffer
  %else
    %assign ::CompiledModel.ExternalOutputsStructDefn = ""
  %endif
%endfunction


%% Function: SLibExportedGlobalSignalsIsEmpty =================================
%% Abstract:
%%   Is the cache empty?
%%
%function SLibExportedGlobalSignalsIsEmpty() void
  %<LibTrapCacheAssert(ExportedGlobalSignalsDefn)>
  %return WHITE_SPACE(ExportedGlobalSignalsDefn)
%endfunction


%% Function: SLibDumpExportedGlobalSignalsDefinition ==========================
%% Abstract:
%%   Is the cache empty?
%%
%function SLibDumpExportedGlobalSignalsDefinition() void
  %<LibTrapCacheAssert(ExportedGlobalSignalsDefn)>
  %assign retVal = ExportedGlobalSignalsDefn
  %<SLibResetTLCGlobal("ExportedGlobalSignalsDefn")>
  %return retVal
%endfunction


%% Function: SLibImportedExternSignalsIsEmpty =================================
%% Abstract:
%%   Is the cache empty?
%%
%function SLibImportedExternSignalsIsEmpty() void
  %<LibTrapCacheAssert(ImportedExternSignalsDefn)>
  %return WHITE_SPACE(ImportedExternSignalsDefn)
%endfunction


%% Function: SLibDumpImportedExternSignalsDefinition ==========================
%% Abstract:
%%   Is the cache empty?
%%
%function SLibDumpImportedExternSignalsDefinition() void
  %<LibTrapCacheAssert(ImportedExternSignalsDefn)>
  %assign retVal = ImportedExternSignalsDefn
  %<SLibResetTLCGlobal("ImportedExternSignalsDefn")>
  %return retVal
%endfunction


%% Function: SLibImportedExternPointerSignalsIsEmpty ==========================
%% Abstract:
%%   Is the cache empty?
%%
%function SLibImportedExternPointerSignalsIsEmpty() void
  %<LibTrapCacheAssert(ImportedExternPointerSignalsDefn)>
  %return WHITE_SPACE(ImportedExternPointerSignalsDefn)
%endfunction


%% Function: SLibDumpImportedExternPointerSignalsDefinition ===================
%% Abstract:
%%   Is the cache empty?
%%
%function SLibDumpImportedExternPointerSignalsDefinition() void
  %<LibTrapCacheAssert(ImportedExternPointerSignalsDefn)>
  %assign retVal = ImportedExternPointerSignalsDefn
  %<SLibResetTLCGlobal("ImportedExternPointerSignalsDefn")>
  %return retVal
%endfunction


%% Function: SLibExportedGlobalDWorkIsEmpty =================================
%% Abstract:
%%   Is the cache empty?
%%
%function SLibExportedGlobalDWorkIsEmpty() void
  %<LibTrapCacheAssert(ExportedGlobalDWorkDefn)>
  %return WHITE_SPACE(ExportedGlobalDWorkDefn)
%endfunction


%% Function: SLibDumpExportedGlobalDWorkDefinition ==========================
%% Abstract:
%%   Is the cache empty?
%%
%function SLibDumpExportedGlobalDWorkDefinition() void
  %<LibTrapCacheAssert(ExportedGlobalDWorkDefn)>
  %assign retVal = ExportedGlobalDWorkDefn
  %<SLibResetTLCGlobal("ExportedGlobalDWorkDefn")>
  %return retVal
%endfunction


%% Function: SLibImportedExternDWorkIsEmpty =================================
%% Abstract:
%%   Is the cache empty?
%%
%function SLibImportedExternDWorkIsEmpty() void
  %<LibTrapCacheAssert(ImportedExternDWorkDefn)>
  %return WHITE_SPACE(ImportedExternDWorkDefn)
%endfunction


%% Function: SLibDumpImportedExternDWorkDefinition ==========================
%% Abstract:
%%   Is the cache empty?
%%
%function SLibDumpImportedExternDWorkDefinition() void
  %<LibTrapCacheAssert(ImportedExternDWorkDefn)>
  %assign retVal = ImportedExternDWorkDefn
  %<SLibResetTLCGlobal("ImportedExternDWorkDefn")>
  %return retVal
%endfunction


%% Function: SLibImportedExternPointerDWorkIsEmpty ==========================
%% Abstract:
%%   Is the cache empty?
%%
%function SLibImportedExternPointerDWorkIsEmpty() void
  %<LibTrapCacheAssert(ImportedExternPointerDWorkDefn)>
  %return WHITE_SPACE(ImportedExternPointerDWorkDefn)
%endfunction


%% Function: SLibDumpImportedExternPointerDWorkDefinition ===================
%% Abstract:
%%   Is the cache empty?
%%
%function SLibDumpImportedExternPointerDWorkDefinition() void
  %<LibTrapCacheAssert(ImportedExternPointerDWorkDefn)>
  %assign retVal = ImportedExternPointerDWorkDefn
  %<SLibResetTLCGlobal("ImportedExternPointerDWorkDefn")>
  %return retVal
%endfunction


%% Function: LibExternalInputsStructIsEmpty ===================================
%% Abstract:
%%   Is the cache empty?
%%
%function LibExternalInputsStructIsEmpty() void
  %<LibTrapCacheAssert(ExternalInputsStructDefn)>
  %return WHITE_SPACE(ExternalInputsStructDefn)
%endfunction


%% Function: LibDumpExternalInputsStructDefinition ============================
%% Abstract:
%%   Is the cache empty?
%%
%function LibDumpExternalInputsStructDefinition() void
  %<LibTrapCacheAssert(ExternalInputsStructDefn)>
  %assign retVal = ExternalInputsStructDefn
  %<SLibResetTLCGlobal("ExternalInputsStructDefn")>
  %return retVal
%endfunction


%% Function: LibExternalOutputsStructIsEmpty ==================================
%% Abstract:
%%   Is the cache empty?
%%
%function LibExternalOutputsStructIsEmpty() void
  %<LibTrapCacheAssert(ExternalOutputsStructDefn)>
  %return WHITE_SPACE(ExternalOutputsStructDefn)
%endfunction


%% Function: LibDumpExternalOutputsStructDefinition ===========================
%% Abstract:
%%   Is the cache empty?
%%
%function LibDumpExternalOutputsStructDefinition() void
  %<LibTrapCacheAssert(ExternalOutputsStructDefn)>
  %assign retVal = ExternalOutputsStructDefn
  %<SLibResetTLCGlobal("ExternalOutputsStructDefn")>
  %return retVal
%endfunction

%endif %% _COMMONHDR_EXTIOLIB_
