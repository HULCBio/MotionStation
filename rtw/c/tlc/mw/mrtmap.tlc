%% ============================================================================
%% $RCSfile: mrtmap.tlc,v $
%% $Revision: 1.2.4.1 $ 
%% $Date: 2002/09/08 20:32:21 $
%%
%% Abstract:
%%   The map file contains the mapping information for monitoring block
%%   outputs and modifying block parameters.
%%
%% Copyright 1994-2002 The MathWorks, Inc.
%%
%selectfile NULL_FILE

%if EXISTS("_MRTMAP_") == 0
%assign _MRTMAP_ = 1

%realformat "CONCISE"

%if RTWVerbose
%selectfile STDOUT
### Creating data type transition file %<Name>_reg_dt.h
%selectfile NULL_FILE
%endif

%openfile ModelDotDT = "%<Name>_reg_dt.h"
/*
 * %<Name>_reg_dt.h
 *
 */

%assign usingStatic = !UsingMalloc
%assign numDataTypes = LibGetNumDataTypesInModel()
%%
%% Dynamic memory allocation (run-time instance)
%%
{
  DataTypeTransInfo *dtInfo;

  %if numDataTypes > 0
    uint_T *DataTypeSizes;
    const char_T **DataTypeNames;
  %endif
  %if !SLibBlockIODataTypeTransitionTableIsEmpty()

    DataTypeTransition      *BTransitions;
    DataTypeTransitionTable *BTransTable;
    %with CompiledModel.GlobalMemoryMap
      %if !ISEMPTY(SLibGetMapStructData("signal"))
	%<tBlockIOType> *%<tBlockIO> = (%<tBlockIOType> *) ...
	  %<RTMGet("BlockIO")>;
      %endif
      %if !ISEMPTY(SLibGetMapStructData("dwork"))
	%<tDWorkType> *%<tDWork> = (%<tDWorkType> *) ...
	  %<RTMGet("DWork")>;
      %endif
    %endwith
  %endif
  %if !SLibParametersDataTypeTransitionTableIsEmpty()

    DataTypeTransition      *PTransitions;
    DataTypeTransitionTable *PTransTable;
    %if !LibParametersStructIsEmpty()
      %<tParametersType> *%<tParameters> = (%<tParametersType> *) ...
	%<RTMGet("DefaultParam")>;
    %endif
  %endif
	
  %%
  %% Setup data type info
  %%
  /* structure to hold model's data type transition information */
  dtInfo = (DataTypeTransInfo *) malloc(sizeof(DataTypeTransInfo));

  %<RTMChkMemAndReturnIfErr("dtInfo")>;

  (void)memset((char_T *) dtInfo, 0, sizeof(DataTypeTransInfo));

  dtInfo->numDataTypes  = %<numDataTypes>;

  %<RTMSet("ModelMappingInfo", "dtInfo")>;

  %%
  %% Setup data types
  %%
  %if numDataTypes > 0
    /* data type sizes */
    DataTypeSizes = (uint_T *) malloc(%<numDataTypes> * sizeof(uint_T));
    %<RTMChkMemAndReturnIfErr("DataTypeSizes")>;
  
    dtInfo->dataTypeSizes = DataTypeSizes;
  
    %<SLibDumpDataTypeSizeTable()>\

    /* data type names */
    DataTypeNames = (const char_T **) ...
      malloc(%<numDataTypes> * sizeof(char_T *));
    %<RTMChkMemAndReturnIfErr("DataTypeNames")>;
  
    dtInfo->dataTypeNames = DataTypeNames;
  
    %<SLibDumpDataTypeNameTable()>\
  %endif
  %%
  %% Setup BlockIO
  %%
  %if !SLibBlockIODataTypeTransitionTableIsEmpty()
    %assign nTrans = SLibGetBlockIOMapNumDataSections()
  
    /* data type transitions for block I/O structure */
    BTransitions = (DataTypeTransition *)
    malloc(%<nTrans> * sizeof(DataTypeTransition));

    %<RTMChkMemAndReturnIfErr("BTransitions")>;
  
    %<SLibDumpBlockIODataTypeTransitionTable()>\
  
    /* data type transition table for block I/O structure */
    BTransTable = (DataTypeTransitionTable *)
    malloc(sizeof(DataTypeTransitionTable));
  
    %<RTMChkMemAndReturnIfErr("BTransTable")>;
  
    %<SLibDumpBlockIOMapInfo()>\
  
    /* attach block I/O transition table */
    dtInfo->B = BTransTable;
  %endif
  %%
  %% Setup Parameters
  %%
  %if !SLibParametersDataTypeTransitionTableIsEmpty()
    %assign nTrans = SLibGetParameterMapNumDataSections()
    
    /* data type transitions for parameters structure */
    PTransitions = (DataTypeTransition *)
    malloc(%<nTrans> * sizeof(DataTypeTransition));
    
    %<RTMChkMemAndReturnIfErr("PTransitions")>;
    
    %<SLibDumpParametersDataTypeTransitionTable()>\
    
    /* data type transition table for parameters structure */
    PTransTable = (DataTypeTransitionTable *)
    malloc(sizeof(DataTypeTransitionTable));
    
    %<RTMChkMemAndReturnIfErr("PTransTable")>;
    
    %<SLibDumpParametersMapInfo()>\
    
    /* attach parameters transition table */
    dtInfo->P = PTransTable;
  %endif
}

/* [EOF] %<Name>_reg_dt.h */
%closefile ModelDotDT
%selectfile NULL_FILE

%endif %% _MRTMAP_

%% [EOF] mrtmap.tlc
