%% SYSTLC: Generic Real-Time Target with dynamic memory allocation \
%%    TMF: grt_malloc_default_tmf MAKE: make_rtw EXTMODE: ext_comm
%% SYSTLC: Visual C/C++ Project Makefile only for the "grt_malloc" target \
%%    TMF: grt_malloc_msvc.tmf MAKE: make_rtw EXTMODE: ext_comm
%%
%% $RCSfile: grt_malloc.tlc,v $
%% $Revision: 1.22.4.4 $
%% $Date: 2004/04/14 23:43:53 $
%%
%% Copyright 1994-2003 The MathWorks, Inc.
%% Abstract: Generic real-time system target file.
%%
%selectfile NULL_FILE

%assign MatFileLogging = 1
%assign CodeFormat = "RealTimeMalloc"

%assign TargetType = "RT"
%assign Language   = "C"

%assign GenRTModel = 1

%include "codegenentry.tlc"


%% The contents between 'BEGIN_RTW_OPTIONS' and 'END_RTW_OPTIONS' are strictly 
%% written by the standard format. We need to use this cell structure in RTW 
%% options GUI function rtwoptionsdlg.m file.
%%
/%
  BEGIN_RTW_OPTIONS

  % second page of category item
  roi = 1;     % rtwoptions index
  rtwoptions(roi).prompt        = 'GRT malloc code generation options';
  rtwoptions(roi).type          = 'Category';
  rtwoptions(roi).enable        = 'on';  
  rtwoptions(roi).default       = 2;  % number of items under this category
                                      % excluding this one.
  rtwoptions(roi).popupstrings  = '';
  rtwoptions(roi).tlcvariable   = '';
  rtwoptions(roi).tooltip       = '';
  rtwoptions(roi).callback      = '';
  rtwoptions(roi).opencallback  = '';
  rtwoptions(roi).closecallback = '';
  rtwoptions(roi).makevariable  = '';

  roi = roi + 1;
  rtwoptions(roi).prompt        = 'MAT-file variable name modifier';
  rtwoptions(roi).type          = 'Popup';
  rtwoptions(roi).default       = 'rt_';
  rtwoptions(roi).popupstrings  = 'rt_|_rt|none';
  rtwoptions(roi).tlcvariable   = 'LogVarNameModifier';
  rtwoptions(roi).tooltip       = ['prefix rt_ to variable name,', sprintf('\n'), ...
    'append _rt to variable name,', sprintf('\n'), 'or no modification'];

  roi = roi + 1;
  rtwoptions(roi).prompt       = 'Ignore custom storage classes';
  rtwoptions(roi).type         = 'Checkbox';
  rtwoptions(roi).default      = 'on';
  rtwoptions(roi).tlcvariable  = 'IgnoreCustomStorageClasses';
  rtwoptions(roi).tooltip      = ['Treat custom storage classes as ''Auto''.'];

  rtwoptions(roi).opencallback = [ ...
    'objTag = ''Ignore custom storage classes_CheckboxTag'';', ...
    'obj = findobj(DialogFig,''Tag'',objTag);', ...
    'set(obj, ''Enable'', sl(''onoff'',ecoderinstalled));'];

  roi = roi + 1;
  rtwoptions(roi).prompt         = 'External Mode code generation options';
  rtwoptions(roi).type           = 'Category';
  rtwoptions(roi).enable         = 'on';  
  rtwoptions(roi).default        = 5;   % number of items under this category
                                      % excluding this one.
  rtwoptions(roi).popupstrings  = '';
  rtwoptions(roi).tlcvariable   = '';
  rtwoptions(roi).tooltip       = '';
  rtwoptions(roi).callback      = '';
  rtwoptions(roi).opencallback  = '';
  rtwoptions(roi).closecallback = '';
  rtwoptions(roi).makevariable  = '';

  roi = roi + 1;
  rtwoptions(roi).prompt         = 'External mode';
  rtwoptions(roi).type           = 'Checkbox';
  rtwoptions(roi).default        = 'off';
  rtwoptions(roi).tlcvariable    = 'ExtMode';
  rtwoptions(roi).makevariable   = 'EXT_MODE';
  rtwoptions(roi).tooltip        = ...
    ['Adds communication support',sprintf('\n'), ...
    'for use with Simulink external mode'];
  
  % Enable/disable other external mode controls.
  rtwoptions(roi).callback       = [ ...
    'DialogFig = get(gcbo,''Parent'');',...
    'sl(''extmodecallback'', ''extmode_checkbox_callback'', DialogFig);', ...
    ];

  roi = roi + 1;
  rtwoptions(roi).prompt         = 'Transport';
  rtwoptions(roi).type           = 'Popup';
  rtwoptions(roi).default        = 'tcpip';
  rtwoptions(roi).popupstrings   = ['tcpip|', ...
                                  'serial_win32'];
  rtwoptions(roi).tlcvariable    = 'ExtModeTransport';
  rtwoptions(roi).makevariable   = 'EXTMODE_TRANSPORT';
  rtwoptions(roi).tooltip        = ...
    ['Chooses transport mechanism for external mode'];

  % Synchronize with "External mode" checkbox option
  rtwoptions(roi).opencallback   = [ ...
    'ExtModeTable = {''tcpip''         ''ext_comm'';', ...
                     '''serial_win32'' ''ext_serial_win32_comm''};', ...
    'ud = DialogUserData;', ...
    'ud = extmodecallback(''transport_popup_opencallback'',model,DialogFig,ud,ExtModeTable);', ...
    'DialogUserData = ud;', ...
    ];
				
  % Set extmode mex-file according to extmode transport mechanism.
  rtwoptions(roi).closecallback  = [ ...
    'ExtModeTable = {''tcpip''         ''ext_comm'';', ...
                     '''serial_win32'' ''ext_serial_win32_comm''};', ...
    'ud = DialogUserData;', ...
    'ud = extmodecallback(''transport_popup_closecallback'',model,DialogFig,ud,ExtModeTable);', ...
    'DialogUserData = ud;', ...
    ];

  roi = roi + 1;
  rtwoptions(roi).prompt         = 'Static memory allocation';
  rtwoptions(roi).type           = 'Checkbox';
  rtwoptions(roi).default        = 'off';
  rtwoptions(roi).tlcvariable    = 'ExtModeStaticAlloc';
  rtwoptions(roi).makevariable   = 'EXTMODE_STATIC_ALLOC';
  rtwoptions(roi).tooltip        = ...
    ['Forces external mode to use static',sprintf('\n'), ...
    'instead of dynamic memory allocation'];
  
  % Enable/disable external mode static allocation size selection.
  rtwoptions(roi).callback       = [ ...
    'DialogFig = get(gcbo,''Parent'');',...
    'sl(''extmodecallback'', ''staticmem_checkbox_callback'', DialogFig);', ...
    ];

  % Synchronize with "External mode" checkbox option
  rtwoptions(roi).opencallback   = [ ...
    'extmodecallback(''staticmem_checkbox_opencallback'',DialogFig);', ...
    ];
  
  roi = roi + 1;
  rtwoptions(roi).prompt         = 'Static memory buffer size';
  rtwoptions(roi).type           = 'Edit';
  rtwoptions(roi).default        = '1000000';
  rtwoptions(roi).tlcvariable    = 'ExtModeStaticAllocSize';
  rtwoptions(roi).makevariable   = 'EXTMODE_STATIC_ALLOC_SIZE';
  rtwoptions(roi).tooltip        = ...
    ['Size of external mode static allocation buffer'];

  % Synchronize with "External mode static allocation" option
  rtwoptions(roi).opencallback   = [ ...
    'extmodecallback(''staticmemsize_edit_opencallback'',DialogFig);', ...
    ];
				
  roi = roi + 1;
  rtwoptions(roi).prompt       = 'External mode testing';
  rtwoptions(roi).type         = 'NonUI';
  rtwoptions(roi).default      = '0';
  rtwoptions(roi).tlcvariable  = 'ExtModeTesting';
  rtwoptions(roi).makevariable = 'TMW_EXTMODE_TESTING';
  rtwoptions(roi).tooltip      = ...
    ['Internal testing flag for Simulink external mode'];


  % Override the default setting for model name prefixing because
  % the generated code is typically used in multiple models.
  roi = roi + 1;
  rtwoptions(roi).default       = 'on';
  rtwoptions(roi).tlcvariable   = 'PrefixModelToSubsysFcnNames';

  %----------------------------------------%
  % Configure RTW code generation settings %
  %----------------------------------------%
  
  rtwgensettings.BuildDirSuffix = '_grt_malloc_rtw';
  rtwgensettings.UsingMalloc    = 'yes';
  
  END_RTW_OPTIONS 
 %/
/%
  BEGIN_CONFIGSET_TARGET_COMPONENT
 
  targetComponentClass = 'Simulink.GRTTargetCC(''malloc'')';
  
  END_CONFIGSET_TARGET_COMPONENT
 %/