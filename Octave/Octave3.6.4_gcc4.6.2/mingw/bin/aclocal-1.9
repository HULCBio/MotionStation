#!/bin/perl
# -*- perl -*-
# Generated from aclocal.in; do not edit by hand.

eval 'case $# in 0) exec /bin/perl -S "$0";; *) exec /bin/perl -S "$0" "$@";; esac'
    if 0;

# aclocal - create aclocal.m4 by scanning configure.ac

# Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005
#           Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

# Written by Tom Tromey <tromey@redhat.com>.

BEGIN
{
  my $perllibdir = $ENV{'perllibdir'} || '/mingw/share/automake-1.9';
  unshift @INC, (split ':', $perllibdir);
}

use Automake::Config;
use Automake::General;
use Automake::Configure_ac;
use Automake::Channels;
use Automake::XFile;
use Automake::FileUtils;
use File::Basename;
use File::stat;
use Cwd;

# Note that this isn't pkgdatadir, but a separate directory.
# Note also that the versioned directory is handled later.
$acdir = '/mingw/share/aclocal';
$default_acdir = $acdir;
# contains a list of directories, one per line, to be added
# to the dirlist in addition to $acdir, as if -I had been
# added to the command line.  If acdir has been redirected,
# we will also check the specified acdir (this is done later).
$default_dirlist = "$default_acdir/dirlist";

# Some globals.

# configure.ac or configure.in.
my $configure_ac;

# Output file name.
$output_file = 'aclocal.m4';

# Modification time of the youngest dependency.
$greatest_mtime = 0;

# Option --force.
$force_output = 0;

# Which macros have been seen.
%macro_seen = ();

# Which files have been seen.
%file_seen = ();

# Remember the order into which we scanned the files.
# It's important to output the contents of aclocal.m4 in the opposite order.
# (Definitions in first files we have scanned should override those from
# later files.  So they must appear last in the output.)
@file_order = ();

# Map macro names to file names.
%map = ();

# Ditto, but records the last definition of each macro as returned by --trace.
%map_traced_defs = ();

# Map file names to file contents.
%file_contents = ();

# Map file names to included files (transitively closed).
%file_includes = ();

# How much to say.
$verbose = 0;

# Matches a macro definition.
#   AC_DEFUN([macroname], ...)
# or
#   AC_DEFUN(macroname, ...)
# When macroname is `['-quoted , we accept any character in the name,
# except `]'.  Otherwise macroname stops on the first `]', `,', `)',
# or `\n' encountered.
$ac_defun_rx =
  "(?:AU_ALIAS|A[CU]_DEFUN|AC_DEFUN_ONCE)\\((?:\\[([^]]+)\\]|([^],)\n]+))";

# Matches an AC_REQUIRE line.
$ac_require_rx = "AC_REQUIRE\\((?:\\[([^]]+)\\]|([^],)\n]+))\\)";

# Matches an m4_include line
$m4_include_rx = "(?:m4_)?(s?)include\\((?:\\[([^]]+)\\]|([^],)\n]+))\\)";


################################################################

# Check macros in acinclude.m4.  If one is not used, warn.
sub check_acinclude ()
{
  foreach my $key (keys %map)
    {
      # FIXME: should print line number of acinclude.m4.
      warn ("aclocal: warning: macro `$key' defined in "
	    . "acinclude.m4 but never used\n")
	if $map{$key} eq 'acinclude.m4' && ! $macro_seen{$key};
    }
}

################################################################

# Scan all the installed m4 files and construct a map.
sub scan_m4_files (@)
{
    local (@dirlist) = @_;

    # First, scan configure.ac.  It may contain macro definitions,
    # or may include other files that define macros.
    &scan_file ($configure_ac, 'aclocal');

    # Then, scan acinclude.m4 if it exists.
    if (-f 'acinclude.m4')
    {
	&scan_file ('acinclude.m4', 'aclocal');
    }

    # Finally, scan all files in our search path.
    local ($m4dir);
    foreach $m4dir (@dirlist)
    {
	if (! opendir (DIR, $m4dir))
	  {
	    print STDERR "aclocal: couldn't open directory `$m4dir': $!\n";
	    exit 1;
	  }

	local ($file, $fullfile);
	# We reverse the directory contents so that foo2.m4 gets
	# used in preference to foo1.m4.
	foreach $file (reverse sort grep (! /^\./, readdir (DIR)))
	{
	    # Only examine .m4 files.
	    next unless $file =~ /\.m4$/;

	    # Skip some files when running out of srcdir.
	    next if $file eq 'aclocal.m4';

	    $fullfile = File::Spec->canonpath ("$m4dir/$file");
	    &scan_file ($fullfile, 'aclocal');
	}
	closedir (DIR);
    }

    # Construct a new function that does the searching.  We use a
    # function (instead of just evaluating $search in the loop) so that
    # "die" is correctly and easily propagated if run.
    my $search = "sub search {\nmy \$found = 0;\n";
    foreach my $key (reverse sort keys %map)
    {
	$search .= ('if (/\b\Q' . $key . '\E(?!\w)/) { & add_macro ("' . $key
		    . '"); $found = 1; }' . "\n");
    }
    $search .= "return \$found;\n};\n";
    eval $search;
    die "internal error: $@\n search is $search" if $@;
}

################################################################

# Add a macro to the output.
sub add_macro ($)
{
    local ($macro) = @_;

    # Ignore unknown required macros.  Either they are not really
    # needed (e.g., a conditional AC_REQUIRE), in which case aclocal
    # should be quiet, or they are needed and Autoconf itself will
    # complain when we trace for macro usage later.
    return unless defined $map{$macro};

    print STDERR "aclocal: saw macro $macro\n" if $verbose;
    $macro_seen{$macro} = 1;
    &add_file ($map{$macro});
}

# scan_configure_dep ($file)
# --------------------------
# Scan a configure dependency (configure.ac, or separate m4 files)
# for uses of known macros and AC_REQUIREs of possibly unknown macros.
# Recursively scan m4_included files.
my %scanned_configure_dep = ();
sub scan_configure_dep ($)
{
  my ($file) = @_;
  # Do not scan a file twice.
  return ()
    if exists $scanned_configure_dep{$file};
  $scanned_configure_dep{$file} = 1;

  my $mtime = mtime $file;
  $greatest_mtime = $mtime if $greatest_mtime < $mtime;

  my $contents = exists $file_contents{$file} ?
    $file_contents{$file} : contents $file;

  my $line = 0;
  my @rlist = ();
  my @ilist = ();
  foreach (split ("\n", $contents))
    {
      ++$line;
      # Remove comments from current line.
      s/\bdnl\b.*$//;
      s/\#.*$//;

      while (/$m4_include_rx/go)
	{
	  my $ifile = $2 || $3;
	  # Skip missing `sinclude'd files.
	  next if $1 eq 's' && ! -f $ifile;
	  push @ilist, $ifile;
	}

      while (/$ac_require_rx/go)
	{
	  push (@rlist, $1 || $2);
	}

      # The search function is constructed dynamically by
      # scan_m4_files.  The last parenthetical match makes sure we
      # don't match things that look like macro assignments or
      # AC_SUBSTs.
      if (! &search && /(^|\s+)(AM_[A-Z0-9_]+)($|[^\]\)=A-Z0-9_])/)
	{
	  # Macro not found, but AM_ prefix found.
	  # Make this just a warning, because we do not know whether
	  # the macro is actually used (it could be called conditionally).
	  warn ("aclocal:$file:$line: warning: "
		. "macro `$2' not found in library\n");
	}
    }

  add_macro ($_) foreach (@rlist);
  &scan_configure_dep ($_) foreach (@ilist);
}

# Add a file to output.
sub add_file ($)
{
  local ($file) = @_;

  # Only add a file once.
  return if ($file_seen{$file});
  $file_seen{$file} = 1;

  scan_configure_dep $file;
}

# Point to the documentation for underquoted AC_DEFUN only once.
my $underquoted_manual_once = 0;

# scan_file ($FILE, $WHERE)
# -------------------------
# Scan a single M4 file ($FILE), and all files it includes.
# Return the list of included files.
# $WHERE is the location to use in the diagnostic if the file
# does not exist.
sub scan_file ($$)
{
  my ($file, $where) = @_;

  # Do not scan the same file twice.
  return @$file_includes{$file} if exists $file_includes{$file};
  # Prevent potential infinite recursion (if two files include each other).
  return () if exists $file_contents{$file};

  unshift @file_order, $file;

  if (! -e $file)
    {
      print STDERR "$where: file `$file' does not exist\n";
      exit 1;
    }

  my $fh = new Automake::XFile $file;
  my $contents = '';
  my @inc_files = ();
  my %inc_lines = ();
  while ($_ = $fh->getline)
    {
      # Ignore `##' lines.
      next if /^##/;

      $contents .= $_;

      while (/$ac_defun_rx/go)
	{
	  if (! defined $1)
	    {
	      print STDERR "$file:$.: warning: underquoted definition of $2\n";
	      print STDERR "  run info '(automake)Extending aclocal'\n"
		. "  or see http://sources.redhat.com/automake/"
		. "automake.html#Extending-aclocal\n"
		unless $underquoted_manual_once;
	      $underquoted_manual_once = 1;
	    }
	  my $macro = $1 || $2;
	  if (! defined $map{$macro})
	    {
	      print STDERR "aclocal: found macro $macro in $file: $.\n"
		if $verbose;
	      $map{$macro} = $file;
	    }
	  else
	    {
	      # Note: we used to give an error here if we saw a
	      # duplicated macro.  However, this turns out to be
	      # extremely unpopular.  It causes actual problems which
	      # are hard to work around, especially when you must
	      # mix-and-match tool versions.
	      print STDERR "aclocal: ignoring macro $macro in $file: $.\n"
		if $verbose;
	    }
	}

      while (/$m4_include_rx/go)
	{
	  my $ifile = $2 || $3;
	  # Skip missing `sinclude'd files.
	  next if $1 eq 's' && ! -f $ifile;
	  push (@inc_files, $ifile);
	  $inc_lines{$ifile} = $.;
	}
    }
  $file_contents{$file} = $contents;

  # For some reason I don't understand, it does not work
  # to do `map { scan_file ($_, ...) } @inc_files' below.
  # With Perl 5.8.2 it undefines @inc_files.
  my @copy = @inc_files;
  my @all_inc_files = (@inc_files,
		       map { scan_file ($_, "$file:$inc_lines{$_}") } @copy);
  $file_includes{$file} = \@all_inc_files;
  return @all_inc_files;
}

# strip_redundant_includes (%FILES)
# ---------------------------------
# Each key in %FILES is a file that must be present in the output.
# However some of these files might already include other files in %FILES,
# so there is no point in including them another time.
# This removes items of %FILES which are already included by another file.
sub strip_redundant_includes (%)
{
  my %files = @_;

  # Always include acinclude.m4, even if it does not appear to be used.
  $files{'acinclude.m4'} = 1 if -f 'acinclude.m4';
  # File included by $configure_ac are redundant.
  $files{$configure_ac} = 1;

  # Files at the end of @file_order should override those at the beginning,
  # so it is important to preserve these trailing files.  We can remove
  # a file A if it is going to be output before a file B that includes
  # file A, not the converse.
  foreach my $file (reverse @file_order)
    {
      next unless exists $files{$file};
      foreach my $ifile (@{$file_includes{$file}})
	{
	  next unless exists $files{$ifile};
	  delete $files{$ifile};
	  print STDERR "$ifile is already included by $file\n"
	    if $verbose;
	}
    }

  # configure.ac is implicitly included.
  delete $files{$configure_ac};

  return %files;
}

sub trace_used_macros ()
{
  my %files = map { $map{$_} => 1 } keys %macro_seen;
  %files = strip_redundant_includes %files;

  my $traces = ($ENV{AUTOM4TE} || 'autom4te');
  $traces .= " --language Autoconf-without-aclocal-m4 ";
  # All candidate files.
  $traces .= join (' ', grep { exists $files{$_} } @file_order) . " ";
  # All candidate macros.
  $traces .= join (' ', map { "--trace='$_:\$f:\$n:\$1'" } ('AC_DEFUN',
							    'AC_DEFUN_ONCE',
							    'AU_DEFUN',
							    keys %macro_seen));

  print STDERR "aclocal: running $traces $configure_ac\n" if $verbose;

  my $tracefh = new Automake::XFile ("$traces $configure_ac |");

  my %traced = ();

  while ($_ = $tracefh->getline)
    {
      chomp;
      my ($file, $macro, $arg1) = split (/:/);

      $traced{$macro} = 1 if $macro_seen{$macro};

      $map_traced_defs{$arg1} = $file
	if ($macro eq 'AC_DEFUN'
	    || $macro eq 'AC_DEFUN_ONCE'
	    || $macro eq 'AU_DEFUN');
    }

  $tracefh->close;

  return %traced;
}

sub scan_configure ()
{
  # Make sure we include acinclude.m4 if it exists.
  if (-f 'acinclude.m4')
    {
      add_file ('acinclude.m4');
    }
  scan_configure_dep ($configure_ac);
}

################################################################

# Write output.
sub write_aclocal ($@)
{
  my ($output_file, @macros) = @_;
  my $output = '';

  my %files = ();
  # Get the list of files containing definitions for the macros used.
  # (Filter out unused macro definitions with $map_traced_defs.  This
  # can happen when an Autoconf macro is conditionally defined:
  # aclocal sees the potential definition, but this definition is
  # actually never processed and the Autoconf implementation is used
  # instead.)
  for my $m (@macros)
    {
      $files{$map{$m}} = 1 if $map{$m} eq $map_traced_defs{$m};
    }
  %files = strip_redundant_includes %files;

  for $file (grep { exists $files{$_} } @file_order)
    {
      # Check the time stamp of this file, and all files it includes.
      for my $ifile ($file, @{$file_includes{$file}})
	{
	  my $mtime = mtime $ifile;
	  $greatest_mtime = $mtime if $greatest_mtime < $mtime;
	}

      # If the file to add looks like outside the project, copy it
      # to the output.  The regex catches filenames starting with
      # things like `/', `\', or `c:\'.
      if ($file =~ m,^(?:\w:)?[\\/],)
	{
	  $output .= $file_contents{$file} . "\n";
	}
      else
	{
	  # Otherwise, simply include the file.
	  $output .= "m4_include([$file])\n";
	}
    }

  # Nothing to output?!
  # FIXME: Shouldn't we diagnose this?
  return if ! length ($output);

  # We used to print `# $output_file generated automatically etc.'  But
  # this creates spurious differences when using autoreconf.  Autoreconf
  # creates aclocal.m4t and then rename it to aclocal.m4, but the
  # rebuild rules generated by Automake create aclocal.m4 directly --
  # this would gives two ways to get the same file, with a different
  # name in the header.
  $output = "# generated automatically by aclocal $VERSION -*- Autoconf -*-

# Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
# 2005  Free Software Foundation, Inc.
# This file is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

$output";

  # We try not to update $output_file unless necessary, because
  # doing so invalidate Autom4te's cache and therefore slows down
  # tools called after aclocal.
  #
  # We need to overwrite $output_file in the following situations.
  #   * The --force option is in use.
  #   * One of the dependencies is younger.
  #     (Not updating $output_file in this situation would cause
  #     make to call aclocal in loop.)
  #   * The contents of the current file are different from what
  #     we have computed.
  if (!$force_output
      && $greatest_mtime < mtime ($output_file)
      && $output eq contents ($output_file))
    {
      print STDERR "aclocal: $output_file unchanged\n" if $verbose;
      return;
    }

  print STDERR "aclocal: writing $output_file\n" if $verbose;

  my $out = new Automake::XFile "> $output_file";
  print $out $output;
  return;
}

################################################################

# Print usage and exit.
sub usage ($)
{
  local ($status) = @_;

  print "Usage: aclocal [OPTIONS] ...\n\n";
  print "\
Generate `aclocal.m4' by scanning `configure.ac' or `configure.in'

  --acdir=DIR           directory holding config files
  --help                print this help, then exit
  -I DIR                add directory to search list for .m4 files
  --force               always update output file
  --output=FILE         put output in FILE (default aclocal.m4)
  --print-ac-dir        print name of directory holding m4 files
  --verbose             don't be silent
  --version             print version number, then exit

Report bugs to <bug-automake\@gnu.org>.\n";

  exit $status;
}

# Parse command line.
sub parse_arguments (@)
{
  local (@arglist) = @_;
  local (@dirlist);
  local ($print_and_exit) = 0;

  while (@arglist)
    {
      if ($arglist[0] =~ /^--acdir=(.+)$/)
	{
	  $acdir = $1;
	}
      elsif ($arglist[0] =~/^--output=(.+)$/)
	{
	  $output_file = $1;
	}
      elsif ($arglist[0] eq '-I')
	{
	  shift (@arglist);
	  push (@dirlist, $arglist[0]);
	}
      elsif ($arglist[0] eq '--print-ac-dir')
	{
	  $print_and_exit = 1;
	}
      elsif ($arglist[0] eq '--force')
	{
	  $force_output = 1;
	}
      elsif ($arglist[0] eq '--verbose')
	{
	  ++$verbose;
	}
      elsif ($arglist[0] eq '--version')
	{
	  print "aclocal (GNU $PACKAGE) $VERSION\n";
	  print "Written by Tom Tromey <tromey\@redhat.com>\n\n";
	  print "Copyright (C) 2005 Free Software Foundation, Inc.\n";
	  print "This is free software; see the source for copying conditions.  There is NO\n";
	  print "warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n";
	  exit 0;
	}
      elsif ($arglist[0] eq '--help')
	{
	  &usage (0);
	}
      else
	{
	  print STDERR "aclocal: unrecognized option -- `$arglist[0]'\nTry `aclocal --help' for more information.\n";
	  exit 1;
	}

      shift (@arglist);
    }

  if ($print_and_exit)
    {
      print $acdir, "\n";
      exit 0;
    }

  $default_dirlist="$acdir/dirlist"
    if $acdir ne $default_acdir;

  # Search the versioned directory near the end, and then the
  # unversioned directory last.  Only do this if the user didn't
  # override acdir.
  push (@dirlist, "$acdir-$APIVERSION")
    if $acdir eq $default_acdir;

  # By default $(datadir)/aclocal doesn't exist.  We don't want to
  # get an error in the case where we are searching the default
  # directory and it hasn't been created.
  push (@dirlist, $acdir)
    unless $acdir eq $default_acdir && ! -d $acdir;

  # Finally, adds any directory listed in the `dirlist' file.
  if (open (DEFAULT_DIRLIST, $default_dirlist))
    {
      while (<DEFAULT_DIRLIST>)
	{
	  # Ignore '#' lines.
	  next if /^#/;
	  # strip off newlines and end-of-line comments
	  s/\s*\#.*$//;
	  chomp ($contents=$_);
	  if (-d $contents )
	    {
	      push (@dirlist, $contents);
	    }
	}
      close (DEFAULT_DIRLIST);
    }

  return @dirlist;
}

################################################################

local (@dirlist) = parse_arguments (@ARGV);
$configure_ac = require_configure_ac;
scan_m4_files (@dirlist);
scan_configure;
if (! $exit_code)
  {
    my %macro_traced = trace_used_macros;
    write_aclocal ($output_file, keys %macro_traced);
  }
check_acinclude;

exit $exit_code;

### Setup "GNU" style for perl-mode and cperl-mode.
## Local Variables:
## perl-indent-level: 2
## perl-continued-statement-offset: 2
## perl-continued-brace-offset: 0
## perl-brace-offset: 0
## perl-brace-imaginary-offset: 0
## perl-label-offset: -2
## cperl-indent-level: 2
## cperl-brace-offset: 0
## cperl-continued-brace-offset: 0
## cperl-label-offset: -2
## cperl-extra-newline-before-brace: t
## cperl-merge-trailing-else: nil
## cperl-continued-statement-offset: 2
## End:
