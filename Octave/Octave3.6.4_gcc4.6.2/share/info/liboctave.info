This is liboctave.info, produced by makeinfo version 4.13 from liboctave.texi.

START-INFO-DIR-ENTRY
* liboctave: (liboctave). Octave C++ Classes
END-INFO-DIR-ENTRY

   Copyright (C) 1996, 1997 John W. Eaton.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions.


File: liboctave.info,  Node: Top,  Next: Acknowledgements,  Prev: (dir),  Up: (dir)

Octave C++ Classes
******************

This manual documents how to use, install and port Octave's C++ class
library, and how to report bugs.  It corresponds to Octave version
3.6.4.

* Menu:

* Acknowledgements::
* Copying::
* Introduction::
* Arrays::
* Matrix and Vector Operations::
* Matrix Factorizations::
* Ranges::
* Nonlinear Functions::
* Nonlinear Equations::
* Optimization::
* Quadrature::
* Ordinary Differential Equations::
* Differential Algebraic Equations::
* Error Handling::
* Installation::
* Bugs::
* Concept Index::
* Function Index::

 --- The Detailed Node Listing ---

Acknowledgements

* Contributors::                People who contributed to developing of Octave.

Arrays

* Constructors and Assignment::

Optimization

* Objective Functions::
* Bounds::
* Linear Constraints::
* Nonlinear Constraints::
* Quadratic Programming::
* Nonlinear Programming::

Quadrature

* Collocation Weights::


File: liboctave.info,  Node: Acknowledgements,  Next: Copying,  Prev: Top,  Up: Top

1 Acknowledgements
******************

* Menu:

* Contributors::                People who contributed to developing of Octave.


File: liboctave.info,  Node: Contributors,  Prev: Acknowledgements,  Up: Acknowledgements

Contributors to Octave
======================

In addition to John W. Eaton, several people have written parts of
liboctave.  (This has been removed because it is the same as what is in
the Octave manual.)


File: liboctave.info,  Node: Copying,  Next: Introduction,  Prev: Acknowledgements,  Up: Top

GNU GENERAL PUBLIC LICENSE
**************************

                        Version 3, 29 June 2007

     Copyright (C) 2007 Free Software Foundation, Inc. `http://fsf.org/'

     Everyone is permitted to copy and distribute verbatim copies of this
     license document, but changing it is not allowed.

Preamble
========

The GNU General Public License is a free, copyleft license for software
and other kinds of works.

   The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains
free software for all its users.  We, the Free Software Foundation, use
the GNU General Public License for most of our software; it applies
also to any other work released this way by its authors.  You can apply
it to your programs, too.

   When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

   To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you
have certain responsibilities if you distribute copies of the software,
or if you modify it: responsibilities to respect the freedom of others.

   For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

   Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

   For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

   Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the
manufacturer can do so.  This is fundamentally incompatible with the
aim of protecting users' freedom to change the software.  The
systematic pattern of such abuse occurs in the area of products for
individuals to use, which is precisely where it is most unacceptable.
Therefore, we have designed this version of the GPL to prohibit the
practice for those products.  If such problems arise substantially in
other domains, we stand ready to extend this provision to those domains
in future versions of the GPL, as needed to protect the freedom of
users.

   Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

   The precise terms and conditions for copying, distribution and
modification follow.

TERMS AND CONDITIONS
====================

  0. Definitions.

     "This License" refers to version 3 of the GNU General Public
     License.

     "Copyright" also means copyright-like laws that apply to other
     kinds of works, such as semiconductor masks.

     "The Program" refers to any copyrightable work licensed under this
     License.  Each licensee is addressed as "you".  "Licensees" and
     "recipients" may be individuals or organizations.

     To "modify" a work means to copy from or adapt all or part of the
     work in a fashion requiring copyright permission, other than the
     making of an exact copy.  The resulting work is called a "modified
     version" of the earlier work or a work "based on" the earlier work.

     A "covered work" means either the unmodified Program or a work
     based on the Program.

     To "propagate" a work means to do anything with it that, without
     permission, would make you directly or secondarily liable for
     infringement under applicable copyright law, except executing it
     on a computer or modifying a private copy.  Propagation includes
     copying, distribution (with or without modification), making
     available to the public, and in some countries other activities as
     well.

     To "convey" a work means any kind of propagation that enables other
     parties to make or receive copies.  Mere interaction with a user
     through a computer network, with no transfer of a copy, is not
     conveying.

     An interactive user interface displays "Appropriate Legal Notices"
     to the extent that it includes a convenient and prominently visible
     feature that (1) displays an appropriate copyright notice, and (2)
     tells the user that there is no warranty for the work (except to
     the extent that warranties are provided), that licensees may
     convey the work under this License, and how to view a copy of this
     License.  If the interface presents a list of user commands or
     options, such as a menu, a prominent item in the list meets this
     criterion.

  1. Source Code.

     The "source code" for a work means the preferred form of the work
     for making modifications to it.  "Object code" means any
     non-source form of a work.

     A "Standard Interface" means an interface that either is an
     official standard defined by a recognized standards body, or, in
     the case of interfaces specified for a particular programming
     language, one that is widely used among developers working in that
     language.

     The "System Libraries" of an executable work include anything,
     other than the work as a whole, that (a) is included in the normal
     form of packaging a Major Component, but which is not part of that
     Major Component, and (b) serves only to enable use of the work
     with that Major Component, or to implement a Standard Interface
     for which an implementation is available to the public in source
     code form.  A "Major Component", in this context, means a major
     essential component (kernel, window system, and so on) of the
     specific operating system (if any) on which the executable work
     runs, or a compiler used to produce the work, or an object code
     interpreter used to run it.

     The "Corresponding Source" for a work in object code form means all
     the source code needed to generate, install, and (for an executable
     work) run the object code and to modify the work, including
     scripts to control those activities.  However, it does not include
     the work's System Libraries, or general-purpose tools or generally
     available free programs which are used unmodified in performing
     those activities but which are not part of the work.  For example,
     Corresponding Source includes interface definition files
     associated with source files for the work, and the source code for
     shared libraries and dynamically linked subprograms that the work
     is specifically designed to require, such as by intimate data
     communication or control flow between those subprograms and other
     parts of the work.

     The Corresponding Source need not include anything that users can
     regenerate automatically from other parts of the Corresponding
     Source.

     The Corresponding Source for a work in source code form is that
     same work.

  2. Basic Permissions.

     All rights granted under this License are granted for the term of
     copyright on the Program, and are irrevocable provided the stated
     conditions are met.  This License explicitly affirms your unlimited
     permission to run the unmodified Program.  The output from running
     a covered work is covered by this License only if the output,
     given its content, constitutes a covered work.  This License
     acknowledges your rights of fair use or other equivalent, as
     provided by copyright law.

     You may make, run and propagate covered works that you do not
     convey, without conditions so long as your license otherwise
     remains in force.  You may convey covered works to others for the
     sole purpose of having them make modifications exclusively for
     you, or provide you with facilities for running those works,
     provided that you comply with the terms of this License in
     conveying all material for which you do not control copyright.
     Those thus making or running the covered works for you must do so
     exclusively on your behalf, under your direction and control, on
     terms that prohibit them from making any copies of your
     copyrighted material outside their relationship with you.

     Conveying under any other circumstances is permitted solely under
     the conditions stated below.  Sublicensing is not allowed; section
     10 makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

     No covered work shall be deemed part of an effective technological
     measure under any applicable law fulfilling obligations under
     article 11 of the WIPO copyright treaty adopted on 20 December
     1996, or similar laws prohibiting or restricting circumvention of
     such measures.

     When you convey a covered work, you waive any legal power to forbid
     circumvention of technological measures to the extent such
     circumvention is effected by exercising rights under this License
     with respect to the covered work, and you disclaim any intention
     to limit operation or modification of the work as a means of
     enforcing, against the work's users, your or third parties' legal
     rights to forbid circumvention of technological measures.

  4. Conveying Verbatim Copies.

     You may convey verbatim copies of the Program's source code as you
     receive it, in any medium, provided that you conspicuously and
     appropriately publish on each copy an appropriate copyright notice;
     keep intact all notices stating that this License and any
     non-permissive terms added in accord with section 7 apply to the
     code; keep intact all notices of the absence of any warranty; and
     give all recipients a copy of this License along with the Program.

     You may charge any price or no price for each copy that you convey,
     and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

     You may convey a work based on the Program, or the modifications to
     produce it from the Program, in the form of source code under the
     terms of section 4, provided that you also meet all of these
     conditions:

       a. The work must carry prominent notices stating that you
          modified it, and giving a relevant date.

       b. The work must carry prominent notices stating that it is
          released under this License and any conditions added under
          section 7.  This requirement modifies the requirement in
          section 4 to "keep intact all notices".

       c. You must license the entire work, as a whole, under this
          License to anyone who comes into possession of a copy.  This
          License will therefore apply, along with any applicable
          section 7 additional terms, to the whole of the work, and all
          its parts, regardless of how they are packaged.  This License
          gives no permission to license the work in any other way, but
          it does not invalidate such permission if you have separately
          received it.

       d. If the work has interactive user interfaces, each must display
          Appropriate Legal Notices; however, if the Program has
          interactive interfaces that do not display Appropriate Legal
          Notices, your work need not make them do so.

     A compilation of a covered work with other separate and independent
     works, which are not by their nature extensions of the covered
     work, and which are not combined with it such as to form a larger
     program, in or on a volume of a storage or distribution medium, is
     called an "aggregate" if the compilation and its resulting
     copyright are not used to limit the access or legal rights of the
     compilation's users beyond what the individual works permit.
     Inclusion of a covered work in an aggregate does not cause this
     License to apply to the other parts of the aggregate.

  6. Conveying Non-Source Forms.

     You may convey a covered work in object code form under the terms
     of sections 4 and 5, provided that you also convey the
     machine-readable Corresponding Source under the terms of this
     License, in one of these ways:

       a. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by the
          Corresponding Source fixed on a durable physical medium
          customarily used for software interchange.

       b. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by a
          written offer, valid for at least three years and valid for
          as long as you offer spare parts or customer support for that
          product model, to give anyone who possesses the object code
          either (1) a copy of the Corresponding Source for all the
          software in the product that is covered by this License, on a
          durable physical medium customarily used for software
          interchange, for a price no more than your reasonable cost of
          physically performing this conveying of source, or (2) access
          to copy the Corresponding Source from a network server at no
          charge.

       c. Convey individual copies of the object code with a copy of
          the written offer to provide the Corresponding Source.  This
          alternative is allowed only occasionally and noncommercially,
          and only if you received the object code with such an offer,
          in accord with subsection 6b.

       d. Convey the object code by offering access from a designated
          place (gratis or for a charge), and offer equivalent access
          to the Corresponding Source in the same way through the same
          place at no further charge.  You need not require recipients
          to copy the Corresponding Source along with the object code.
          If the place to copy the object code is a network server, the
          Corresponding Source may be on a different server (operated
          by you or a third party) that supports equivalent copying
          facilities, provided you maintain clear directions next to
          the object code saying where to find the Corresponding Source.
          Regardless of what server hosts the Corresponding Source, you
          remain obligated to ensure that it is available for as long
          as needed to satisfy these requirements.

       e. Convey the object code using peer-to-peer transmission,
          provided you inform other peers where the object code and
          Corresponding Source of the work are being offered to the
          general public at no charge under subsection 6d.


     A separable portion of the object code, whose source code is
     excluded from the Corresponding Source as a System Library, need
     not be included in conveying the object code work.

     A "User Product" is either (1) a "consumer product", which means
     any tangible personal property which is normally used for personal,
     family, or household purposes, or (2) anything designed or sold for
     incorporation into a dwelling.  In determining whether a product
     is a consumer product, doubtful cases shall be resolved in favor of
     coverage.  For a particular product received by a particular user,
     "normally used" refers to a typical or common use of that class of
     product, regardless of the status of the particular user or of the
     way in which the particular user actually uses, or expects or is
     expected to use, the product.  A product is a consumer product
     regardless of whether the product has substantial commercial,
     industrial or non-consumer uses, unless such uses represent the
     only significant mode of use of the product.

     "Installation Information" for a User Product means any methods,
     procedures, authorization keys, or other information required to
     install and execute modified versions of a covered work in that
     User Product from a modified version of its Corresponding Source.
     The information must suffice to ensure that the continued
     functioning of the modified object code is in no case prevented or
     interfered with solely because modification has been made.

     If you convey an object code work under this section in, or with,
     or specifically for use in, a User Product, and the conveying
     occurs as part of a transaction in which the right of possession
     and use of the User Product is transferred to the recipient in
     perpetuity or for a fixed term (regardless of how the transaction
     is characterized), the Corresponding Source conveyed under this
     section must be accompanied by the Installation Information.  But
     this requirement does not apply if neither you nor any third party
     retains the ability to install modified object code on the User
     Product (for example, the work has been installed in ROM).

     The requirement to provide Installation Information does not
     include a requirement to continue to provide support service,
     warranty, or updates for a work that has been modified or
     installed by the recipient, or for the User Product in which it
     has been modified or installed.  Access to a network may be denied
     when the modification itself materially and adversely affects the
     operation of the network or violates the rules and protocols for
     communication across the network.

     Corresponding Source conveyed, and Installation Information
     provided, in accord with this section must be in a format that is
     publicly documented (and with an implementation available to the
     public in source code form), and must require no special password
     or key for unpacking, reading or copying.

  7. Additional Terms.

     "Additional permissions" are terms that supplement the terms of
     this License by making exceptions from one or more of its
     conditions.  Additional permissions that are applicable to the
     entire Program shall be treated as though they were included in
     this License, to the extent that they are valid under applicable
     law.  If additional permissions apply only to part of the Program,
     that part may be used separately under those permissions, but the
     entire Program remains governed by this License without regard to
     the additional permissions.

     When you convey a copy of a covered work, you may at your option
     remove any additional permissions from that copy, or from any part
     of it.  (Additional permissions may be written to require their own
     removal in certain cases when you modify the work.)  You may place
     additional permissions on material, added by you to a covered work,
     for which you have or can give appropriate copyright permission.

     Notwithstanding any other provision of this License, for material
     you add to a covered work, you may (if authorized by the copyright
     holders of that material) supplement the terms of this License
     with terms:

       a. Disclaiming warranty or limiting liability differently from
          the terms of sections 15 and 16 of this License; or

       b. Requiring preservation of specified reasonable legal notices
          or author attributions in that material or in the Appropriate
          Legal Notices displayed by works containing it; or

       c. Prohibiting misrepresentation of the origin of that material,
          or requiring that modified versions of such material be
          marked in reasonable ways as different from the original
          version; or

       d. Limiting the use for publicity purposes of names of licensors
          or authors of the material; or

       e. Declining to grant rights under trademark law for use of some
          trade names, trademarks, or service marks; or

       f. Requiring indemnification of licensors and authors of that
          material by anyone who conveys the material (or modified
          versions of it) with contractual assumptions of liability to
          the recipient, for any liability that these contractual
          assumptions directly impose on those licensors and authors.

     All other non-permissive additional terms are considered "further
     restrictions" within the meaning of section 10.  If the Program as
     you received it, or any part of it, contains a notice stating that
     it is governed by this License along with a term that is a further
     restriction, you may remove that term.  If a license document
     contains a further restriction but permits relicensing or
     conveying under this License, you may add to a covered work
     material governed by the terms of that license document, provided
     that the further restriction does not survive such relicensing or
     conveying.

     If you add terms to a covered work in accord with this section, you
     must place, in the relevant source files, a statement of the
     additional terms that apply to those files, or a notice indicating
     where to find the applicable terms.

     Additional terms, permissive or non-permissive, may be stated in
     the form of a separately written license, or stated as exceptions;
     the above requirements apply either way.

  8. Termination.

     You may not propagate or modify a covered work except as expressly
     provided under this License.  Any attempt otherwise to propagate or
     modify it is void, and will automatically terminate your rights
     under this License (including any patent licenses granted under
     the third paragraph of section 11).

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly
     and finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from
     you under this License.  If your rights have been terminated and
     not permanently reinstated, you do not qualify to receive new
     licenses for the same material under section 10.

  9. Acceptance Not Required for Having Copies.

     You are not required to accept this License in order to receive or
     run a copy of the Program.  Ancillary propagation of a covered work
     occurring solely as a consequence of using peer-to-peer
     transmission to receive a copy likewise does not require
     acceptance.  However, nothing other than this License grants you
     permission to propagate or modify any covered work.  These actions
     infringe copyright if you do not accept this License.  Therefore,
     by modifying or propagating a covered work, you indicate your
     acceptance of this License to do so.

 10. Automatic Licensing of Downstream Recipients.

     Each time you convey a covered work, the recipient automatically
     receives a license from the original licensors, to run, modify and
     propagate that work, subject to this License.  You are not
     responsible for enforcing compliance by third parties with this
     License.

     An "entity transaction" is a transaction transferring control of an
     organization, or substantially all assets of one, or subdividing an
     organization, or merging organizations.  If propagation of a
     covered work results from an entity transaction, each party to that
     transaction who receives a copy of the work also receives whatever
     licenses to the work the party's predecessor in interest had or
     could give under the previous paragraph, plus a right to
     possession of the Corresponding Source of the work from the
     predecessor in interest, if the predecessor has it or can get it
     with reasonable efforts.

     You may not impose any further restrictions on the exercise of the
     rights granted or affirmed under this License.  For example, you
     may not impose a license fee, royalty, or other charge for
     exercise of rights granted under this License, and you may not
     initiate litigation (including a cross-claim or counterclaim in a
     lawsuit) alleging that any patent claim is infringed by making,
     using, selling, offering for sale, or importing the Program or any
     portion of it.

 11. Patents.

     A "contributor" is a copyright holder who authorizes use under this
     License of the Program or a work on which the Program is based.
     The work thus licensed is called the contributor's "contributor
     version".

     A contributor's "essential patent claims" are all patent claims
     owned or controlled by the contributor, whether already acquired or
     hereafter acquired, that would be infringed by some manner,
     permitted by this License, of making, using, or selling its
     contributor version, but do not include claims that would be
     infringed only as a consequence of further modification of the
     contributor version.  For purposes of this definition, "control"
     includes the right to grant patent sublicenses in a manner
     consistent with the requirements of this License.

     Each contributor grants you a non-exclusive, worldwide,
     royalty-free patent license under the contributor's essential
     patent claims, to make, use, sell, offer for sale, import and
     otherwise run, modify and propagate the contents of its
     contributor version.

     In the following three paragraphs, a "patent license" is any
     express agreement or commitment, however denominated, not to
     enforce a patent (such as an express permission to practice a
     patent or covenant not to sue for patent infringement).  To
     "grant" such a patent license to a party means to make such an
     agreement or commitment not to enforce a patent against the party.

     If you convey a covered work, knowingly relying on a patent
     license, and the Corresponding Source of the work is not available
     for anyone to copy, free of charge and under the terms of this
     License, through a publicly available network server or other
     readily accessible means, then you must either (1) cause the
     Corresponding Source to be so available, or (2) arrange to deprive
     yourself of the benefit of the patent license for this particular
     work, or (3) arrange, in a manner consistent with the requirements
     of this License, to extend the patent license to downstream
     recipients.  "Knowingly relying" means you have actual knowledge
     that, but for the patent license, your conveying the covered work
     in a country, or your recipient's use of the covered work in a
     country, would infringe one or more identifiable patents in that
     country that you have reason to believe are valid.

     If, pursuant to or in connection with a single transaction or
     arrangement, you convey, or propagate by procuring conveyance of, a
     covered work, and grant a patent license to some of the parties
     receiving the covered work authorizing them to use, propagate,
     modify or convey a specific copy of the covered work, then the
     patent license you grant is automatically extended to all
     recipients of the covered work and works based on it.

     A patent license is "discriminatory" if it does not include within
     the scope of its coverage, prohibits the exercise of, or is
     conditioned on the non-exercise of one or more of the rights that
     are specifically granted under this License.  You may not convey a
     covered work if you are a party to an arrangement with a third
     party that is in the business of distributing software, under
     which you make payment to the third party based on the extent of
     your activity of conveying the work, and under which the third
     party grants, to any of the parties who would receive the covered
     work from you, a discriminatory patent license (a) in connection
     with copies of the covered work conveyed by you (or copies made
     from those copies), or (b) primarily for and in connection with
     specific products or compilations that contain the covered work,
     unless you entered into that arrangement, or that patent license
     was granted, prior to 28 March 2007.

     Nothing in this License shall be construed as excluding or limiting
     any implied license or other defenses to infringement that may
     otherwise be available to you under applicable patent law.

 12. No Surrender of Others' Freedom.

     If conditions are imposed on you (whether by court order,
     agreement or otherwise) that contradict the conditions of this
     License, they do not excuse you from the conditions of this
     License.  If you cannot convey a covered work so as to satisfy
     simultaneously your obligations under this License and any other
     pertinent obligations, then as a consequence you may not convey it
     at all.  For example, if you agree to terms that obligate you to
     collect a royalty for further conveying from those to whom you
     convey the Program, the only way you could satisfy both those
     terms and this License would be to refrain entirely from conveying
     the Program.

 13. Use with the GNU Affero General Public License.

     Notwithstanding any other provision of this License, you have
     permission to link or combine any covered work with a work licensed
     under version 3 of the GNU Affero General Public License into a
     single combined work, and to convey the resulting work.  The terms
     of this License will continue to apply to the part which is the
     covered work, but the special requirements of the GNU Affero
     General Public License, section 13, concerning interaction through
     a network will apply to the combination as such.

 14. Revised Versions of this License.

     The Free Software Foundation may publish revised and/or new
     versions of the GNU General Public License from time to time.
     Such new versions will be similar in spirit to the present
     version, but may differ in detail to address new problems or
     concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies that a certain numbered version of the GNU
     General Public License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that numbered version or of any later version published by the
     Free Software Foundation.  If the Program does not specify a
     version number of the GNU General Public License, you may choose
     any version ever published by the Free Software Foundation.

     If the Program specifies that a proxy can decide which future
     versions of the GNU General Public License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Program.

     Later license versions may give you additional or different
     permissions.  However, no additional obligations are imposed on any
     author or copyright holder as a result of your choosing to follow a
     later version.

 15. Disclaimer of Warranty.

     THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
     APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE
     COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS"
     WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
     INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE
     RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.
     SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
     NECESSARY SERVICING, REPAIR OR CORRECTION.

 16. Limitation of Liability.

     IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES
     AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU
     FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
     CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
     THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA
     BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
     PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
     PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF
     THE POSSIBILITY OF SUCH DAMAGES.

 17. Interpretation of Sections 15 and 16.

     If the disclaimer of warranty and limitation of liability provided
     above cannot be given local legal effect according to their terms,
     reviewing courts shall apply local law that most closely
     approximates an absolute waiver of all civil liability in
     connection with the Program, unless a warranty or assumption of
     liability accompanies a copy of the Program in return for a fee.


END OF TERMS AND CONDITIONS
===========================

How to Apply These Terms to Your New Programs
=============================================

If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

   To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least the
"copyright" line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND A BRIEF IDEA OF WHAT IT DOES.
     Copyright (C) YEAR NAME OF AUTHOR

     This program is free software: you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation, either version 3 of the License, or (at
     your option) any later version.

     This program is distributed in the hope that it will be useful, but
     WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program.  If not, see `http://www.gnu.org/licenses/'.

   Also add information on how to contact you by electronic and paper
mail.

   If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

     PROGRAM Copyright (C) YEAR NAME OF AUTHOR
     This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
     This is free software, and you are welcome to redistribute it
     under certain conditions; type `show c' for details.

   The hypothetical commands `show w' and `show c' should show the
appropriate parts of the General Public License.  Of course, your
program's commands might be different; for a GUI interface, you would
use an "about box".

   You should also get your employer (if you work as a programmer) or
school, if any, to sign a "copyright disclaimer" for the program, if
necessary.  For more information on this, and how to apply and follow
the GNU GPL, see `http://www.gnu.org/licenses/'.

   The GNU General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use the
GNU Lesser General Public License instead of this License.  But first,
please read `http://www.gnu.org/philosophy/why-not-lgpl.html'.


File: liboctave.info,  Node: Introduction,  Next: Arrays,  Prev: Copying,  Up: Top

2 A Brief Introduction to Octave
********************************

This manual documents how to run, install and port Octave's C++ classes,
and how to report bugs.


File: liboctave.info,  Node: Arrays,  Next: Matrix and Vector Operations,  Prev: Introduction,  Up: Top

3 Arrays
********

* Menu:

* Constructors and Assignment::


File: liboctave.info,  Node: Constructors and Assignment,  Prev: Arrays,  Up: Arrays

3.1 Constructors and Assignment
===============================

 -- Constructor:  Array<T> (void)
     Create an array with no elements.

 -- Constructor:  Array<T> (int N [, const T &VAL])
     Create an array with N elements.  If the optional argument VAL is
     supplied, the elements are initialized to VAL; otherwise, they are
     left uninitialized.  If N is less than zero, the current error
     handler is invoked (*note Error Handling::).

 -- Constructor:  Array<T> (const Array<T> &A)
     Create a copy of the ARRAY<T> object A.  Memory for the ARRAY<T>
     class is managed using a reference counting scheme, so the cost of
     this operation is independent of the size of the array.

 -- Assignment on Array<T>: Array<T>& operator = (const Array<T> &A)
     Assignment operator.  Memory for the ARRAY<T> class is managed
     using a reference counting scheme, so the cost of this operation is
     independent of the size of the array.

 -- Method on Array<T>: int capacity (void) const
 -- Method on Array<T>: int length (void) const
     Return the length of the array.

 -- Method on Array<T>: T& elem (int N)
 -- Method on Array<T>: T& checkelem (int N)
     If N is within the bounds of the array, return a reference to the
     element indexed by N; otherwise, the current error handler is
     invoked (*note Error Handling::).

 -- Indexing on Array<T>: T& operator () (int N)

 -- Method on Array<T>: T elem (int N) const
 -- Method on Array<T>: T checkelem (int N) const
     If N is within the bounds of the array, return the value indexed
     by N; otherwise, call the current error handler.  *Note Error
     Handling::.

 -- Indexing on Array<T>: T operator () (int N) const

 -- Method on Array<T>: T& xelem (int N)
 -- Method on Array<T>: T xelem (int N) const
     Return a reference to, or the value of, the element indexed by N.
     These methods never perform bounds checking.

 -- Method on Array<T>: void resize (
     Change the size of the array to be N elements.  All elements are
     unchanged, except that if N is greater than the current size and
     the optional argument VAL is provided, the additional elements are
     initialized to VAL; otherwise, any additional elements are left
     uninitialized.  In the current implementation, if N is less than
     the current size, the length is updated but no memory is released.

 -- Method on Array<T>: const T* data (void) const

 -- Constructor:  Array2<T> Array2<T> Array2 (void)
 -- Constructor:  Array2<T> (int N, int M)
 -- Constructor:  Array2<T> (int N, int M, const T &VAL)
 -- Constructor:  Array2<T> (const Array2<T> &A)
 -- Constructor:  Array2<T> (const DiagArray<T> &A)

 -- Assignment on Array2<T>: Array2<T>& operator = (const Array2<T> &A)

 -- Method on Array2<T>: int dim1 (void) const
 -- Method on Array2<T>: int rows (void) const

 -- Method on Array2<T>: int dim2 (void) const
 -- Method on Array2<T>: int cols (void) const
 -- Method on Array2<T>: int columns (void) const

 -- Method on Array2<T>: T& elem (int I, int J)
 -- Method on Array2<T>: T& checkelem (int I, int J)

 -- Indexing on Array2<T>: T& operator () (int I, int J)

 -- Method on Array2<T>: void resize (int N, int M)
 -- Method on Array2<T>: void resize (int N, int M, const T &VAL)

 -- Constructor:  Array3<T> (void)
 -- Constructor:  Array3<T> (int N, int M, int K)
 -- Constructor:  Array3<T> (int N, int M, int K, const T &VAL)
 -- Constructor:  Array3<T> (const Array3<T> &A)

 -- Assignment on Array3<T>: Array3<T>& operator = (const Array3<T> &A)

 -- Method on Array3<T>: int dim1 (void) const
 -- Method on Array3<T>: int dim2 (void) const
 -- Method on Array3<T>: int dim3 (void) const

 -- Method on Array3<T>: T& elem (int I, int J, int K)
 -- Method on Array3<T>: T& checkelem (int I, int J, int K)

 -- Indexing on Array3<T>: T& operator () (int I, int J, int K)

 -- Method on Array3<T>: void resize (int N, int M, int K)
 -- Method on Array3<T>: void resize (int N, int M, int K, const T &VAL)

 -- Constructor:  DiagArray<T> (void)
 -- Constructor:  DiagArray<T> (int N)
 -- Constructor:  DiagArray<T> (int N, const T &VAL)
 -- Constructor:  DiagArray<T> (int R, int C)
 -- Constructor:  DiagArray<T> (int R, int C, const T &VAL)
 -- Constructor:  DiagArray<T> (const Array<T> &A)
 -- Constructor:  DiagArray<T> (const DiagArray<T> &A)

 -- Assignment on DiagArray<T>&:  operator = (const DiagArray<T> &A)

 -- Method on DiagArray<T>: int dim1 (void) const
 -- Method on DiagArray<T>: int rows (void) const

 -- Method on DiagArray<T>: int dim2 (void) const
 -- Method on DiagArray<T>: int cols (void) const
 -- Method on DiagArray<T>: int columns (void) const

 -- Method on DiagArray<T>: T& elem (int R, int C)
 -- Method on DiagArray<T>: T& checkelem (int R, int C)

 -- Indexing on DiagArray<T>: T& operator () (int R, int C)

 -- Method on DiagArray<T>: void resize (int N, int M)
 -- Method on DiagArray<T>: void resize (int N, int M, const T &VAL)

   The real and complex `ColumnVector' and `RowVector' classes all have
the following functions.  These will eventually be part of an
`MArray<T>' class, derived from the `Array<T>' class.  Then the
`ColumnVector' and `RowVector' classes will be derived from the
`MArray<T>' class.

   Element by element vector by scalar ops.

 -- : RowVector operator + (const RowVector &A, const double &S)
 -- : RowVector operator - (const RowVector &A, const double &S)
 -- : RowVector operator * (const RowVector &A, const double &S)
 -- : RowVector operator / (const RowVector &A, const double &S)

   Element by element scalar by vector ops.

 -- : RowVector operator + (const double &S, const RowVector &A)
 -- : RowVector operator - (const double &S, const RowVector &A)
 -- : RowVector operator * (const double &S, const RowVector &A)
 -- : RowVector operator / (const double &S, const RowVector &A)

   Element by element vector by vector ops.

 -- : RowVector operator + (const RowVector &A, const RowVector &B)
 -- : RowVector operator - (const RowVector &A, const RowVector &B)

 -- : RowVector product (const RowVector &A, const RowVector &B)
 -- : RowVector quotient (const RowVector &A, const RowVector &B)

   Unary MArray ops.

 -- : RowVector operator - (const RowVector &A)

   The `Matrix' classes share the following functions.  These will
eventually be part of an `MArray2<T>' class, derived from the
`Array2<T>' class.  Then the `Matrix' class will be derived from the
`MArray<T>' class.

   Element by element matrix by scalar ops.

 -- : Matrix operator + (const Matrix &A, const double &S)
 -- : Matrix operator - (const Matrix &A, const double &S)
 -- : Matrix operator * (const Matrix &A, const double &S)
 -- : Matrix operator / (const Matrix &A, const double &S)

   Element by element scalar by matrix ops.

 -- : Matrix operator + (const double &S, const Matrix &A)
 -- : Matrix operator - (const double &S, const Matrix &A)
 -- : Matrix operator * (const double &S, const Matrix &A)
 -- : Matrix operator / (const double &S, const Matrix &A)

   Element by element matrix by matrix ops.

 -- : Matrix operator + (const Matrix &A, const Matrix &B)
 -- : Matrix operator - (const Matrix &A, const Matrix &B)

 -- : Matrix product (const Matrix &A, const Matrix &B)
 -- : Matrix quotient (const Matrix &A, const Matrix &B)

   Unary matrix ops.

 -- : Matrix operator - (const Matrix &A)

   The `DiagMatrix' classes share the following functions.  These will
eventually be part of an `MDiagArray<T>' class, derived from the
`DiagArray<T>' class.  Then the `DiagMatrix' class will be derived from
the `MDiagArray<T>' class.

   Element by element MDiagArray by scalar ops.

 -- : DiagMatrix operator * (const DiagMatrix &A, const double &S)
 -- : DiagMatrix operator / (const DiagMatrix &A, const double &S)

   Element by element scalar by MDiagArray ops.

 -- : DiagMatrix operator * (const double &S, const DiagMatrix &A)

   Element by element MDiagArray by MDiagArray ops.

 -- : DiagMatrix operator + (const DiagMatrix &A, const DiagMatrix &B)
 -- : DiagMatrix operator - (const DiagMatrix &A, const DiagMatrix &B)

 -- : DiagMatrix product (const DiagMatrix &A, const DiagMatrix &B)

   Unary MDiagArray ops.

 -- : DiagMatrix operator - (const DiagMatrix &A)


File: liboctave.info,  Node: Matrix and Vector Operations,  Next: Matrix Factorizations,  Prev: Arrays,  Up: Top

4 Matrix and Vector Operations
******************************

 -- :  Matrix (void)
 -- :  Matrix (int R, int C)
 -- :  Matrix (int R, int C, double VAL)
 -- :  Matrix (const Array2<double> &A)
 -- :  Matrix (const Matrix &A)
 -- :  Matrix (const DiagArray<double> &A)
 -- :  Matrix (const DiagMatrix &A)

 -- : Matrix& operator = (const Matrix &A)

 -- : int operator == (const Matrix &A) const
 -- : int operator != (const Matrix &A) const

 -- : Matrix& insert (const Matrix &A, int R, int C)
 -- : Matrix& insert (const RowVector &A, int R, int C)
 -- : Matrix& insert (const ColumnVector &A, int R, int C)
 -- : Matrix& insert (const DiagMatrix &A, int R, int C)

 -- : Matrix& fill (double VAL)
 -- : Matrix& fill (double VAL, int r1, int c1, int r2, int c2)

 -- : Matrix append (const Matrix &A) const
 -- : Matrix append (const RowVector &A) const
 -- : Matrix append (const ColumnVector &A) const
 -- : Matrix append (const DiagMatrix &A) const

 -- : Matrix stack (const Matrix &A) const
 -- : Matrix stack (const RowVector &A) const
 -- : Matrix stack (const ColumnVector &A) const
 -- : Matrix stack (const DiagMatrix &A) const

 -- : Matrix transpose (void) const

 -- : Matrix extract (int r1, int c1, int r2, int c2) const

 -- : RowVector row (int I) const
 -- : RowVector row (char *s) const

 -- : ColumnVector column (int I) const
 -- : ColumnVector column (char *s) const

 -- : Matrix inverse (void) const
 -- : Matrix inverse (int &INFO) const
 -- : Matrix inverse (int &INFO, double &RCOND) const

 -- : ComplexMatrix fourier (void) const
 -- : ComplexMatrix ifourier (void) const

 -- : DET determinant (void) const
 -- : DET determinant (int &INFO) const
 -- : DET determinant (int &INFO, double &RCOND) const

 -- : Matrix solve (const Matrix &B) const
 -- : Matrix solve (const Matrix &B, int &INFO) const
 -- : Matrix solve (const Matrix &B, int &INFO, double &RCOND) const

 -- : ComplexMatrix solve (const ComplexMatrix &B) const
 -- : ComplexMatrix solve (const ComplexMatrix &B, int &INFO) const
 -- : ComplexMatrix solve (const ComplexMatrix &B, int &INFO, double
          &RCOND) const

 -- : ColumnVector solve (const ColumnVector &B) const
 -- : ColumnVector solve (const ColumnVector &B, int &INFO) const
 -- : ColumnVector solve (const ColumnVector &B, int &INFO, double
          &RCOND) const

 -- : ComplexColumnVector solve (const ComplexColumnVector &B) const
 -- : ComplexColumnVector solve (const ComplexColumnVector &B, int
          &INFO) const
 -- : ComplexColumnVector solve (const ComplexColumnVector &B, int
          &INFO, double &RCOND) const

 -- : Matrix lssolve (const Matrix &B) const
 -- : Matrix lssolve (const Matrix &B, int &INFO) const
 -- : Matrix lssolve (const Matrix &B, int &INFO, int &RANK) const

 -- : ComplexMatrix lssolve (const ComplexMatrix &B) const
 -- : ComplexMatrix lssolve (const ComplexMatrix &B, int &INFO) const
 -- : ComplexMatrix lssolve (const ComplexMatrix &B, int &INFO, int
          &RANK) const

 -- : ColumnVector lssolve (const ColumnVector &B) const
 -- : ColumnVector lssolve (const ColumnVector &B, int &INFO) const
 -- : ColumnVector lssolve (const ColumnVector &B, int &INFO, int
          &RANK) const

 -- : ComplexColumnVector lssolve (const ComplexColumnVector &B) const
 -- : ComplexColumnVector lssolve (const ComplexColumnVector &B, int
          &INFO) const
 -- : ComplexColumnVector lssolve (const ComplexColumnVector &B, int
          &INFO, int &RANK) const

 -- : Matrix& operator += (const Matrix &A)
 -- : Matrix& operator -= (const Matrix &A)

 -- : Matrix& operator += (const DiagMatrix &A)
 -- : Matrix& operator -= (const DiagMatrix &A)

 -- : Matrix operator ! (void) const

 -- : ComplexMatrix operator + (const Matrix &A, const Complex &S)
 -- : ComplexMatrix operator - (const Matrix &A, const Complex &S)
 -- : ComplexMatrix operator * (const Matrix &A, const Complex &S)
 -- : ComplexMatrix operator / (const Matrix &A, const Complex &S)

 -- : ComplexMatrix operator + (const Complex &S, const Matrix &A)
 -- : ComplexMatrix operator - (const Complex &S, const Matrix &A)
 -- : ComplexMatrix operator * (const Complex &S, const Matrix &A)
 -- : ComplexMatrix operator / (const Complex &S, const Matrix &A)

 -- : ColumnVector operator * (const Matrix &A, const ColumnVector &B)
 -- : ComplexColumnVector operator * (const Matrix &A, const
          ComplexColumnVector &B)

 -- : Matrix operator + (const Matrix &A, const DiagMatrix &B)
 -- : Matrix operator - (const Matrix &A, const DiagMatrix &B)
 -- : Matrix operator * (const Matrix &A, const DiagMatrix &B)

 -- : ComplexMatrix operator + (const Matrix &A, const
          ComplexDiagMatrix &B)
 -- : ComplexMatrix operator - (const Matrix &A, const
          ComplexDiagMatrix &B)
 -- : ComplexMatrix operator * (const Matrix &A, const
          ComplexDiagMatrix &B)

 -- : Matrix operator * (const Matrix &A, const Matrix &B)
 -- : ComplexMatrix operator * (const Matrix &A, const ComplexMatrix &B)

 -- : ComplexMatrix operator + (const Matrix &A, const ComplexMatrix &B)
 -- : ComplexMatrix operator - (const Matrix &A, const ComplexMatrix &B)

 -- : ComplexMatrix product (const Matrix &A, const ComplexMatrix &B)
 -- : ComplexMatrix quotient (const Matrix &A, const ComplexMatrix &B)

 -- : Matrix map (d_d_Mapper F, const Matrix &A)
 -- : void map (d_d_Mapper F)

 -- : Matrix all (void) const
 -- : Matrix any (void) const

 -- : Matrix cumprod (void) const
 -- : Matrix cumsum (void) const
 -- : Matrix prod (void) const
 -- : Matrix sum (void) const
 -- : Matrix sumsq (void) const

 -- : ColumnVector diag (void) const
 -- : ColumnVector diag (int K) const

 -- : ColumnVector row_min (void) const
 -- : ColumnVector row_min_loc (void) const

 -- : ColumnVector row_max (void) const
 -- : ColumnVector row_max_loc (void) const

 -- : RowVector column_min (void) const
 -- : RowVector column_min_loc (void) const

 -- : RowVector column_max (void) const
 -- : RowVector column_max_loc (void) const

 -- : ostream& operator << (ostream &OS, const Matrix &A)
 -- : istream& operator >> (istream &IS, Matrix &A)

 -- :  ColumnVector (void)
 -- :  ColumnVector (int N)
 -- :  ColumnVector (int N, double VAL)
 -- :  ColumnVector (const Array<double> &A)
 -- :  ColumnVector (const ColumnVector &A)

 -- : ColumnVector& operator = (const ColumnVector &A)

 -- : int operator == (const ColumnVector &A) const
 -- : int operator != (const ColumnVector &A) const

 -- : ColumnVector& insert (const ColumnVector &A, int R)

 -- : ColumnVector& fill (double VAL)
 -- : ColumnVector& fill (double VAL, int r1, int r2)

 -- : ColumnVector stack (const ColumnVector &A) const

 -- : RowVector transpose (void) const

 -- : ColumnVector extract (int r1, int r2) const

 -- : ColumnVector& operator += (const ColumnVector &A)
 -- : ColumnVector& operator -= (const ColumnVector &A)

 -- : ComplexColumnVector operator + (const ColumnVector &A, const
          Complex &S)
 -- : ComplexColumnVector operator - (const ColumnVector &A, const
          Complex &S)
 -- : ComplexColumnVector operator * (const ColumnVector &A, const
          Complex &S)
 -- : ComplexColumnVector operator / (const ColumnVector &A, const
          Complex &S)

 -- : ComplexColumnVector operator + (const Complex &S, const
          ColumnVector &A)
 -- : ComplexColumnVector operator - (const Complex &S, const
          ColumnVector &A)
 -- : ComplexColumnVector operator * (const Complex &S, const
          ColumnVector &A)
 -- : ComplexColumnVector operator / (const Complex &S, const
          ColumnVector &A)

 -- : Matrix operator * (const ColumnVector &A, const RowVector &A)

 -- : ComplexMatrix operator * (const ColumnVector &A, const
          ComplexRowVector &B)

 -- : ComplexColumnVector operator + (const ComplexColumnVector &A,
          const ComplexColumnVector &B)

 -- : ComplexColumnVector operator - (const ComplexColumnVector &A,
          const ComplexColumnVector &B)

 -- : ComplexColumnVector product (const ComplexColumnVector &A, const
          ComplexColumnVector &B)

 -- : ComplexColumnVector quotient (const ComplexColumnVector &A, const
          ComplexColumnVector &B)

 -- : ColumnVector map (d_d_Mapper F, const ColumnVector &A)
 -- : void map (d_d_Mapper F)

 -- : double min (void) const
 -- : double max (void) const

 -- : ostream& operator << (ostream &OS, const ColumnVector &A)

 -- :  RowVector (void)
 -- :  RowVector (int N)
 -- :  RowVector (int N, double VAL)
 -- :  RowVector (const Array<double> &A)
 -- :  RowVector (const RowVector &A)

 -- : RowVector& operator = (const RowVector &A)

 -- : int operator == (const RowVector &A) const
 -- : int operator != (const RowVector &A) const

 -- : RowVector& insert (const RowVector &A, int C)

 -- : RowVector& fill (double VAL)
 -- : RowVector& fill (double VAL, int c1, int c2)

 -- : RowVector append (const RowVector &A) const

 -- : ColumnVector transpose (void) const

 -- : RowVector extract (int c1, int c2) const

 -- : RowVector& operator += (const RowVector &A)
 -- : RowVector& operator -= (const RowVector &A)

 -- : ComplexRowVector operator + (const RowVector &A, const Complex &S)
 -- : ComplexRowVector operator - (const RowVector &A, const Complex &S)
 -- : ComplexRowVector operator * (const RowVector &A, const Complex &S)
 -- : ComplexRowVector operator / (const RowVector &A, const Complex &S)

 -- : ComplexRowVector operator + (const Complex &S, const RowVector &A)
 -- : ComplexRowVector operator - (const Complex &S, const RowVector &A)
 -- : ComplexRowVector operator * (const Complex &S, const RowVector &A)
 -- : ComplexRowVector operator / (const Complex &S, const RowVector &A)

 -- : double operator * (const RowVector &A, ColumnVector &B)

 -- : Complex operator * (const RowVector &A, const ComplexColumnVector
          &B)

 -- : RowVector operator * (const RowVector &A, const Matrix &B)

 -- : ComplexRowVector operator * (const RowVector &A, const
          ComplexMatrix &B)

 -- : ComplexRowVector operator + (const RowVector &A, const
          ComplexRowVector &B)
 -- : ComplexRowVector operator - (const RowVector &A, const
          ComplexRowVector &B)

 -- : ComplexRowVector product (const RowVector &A, const
          ComplexRowVector &B)
 -- : ComplexRowVector quotient (const RowVector &A, const
          ComplexRowVector &B)

 -- : RowVector map (d_d_Mapper F, const RowVector &A)
 -- : void map (d_d_Mapper F)

 -- : double min (void) const
 -- : double max (void) const

 -- : ostream& operator << (ostream &OS, const RowVector &A)

 -- :  DiagMatrix (void)
 -- :  DiagMatrix (int N)
 -- :  DiagMatrix (int N, double VAL)
 -- :  DiagMatrix (int R, int C)
 -- :  DiagMatrix (int R, int C, double VAL)
 -- :  DiagMatrix (const RowVector &A)
 -- :  DiagMatrix (const ColumnVector &A)
 -- :  DiagMatrix (const DiagArray<double> &A)
 -- :  DiagMatrix (const DiagMatrix &A)

 -- : DiagMatrix& operator = (const DiagMatrix &A)

 -- : int operator == (const DiagMatrix &A) const
 -- : int operator != (const DiagMatrix &A) const

 -- : DiagMatrix& fill (double VAL)
 -- : DiagMatrix& fill (double VAL, int BEG, int END)
 -- : DiagMatrix& fill (const ColumnVector &A)
 -- : DiagMatrix& fill (const RowVector &A)
 -- : DiagMatrix& fill (const ColumnVector &A, int BEG)
 -- : DiagMatrix& fill (const RowVector &A, int BEG)

 -- : DiagMatrix transpose (void) const

 -- : Matrix extract (int r1, int c1, int r2, int c2) const

 -- : RowVector row (int I) const
 -- : RowVector row (char *s) const

 -- : ColumnVector column (int I) const
 -- : ColumnVector column (char *s) const

 -- : DiagMatrix inverse (void) const
 -- : DiagMatrix inverse (int &INFO) const

 -- : DiagMatrix& operator += (const DiagMatrix &A)
 -- : DiagMatrix& operator -= (const DiagMatrix &A)

 -- : Matrix operator + (const DiagMatrix &A, double S)
 -- : Matrix operator - (const DiagMatrix &A, double S)

 -- : ComplexMatrix operator + (const DiagMatrix &A, const Complex &S)
 -- : ComplexMatrix operator - (const DiagMatrix &A, const Complex &S)

 -- : ComplexDiagMatrix operator * (const DiagMatrix &A, const Complex
          &S)
 -- : ComplexDiagMatrix operator / (const DiagMatrix &A, const Complex
          &S)

 -- : Matrix operator + (double S, const DiagMatrix &A)
 -- : Matrix operator - (double S, const DiagMatrix &A)

 -- : ComplexMatrix operator + (const Complex &S, const DiagMatrix &A)
 -- : ComplexMatrix operator - (const Complex &S, const DiagMatrix &A)

 -- : ComplexDiagMatrix operator * (const Complex &S, const DiagMatrix
          &A)

 -- : ColumnVector operator * (const DiagMatrix &A, const ColumnVector
          &B)

 -- : ComplexColumnVector operator * (const DiagMatrix &A, const
          ComplexColumnVector &B)

 -- : ComplexDiagMatrix operator + (const DiagMatrix &A, const
          ComplexDiagMatrix &B)
 -- : ComplexDiagMatrix operator - (const DiagMatrix &A, const
          ComplexDiagMatrix &B)

 -- : ComplexDiagMatrix product (const DiagMatrix &A, const
          ComplexDiagMatrix &B)

 -- : Matrix operator + (const DiagMatrix &A, const Matrix &B)
 -- : Matrix operator - (const DiagMatrix &A, const Matrix &B)
 -- : Matrix operator * (const DiagMatrix &A, const Matrix &B)

 -- : ComplexMatrix operator + (const DiagMatrix &A, const
          ComplexMatrix &B)
 -- : ComplexMatrix operator - (const DiagMatrix &A, const
          ComplexMatrix &B)
 -- : ComplexMatrix operator * (const DiagMatrix &A, const
          ComplexMatrix &B)

 -- : ColumnVector diag (void) const
 -- : ColumnVector diag (int K) const

 -- : ostream& operator << (ostream &OS, const DiagMatrix &A)

 -- :  ComplexMatrix (void)
 -- :  ComplexMatrix (int R, int C)
 -- :  ComplexMatrix (int R, int C, const Complex &VAL)
 -- :  ComplexMatrix (const Matrix &A)
 -- :  ComplexMatrix (const Array2<Complex> &A)
 -- :  ComplexMatrix (const ComplexMatrix &A)
 -- :  ComplexMatrix (const DiagMatrix &A)
 -- :  ComplexMatrix (const DiagArray<Complex> &A)
 -- :  ComplexMatrix (const ComplexDiagMatrix &A)

 -- : ComplexMatrix& operator = (const ComplexMatrix &A)

 -- : int operator == (const ComplexMatrix &A) const
 -- : int operator != (const ComplexMatrix &A) const

 -- : ComplexMatrix& insert (const Matrix &A, int R, int C)
 -- : ComplexMatrix& insert (const RowVector &A, int R, int C)
 -- : ComplexMatrix& insert (const ColumnVector &A, int R, int C)
 -- : ComplexMatrix& insert (const DiagMatrix &A, int R, int C)

 -- : ComplexMatrix& insert (const ComplexMatrix &A, int R, int C)
 -- : ComplexMatrix& insert (const ComplexRowVector &A, int R, int C)
 -- : ComplexMatrix& insert (const ComplexColumnVector &A, int R, int C)
 -- : ComplexMatrix& insert (const ComplexDiagMatrix &A, int R, int C)

 -- : ComplexMatrix& fill (double VAL)
 -- : ComplexMatrix& fill (const Complex &VAL)
 -- : ComplexMatrix& fill (double VAL, int r1, int c1, int r2, int c2)
 -- : ComplexMatrix& fill (const Complex &VAL, int r1, int c1, int r2,
          int c2)

 -- : ComplexMatrix append (const Matrix &A) const
 -- : ComplexMatrix append (const RowVector &A) const
 -- : ComplexMatrix append (const ColumnVector &A) const
 -- : ComplexMatrix append (const DiagMatrix &A) const

 -- : ComplexMatrix append (const ComplexMatrix &A) const
 -- : ComplexMatrix append (const ComplexRowVector &A) const
 -- : ComplexMatrix append (const ComplexColumnVector &A) const
 -- : ComplexMatrix append (const ComplexDiagMatrix &A) const

 -- : ComplexMatrix stack (const Matrix &A) const
 -- : ComplexMatrix stack (const RowVector &A) const
 -- : ComplexMatrix stack (const ColumnVector &A) const
 -- : ComplexMatrix stack (const DiagMatrix &A) const

 -- : ComplexMatrix stack (const ComplexMatrix &A) const
 -- : ComplexMatrix stack (const ComplexRowVector &A) const
 -- : ComplexMatrix stack (const ComplexColumnVector &A) const
 -- : ComplexMatrix stack (const ComplexDiagMatrix &A) const

 -- : ComplexMatrix transpose (void) const

 -- : Matrix real (const ComplexMatrix &A)
 -- : Matrix imag (const ComplexMatrix &A)
 -- : ComplexMatrix conj (const ComplexMatrix &A)

 -- : ComplexMatrix extract (int r1, int c1, int r2, int c2) const

 -- : ComplexRowVector row (int I) const
 -- : ComplexRowVector row (char *s) const

 -- : ComplexColumnVector column (int I) const
 -- : ComplexColumnVector column (char *s) const

 -- : ComplexMatrix inverse (void) const
 -- : ComplexMatrix inverse (int &INFO) const
 -- : ComplexMatrix inverse (int &INFO, double &RCOND) const

 -- : ComplexMatrix fourier (void) const
 -- : ComplexMatrix ifourier (void) const

 -- : ComplexDET determinant (void) const
 -- : ComplexDET determinant (int &INFO) const
 -- : ComplexDET determinant (int &INFO, double &RCOND) const

 -- : ComplexMatrix solve (const Matrix &B) const
 -- : ComplexMatrix solve (const Matrix &B, int &INFO) const
 -- : ComplexMatrix solve (const Matrix &B, int &INFO, double &RCOND)
          const

 -- : ComplexMatrix solve (const ComplexMatrix &B) const
 -- : ComplexMatrix solve (const ComplexMatrix &B, int &INFO) const
 -- : ComplexMatrix solve (const ComplexMatrix &B, int &INFO, double
          &RCOND) const

 -- : ComplexColumnVector solve (const ComplexColumnVector &B) const
 -- : ComplexColumnVector solve (const ComplexColumnVector &B, int
          &INFO) const
 -- : ComplexColumnVector solve (const ComplexColumnVector &B, int
          &INFO, double &RCOND) const

 -- : ComplexMatrix lssolve (const ComplexMatrix &B) const
 -- : ComplexMatrix lssolve (const ComplexMatrix &B, int &INFO) const
 -- : ComplexMatrix lssolve (const ComplexMatrix &B, int &INFO, int
          &RANK) const

 -- : ComplexColumnVector lssolve (const ComplexColumnVector &B) const
 -- : ComplexColumnVector lssolve (const ComplexColumnVector &B, int
          &INFO) const
 -- : ComplexColumnVector lssolve (const ComplexColumnVector &B, int
          &INFO, int &RANK) const

 -- : ComplexMatrix& operator += (const DiagMatrix &A)
 -- : ComplexMatrix& operator -= (const DiagMatrix &A)

 -- : ComplexMatrix& operator += (const ComplexDiagMatrix &A)
 -- : ComplexMatrix& operator -= (const ComplexDiagMatrix &A)

 -- : ComplexMatrix& operator += (const Matrix &A)
 -- : ComplexMatrix& operator -= (const Matrix &A)

 -- : ComplexMatrix& operator += (const ComplexMatrix &A)
 -- : ComplexMatrix& operator -= (const ComplexMatrix &A)

 -- : Matrix operator ! (void) const

 -- : ComplexMatrix operator + (const ComplexMatrix &A, double S)
 -- : ComplexMatrix operator - (const ComplexMatrix &A, double S)
 -- : ComplexMatrix operator * (const ComplexMatrix &A, double S)
 -- : ComplexMatrix operator / (const ComplexMatrix &A, double S)

 -- : ComplexMatrix operator + (double S, const ComplexMatrix &A)
 -- : ComplexMatrix operator - (double S, const ComplexMatrix &A)
 -- : ComplexMatrix operator * (double S, const ComplexMatrix &A)
 -- : ComplexMatrix operator / (double S, const ComplexMatrix &A)

 -- : ComplexColumnVector operator * (const ComplexMatrix &A, const
          ColumnVector &B)

 -- : ComplexColumnVector operator * (const ComplexMatrix &A, const
          ComplexColumnVector &B)

 -- : ComplexMatrix operator + (const ComplexMatrix &A, const
          DiagMatrix &B)
 -- : ComplexMatrix operator - (const ComplexMatrix &A, const
          DiagMatrix &B)
 -- : ComplexMatrix operator * (const ComplexMatrix &A, const
          DiagMatrix &B)

 -- : ComplexMatrix operator + (const ComplexMatrix &A, const
          ComplexDiagMatrix &B)
 -- : ComplexMatrix operator - (const ComplexMatrix &A, const
          ComplexDiagMatrix &B)
 -- : ComplexMatrix operator * (const ComplexMatrix &A, const
          ComplexDiagMatrix &B)

 -- : ComplexMatrix operator + (const ComplexMatrix &A, const Matrix &B)
 -- : ComplexMatrix operator - (const ComplexMatrix &A, const Matrix &B)

 -- : ComplexMatrix operator * (const ComplexMatrix &A, const Matrix &B)
 -- : ComplexMatrix operator * (const ComplexMatrix &A, const
          ComplexMatrix &B)

 -- : ComplexMatrix product (const ComplexMatrix &A, const Matrix &B)
 -- : ComplexMatrix quotient (const ComplexMatrix &A, const Matrix &B)

 -- : ComplexMatrix map (c_c_Mapper F, const ComplexMatrix &A)
 -- : Matrix map (d_c_Mapper F, const ComplexMatrix &A)
 -- : void map (c_c_Mapper F)

 -- : Matrix all (void) const
 -- : Matrix any (void) const

 -- : ComplexMatrix cumprod (void) const
 -- : ComplexMatrix cumsum (void) const
 -- : ComplexMatrix prod (void) const
 -- : ComplexMatrix sum (void) const
 -- : ComplexMatrix sumsq (void) const

 -- : ComplexColumnVector diag (void) const
 -- : ComplexColumnVector diag (int K) const

 -- : ComplexColumnVector row_min (void) const
 -- : ComplexColumnVector row_min_loc (void) const

 -- : ComplexColumnVector row_max (void) const
 -- : ComplexColumnVector row_max_loc (void) const

 -- : ComplexRowVector column_min (void) const
 -- : ComplexRowVector column_min_loc (void) const

 -- : ComplexRowVector column_max (void) const
 -- : ComplexRowVector column_max_loc (void) const

 -- : ostream& operator << (ostream &OS, const ComplexMatrix &A)
 -- : istream& operator >> (istream &IS, ComplexMatrix &A)

 -- :  ComplexColumnVector (void)
 -- :  ComplexColumnVector (int N)
 -- :  ComplexColumnVector (int N, const Complex &VAL)
 -- :  ComplexColumnVector (const ColumnVector &A)
 -- :  ComplexColumnVector (const Array<Complex> &A)
 -- :  ComplexColumnVector (const ComplexColumnVector &A)

 -- : ComplexColumnVector& operator = (const ComplexColumnVector &A)

 -- : int operator == (const ComplexColumnVector &A) const
 -- : int operator != (const ComplexColumnVector &A) const

 -- : ComplexColumnVector& insert (const ColumnVector &A, int R)
 -- : ComplexColumnVector& insert (const ComplexColumnVector &A, int R)

 -- : ComplexColumnVector& fill (double VAL)
 -- : ComplexColumnVector& fill (const Complex &VAL)
 -- : ComplexColumnVector& fill (double VAL, int r1, int r2)
 -- : ComplexColumnVector& fill (const Complex &VAL, int r1, int r2)

 -- : ComplexColumnVector stack (const ColumnVector &A) const
 -- : ComplexColumnVector stack (const ComplexColumnVector &A) const

 -- : ComplexRowVector transpose (void) const

 -- : ColumnVector real (const ComplexColumnVector &A)
 -- : ColumnVector imag (const ComplexColumnVector &A)
 -- : ComplexColumnVector conj (const ComplexColumnVector &A)

 -- : ComplexColumnVector extract (int r1, int r2) const

 -- : ComplexColumnVector& operator += (const ColumnVector &A)
 -- : ComplexColumnVector& operator -= (const ColumnVector &A)

 -- : ComplexColumnVector& operator += (const ComplexColumnVector &A)
 -- : ComplexColumnVector& operator -= (const ComplexColumnVector &A)

 -- : ComplexColumnVector operator + (const ComplexColumnVector &A,
          double S)
 -- : ComplexColumnVector operator - (const ComplexColumnVector &A,
          double S)
 -- : ComplexColumnVector operator * (const ComplexColumnVector &A,
          double S)
 -- : ComplexColumnVector operator / (const ComplexColumnVector &A,
          double S)

 -- : ComplexColumnVector operator + (double S, const
          ComplexColumnVector &A)
 -- : ComplexColumnVector operator - (double S, const
          ComplexColumnVector &A)
 -- : ComplexColumnVector operator * (double S, const
          ComplexColumnVector &A)
 -- : ComplexColumnVector operator / (double S, const
          ComplexColumnVector &A)

 -- : ComplexMatrix operator * (const ComplexColumnVector &A, const
          ComplexRowVector &B)

 -- : ComplexColumnVector operator + (const ComplexColumnVector &A,
          const ColumnVector &B)
 -- : ComplexColumnVector operator - (const ComplexColumnVector &A,
          const ColumnVector &B)

 -- : ComplexColumnVector product (const ComplexColumnVector &A, const
          ColumnVector &B)
 -- : ComplexColumnVector quotient (const ComplexColumnVector &A, const
          ColumnVector &B)

 -- : ComplexColumnVector map (c_c_Mapper F, const ComplexColumnVector
          &A)
 -- : ColumnVector map (d_c_Mapper F, const ComplexColumnVector &A)
 -- : void map (c_c_Mapper F)

 -- : Complex min (void) const
 -- : Complex max (void) const

 -- : ostream& operator << (ostream &OS, const ComplexColumnVector &A)

 -- :  ComplexRowVector (void)
 -- :  ComplexRowVector (int N)
 -- :  ComplexRowVector (int N, const Complex &VAL)
 -- :  ComplexRowVector (const RowVector &A)
 -- :  ComplexRowVector (const Array<Complex> &A)
 -- :  ComplexRowVector (const ComplexRowVector &A)

 -- : ComplexRowVector& operator = (const ComplexRowVector &A)

 -- : int operator == (const ComplexRowVector &A) const
 -- : int operator != (const ComplexRowVector &A) const

 -- : ComplexRowVector& insert (const RowVector &A, int C)
 -- : ComplexRowVector& insert (const ComplexRowVector &A, int C)

 -- : ComplexRowVector& fill (double VAL)
 -- : ComplexRowVector& fill (const Complex &VAL)
 -- : ComplexRowVector& fill (double VAL, int c1, int c2)
 -- : ComplexRowVector& fill (const Complex &VAL, int c1, int c2)

 -- : ComplexRowVector append (const RowVector &A) const
 -- : ComplexRowVector append (const ComplexRowVector &A) const

 -- : ComplexColumnVector transpose (void) const

 -- : RowVector real (const ComplexRowVector &A)
 -- : RowVector imag (const ComplexRowVector &A)
 -- : ComplexRowVector conj (const ComplexRowVector &A)

 -- : ComplexRowVector extract (int c1, int c2) const

 -- : ComplexRowVector& operator += (const RowVector &A)
 -- : ComplexRowVector& operator -= (const RowVector &A)

 -- : ComplexRowVector& operator += (const ComplexRowVector &A)
 -- : ComplexRowVector& operator -= (const ComplexRowVector &A)

 -- : ComplexRowVector operator + (const ComplexRowVector &A, double S)
 -- : ComplexRowVector operator - (const ComplexRowVector &A, double S)
 -- : ComplexRowVector operator * (const ComplexRowVector &A, double S)
 -- : ComplexRowVector operator / (const ComplexRowVector &A, double S)

 -- : ComplexRowVector operator + (double S, const ComplexRowVector &A)
 -- : ComplexRowVector operator - (double S, const ComplexRowVector &A)
 -- : ComplexRowVector operator * (double S, const ComplexRowVector &A)
 -- : ComplexRowVector operator / (double S, const ComplexRowVector &A)

 -- : Complex operator * (const ComplexRowVector &A, const ColumnVector
          &B)

 -- : Complex operator * (const ComplexRowVector &A, const
          ComplexColumnVector &B)

 -- : ComplexRowVector operator * (const ComplexRowVector &A, const
          ComplexMatrix &B)

 -- : ComplexRowVector operator + (const ComplexRowVector &A, const
          RowVector &B)
 -- : ComplexRowVector operator - (const ComplexRowVector &A, const
          RowVector &B)

 -- : ComplexRowVector product (const ComplexRowVector &A, const
          RowVector &B)
 -- : ComplexRowVector quotient (const ComplexRowVector &A, const
          RowVector &B)

 -- : ComplexRowVector map (c_c_Mapper F, const ComplexRowVector &A)
 -- : RowVector map (d_c_Mapper F, const ComplexRowVector &A)
 -- : void map (c_c_Mapper F)

 -- : Complex min (void) const
 -- : Complex max (void) const

 -- : ostream& operator << (ostream &OS, const ComplexRowVector &A)

 -- :  ComplexDiagMatrix (void)
 -- :  ComplexDiagMatrix (int N)
 -- :  ComplexDiagMatrix (int N, const Complex &VAL)
 -- :  ComplexDiagMatrix (int R, int C)
 -- :  ComplexDiagMatrix (int R, int C, const Complex &VAL)
 -- :  ComplexDiagMatrix (const RowVector &A)
 -- :  ComplexDiagMatrix (const ComplexRowVector &A)
 -- :  ComplexDiagMatrix (const ColumnVector &A)
 -- :  ComplexDiagMatrix (const ComplexColumnVector &A)
 -- :  ComplexDiagMatrix (const DiagMatrix &A)
 -- :  ComplexDiagMatrix (const DiagArray<Complex> &A)
 -- :  ComplexDiagMatrix (const ComplexDiagMatrix &A)

 -- : ComplexDiagMatrix& operator = (const ComplexDiagMatrix &A)

 -- : int operator == (const ComplexDiagMatrix &A) const
 -- : int operator != (const ComplexDiagMatrix &A) const

 -- : ComplexDiagMatrix& fill (double VAL)
 -- : ComplexDiagMatrix& fill (const Complex &VAL)
 -- : ComplexDiagMatrix& fill (double VAL, int BEG, int END)
 -- : ComplexDiagMatrix& fill (const Complex &VAL, int BEG, int END)
 -- : ComplexDiagMatrix& fill (const ColumnVector &A)
 -- : ComplexDiagMatrix& fill (const ComplexColumnVector &A)
 -- : ComplexDiagMatrix& fill (const RowVector &A)
 -- : ComplexDiagMatrix& fill (const ComplexRowVector &A)
 -- : ComplexDiagMatrix& fill (const ColumnVector &A, int BEG)
 -- : ComplexDiagMatrix& fill (const ComplexColumnVector &A, int BEG)
 -- : ComplexDiagMatrix& fill (const RowVector &A, int BEG)
 -- : ComplexDiagMatrix& fill (const ComplexRowVector &A, int BEG)

 -- : ComplexDiagMatrix transpose (void) const

 -- : DiagMatrix real (const ComplexDiagMatrix &A)
 -- : DiagMatrix imag (const ComplexDiagMatrix &A)
 -- : ComplexDiagMatrix conj (const ComplexDiagMatrix &A)

 -- : ComplexMatrix extract (int r1, int c1, int r2, int c2) const

 -- : ComplexRowVector row (int I) const
 -- : ComplexRowVector row (char *s) const

 -- : ComplexColumnVector column (int I) const
 -- : ComplexColumnVector column (char *s) const

 -- : ComplexDiagMatrix inverse (int &INFO) const
 -- : ComplexDiagMatrix inverse (void) const

 -- : ComplexDiagMatrix& operator += (const DiagMatrix &A)
 -- : ComplexDiagMatrix& operator -= (const DiagMatrix &A)

 -- : ComplexDiagMatrix& operator += (const ComplexDiagMatrix &A)
 -- : ComplexDiagMatrix& operator -= (const ComplexDiagMatrix &A)

 -- : ComplexMatrix operator + (const ComplexDiagMatrix &A, double S)
 -- : ComplexMatrix operator - (const ComplexDiagMatrix &A, double S)

 -- : ComplexMatrix operator + (const ComplexDiagMatrix &A, const
          Complex &S)
 -- : ComplexMatrix operator - (const ComplexDiagMatrix &A, const
          Complex &S)

 -- : ComplexDiagMatrix operator * (const ComplexDiagMatrix &A, double
          S)
 -- : ComplexDiagMatrix operator / (const ComplexDiagMatrix &A, double
          S)

 -- : ComplexMatrix operator + (double S, const ComplexDiagMatrix &A)
 -- : ComplexMatrix operator - (double S, const ComplexDiagMatrix &A)

 -- : ComplexMatrix operator + (const Complex &S, const
          ComplexDiagMatrix &A)
 -- : ComplexMatrix operator - (const Complex &S, const
          ComplexDiagMatrix &A)

 -- : ComplexDiagMatrix operator * (double S, const ComplexDiagMatrix
          &A)

 -- : ComplexColumnVector operator * (const ComplexDiagMatrix &A, const
          ColumnVector &B)

 -- : ComplexColumnVector operator * (const ComplexDiagMatrix &A, const
          ComplexColumnVector &B)

 -- : ComplexDiagMatrix operator + (const ComplexDiagMatrix &A, const
          DiagMatrix &B)
 -- : ComplexDiagMatrix operator - (const ComplexDiagMatrix &A, const
          DiagMatrix &B)

 -- : ComplexDiagMatrix product (const ComplexDiagMatrix &A, const
          DiagMatrix &B)

 -- : ComplexMatrix operator + (const ComplexDiagMatrix &A, const
          Matrix &B)
 -- : ComplexMatrix operator - (const ComplexDiagMatrix &A, const
          Matrix &B)
 -- : ComplexMatrix operator * (const ComplexDiagMatrix &A, const
          Matrix &B)

 -- : ComplexMatrix operator + (const ComplexDiagMatrix &A, const
          ComplexMatrix &B)
 -- : ComplexMatrix operator - (const ComplexDiagMatrix &A, const
          ComplexMatrix &B)
 -- : ComplexMatrix operator * (const ComplexDiagMatrix &A, const
          ComplexMatrix &B)

 -- : ComplexColumnVector diag (void) const
 -- : ComplexColumnVector diag (int K) const

 -- : ostream& operator << (ostream &OS, const ComplexDiagMatrix &A)


File: liboctave.info,  Node: Matrix Factorizations,  Next: Ranges,  Prev: Matrix and Vector Operations,  Up: Top

5 Matrix Factorizations
***********************

 -- :  AEPBALANCE (void)
 -- :  AEPBALANCE (const Matrix &A, const char *BALANCE_JOB)
 -- :  AEPBALANCE (const AEPBALANCE &A)

 -- : AEPBALANCE& operator = (const AEPBALANCE &A)

 -- : Matrix balanced_matrix (void) const
 -- : Matrix balancing_matrix (void) const

 -- : ostream& operator << (ostream &OS, const AEPBALANCE &A)

 -- :  ComplexAEPBALANCE (void)
 -- :  ComplexAEPBALANCE (const ComplexMatrix &A, const char
          *BALANCE_JOB)
 -- :  ComplexAEPBALANCE (const ComplexAEPBALANCE &A)

 -- : ComplexAEPBALANCE& operator = (const ComplexAEPBALANCE &A)

 -- : ComplexMatrix balanced_matrix (void) const
 -- : ComplexMatrix balancing_matrix (void) const

 -- : ostream& operator << (ostream &OS, const ComplexAEPBALANCE &A)

 -- :  DET (void)
 -- :  DET (const DET &A)

 -- : DET& operator = (const DET &A)

 -- : int value_will_overflow (void) const
 -- : int value_will_underflow (void) const

 -- : double coefficient (void) const
 -- : int exponent (void) const
 -- : double value (void) const

 -- : ostream& operator << (ostream &OS, const DET &A)

 -- :  ComplexDET (void)
 -- :  ComplexDET (const ComplexDET &A)

 -- : ComplexDET& operator = (const ComplexDET &A)

 -- : int value_will_overflow (void) const
 -- : int value_will_underflow (void) const

 -- : Complex coefficient (void) const
 -- : int exponent (void) const
 -- : Complex value (void) const

 -- : ostream& operator << (ostream &OS, const ComplexDET &A)

 -- :  GEPBALANCE (void)
 -- :  GEPBALANCE (const Matrix &A, const Matrix &, const char
          *BALANCE_JOB)
 -- :  GEPBALANCE (const GEPBALANCE &A)

 -- : GEPBALANCE& operator = (const GEPBALANCE &A)

 -- : Matrix balanced_a_matrix (void) const
 -- : Matrix balanced_b_matrix (void) const
 -- : Matrix left_balancing_matrix (void) const
 -- : Matrix right_balancing_matrix (void) const

 -- : ostream& operator << (ostream &OS, const GEPBALANCE &A)

 -- :  CHOL (void)
 -- :  CHOL (const Matrix &A)
 -- :  CHOL (const Matrix &A, int &INFO)
 -- :  CHOL (const CHOL &A)

 -- : CHOL& operator = (const CHOL &A)

 -- : Matrix chol_matrix (void) const

 -- : ostream& operator << (ostream &OS, const CHOL &A)

 -- :  ComplexCHOL (void)
 -- :  ComplexCHOL (const ComplexMatrix &A)
 -- :  ComplexCHOL (const ComplexMatrix &A, int &INFO)
 -- :  ComplexCHOL (const ComplexCHOL &A)

 -- : ComplexCHOL& operator = (const ComplexCHOL &A)

 -- : ComplexMatrix chol_matrix (void) const

 -- : ostream& operator << (ostream &OS, const ComplexCHOL &A)

 -- :  HESS (void)
 -- :  HESS (const Matrix &A)
 -- :  HESS (const Matrix&a, int &INFO)
 -- :  HESS (const HESS &A)

 -- : HESS& operator = (const HESS &A)

 -- : Matrix hess_matrix (void) const
 -- : Matrix unitary_hess_matrix (void) const

 -- : ostream& operator << (ostream &OS, const HESS &A)

 -- :  ComplexHESS (void)
 -- :  ComplexHESS (const ComplexMatrix &A)
 -- :  ComplexHESS (const ComplexMatrix &A, int &INFO)
 -- :  ComplexHESS (const ComplexHESS &A)

 -- : ComplexHESS& operator = (const ComplexHESS &A)

 -- : ComplexMatrix hess_matrix (void) const
 -- : ComplexMatrix unitary_hess_matrix (void) const

 -- : ostream& operator << (ostream &OS, const ComplexHESS &A)

 -- :  SCHUR (void)
 -- :  SCHUR (const Matrix &A, const char *ORD)
 -- :  SCHUR (const Matrix &A, const char *ORD, int &INFO)
 -- :  SCHUR (const SCHUR &A, const char *ORD)

 -- : SCHUR& operator = (const SCHUR &A)

 -- : Matrix schur_matrix (void) const
 -- : Matrix unitary_matrix (void) const

 -- : ostream& operator << (ostream &OS, const SCHUR &A)

 -- :  ComplexSCHUR (void)
 -- :  ComplexSCHUR (const ComplexMatrix &A, const char *ORD)
 -- :  ComplexSCHUR (const ComplexMatrix &A, const char *ORD, int &INFO)
 -- :  ComplexSCHUR (const ComplexSCHUR &A, const char *ORD)

 -- : ComplexSCHUR& operator = (const ComplexSCHUR &A)

 -- : ComplexMatrix schur_matrix (void) const
 -- : ComplexMatrix unitary_matrix (void) const

 -- : ostream& operator << (ostream &OS, const ComplexSCHUR &A)

 -- :  SVD (void)
 -- :  SVD (const Matrix &A)
 -- :  SVD (const Matrix &A, int &INFO)
 -- :  SVD (const SVD &A)

 -- : SVD& operator = (const SVD &A)

 -- : DiagMatrix singular_values (void) const
 -- : Matrix left_singular_matrix (void) const
 -- : Matrix right_singular_matrix (void) const

 -- : ostream& operator << (ostream &OS, const SVD &A)

 -- :  ComplexSVD (void)
 -- :  ComplexSVD (const ComplexMatrix &A)
 -- :  ComplexSVD (const ComplexMatrix &A, int &INFO)
 -- :  ComplexSVD (const ComplexSVD &A)

 -- : ComplexSVD& operator = (const ComplexSVD &A)

 -- : DiagMatrix singular_values (void) const
 -- : ComplexMatrix left_singular_matrix (void) const
 -- : ComplexMatrix right_singular_matrix (void) const

 -- : ostream& operator << (ostream &OS, const ComplexSVD &A)

 -- :  EIG (void)
 -- :  EIG (const Matrix &A)
 -- :  EIG (const Matrix &A, int &INFO)
 -- :  EIG (const ComplexMatrix &A)
 -- :  EIG (const ComplexMatrix &A, int &INFO)
 -- :  EIG (const EIG &A)

 -- : EIG& operator = (const EIG &A)

 -- : ComplexColumnVector eigenvalues (void) const

 -- : ComplexMatrix eigenvectors (void) const

 -- : ostream& operator << (ostream &OS, const EIG &A)

 -- :  LU (void)
 -- :  LU (const Matrix &A)
 -- :  LU (const LU &A)

 -- : LU& operator = (const LU &A)

 -- : Matrix L (void) const
 -- : Matrix U (void) const
 -- : Matrix P (void) const

 -- : ostream& operator << (ostream &OS, const LU &A)

 -- :  ComplexLU (void)
 -- :  ComplexLU (const ComplexMatrix &A)
 -- :  ComplexLU (const ComplexLU &A)

 -- : ComplexLU& operator = (const ComplexLU &A)

 -- : ComplexMatrix L (void) const
 -- : ComplexMatrix U (void) const
 -- : Matrix P (void) const

 -- : ostream& operator << (ostream &OS, const ComplexLU &A)

 -- :  QR (void)
 -- :  QR (const Matrix &A)
 -- :  QR (const QR &A)

 -- : QR& operator = (const QR &A)

 -- : Matrix Q (void) const
 -- : Matrix R (void) const

 -- : ostream& operator << (ostream &OS, const QR &A)

 -- :  ComplexQR (void)
 -- :  ComplexQR (const ComplexMatrix &A)
 -- :  ComplexQR (const ComplexQR &A)

 -- : ComplexQR& operator = (const ComplexQR &A)

 -- : ComplexMatrix Q (void) const
 -- : ComplexMatrix R (void) const

 -- : ostream& operator << (ostream &OS, const ComplexQR &A)


File: liboctave.info,  Node: Ranges,  Next: Nonlinear Functions,  Prev: Matrix Factorizations,  Up: Top

6 Ranges
********

 -- :  Range (void)
 -- :  Range (const Range &R)
 -- :  Range (double B, double L)
 -- :  Range (double B, double L, double I)

 -- : double base (void) const
 -- : double limit (void) const
 -- : double inc (void) const

 -- : void set_base (double B)
 -- : void set_limit (double L)
 -- : void set_inc (double I)

 -- : int nelem (void) const

 -- : double min (void) const
 -- : double max (void) const

 -- : void sort (void)

 -- : ostream& operator << (ostream &OS, const Range &R)
 -- : istream& operator >> (istream &IS, Range &R)

 -- : void print_range (void)


File: liboctave.info,  Node: Nonlinear Functions,  Next: Nonlinear Equations,  Prev: Ranges,  Up: Top

7 Nonlinear Functions
*********************

 -- :  NLFunc (void)
 -- :  NLFunc (const NONLINEAR_FCN)
 -- :  NLFunc (const NONLINEAR_FCN, const JACOBIAN_FCN)
 -- :  NLFunc (const NLFunc &A)

 -- : NLFunc& operator = (const NLFunc &A)

 -- : nonlinear_fcn function (void) const;

 -- : NLFunc& set_function (const nonlinear_fcn F)

 -- : jacobian_fcn jacobian_function (void) const;

 -- : NLFunc& set_jacobian_function (const jacobian_fcn J)


File: liboctave.info,  Node: Nonlinear Equations,  Next: Optimization,  Prev: Nonlinear Functions,  Up: Top

8 Nonlinear Equations
*********************

 -- :  NLEqn_options (void)
 -- :  NLEqn_options (const NLEqn_options &OPT)

 -- : NLEqn_options& operator = (const NLEqn_options &OPT)

 -- : void init (void)

 -- : void copy (const NLEqn_options &OPT)

 -- : void set_default_options (void)

 -- : void set_tolerance (double VAL)

 -- : double tolerance (void)

 -- :  NLEqn (void)
 -- :  NLEqn (const ColumnVector&, const NLFUNC)
 -- :  NLEqn (const NLEqn &A)

 -- : NLEqn& operator = (const NLEqn &A)

 -- : void resize (int N)

 -- : void set_states (const ColumnVector &X)

 -- : ColumnVector states (void) const

 -- : int size (void) const

 -- : ColumnVector solve (void)
 -- : ColumnVector solve (const ColumnVector &X)

 -- : ColumnVector solve (int &INFO)
 -- : ColumnVector solve (const ColumnVector &X, int &INFO)


File: liboctave.info,  Node: Optimization,  Next: Quadrature,  Prev: Nonlinear Equations,  Up: Top

9 Optimization
**************

* Menu:

* Objective Functions::
* Bounds::
* Linear Constraints::
* Nonlinear Constraints::
* Quadratic Programming::
* Nonlinear Programming::


File: liboctave.info,  Node: Objective Functions,  Next: Bounds,  Prev: Optimization,  Up: Optimization

9.1 Objective Functions
=======================

 -- :  Objective (void)
 -- :  Objective (const OBJECTIVE_FCN)
 -- :  Objective (const OBJECTIVE_FCN, const GRADIENT_FCN)
 -- :  Objective (const Objective &A)

 -- : Objective& operator = (const Objective &A)

 -- : objective_fcn objective_function (void) const;

 -- : Objective& set_objective_function (const OBJECTIVE_FCN)

 -- : gradient_fcn gradient_function (void) const;

 -- : Objective& set_gradient_function (const GRADIENT_FCN)


File: liboctave.info,  Node: Bounds,  Next: Linear Constraints,  Prev: Objective Functions,  Up: Optimization

9.2 Bounds
==========

 -- :  Bounds (void)
 -- :  Bounds (int N)
 -- :  Bounds (const ColumnVector LB, const ColumnVector UB)
 -- :  Bounds (const Bounds &A)

 -- : Bounds& operator = (const Bounds &A)

 -- : Bounds& resize (int N)

 -- : double lower_bound (int INDEX) const;
 -- : double upper_bound (int INDEX) const;

 -- : ColumnVector lower_bounds (void) const;
 -- : ColumnVector upper_bounds (void) const;

 -- : int size (void) const;

 -- : Bounds& set_bound (int INDEX, double LOW, double HIGH)

 -- : Bounds& set_bounds (double LOW, double HIGH)
 -- : Bounds& set_bounds (const ColumnVector LB, const ColumnVector UB)

 -- : Bounds& set_lower_bound (int INDEX, double LOW)
 -- : Bounds& set_upper_bound (int INDEX, double HIGH)

 -- : Bounds& set_lower_bounds (double LOW)
 -- : Bounds& set_upper_bounds (double HIGH)

 -- : Bounds& set_lower_bounds (const ColumnVector LB)
 -- : Bounds& set_upper_bounds (const ColumnVector UB)

 -- : ostream& operator << (ostream &OS, const Bounds &B)


File: liboctave.info,  Node: Linear Constraints,  Next: Nonlinear Constraints,  Prev: Bounds,  Up: Optimization

9.3 Linear Constraints
======================

 -- :  LinConst (void)
 -- :  LinConst (int NCLIN, int NX)
 -- :  LinConst (int NCLIN_EQ, int NCLIN_INEQ, int NX)
 -- :  LinConst (const ColumnVector &LB, const Matrix &A, const
          ColumnVector &UB)
 -- :  LinConst (const Matrix &A_EQ, const ColumnVector &B_EQ, const
          Matrix &A_INEQ, const ColumnVector &B_INEQ)
 -- :  LinConst (const LinConst &A)

 -- : LinConst& operator = (const LinConst &A)

 -- : LinConst& resize (int NCLIN, int N)

 -- : Matrix constraint_matrix (void) const;

 -- : LinConst& set_constraint_matrix (const Matrix &A)

 -- : Matrix eq_constraint_matrix (void) const;
 -- : Matrix ineq_constraint_matrix (void) const;

 -- : ColumnVector eq_constraint_vector (void) const;
 -- : ColumnVector ineq_constraint_vector (void) const;

 -- : ostream& operator << (ostream &OS, const LinConst &B)


File: liboctave.info,  Node: Nonlinear Constraints,  Next: Quadratic Programming,  Prev: Linear Constraints,  Up: Optimization

9.4 Nonlinear Constraints
=========================

 -- :  NLConst (void)
 -- :  NLConst (int N)
 -- :  NLConst (const ColumnVector LB, const NLFunc F, const
          ColumnVector UB)
 -- :  NLConst (const NLConst &A)

 -- : NLConst& operator = (const NLConst &A)


File: liboctave.info,  Node: Quadratic Programming,  Next: Nonlinear Programming,  Prev: Nonlinear Constraints,  Up: Optimization

9.5 Quadratic Programming
=========================

 -- :  QP (void)
 -- :  QP (const ColumnVector &X, const Matrix &H)
 -- :  QP (const ColumnVector &X, const Matrix &H, const ColumnVector
          &C)
 -- :  QP (const ColumnVector &X, const Matrix &H, const Bounds &B)
 -- :  QP (const ColumnVector &X, const Matrix &H, const LinConst &LC)
 -- :  QP (const ColumnVector &X, const Matrix &H, const ColumnVector
          &C, const Bounds &B)
 -- :  QP (const ColumnVector &X, const Matrix &H, const ColumnVector
          &C, const LinConst &LC)
 -- :  QP (const ColumnVector &X, const Matrix &H, const Bounds &B,
          const LinConst &LC)
 -- :  QP (const ColumnVector &X, const Matrix &H, const ColumnVector
          &C, const Bounds &B, const LinConst &LC)

 -- : virtual ColumnVector minimize (void)
 -- : virtual ColumnVector minimize (double &OBJF)
 -- : virtual ColumnVector minimize (double &OBJF, int &INFORM)
 -- : virtual ColumnVector minimize (double &OBJF, int &INFORM,
          ColumnVector &LAMBDA) = 0;

 -- : virtual ColumnVector minimize (const ColumnVector &X)
 -- : virtual ColumnVector minimize (const ColumnVector &X, double
          &OBJF)
 -- : virtual ColumnVector minimize (const ColumnVector &X, double
          &OBJF, int &INFORM)
 -- : virtual ColumnVector minimize (const ColumnVector &X, double
          &OBJF, int &INFORM, ColumnVector &LAMBDA)

 -- : ColumnVector minimize (double &OBJF, int &INFORM, ColumnVector
          &LAMBDA)


File: liboctave.info,  Node: Nonlinear Programming,  Prev: Quadratic Programming,  Up: Optimization

9.6 Nonlinear Programming
=========================

 -- :  NLP (void)
 -- :  NLP (const ColumnVector &X, const Objective &PHI)
 -- :  NLP (const ColumnVector &X, const Objective &PHI, const Bounds
          &B)
 -- :  NLP (const ColumnVector &X, const Objective &PHI, const Bounds
          &B, const LinConst &LC)
 -- :  NLP (const ColumnVector &X, const Objective &PHI, const Bounds
          &B, const LinConst &LC, const NLConst &NLC)
 -- :  NLP (const ColumnVector &X, const Objective &PHI, const LinConst
          &LC)
 -- :  NLP (const ColumnVector &X, const Objective &PHI, const LinConst
          &LC, const NLConst &NLC)
 -- :  NLP (const ColumnVector &X, const Objective &PHI, const NLConst
          &NLC)
 -- :  NLP (const ColumnVector &X, const Objective &PHI, const Bounds
          &B, const NLConst &NLC)

 -- : NLP& operator = (const NLP &A)

 -- : int size (void) const

 -- : ColumnVector minimize (void)
 -- : ColumnVector minimize (double &OBJF)
 -- : ColumnVector minimize (double &OBJF, int &INFORM)
 -- : ColumnVector minimize (double &OBJF, int &INFORM, ColumnVector
          &LAMBDA)

 -- : ColumnVector minimize (const ColumnVector &X)
 -- : ColumnVector minimize (const ColumnVector &X, double &OBJF)
 -- : ColumnVector minimize (const ColumnVector &X, double &OBJF, int
          &INFORM)
 -- : ColumnVector minimize (const ColumnVector &X, double &OBJF, int
          &INFORM, ColumnVector &LAMBDA)


File: liboctave.info,  Node: Quadrature,  Next: Ordinary Differential Equations,  Prev: Optimization,  Up: Top

10 Quadrature
*************

 -- :  Quad (integrand_fcn FCN)
 -- :  Quad (integrand_fcn FCN, double ABS, double REL)

 -- : virtual double integrate (void)
 -- : virtual double integrate (int &IER)
 -- : virtual double integrate (int &IER, int &NEVAL)
 -- : virtual double integrate (int &IER, int &NEVAL, double &ABSERR) =
          0

 -- :  Quad_options (void)
 -- :  Quad_options (const Quad_options &OPT)

 -- : Quad_options& operator = (const Quad_options &OPT)

 -- : void init (void)

 -- : void copy (const Quad_options &OPT)

 -- : void set_default_options (void)

 -- : void set_absolute_tolerance (double VAL)

 -- : void set_relative_tolerance (double VAL)

 -- : double absolute_tolerance (void)
 -- : double relative_tolerance (void)

 -- :  DefQuad (integrand_fcn FCN)
 -- :  DefQuad (integrand_fcn FCN, double LL, double UL)
 -- :  DefQuad (integrand_fcn FCN, double LL, double UL, double ABS,
          double REL)
 -- :  DefQuad (integrand_fcn FCN, double LL, double UL, const
          ColumnVector &SING)
 -- :  DefQuad (integrand_fcn FCN, const ColumnVector &SING, double
          ABS, double REL)
 -- :  DefQuad (integrand_fcn FCN, const ColumnVector &SING)
 -- :  DefQuad (integrand_fcn FCN, double LL, double UL, const
          ColumnVector &SING, double ABS, double REL)

 -- :  IndefQuad (integrand_fcn FCN)
 -- :  IndefQuad (integrand_fcn FCN, double B, IntegralType T)
 -- :  IndefQuad (integrand_fcn FCN, double B, IntegralType T, double
          ABS, double REL)
 -- :  IndefQuad (integrand_fcn FCN, double ABS, double REL)

* Menu:

* Collocation Weights::


File: liboctave.info,  Node: Collocation Weights,  Prev: Quadrature,  Up: Quadrature

10.1 Collocation Weights
========================

 -- :  CollocWt (void)
 -- :  CollocWt (int N, int INC_L, int INC_R)
 -- :  CollocWt (int N, int INC_L, int INC_R, double L, double R)
 -- :  CollocWt (int N, double A, double B, int INC_L, int INC_R)
 -- :  CollocWt (int N, int INC_L, int INC_R, double L, double R)
 -- :  CollocWt (const CollocWt&)

 -- : CollocWt& operator = (const CollocWt&)

 -- : CollocWt& resize (int NCOL)

 -- : CollocWt& add_left (void)
 -- : CollocWt& add_right (void)

 -- : CollocWt& delete_left (void)
 -- : CollocWt& delete_right (void)

 -- : CollocWt& set_left (double VAL)
 -- : CollocWt& set_right (double VAL)

 -- : CollocWt& set_alpha (double VAL)
 -- : CollocWt& set_beta (double VAL)

 -- : int ncol (void) const

 -- : int left_included (void) const
 -- : int right_included (void) const

 -- : double left (void) const
 -- : double right (void) const
 -- : double width (void) const

 -- : double alpha (void) const
 -- : double beta (void) const

 -- : ColumnVector roots (void)
 -- : ColumnVector quad (void)
 -- : ColumnVector quad_weights (void)

 -- : Matrix first (void)
 -- : Matrix second (void)

 -- : ostream& operator << (ostream &OS, const CollocWt &C)


File: liboctave.info,  Node: Ordinary Differential Equations,  Next: Differential Algebraic Equations,  Prev: Quadrature,  Up: Top

11 Ordinary Differential Equations
**********************************

 -- :  ODE_options (void)
 -- :  ODE_options (const ODE_options &OPT)

 -- : ODE_options& operator = (const ODE_options &OPT)

 -- : void init (void)

 -- : void copy (const ODE_options &OPT)

 -- : void set_default_options (void)

 -- : void set_absolute_tolerance (double VAL)

 -- : void set_initial_step_size (double VAL)

 -- : void set_maximum_step_size (double VAL)

 -- : void set_minimum_step_size (double VAL)

 -- : void set_relative_tolerance (double VAL)

 -- : double absolute_tolerance (void)
 -- : double initial_step_size (void)
 -- : double maximum_step_size (void)
 -- : double minimum_step_size (void)
 -- : double relative_tolerance (void)

 -- :  ODE (void)
 -- :  ODE (int N)
 -- :  ODE (const ColumnVector &STATE, double TIME, const ODEFunc &F)

 -- : virtual int size (void) const

 -- : virtual ColumnVector state (void) const

 -- : virtual double time (void) const

 -- : virtual void force_restart (void)

 -- : virtual void initialize (const ColumnVector &X, double T)

 -- : virtual void set_stop_time (double T)

 -- : virtual void clear_stop_time (void)

 -- : virtual ColumnVector integrate (double T)

 -- : void integrate (int NSTEPS, double TSTEP, ostream &S)

 -- : Matrix integrate (const ColumnVector &TOUT)
 -- : Matrix integrate (const ColumnVector &TOUT, const ColumnVector
          &TCRIT)


File: liboctave.info,  Node: Differential Algebraic Equations,  Next: Error Handling,  Prev: Ordinary Differential Equations,  Up: Top

12 Differential Algebraic Equations
***********************************

 -- :  DAE (void)
 -- :  DAE (int N)
 -- :  DAE (const ColumnVector &X, double TIME, DAEFunc &F)
 -- :  DAE (const ColumnVector &X, ColumnVector &XDOT, double TIME,
          DAEFunc &F)

 -- : ColumnVector deriv (void)

 -- : virtual void initialize (const ColumnVector &X, double T)
 -- : virtual void initialize (const ColumnVector &X, ColumnVector
          &XDOT, double T)

 -- : ColumnVector integrate (double T)

 -- : Matrix integrate (const ColumnVector &TOUT, Matrix &XDOT_OUT)
 -- : Matrix integrate (const ColumnVector &TOUT, Matrix &XDOT_OUT,
          const ColumnVector &TCRIT)


File: liboctave.info,  Node: Error Handling,  Next: Installation,  Prev: Differential Algebraic Equations,  Up: Top

13 Error Handling
*****************


File: liboctave.info,  Node: Installation,  Next: Bugs,  Prev: Error Handling,  Up: Top

14 Installation
***************


File: liboctave.info,  Node: Bugs,  Next: Concept Index,  Prev: Installation,  Up: Top

15 Bugs
*******


File: liboctave.info,  Node: Concept Index,  Next: Function Index,  Prev: Bugs,  Up: Top

Concept Index
*************

 [index ]
* Menu:

* acknowledgements:                      Acknowledgements.     (line  6)
* arrays:                                Arrays.               (line  6)
* bounds:                                Bounds.               (line  6)
* bugs, known:                           Bugs.                 (line  6)
* collocation weights:                   Collocation Weights.  (line  6)
* contributors:                          Contributors.         (line  6)
* copyright:                             Contributors.         (line 10)
* DAE:                                   Differential Algebraic Equations.
                                                               (line  6)
* factorizations:                        Matrix Factorizations.
                                                               (line  6)
* installation:                          Installation.         (line  6)
* installation trouble:                  Bugs.                 (line  6)
* integration:                           Quadrature.           (line  6)
* introduction:                          Introduction.         (line  6)
* known causes of trouble:               Bugs.                 (line  6)
* linear Constraints:                    Linear Constraints.   (line  6)
* matrix factorizations:                 Matrix Factorizations.
                                                               (line  6)
* matrix manipulations:                  Matrix and Vector Operations.
                                                               (line  6)
* NLP:                                   Nonlinear Programming.
                                                               (line  6)
* nonlinear Constraints:                 Nonlinear Constraints.
                                                               (line  6)
* nonlinear equations:                   Nonlinear Equations.  (line  6)
* nonlinear functions:                   Nonlinear Functions.  (line  6)
* nonlinear programming:                 Nonlinear Programming.
                                                               (line  6)
* numerical integration:                 Quadrature.           (line  6)
* objective functions:                   Objective Functions.  (line  6)
* ODE:                                   Ordinary Differential Equations.
                                                               (line  6)
* optimization:                          Optimization.         (line  6)
* orthogonal collocation:                Collocation Weights.  (line  6)
* QP:                                    Quadratic Programming.
                                                               (line  6)
* quadratic programming:                 Quadratic Programming.
                                                               (line  6)
* quadrature:                            Quadrature.           (line  6)
* ranges:                                Ranges.               (line  6)
* troubleshooting:                       Bugs.                 (line  6)
* vector manipulations:                  Matrix and Vector Operations.
                                                               (line  6)
* warranty:                              Contributors.         (line 10)


File: liboctave.info,  Node: Function Index,  Prev: Concept Index,  Up: Top

Function Index
**************

 [index ]
* Menu:

* absolute_tolerance <1>:                Ordinary Differential Equations.
                                                              (line  28)
* absolute_tolerance:                    Quadrature.          (line  31)
* add_left:                              Collocation Weights. (line  18)
* add_right:                             Collocation Weights. (line  19)
* AEPBALANCE:                            Matrix Factorizations.
                                                              (line   7)
* all:                                   Matrix and Vector Operations.
                                                              (line 144)
* alpha:                                 Collocation Weights. (line  39)
* any:                                   Matrix and Vector Operations.
                                                              (line 145)
* append:                                Matrix and Vector Operations.
                                                              (line  28)
* Array2<T>:                             Constructors and Assignment.
                                                              (line  61)
* Array3<T>:                             Constructors and Assignment.
                                                              (line  84)
* Array<T>:                              Constructors and Assignment.
                                                              (line   7)
* balanced_a_matrix:                     Matrix Factorizations.
                                                              (line  65)
* balanced_b_matrix:                     Matrix Factorizations.
                                                              (line  66)
* balanced_matrix:                       Matrix Factorizations.
                                                              (line  13)
* balancing_matrix:                      Matrix Factorizations.
                                                              (line  14)
* base:                                  Ranges.              (line  12)
* beta:                                  Collocation Weights. (line  40)
* Bounds:                                Bounds.              (line   7)
* capacity on Array<T>:                  Constructors and Assignment.
                                                              (line  26)
* checkelem on Array2<T>:                Constructors and Assignment.
                                                              (line  77)
* checkelem on Array3<T>:                Constructors and Assignment.
                                                              (line  96)
* checkelem on Array<T>:                 Constructors and Assignment.
                                                              (line  31)
* checkelem on DiagArray<T>:             Constructors and Assignment.
                                                              (line 121)
* CHOL:                                  Matrix Factorizations.
                                                              (line  72)
* chol_matrix:                           Matrix Factorizations.
                                                              (line  79)
* clear_stop_time:                       Ordinary Differential Equations.
                                                              (line  50)
* coefficient:                           Matrix Factorizations.
                                                              (line  38)
* CollocWt:                              Collocation Weights. (line   7)
* cols on Array2<T>:                     Constructors and Assignment.
                                                              (line  73)
* cols on DiagArray<T>:                  Constructors and Assignment.
                                                              (line 117)
* column:                                Matrix and Vector Operations.
                                                              (line  45)
* column_max:                            Matrix and Vector Operations.
                                                              (line 165)
* column_max_loc:                        Matrix and Vector Operations.
                                                              (line 166)
* column_min:                            Matrix and Vector Operations.
                                                              (line 162)
* column_min_loc:                        Matrix and Vector Operations.
                                                              (line 163)
* columns on Array2<T>:                  Constructors and Assignment.
                                                              (line  74)
* columns on DiagArray<T>:               Constructors and Assignment.
                                                              (line 118)
* ColumnVector:                          Matrix and Vector Operations.
                                                              (line 171)
* ComplexAEPBALANCE:                     Matrix Factorizations.
                                                              (line  18)
* ComplexCHOL:                           Matrix Factorizations.
                                                              (line  83)
* ComplexColumnVector:                   Matrix and Vector Operations.
                                                              (line 578)
* ComplexDET:                            Matrix Factorizations.
                                                              (line  44)
* ComplexDiagMatrix:                     Matrix and Vector Operations.
                                                              (line 731)
* ComplexHESS:                           Matrix Factorizations.
                                                              (line 106)
* ComplexLU:                             Matrix Factorizations.
                                                              (line 195)
* ComplexMatrix:                         Matrix and Vector Operations.
                                                              (line 390)
* ComplexQR:                             Matrix Factorizations.
                                                              (line 218)
* ComplexRowVector:                      Matrix and Vector Operations.
                                                              (line 656)
* ComplexSCHUR:                          Matrix Factorizations.
                                                              (line 130)
* ComplexSVD:                            Matrix Factorizations.
                                                              (line 155)
* conj:                                  Matrix and Vector Operations.
                                                              (line 445)
* constraint_matrix:                     Linear Constraints.  (line  20)
* copy <1>:                              Ordinary Differential Equations.
                                                              (line  14)
* copy <2>:                              Quadrature.          (line  23)
* copy:                                  Nonlinear Equations. (line  14)
* cumprod:                               Matrix and Vector Operations.
                                                              (line 147)
* cumsum:                                Matrix and Vector Operations.
                                                              (line 148)
* DAE:                                   Differential Algebraic Equations.
                                                              (line   7)
* data on Array<T>:                      Constructors and Assignment.
                                                              (line  59)
* DefQuad:                               Quadrature.          (line  34)
* delete_left:                           Collocation Weights. (line  21)
* delete_right:                          Collocation Weights. (line  22)
* deriv:                                 Differential Algebraic Equations.
                                                              (line  13)
* DET:                                   Matrix Factorizations.
                                                              (line  30)
* determinant:                           Matrix and Vector Operations.
                                                              (line  55)
* diag:                                  Matrix and Vector Operations.
                                                              (line 153)
* DiagArray<T>:                          Constructors and Assignment.
                                                              (line 103)
* DiagMatrix:                            Matrix and Vector Operations.
                                                              (line 302)
* dim1 on Array2<T>:                     Constructors and Assignment.
                                                              (line  69)
* dim1 on Array3<T>:                     Constructors and Assignment.
                                                              (line  91)
* dim1 on DiagArray<T>:                  Constructors and Assignment.
                                                              (line 113)
* dim2 on Array2<T>:                     Constructors and Assignment.
                                                              (line  72)
* dim2 on Array3<T>:                     Constructors and Assignment.
                                                              (line  92)
* dim2 on DiagArray<T>:                  Constructors and Assignment.
                                                              (line 116)
* dim3 on Array3<T>:                     Constructors and Assignment.
                                                              (line  93)
* EIG:                                   Matrix Factorizations.
                                                              (line 168)
* eigenvalues:                           Matrix Factorizations.
                                                              (line 177)
* eigenvectors:                          Matrix Factorizations.
                                                              (line 179)
* elem on Array2<T>:                     Constructors and Assignment.
                                                              (line  76)
* elem on Array3<T>:                     Constructors and Assignment.
                                                              (line  95)
* elem on Array<T>:                      Constructors and Assignment.
                                                              (line  30)
* elem on DiagArray<T>:                  Constructors and Assignment.
                                                              (line 120)
* eq_constraint_matrix:                  Linear Constraints.  (line  24)
* eq_constraint_vector:                  Linear Constraints.  (line  27)
* exponent:                              Matrix Factorizations.
                                                              (line  39)
* extract:                               Matrix and Vector Operations.
                                                              (line  40)
* fill:                                  Matrix and Vector Operations.
                                                              (line  25)
* first:                                 Collocation Weights. (line  46)
* force_restart:                         Ordinary Differential Equations.
                                                              (line  44)
* fourier:                               Matrix and Vector Operations.
                                                              (line  52)
* function:                              Nonlinear Functions. (line  14)
* GEPBALANCE:                            Matrix Factorizations.
                                                              (line  58)
* gradient_function:                     Objective Functions. (line  18)
* HESS:                                  Matrix Factorizations.
                                                              (line  94)
* hess_matrix:                           Matrix Factorizations.
                                                              (line 101)
* ifourier:                              Matrix and Vector Operations.
                                                              (line  53)
* imag:                                  Matrix and Vector Operations.
                                                              (line 444)
* inc:                                   Ranges.              (line  14)
* IndefQuad:                             Quadrature.          (line  46)
* ineq_constraint_matrix:                Linear Constraints.  (line  25)
* ineq_constraint_vector:                Linear Constraints.  (line  28)
* init <1>:                              Ordinary Differential Equations.
                                                              (line  12)
* init <2>:                              Quadrature.          (line  21)
* init:                                  Nonlinear Equations. (line  12)
* initial_step_size:                     Ordinary Differential Equations.
                                                              (line  29)
* initialize <1>:                        Differential Algebraic Equations.
                                                              (line  15)
* initialize:                            Ordinary Differential Equations.
                                                              (line  46)
* insert:                                Matrix and Vector Operations.
                                                              (line  20)
* integrate <1>:                         Differential Algebraic Equations.
                                                              (line  19)
* integrate <2>:                         Ordinary Differential Equations.
                                                              (line  52)
* integrate:                             Quadrature.          (line  10)
* inverse:                               Matrix and Vector Operations.
                                                              (line  48)
* jacobian_function:                     Nonlinear Functions. (line  18)
* L:                                     Matrix Factorizations.
                                                              (line 189)
* left:                                  Collocation Weights. (line  35)
* left_balancing_matrix:                 Matrix Factorizations.
                                                              (line  67)
* left_included:                         Collocation Weights. (line  32)
* left_singular_matrix:                  Matrix Factorizations.
                                                              (line 150)
* length on Array<T>:                    Constructors and Assignment.
                                                              (line  27)
* limit:                                 Ranges.              (line  13)
* LinConst:                              Linear Constraints.  (line   7)
* lower_bound:                           Bounds.              (line  16)
* lower_bounds:                          Bounds.              (line  19)
* lssolve:                               Matrix and Vector Operations.
                                                              (line  79)
* LU:                                    Matrix Factorizations.
                                                              (line 183)
* map:                                   Matrix and Vector Operations.
                                                              (line 141)
* Matrix:                                Matrix and Vector Operations.
                                                              (line   7)
* max <1>:                               Ranges.              (line  23)
* max:                                   Matrix and Vector Operations.
                                                              (line 235)
* maximum_step_size:                     Ordinary Differential Equations.
                                                              (line  30)
* min <1>:                               Ranges.              (line  22)
* min:                                   Matrix and Vector Operations.
                                                              (line 234)
* minimize <1>:                          Nonlinear Programming.
                                                              (line  28)
* minimize:                              Quadratic Programming.
                                                              (line  22)
* minimum_step_size:                     Ordinary Differential Equations.
                                                              (line  31)
* ncol:                                  Collocation Weights. (line  30)
* nelem:                                 Ranges.              (line  20)
* NLConst:                               Nonlinear Constraints.
                                                              (line   7)
* NLEqn:                                 Nonlinear Equations. (line  22)
* NLEqn_options:                         Nonlinear Equations. (line   7)
* NLFunc:                                Nonlinear Functions. (line   7)
* NLP:                                   Nonlinear Programming.
                                                              (line   7)
* Objective:                             Objective Functions. (line   7)
* objective_function:                    Objective Functions. (line  14)
* ODE:                                   Ordinary Differential Equations.
                                                              (line  34)
* ODE_options:                           Ordinary Differential Equations.
                                                              (line   7)
* operator !:                            Matrix and Vector Operations.
                                                              (line 105)
* operator !=:                           Matrix and Vector Operations.
                                                              (line  18)
* operator () on Array2<T>:              Constructors and Assignment.
                                                              (line  79)
* operator () on Array3<T>:              Constructors and Assignment.
                                                              (line  98)
* operator () on Array<T>:               Constructors and Assignment.
                                                              (line  36)
* operator () on DiagArray<T>:           Constructors and Assignment.
                                                              (line 123)
* operator * <1>:                        Matrix and Vector Operations.
                                                              (line 109)
* operator *:                            Constructors and Assignment.
                                                              (line 138)
* operator + <1>:                        Matrix and Vector Operations.
                                                              (line 107)
* operator +:                            Constructors and Assignment.
                                                              (line 136)
* operator +=:                           Matrix and Vector Operations.
                                                              (line  99)
* operator - <1>:                        Matrix and Vector Operations.
                                                              (line 108)
* operator -:                            Constructors and Assignment.
                                                              (line 137)
* operator -=:                           Matrix and Vector Operations.
                                                              (line 100)
* operator / <1>:                        Matrix and Vector Operations.
                                                              (line 110)
* operator /:                            Constructors and Assignment.
                                                              (line 139)
* operator << <1>:                       Collocation Weights. (line  49)
* operator << <2>:                       Linear Constraints.  (line  30)
* operator << <3>:                       Bounds.              (line  38)
* operator << <4>:                       Ranges.              (line  27)
* operator << <5>:                       Matrix Factorizations.
                                                              (line  16)
* operator <<:                           Matrix and Vector Operations.
                                                              (line 168)
* operator = <1>:                        Ordinary Differential Equations.
                                                              (line  10)
* operator = <2>:                        Collocation Weights. (line  14)
* operator = <3>:                        Quadrature.          (line  19)
* operator = <4>:                        Nonlinear Programming.
                                                              (line  24)
* operator = <5>:                        Nonlinear Constraints.
                                                              (line  13)
* operator = <6>:                        Linear Constraints.  (line  16)
* operator = <7>:                        Bounds.              (line  12)
* operator = <8>:                        Objective Functions. (line  12)
* operator = <9>:                        Nonlinear Equations. (line  10)
* operator = <10>:                       Nonlinear Functions. (line  12)
* operator = <11>:                       Matrix Factorizations.
                                                              (line  11)
* operator =:                            Matrix and Vector Operations.
                                                              (line  15)
* operator = on Array2<T>:               Constructors and Assignment.
                                                              (line  67)
* operator = on Array3<T>:               Constructors and Assignment.
                                                              (line  89)
* operator = on Array<T>:                Constructors and Assignment.
                                                              (line  21)
* operator = on DiagArray<T>&:           Constructors and Assignment.
                                                              (line 111)
* operator ==:                           Matrix and Vector Operations.
                                                              (line  17)
* operator >> <1>:                       Ranges.              (line  28)
* operator >>:                           Matrix and Vector Operations.
                                                              (line 169)
* P:                                     Matrix Factorizations.
                                                              (line 191)
* print_range:                           Ranges.              (line  30)
* prod:                                  Matrix and Vector Operations.
                                                              (line 149)
* product <1>:                           Matrix and Vector Operations.
                                                              (line 138)
* product:                               Constructors and Assignment.
                                                              (line 153)
* Q:                                     Matrix Factorizations.
                                                              (line 213)
* QP:                                    Quadratic Programming.
                                                              (line   7)
* QR:                                    Matrix Factorizations.
                                                              (line 207)
* quad:                                  Collocation Weights. (line  43)
* Quad:                                  Quadrature.          (line   7)
* Quad_options:                          Quadrature.          (line  16)
* quad_weights:                          Collocation Weights. (line  44)
* quotient <1>:                          Matrix and Vector Operations.
                                                              (line 139)
* quotient:                              Constructors and Assignment.
                                                              (line 154)
* R:                                     Matrix Factorizations.
                                                              (line 214)
* Range:                                 Ranges.              (line   7)
* real:                                  Matrix and Vector Operations.
                                                              (line 443)
* relative_tolerance <1>:                Ordinary Differential Equations.
                                                              (line  32)
* relative_tolerance:                    Quadrature.          (line  32)
* resize <1>:                            Collocation Weights. (line  16)
* resize <2>:                            Linear Constraints.  (line  18)
* resize <3>:                            Bounds.              (line  14)
* resize:                                Nonlinear Equations. (line  28)
* resize on Array2<T>:                   Constructors and Assignment.
                                                              (line  81)
* resize on Array3<T>:                   Constructors and Assignment.
                                                              (line 100)
* resize on Array<T>:                    Constructors and Assignment.
                                                              (line  51)
* resize on DiagArray<T>:                Constructors and Assignment.
                                                              (line 125)
* right:                                 Collocation Weights. (line  36)
* right_balancing_matrix:                Matrix Factorizations.
                                                              (line  68)
* right_included:                        Collocation Weights. (line  33)
* right_singular_matrix:                 Matrix Factorizations.
                                                              (line 151)
* roots:                                 Collocation Weights. (line  42)
* row:                                   Matrix and Vector Operations.
                                                              (line  42)
* row_max:                               Matrix and Vector Operations.
                                                              (line 159)
* row_max_loc:                           Matrix and Vector Operations.
                                                              (line 160)
* row_min:                               Matrix and Vector Operations.
                                                              (line 156)
* row_min_loc:                           Matrix and Vector Operations.
                                                              (line 157)
* rows on Array2<T>:                     Constructors and Assignment.
                                                              (line  70)
* rows on DiagArray<T>:                  Constructors and Assignment.
                                                              (line 114)
* RowVector:                             Matrix and Vector Operations.
                                                              (line 239)
* SCHUR:                                 Matrix Factorizations.
                                                              (line 118)
* schur_matrix:                          Matrix Factorizations.
                                                              (line 125)
* second:                                Collocation Weights. (line  47)
* set_absolute_tolerance <1>:            Ordinary Differential Equations.
                                                              (line  18)
* set_absolute_tolerance:                Quadrature.          (line  27)
* set_alpha:                             Collocation Weights. (line  27)
* set_base:                              Ranges.              (line  16)
* set_beta:                              Collocation Weights. (line  28)
* set_bound:                             Bounds.              (line  24)
* set_bounds:                            Bounds.              (line  26)
* set_constraint_matrix:                 Linear Constraints.  (line  22)
* set_default_options <1>:               Ordinary Differential Equations.
                                                              (line  16)
* set_default_options <2>:               Quadrature.          (line  25)
* set_default_options:                   Nonlinear Equations. (line  16)
* set_function:                          Nonlinear Functions. (line  16)
* set_gradient_function:                 Objective Functions. (line  20)
* set_inc:                               Ranges.              (line  18)
* set_initial_step_size:                 Ordinary Differential Equations.
                                                              (line  20)
* set_jacobian_function:                 Nonlinear Functions. (line  20)
* set_left:                              Collocation Weights. (line  24)
* set_limit:                             Ranges.              (line  17)
* set_lower_bound:                       Bounds.              (line  29)
* set_lower_bounds:                      Bounds.              (line  32)
* set_maximum_step_size:                 Ordinary Differential Equations.
                                                              (line  22)
* set_minimum_step_size:                 Ordinary Differential Equations.
                                                              (line  24)
* set_objective_function:                Objective Functions. (line  16)
* set_relative_tolerance <1>:            Ordinary Differential Equations.
                                                              (line  26)
* set_relative_tolerance:                Quadrature.          (line  29)
* set_right:                             Collocation Weights. (line  25)
* set_states:                            Nonlinear Equations. (line  30)
* set_stop_time:                         Ordinary Differential Equations.
                                                              (line  48)
* set_tolerance:                         Nonlinear Equations. (line  18)
* set_upper_bound:                       Bounds.              (line  30)
* set_upper_bounds:                      Bounds.              (line  33)
* singular_values:                       Matrix Factorizations.
                                                              (line 149)
* size <1>:                              Ordinary Differential Equations.
                                                              (line  38)
* size <2>:                              Nonlinear Programming.
                                                              (line  26)
* size <3>:                              Bounds.              (line  22)
* size:                                  Nonlinear Equations. (line  34)
* solve <1>:                             Nonlinear Equations. (line  36)
* solve:                                 Matrix and Vector Operations.
                                                              (line  59)
* sort:                                  Ranges.              (line  25)
* stack:                                 Matrix and Vector Operations.
                                                              (line  33)
* state:                                 Ordinary Differential Equations.
                                                              (line  40)
* states:                                Nonlinear Equations. (line  32)
* sum:                                   Matrix and Vector Operations.
                                                              (line 150)
* sumsq:                                 Matrix and Vector Operations.
                                                              (line 151)
* SVD:                                   Matrix Factorizations.
                                                              (line 142)
* time:                                  Ordinary Differential Equations.
                                                              (line  42)
* tolerance:                             Nonlinear Equations. (line  20)
* transpose:                             Matrix and Vector Operations.
                                                              (line  38)
* U:                                     Matrix Factorizations.
                                                              (line 190)
* unitary_hess_matrix:                   Matrix Factorizations.
                                                              (line 102)
* unitary_matrix:                        Matrix Factorizations.
                                                              (line 126)
* upper_bound:                           Bounds.              (line  17)
* upper_bounds:                          Bounds.              (line  20)
* value:                                 Matrix Factorizations.
                                                              (line  40)
* value_will_overflow:                   Matrix Factorizations.
                                                              (line  35)
* value_will_underflow:                  Matrix Factorizations.
                                                              (line  36)
* width:                                 Collocation Weights. (line  37)
* xelem on Array<T>:                     Constructors and Assignment.
                                                              (line  46)



Tag Table:
Node: Top776
Node: Acknowledgements1787
Node: Contributors2003
Node: Copying2303
Node: Introduction39855
Node: Arrays40106
Node: Constructors and Assignment40274
Node: Matrix and Vector Operations48616
Node: Matrix Factorizations80162
Node: Ranges86531
Node: Nonlinear Functions87229
Node: Nonlinear Equations87777
Node: Optimization88712
Node: Objective Functions88991
Node: Bounds89588
Node: Linear Constraints90703
Node: Nonlinear Constraints91696
Node: Quadratic Programming92093
Node: Nonlinear Programming93705
Node: Quadrature95243
Node: Collocation Weights96950
Node: Ordinary Differential Equations98249
Node: Differential Algebraic Equations99790
Node: Error Handling100596
Node: Installation100752
Node: Bugs100876
Node: Concept Index100983
Node: Function Index104347

End Tag Table
