# Created by Octave 3.6.4, Sat Mar 30 12:53:26 2013 Jerusalem Daylight Time <unknown@NITH02>
# name: cache
# type: cell
# rows: 3
# columns: 10
# name: <cell-element>
# type: sq_string
# elements: 1
# length: 9
MSNForces


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 532
 -- Function File: [X, M, S, N] = MSNForces(JOINTS, MEMBERS, DIST,
          POINT, MEMF, MEMBERNUM, DIVISIONS)
     This function returns the internal forces of a member for each
     position x. The member is divided in 20 subelements if the
     argument is not given. The used sign convention is displayed in
     the help file.

     Input parameters are similar as with SolveFrame and PlotFrame with
     extra arguments:    membernum = Number of the member to calculate
      divisions = Number of divisions for the member





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 74
This function returns the internal forces of a member for each position
x.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 12
PlotDiagrams


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 371
 -- Function File:  PlotDiagrams(JOINTS, MEMBERS, DIST, POINT, MEMF,
          DIAGRAM, DIVISIONS, SCALE)
     This function plots the internal forces for all members. The force
     to be plotted can be selected with DIAGRAM which will be "M", "S"
     or "N" for the moment, shear or normal forces.

     Input parameters are similar as with SolveFrame and PlotFrame.




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 56
This function plots the internal forces for all members.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 9
PlotFrame


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 463
 -- Function File:  PlotFrame(JOINTS, MEMBERS, D, FACTOR)
     Plots a 2D frame (with displacements if needed) using the
     following input parameters:

     joints = [x , y, constraints ; ...]

     constraints=[x , y, rotation] free=0, supported=1

     members = [nodeN, nodeF, E, I, A; ...]

     	  Optional arguments:

     D = [x,y,rotation;...] Displacements as returned by SolveFrame

     factor= Scaling factor for the discplacements (default: 10)





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
Plots a 2D frame (with displacements if needed) using the following
input parame



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 10
SolveFrame


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1108
 -- Function File: [REACTIONS, DISPLACEMENTS, MEMF] =
          SolveFrame(JOINTS, MEMBERS, NODELOADS, DIST, POINT)
     Solves a 2D frame with the matrix displacement method for the
     following input parameters:

     joints = [x , y, constraints ; ...]

     constraints=[x , y, rotation] free=0, supported=1

     members = [nodeN, nodeF, E, I, A; ...]

     nodeloads = [node, Fx, Fy, Mz; ...]

     loads on members:

     dist = [membernum,FxN,FyN,FxF,FyF,a,b,local ; ...] for distributed
     loads    where FxN and FyN are the loads on distance a from the
     near node    (same with far node and distance b)    local=1 if
     loads are on local axis, 0 if global

     point = [membernum,Fx,Fy,a,local; ...]     where Fx and Fy are the
     loads on distance a from the node near    local=1 if loads are on
     local axis, 0 if global

     Output is formated as follows (rownumber corresponds to    node or
     member number):

     Reactions = [Fx,Fy,Mz;...] where NaN if it was a non supported dof

     Displacements = [x,y,rotation;...]

     MemF = [FxN, FyN, MzN, FxF, FyF, MzF; ...]




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
Solves a 2D frame with the matrix displacement method for the following
input pa



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 15
SolveFrameCases


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 738
 -- Function File: [RESULTS] = SolveFrameCases (JOINTS, MEMBERS,
          LOADCASES)
     Solves a 2D frame with the matrix displacement method for the
     following input parameters:

     joints = [x , y, constraints ; ...]

     constraints=[x , y, rotation] free=0, supported=1

     members = [nodeN, nodeF, E, I, A; ...]

     loadcases is a struct array with for each loadcase the fields

     - nodeloads = [node, Fx, Fy, Mz; ...]

     - dist = [membernum,FxN,FyN,FxF,FyF,a,b,local ; ...]

     - point = [membernum,Fx,Fy,a,local; ...]

     input is as for the function SolveFrame.

     Output is a struct array with the fields: Displacements, Reactions
     and MemF

     (output formated as for the function SolveFrame.)




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
Solves a 2D frame with the matrix displacement method for the following
input pa



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 11
ocframe_ex1


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 68
 -- Function File:  ocframe_ex1()
     Example of a planar frame.





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 26
Example of a planar frame.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 11
ocframe_ex2


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 60
 -- Function File:  ocframe_ex2()
     Example of a beam.





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 18
Example of a beam.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 11
ocframe_ex3


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 68
 -- Function File:  ocframe_ex3()
     Example of a planar frame.





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 26
Example of a planar frame.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 12
ocframe_exLC


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 103
 -- Function File:  ocframe_exLC()
     Example of a beam with generation of eurocode ULS load cases





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 61
Example of a beam with generation of eurocode ULS load cases




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 21
ocframe_railwaybridge


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 92
 -- Function File:  ocframe_railwaybridge()
     Example taken from a real railwaybridge.





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 40
Example taken from a real railwaybridge.





