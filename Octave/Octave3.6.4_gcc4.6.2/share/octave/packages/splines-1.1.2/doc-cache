# Created by Octave 3.6.4, Sat Mar 30 09:50:13 2013 Jerusalem Daylight Time <unknown@NITH02>
# name: cache
# type: cell
# rows: 3
# columns: 8
# name: <cell-element>
# type: sq_string
# elements: 1
# length: 10
catmullrom


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 494
 -- Function File: PP = catmullrom( X, F, V)
     Returns the piecewise polynomial form of the Catmull-Rom cubic
     spline interpolating F at the points X.  If the input V is
     supplied it will be interpreted as the values of the tangents at
     the extremals, if it is missing, the values will be computed from
     the data via one-sided finite difference formulas. See the
     wikipedia page for "Cubic Hermite spline" for a description of the
     algorithm.

     See also: ppval





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
Returns the piecewise polynomial form of the Catmull-Rom cubic spline
interpolat



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 5
csape


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 741
 -- Function File: PP =  csape (X, Y, COND, VALC)
     cubic spline interpolation with various end conditions.  creates
     the pp-form of the cubic spline.

     the following end conditions as given in COND are possible.
    'complete'
          match slopes at first and last point as given in VALC

    'not-a-knot'
          third derivatives are continuous at the second and second
          last point

    'periodic'
          match first and second derivative of first and last point

    'second'
          match second derivative at first and last point as given in
          VALC

    'variational'
          set second derivative at first and last point to zero
          (natural cubic spline)

     See also: ppval, spline





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 55
cubic spline interpolation with various end conditions.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 5
csapi


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 151
 -- Function File: PP =  csapi (X, Y)
 -- Function File: YI =  csapi (X, Y, XI)
     cubic spline interpolation

     See also: ppval, spline, csape





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 27
cubic spline interpolation




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 5
csaps


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1156
 -- Function File: [YI P] = csaps(X, Y, P, XI, W=[])
 -- Function File: [PP P] = csaps(X, Y, P, [], W=[])
     Cubic spline approximation (smoothing)
     approximate [X,Y], weighted by W (inverse variance; if not given,
     equal weighting is assumed), at XI

     The chosen cubic spline with natural boundary conditions PP(X)
     minimizes P Sum_i W_i*(Y_i - PP(X_i))^2  +  (1-P) Int PP"(X) dX

     Outside the range of X, the cubic spline is a straight line

     X and W should be n by 1 in size; Y should be n by m; XI should be
     k by 1; the values in X should be distinct; the values in W should
     be nonzero

    P=0
          maximum smoothing: straight line

    P=1
          no smoothing: interpolation

    P<0 or not given
          an intermediate amount of smoothing is chosen (such that the
          smoothing term and the interpolation term are of the same
          magnitude)       (csaps_sel provides other methods for
          automatically selecting the smoothing parameter P.)

     Reference: Carl de Boor (1978), A Practical Guide to Splines,
     Springer, Chapter XIV


   See also: spline, csapi, ppval, csaps_sel




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
Cubic spline approximation (smoothing)
approximate [X,Y], weighted by W (inverse



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 9
csaps_sel


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 2643
 -- Function File: [YI P SIGMA2,UNC_Y] = csaps_sel(X, Y, XI, W=[],
          CRIT=[])
 -- Function File: [PP P SIGMA2,UNC_Y] = csaps_sel(X, Y, [], W=[],
          CRIT=[])
     Cubic spline approximation with smoothing parameter estimation
     Approximates [X,Y], weighted by W (inverse variance; if not given,
     equal weighting is assumed), at XI.

     The chosen cubic spline with natural boundary conditions PP(X)
     minimizes P Sum_i W_i*(Y_i - PP(X_i))^2  +  (1-P) Int PP"(X) dX.
     A selection criterion CRIT is used to find a suitable value for P
     (between 0 and 1); possible values for CRIT are `aicc' (corrected
     Akaike information criterion, the default); `aic' (original Akaike
     information criterion); `gcv' (generalized cross validation). If
     CRIT is a scalar instead of a string, then P is chosen to so that
     the mean square scaled residual Mean_i (W_i*(Y_i - PP(X_i))^2) is
     approximately equal to CRIT.

     X and W should be N by 1 in size; Y should be N by M; XI should be
     K by 1; the values in X should be distinct; the values in W should
     be nonzero.

     Returns the selected P, the estimated data scatter (variance from
     the smooth trend) SIGMA2, and the estimated uncertainty (SD) of
     the smoothing spline fit at each X value, UNC_Y.

     The optimization uses singular value decomposition of an N by N
     matrix for small N in order to quickly compute the residual size
     and model degrees of freedom for many P values for the
     optimization (Craven and Wahba 1979), while for large N (currently
     >300) an asymptotically more computation and storage efficient
     method that takes advantage of the sparsity of the problem's
     coefficient matrices is used (Hutchinson and de Hoog 1985).

     References:

     Carl de Boor (1978), A Practical Guide to Splines, Springer,
     Chapter XIV

     Clifford M. Hurvich, Jeffrey S. Simonoff, Chih-Ling Tsai (1998),
     Smoothing parameter selection in nonparametric regression using an
     improved Akaike information criterion, J. Royal Statistical
     Society, 60B:271-293

     M. F. Hutchinson and F. R. de Hoog (1985), Smoothing noisy data
     with spline functions, Numerische Mathematik, 47:99-106

     M. F. Hutchinson (1986), Algorithm 642: A fast procedure for
     calculating minimum cross-validation cubic smoothing splines, ACM
     Transactions on Mathematical Software, 12:150-153

     Grace Wahba (1983), Bayesian "confidence intervals" for the
     cross-validated smoothing spline, J Royal Statistical Society,
     45B:133-150


   See also: csaps, spline, csapi, ppval, gcvspl




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
Cubic spline approximation with smoothing parameter estimation
Approximates [X,Y



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 5
fnder


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 104
 -- Function File:   fnder (PP, ORDER)
     differentiate the spline in pp-form

     See also: ppval





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 36
differentiate the spline in pp-form




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 5
fnplt


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 96
 -- Function File:   fnplt (PP, 'PLT')
     plots spline

     See also: ppval, spline, csape





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 13
plots spline




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 5
fnval


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 100
 r = fnval(pp,x) or r = fnval(x,pp)
 Compute the value of the piece-wise polynomial pp at points x.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
 r = fnval(pp,x) or r = fnval(x,pp)
 Compute the value of the piece-wise polynom





