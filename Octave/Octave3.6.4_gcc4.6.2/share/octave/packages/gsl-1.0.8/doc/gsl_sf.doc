gsl_sf
-*- texinfo -*-
@deftypefn {Loadable Function} {} gsl_sf ()

Octave bindings to the GNU Scientific Library. All GSL functions can be
called with by the GSL names within octave.
@end deftypefn

clausen
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} clausen (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} clausen (@dots{})

The Clausen function is defined by the following integral,

Cl_2(x) = - \\int_0^x dt \\log(2 \\sin(t/2))

It is related to the dilogarithm by Cl_2(\\theta) = \\Im Li_2(\\exp(i \\theta)).

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


dawson
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} dawson (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} dawson (@dots{})

The Dawson integral is defined by \\exp(-x^2) \\int_0^x dt \\exp(t^2).
A table of Dawson integral can be found in Abramowitz & Stegun, Table 7.5. 

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


debye_1
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} debye_1 (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} debye_1 (@dots{})

The Debye functions are defined by the integral 

D_n(x) = n/x^n \\int_0^x dt (t^n/(e^t - 1)).

For further information see Abramowitz & Stegun, Section 27.1.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


debye_2
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} debye_2 (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} debye_2 (@dots{})

The Debye functions are defined by the integral

D_n(x) = n/x^n \\int_0^x dt (t^n/(e^t - 1)).

For further information see Abramowitz & Stegun, Section 27.1.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


debye_3
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} debye_3 (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} debye_3 (@dots{})

The Debye functions are defined by the integral

D_n(x) = n/x^n \\int_0^x dt (t^n/(e^t - 1)).

For further information see Abramowitz & Stegun, Section 27.1.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


debye_4
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} debye_4 (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} debye_4 (@dots{})

The Debye functions are defined by the integral

D_n(x) = n/x^n \\int_0^x dt (t^n/(e^t - 1)).

For further information see Abramowitz & Stegun, Section 27.1.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


erf_gsl
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} erf_gsl (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} erf_gsl (@dots{})

These routines compute the error function 
erf(x) = (2/\\sqrt(\\pi)) \\int_0^x dt \\exp(-t^2).

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


erfc_gsl
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} erfc_gsl (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} erfc_gsl (@dots{})

These routines compute the complementary error function 
erfc(x) = 1 - erf(x) = (2/\\sqrt(\\pi)) \\int_x^\\infty \\exp(-t^2).

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


log_erfc
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} log_erfc (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} log_erfc (@dots{})

These routines compute the logarithm of the complementary error
function \\log(\\erfc(x)).

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


erf_Z
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} erf_Z (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} erf_Z (@dots{})

These routines compute the Gaussian probability function 
Z(x) = (1/(2\\pi)) \\exp(-x^2/2).

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


erf_Q
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} erf_Q (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} erf_Q (@dots{})

These routines compute the upper tail of the Gaussian probability
function  Q(x) = (1/(2\\pi)) \\int_x^\\infty dt \\exp(-t^2/2).

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


hazard
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} hazard (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} hazard (@dots{})

The hazard function for the normal distrbution, also known as the 
inverse Mill\\'s ratio, is defined as 
h(x) = Z(x)/Q(x) = \\sqrt@{2/\\pi \\exp(-x^2 / 2) / \\erfc(x/\\sqrt 2)@}. 
It decreases rapidly as x approaches -\\infty and asymptotes to 
h(x) \\sim x as x approaches +\\infty.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


expm1
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} expm1 (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} expm1 (@dots{})

These routines compute the quantity \\exp(x)-1 using an algorithm that 
is accurate for small x.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


exprel
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} exprel (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} exprel (@dots{})

These routines compute the quantity (\\exp(x)-1)/x using an algorithm 
that is accurate for small x. For small x the algorithm is based on 
the expansion (\\exp(x)-1)/x = 1 + x/2 + x^2/(2*3) + x^3/(2*3*4) + \\dots.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


exprel_2
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} exprel_2 (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} exprel_2 (@dots{})

These routines compute the quantity 2(\\exp(x)-1-x)/x^2 using an
algorithm that is accurate for small x. For small x the algorithm is 
based on the expansion 
2(\\exp(x)-1-x)/x^2 = 1 + x/3 + x^2/(3*4) + x^3/(3*4*5) + \\dots.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


expint_E1
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} expint_E1 (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} expint_E1 (@dots{})

These routines compute the exponential integral E_1(x),

E_1(x) := Re \\int_1^\\infty dt \\exp(-xt)/t.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


expint_E2
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} expint_E2 (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} expint_E2 (@dots{})

These routines compute the second-order exponential integral E_2(x),

E_2(x) := \\Re \\int_1^\\infty dt \\exp(-xt)/t^2.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


expint_Ei
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} expint_Ei (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} expint_Ei (@dots{})

These routines compute the exponential integral E_i(x),

Ei(x) := - PV(\\int_@{-x@}^\\infty dt \\exp(-t)/t)

where PV denotes the principal value of the integral.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


Shi
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} Shi (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} Shi (@dots{})

These routines compute the integral Shi(x) = \\int_0^x dt \\sinh(t)/t.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


Chi
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} Chi (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} Chi (@dots{})

These routines compute the integral 

Chi(x) := Re[ \\gamma_E + \\log(x) + \\int_0^x dt (\\cosh[t]-1)/t] , 

where \\gamma_E is the Euler constant.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


expint_3
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} expint_3 (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} expint_3 (@dots{})

These routines compute the exponential integral 
Ei_3(x) = \\int_0^x dt \\exp(-t^3) for x >= 0.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


Si
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} Si (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} Si (@dots{})

These routines compute the Sine integral Si(x) = \\int_0^x dt \\sin(t)/t.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


Ci
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} Ci (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} Ci (@dots{})

These routines compute the Cosine integral 
Ci(x) = -\\int_x^\\infty dt \\cos(t)/t for x > 0. 

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


atanint
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} atanint (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} atanint (@dots{})

These routines compute the Arctangent integral 
AtanInt(x) = \\int_0^x dt \\arctan(t)/t. 

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


fermi_dirac_mhalf
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} fermi_dirac_mhalf (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} fermi_dirac_mhalf (@dots{})

These routines compute the complete Fermi-Dirac integral F_@{-1/2@}(x).

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


fermi_dirac_half
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} fermi_dirac_half (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} fermi_dirac_half (@dots{})

These routines compute the complete Fermi-Dirac integral F_@{1/2@}(x).

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


fermi_dirac_3half
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} fermi_dirac_3half (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} fermi_dirac_3half (@dots{})

These routines compute the complete Fermi-Dirac integral F_@{3/2@}(x).

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


gamma_gsl
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} gamma_gsl (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} gamma_gsl (@dots{})

These routines compute the Gamma function \\Gamma(x), subject to x not 
being a negative integer. The function is computed using the real 
Lanczos method. The maximum value of x such that \\Gamma(x) is not 
considered an overflow is given by the macro GSL_SF_GAMMA_XMAX and is 171.0.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


lngamma_gsl
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} lngamma_gsl (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} lngamma_gsl (@dots{})

These routines compute the logarithm of the Gamma function, 
\\log(\\Gamma(x)), subject to x not a being negative integer. 
For x<0 the real part of \\log(\\Gamma(x)) is returned, which is 
equivalent to \\log(|\\Gamma(x)|). The function is computed using 
the real Lanczos method.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


gammastar
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} gammastar (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} gammastar (@dots{})

These routines compute the regulated Gamma Function \\Gamma^*(x) 
for x > 0. The regulated gamma function is given by,

\\Gamma^*(x) = \\Gamma(x)/(\\sqrt@{2\\pi@} x^@{(x-1/2)@} \\exp(-x))
            = (1 + (1/12x) + ...)  for x \\to \\infty

and is a useful suggestion of Temme. 

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


gammainv_gsl
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} gammainv_gsl (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} gammainv_gsl (@dots{})

These routines compute the reciprocal of the gamma function, 1/\\Gamma(x) using the real Lanczos method.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


lambert_W0
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} lambert_W0 (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} lambert_W0 (@dots{})

These compute the principal branch of the Lambert W function, W_0(x).

Lambert\\'s W functions, W(x), are defined to be solutions of the
equation W(x) \\exp(W(x)) = x. This function has multiple branches 
for x < 0; however, it has only two real-valued branches. 
We define W_0(x) to be the principal branch, where W > -1 for x < 0, 
and W_@{-1@}(x) to be the other real branch, where W < -1 for x < 0.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


lambert_Wm1
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} lambert_Wm1 (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} lambert_Wm1 (@dots{})

These compute the secondary real-valued branch of the Lambert 
W function, W_@{-1@}(x).

Lambert\\'s W functions, W(x), are defined to be solutions of the
equation W(x) \\exp(W(x)) = x. This function has multiple branches 
for x < 0; however, it has only two real-valued branches. 
We define W_0(x) to be the principal branch, where W > -1 for x < 0, 
and W_@{-1@}(x) to be the other real branch, where W < -1 for x < 0.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


log_1plusx
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} log_1plusx (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} log_1plusx (@dots{})

These routines compute \\log(1 + x) for x > -1 using an algorithm that
is accurate for small x.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


log_1plusx_mx
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} log_1plusx_mx (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} log_1plusx_mx (@dots{})

These routines compute \\log(1 + x) - x for x > -1 using an algorithm 
that is accurate for small x.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


psi
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} psi (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} psi (@dots{})

These routines compute the digamma function \\psi(x) for general x, 
x \
e 0.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


psi_1piy
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} psi_1piy (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} psi_1piy (@dots{})

These routines compute the real part of the digamma function on 
the line 1+i y, Re[\\psi(1 + i y)].

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


synchrotron_1
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} synchrotron_1 (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} synchrotron_1 (@dots{})

These routines compute the first synchrotron function 
x \\int_x^\\infty dt K_@{5/3@}(t) for x >= 0.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


synchrotron_2
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} synchrotron_2 (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} synchrotron_2 (@dots{})

These routines compute the second synchrotron function 
x K_@{2/3@}(x) for x >= 0.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


transport_2
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} transport_2 (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} transport_2 (@dots{})

These routines compute the transport function J(2,x).

The transport functions J(n,x) are defined by the integral
representations J(n,x) := \\int_0^x dt t^n e^t /(e^t - 1)^2.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


transport_3
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} transport_3 (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} transport_3 (@dots{})

These routines compute the transport function J(3,x).

The transport functions J(n,x) are defined by the integral
representations J(n,x) := \\int_0^x dt t^n e^t /(e^t - 1)^2.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


transport_4
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} transport_4 (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} transport_4 (@dots{})

These routines compute the transport function J(4,x).

The transport functions J(n,x) are defined by the integral
representations J(n,x) := \\int_0^x dt t^n e^t /(e^t - 1)^2.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


transport_5
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} transport_5 (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} transport_5 (@dots{})

These routines compute the transport function J(5,x).

The transport functions J(n,x) are defined by the integral
representations J(n,x) := \\int_0^x dt t^n e^t /(e^t - 1)^2.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


sinc_gsl
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} sinc_gsl (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} sinc_gsl (@dots{})

These routines compute \\sinc(x) = \\sin(\\pi x) / (\\pi x) for any value of x.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


lnsinh
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} lnsinh (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} lnsinh (@dots{})

These routines compute \\log(\\sinh(x)) for x > 0.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


lncosh
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} lncosh (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} lncosh (@dots{})

These routines compute \\log(\\cosh(x)) for any x.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


zeta
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} zeta (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} zeta (@dots{})

These routines compute the Riemann zeta function \\zeta(s) for 
arbitrary s, s \
e 1.

The Riemann zeta function is defined by the infinite sum 
\\zeta(s) = \\sum_@{k=1@}^\\infty k^@{-s@}. 

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


eta
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} eta (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} eta (@dots{})

These routines compute the eta function \\eta(s) for arbitrary s.

The eta function is defined by \\eta(s) = (1-2^@{1-s@}) \\zeta(s).

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


bessel_Jn
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} bessel_Jn (@var{n}, @var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} bessel_Jn (@dots{})

These routines compute the regular cylindrical Bessel function of
order n, J_n(x).

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


bessel_Yn
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} bessel_Yn (@var{n}, @var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} bessel_Yn (@dots{})

These routines compute the irregular cylindrical Bessel function of 
order n, Y_n(x), for x>0.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


bessel_In
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} bessel_In (@var{n}, @var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} bessel_In (@dots{})

These routines compute the regular modified cylindrical Bessel
function of order n, I_n(x).

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


bessel_In_scaled
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} bessel_In_scaled (@var{n}, @var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} bessel_In_scaled (@dots{})

These routines compute the scaled regular modified cylindrical Bessel
function of order n, \\exp(-|x|) I_n(x)

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


bessel_Kn
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} bessel_Kn (@var{n}, @var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} bessel_Kn (@dots{})

These routines compute the irregular modified cylindrical Bessel
function of order n, K_n(x), for x > 0.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


bessel_Kn_scaled
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} bessel_Kn_scaled (@var{n}, @var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} bessel_Kn_scaled (@dots{})



@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


bessel_jl
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} bessel_jl (@var{n}, @var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} bessel_jl (@dots{})

These routines compute the regular spherical Bessel function of 
order l, j_l(x), for l >= 0 and x >= 0.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


bessel_yl
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} bessel_yl (@var{n}, @var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} bessel_yl (@dots{})

These routines compute the irregular spherical Bessel function of
order l, y_l(x), for l >= 0.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


bessel_il_scaled
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} bessel_il_scaled (@var{n}, @var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} bessel_il_scaled (@dots{})

These routines compute the scaled regular modified spherical Bessel
function of order l, \\exp(-|x|) i_l(x)

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


bessel_kl_scaled
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} bessel_kl_scaled (@var{n}, @var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} bessel_kl_scaled (@dots{})

These routines compute the scaled irregular modified spherical Bessel
function of order l, \\exp(x) k_l(x), for x>0.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


exprel_n
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} exprel_n (@var{n}, @var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} exprel_n (@dots{})

These routines compute the N-relative exponential, which is the n-th
generalization of the functions gsl_sf_exprel and gsl_sf_exprel2. The
N-relative exponential is given by,

exprel_N(x) = N!/x^N (\\exp(x) - \\sum_@{k=0@}^@{N-1@} x^k/k!)
            = 1 + x/(N+1) + x^2/((N+1)(N+2)) + ...
            = 1F1 (1,1+N,x)

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


fermi_dirac_int
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} fermi_dirac_int (@var{n}, @var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} fermi_dirac_int (@dots{})

These routines compute the complete Fermi-Dirac integral with an
integer index of j, F_j(x) = (1/\\Gamma(j+1)) \\int_0^\\infty dt (t^j
/(\\exp(t-x)+1)).

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


taylorcoeff
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} taylorcoeff (@var{n}, @var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} taylorcoeff (@dots{})

These routines compute the Taylor coefficient x^n / n! 
for x >= 0, n >= 0.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


legendre_Pl
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} legendre_Pl (@var{n}, @var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} legendre_Pl (@dots{})

These functions evaluate the Legendre polynomial P_l(x) for a specific
value of l, x subject to l >= 0, |x| <= 1

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


legendre_Ql
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} legendre_Ql (@var{n}, @var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} legendre_Ql (@dots{})

These routines compute the Legendre function Q_l(x) for x > -1, x != 1
and l >= 0.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


psi_n
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} psi_n (@var{n}, @var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} psi_n (@dots{})

These routines compute the polygamma function \\psi^@{(m)@}(x) 
for m >= 0, x > 0.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


bessel_Jnu
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} bessel_Jnu (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} bessel_Jnu (@dots{})

These routines compute the regular cylindrical Bessel function of
fractional order nu, J_\
u(x).

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


bessel_Ynu
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} bessel_Ynu (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} bessel_Ynu (@dots{})

These routines compute the irregular cylindrical Bessel function of
fractional order nu, Y_\
u(x).

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


bessel_Inu
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} bessel_Inu (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} bessel_Inu (@dots{})

These routines compute the regular modified Bessel function of
fractional order nu, I_\
u(x) for x>0, \
u>0.

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


bessel_Inu_scaled
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} bessel_Inu_scaled (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} bessel_Inu_scaled (@dots{})

These routines compute the scaled regular modified Bessel function of
fractional order nu, \\exp(-|x|)I_\
u(x) for x>0, \
u>0.

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


bessel_Knu
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} bessel_Knu (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} bessel_Knu (@dots{})

These routines compute the irregular modified Bessel function of
fractional order nu, K_\
u(x) for x>0, \
u>0.

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


bessel_lnKnu
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} bessel_lnKnu (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} bessel_lnKnu (@dots{})

These routines compute the logarithm of the irregular modified Bessel
function of fractional order nu, \\ln(K_\
u(x)) for x>0, \
u>0.

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


bessel_Knu_scaled
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} bessel_Knu_scaled (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} bessel_Knu_scaled (@dots{})

These routines compute the scaled irregular modified Bessel function
of fractional order nu, \\exp(+|x|) K_\
u(x) for x>0, \
u>0.

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


exp_mult
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} exp_mult (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} exp_mult (@dots{})

These routines exponentiate x and multiply by the factor y to return
the product y \\exp(x).

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


fermi_dirac_inc_0
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} fermi_dirac_inc_0 (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} fermi_dirac_inc_0 (@dots{})

These routines compute the incomplete Fermi-Dirac integral with an
index of zero, F_0(x,b) = \\ln(1 + e^@{b-x@}) - (b-x).

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


poch
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} poch (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} poch (@dots{})

These routines compute the Pochhammer symbol 

(a)_x := \\Gamma(a + x)/\\Gamma(a), 

subject to a and a+x not being negative integers. The Pochhammer
symbol is also known as the Apell symbol.

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


lnpoch
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} lnpoch (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} lnpoch (@dots{})

These routines compute the logarithm of the Pochhammer symbol,
\\log((a)_x) = \\log(\\Gamma(a + x)/\\Gamma(a)) for a > 0, a+x > 0.

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


pochrel
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} pochrel (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} pochrel (@dots{})

These routines compute the relative Pochhammer symbol ((a,x) - 1)/x
where (a,x) = (a)_x := \\Gamma(a + x)/\\Gamma(a).

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


gamma_inc_Q
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} gamma_inc_Q (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} gamma_inc_Q (@dots{})

These routines compute the normalized incomplete Gamma Function 
Q(a,x) = 1/\\Gamma(a) \\int_x\\infty dt t^@{a-1@} \\exp(-t) for a > 0, x >= 0.

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


gamma_inc_P
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} gamma_inc_P (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} gamma_inc_P (@dots{})

These routines compute the complementary normalized incomplete Gamma
Function P(a,x) = 1/\\Gamma(a) \\int_0^x dt t^@{a-1@} \\exp(-t) 
for a > 0, x >= 0.

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


gamma_inc
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} gamma_inc (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} gamma_inc (@dots{})

These functions compute the incomplete Gamma Function the
normalization factor included in the previously defined functions:
\\Gamma(a,x) = \\int_x\\infty dt t^@{a-1@} \\exp(-t) for a real and x >= 0.

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


beta_gsl
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} beta_gsl (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} beta_gsl (@dots{})

These routines compute the Beta Function, 
B(a,b) = \\Gamma(a)\\Gamma(b)/\\Gamma(a+b) for a > 0, b > 0.

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


lnbeta
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} lnbeta (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} lnbeta (@dots{})

These routines compute the logarithm of the Beta Function,
\\log(B(a,b)) for a > 0, b > 0.

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


hyperg_0F1
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} hyperg_0F1 (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} hyperg_0F1 (@dots{})

These routines compute the hypergeometric function 0F1(c,x).

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


conicalP_half
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} conicalP_half (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} conicalP_half (@dots{})

These routines compute the irregular Spherical Conical Function
P^@{1/2@}_@{-1/2 + i \\lambda@}(x) for x > -1.

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


conicalP_mhalf
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} conicalP_mhalf (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} conicalP_mhalf (@dots{})

These routines compute the regular Spherical Conical Function
P^@{-1/2@}_@{-1/2 + i \\lambda@}(x) for x > -1.

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


conicalP_0
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} conicalP_0 (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} conicalP_0 (@dots{})

These routines compute the conical function P^0_@{-1/2 + i \\lambda@}(x)
for x > -1.

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


conicalP_1
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} conicalP_1 (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} conicalP_1 (@dots{})

These routines compute the conical function P^1_@{-1/2 + i \\lambda@}(x)
for x > -1.

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


hzeta
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} hzeta (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} hzeta (@dots{})

These routines compute the Hurwitz zeta function \\zeta(s,q) 
for s > 1, q > 0.

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


airy_Ai
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} airy_Ai (@var{x}, @var{mode})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} airy_Ai (@dots{})

These routines compute the Airy function Ai(x) with an accuracy
specified by mode.

The second argument @var{mode} must be an integer corresponding to

@table @asis
@item 0 = GSL_PREC_DOUBLE
    Double-precision, a relative accuracy of approximately @code{2 * 10^-16}.
@item 1 = GSL_PREC_SINGLE
    Single-precision, a relative accuracy of approximately @code{10^-7}.
@item 2 = GSL_PREC_APPROX
    Approximate values, a relative accuracy of approximately @code{5 * 10^-4}.
@end table

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


airy_Bi
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} airy_Bi (@var{x}, @var{mode})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} airy_Bi (@dots{})

These routines compute the Airy function Bi(x) with an accuracy
specified by mode.

The second argument @var{mode} must be an integer corresponding to

@table @asis
@item 0 = GSL_PREC_DOUBLE
    Double-precision, a relative accuracy of approximately @code{2 * 10^-16}.
@item 1 = GSL_PREC_SINGLE
    Single-precision, a relative accuracy of approximately @code{10^-7}.
@item 2 = GSL_PREC_APPROX
    Approximate values, a relative accuracy of approximately @code{5 * 10^-4}.
@end table

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


airy_Ai_scaled
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} airy_Ai_scaled (@var{x}, @var{mode})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} airy_Ai_scaled (@dots{})

These routines compute a scaled version of the Airy function 
S_A(x) Ai(x). For x>0 the scaling factor S_A(x) is \\exp(+(2/3) x^(3/2)), and
is 1 for x<0.

The second argument @var{mode} must be an integer corresponding to

@table @asis
@item 0 = GSL_PREC_DOUBLE
    Double-precision, a relative accuracy of approximately @code{2 * 10^-16}.
@item 1 = GSL_PREC_SINGLE
    Single-precision, a relative accuracy of approximately @code{10^-7}.
@item 2 = GSL_PREC_APPROX
    Approximate values, a relative accuracy of approximately @code{5 * 10^-4}.
@end table

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


airy_Bi_scaled
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} airy_Bi_scaled (@var{x}, @var{mode})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} airy_Bi_scaled (@dots{})

These routines compute a scaled version of the Airy function 
S_B(x) Bi(x). For x>0 the scaling factor S_B(x) is exp(-(2/3) x^(3/2)), and
is 1 for x<0.

The second argument @var{mode} must be an integer corresponding to

@table @asis
@item 0 = GSL_PREC_DOUBLE
    Double-precision, a relative accuracy of approximately @code{2 * 10^-16}.
@item 1 = GSL_PREC_SINGLE
    Single-precision, a relative accuracy of approximately @code{10^-7}.
@item 2 = GSL_PREC_APPROX
    Approximate values, a relative accuracy of approximately @code{5 * 10^-4}.
@end table

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


airy_Ai_deriv
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} airy_Ai_deriv (@var{x}, @var{mode})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} airy_Ai_deriv (@dots{})

These routines compute the Airy function derivative Ai'(x) with an
accuracy specified by mode.

The second argument @var{mode} must be an integer corresponding to

@table @asis
@item 0 = GSL_PREC_DOUBLE
    Double-precision, a relative accuracy of approximately @code{2 * 10^-16}.
@item 1 = GSL_PREC_SINGLE
    Single-precision, a relative accuracy of approximately @code{10^-7}.
@item 2 = GSL_PREC_APPROX
    Approximate values, a relative accuracy of approximately @code{5 * 10^-4}.
@end table

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


airy_Bi_deriv
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} airy_Bi_deriv (@var{x}, @var{mode})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} airy_Bi_deriv (@dots{})

These routines compute the Airy function derivative Bi'(x) with an
accuracy specified by mode.

The second argument @var{mode} must be an integer corresponding to

@table @asis
@item 0 = GSL_PREC_DOUBLE
    Double-precision, a relative accuracy of approximately @code{2 * 10^-16}.
@item 1 = GSL_PREC_SINGLE
    Single-precision, a relative accuracy of approximately @code{10^-7}.
@item 2 = GSL_PREC_APPROX
    Approximate values, a relative accuracy of approximately @code{5 * 10^-4}.
@end table

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


airy_Ai_deriv_scaled
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} airy_Ai_deriv_scaled (@var{x}, @var{mode})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} airy_Ai_deriv_scaled (@dots{})

These routines compute the derivative of the scaled Airy function
S_A(x) Ai(x).

The second argument @var{mode} must be an integer corresponding to

@table @asis
@item 0 = GSL_PREC_DOUBLE
    Double-precision, a relative accuracy of approximately @code{2 * 10^-16}.
@item 1 = GSL_PREC_SINGLE
    Single-precision, a relative accuracy of approximately @code{10^-7}.
@item 2 = GSL_PREC_APPROX
    Approximate values, a relative accuracy of approximately @code{5 * 10^-4}.
@end table

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


airy_Bi_deriv_scaled
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} airy_Bi_deriv_scaled (@var{x}, @var{mode})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} airy_Bi_deriv_scaled (@dots{})

These routines compute the derivative of the scaled Airy function
S_B(x) Bi(x).

The second argument @var{mode} must be an integer corresponding to

@table @asis
@item 0 = GSL_PREC_DOUBLE
    Double-precision, a relative accuracy of approximately @code{2 * 10^-16}.
@item 1 = GSL_PREC_SINGLE
    Single-precision, a relative accuracy of approximately @code{10^-7}.
@item 2 = GSL_PREC_APPROX
    Approximate values, a relative accuracy of approximately @code{5 * 10^-4}.
@end table

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


ellint_Kcomp
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} ellint_Kcomp (@var{x}, @var{mode})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} ellint_Kcomp (@dots{})

These routines compute the complete elliptic integral K(k) 
@tex
\\beforedisplay
$$
\\eqalign{
K(k)   &= \\int_0^{\\pi/2}  {dt \\over \\sqrt{(1 - k^2 \\sin^2(t))}}  \\cr
}
$$
\\afterdisplay
See also:
@end tex
@ifinfo
@group
@example
                              pi
                              ---
                               2
                             /
                             |             1
          ellint_Kcomp(k)  = |    ------------------- dt
                             |              2   2
                             /    sqrt(1 - k sin (t))
                              0

@end example
@end group
@end ifinfo
@ifhtml
@group
@example
                              pi
                              ---
                               2
                             /
                             |             1
          ellint_Kcomp(k)  = |    ------------------- dt
                             |              2   2
                             /    sqrt(1 - k sin (t))
                              0

@end example
@end group
@end ifhtml

@seealso{ellipj, ellipke}

The notation used here is based on Carlson, @cite{Numerische
Mathematik} 33 (1979) and differs slightly from that used by
Abramowitz & Stegun, where the functions are given in terms of the
parameter @math{m = k^2}.


The second argument @var{mode} must be an integer corresponding to

@table @asis
@item 0 = GSL_PREC_DOUBLE
    Double-precision, a relative accuracy of approximately @code{2 * 10^-16}.
@item 1 = GSL_PREC_SINGLE
    Single-precision, a relative accuracy of approximately @code{10^-7}.
@item 2 = GSL_PREC_APPROX
    Approximate values, a relative accuracy of approximately @code{5 * 10^-4}.
@end table

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


ellint_Ecomp
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} ellint_Ecomp (@var{x}, @var{mode})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} ellint_Ecomp (@dots{})

These routines compute the complete elliptic integral E(k) to the
accuracy specified by the mode variable mode.

@tex
\\beforedisplay
$$
\\eqalign{
E(k)   &= \\int_0^{\\pi/2}    \\sqrt{(1 - k^2 \\sin^2(t))} dt \\cr
}
$$
\\afterdisplay
See also: 

@end tex
@ifinfo
@group
@example
                               pi
                              ---
                               2
                             /
                             |              2    2
         ellint_Ecomp(k)  =  |    sqrt(1 - k sin (t)) dt
                             |
                             /
                              0

@end example
@end group
@end ifinfo
@ifhtml
@group
@example
                               pi
                              ---
                               2
                             /
                             |              2    2
         ellint_Ecomp(k)  =  |    sqrt(1 - k sin (t)) dt
                             |
                             /
                              0

@end example
@end group
@end ifhtml

@seealso{ellipj, ellipke}

The notation used here is based on Carlson, @cite{Numerische
Mathematik} 33 (1979) and differs slightly from that used by
Abramowitz & Stegun, where the functions are given in terms of the
parameter @math{m = k^2}.

The second argument @var{mode} must be an integer corresponding to

@table @asis
@item 0 = GSL_PREC_DOUBLE
    Double-precision, a relative accuracy of approximately @code{2 * 10^-16}.
@item 1 = GSL_PREC_SINGLE
    Single-precision, a relative accuracy of approximately @code{10^-7}.
@item 2 = GSL_PREC_APPROX
    Approximate values, a relative accuracy of approximately @code{5 * 10^-4}.
@end table

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


airy_zero_Ai
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} airy_zero_Ai (@var{n})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} airy_zero_Ai (@dots{})

These routines compute the location of the s-th zero of the Airy
function Ai(x).

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


airy_zero_Bi
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} airy_zero_Bi (@var{n})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} airy_zero_Bi (@dots{})

These routines compute the location of the s-th zero of the Airy
function Bi(x).

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


airy_zero_Ai_deriv
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} airy_zero_Ai_deriv (@var{n})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} airy_zero_Ai_deriv (@dots{})

These routines compute the location of the s-th zero of the Airy
function derivative Ai(x).

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


airy_zero_Bi_deriv
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} airy_zero_Bi_deriv (@var{n})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} airy_zero_Bi_deriv (@dots{})

These routines compute the location of the s-th zero of the Airy
function derivative Bi(x).

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


bessel_zero_J0
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} bessel_zero_J0 (@var{n})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} bessel_zero_J0 (@dots{})

These routines compute the location of the s-th positive zero of the
Bessel function J_0(x).

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


bessel_zero_J1
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} bessel_zero_J1 (@var{n})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} bessel_zero_J1 (@dots{})

These routines compute the location of the s-th positive zero of the
Bessel function J_1(x).

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


psi_1_int
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} psi_1_int (@var{n})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} psi_1_int (@dots{})

These routines compute the Trigamma function \\psi(n) for positive
integer n.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


zeta_int
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} zeta_int (@var{n})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} zeta_int (@dots{})

These routines compute the Riemann zeta function \\zeta(n) for 
integer n, n \
e 1.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


eta_int
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} eta_int (@var{n})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} eta_int (@dots{})

These routines compute the eta function \\eta(n) for integer n.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


legendre_Plm
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} legendre_Plm (@var{n}, @var{m}, @var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} legendre_Plm (@dots{})

These routines compute the associated Legendre polynomial P_l^m(x) 
for m >= 0, l >= m, |x| <= 1.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


legendre_sphPlm
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} legendre_sphPlm (@var{n}, @var{m}, @var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} legendre_sphPlm (@dots{})

These routines compute the normalized associated Legendre polynomial
$\\sqrt@{(2l+1)/(4\\pi)@} \\sqrt@{(l-m)!/(l+m)!@} P_l^m(x)$ suitable for use
in spherical harmonics. The parameters must satisfy m >= 0, l >= m,
|x| <= 1. Theses routines avoid the overflows that occur for the
standard normalization of P_l^m(x).

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


hyperg_U
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{out} =} hyperg_U (@var{x0}, @var{x1}, @var{x2})
@deftypefnx {Loadable Function} {[@var{out}, @var{err}] =} hyperg_U (@dots{})

Secondary Confluent Hypergoemetric U function A&E 13.1.3 
All inputs are double as is the output.

@var{err} contains an estimate of the absolute error in the value @var{out}.a.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


hyperg_1F1
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{out} =} hyperg_1F1 (@var{x0}, @var{x1}, @var{x2})
@deftypefnx {Loadable Function} {[@var{out}, @var{err}] =} hyperg_1F1 (@dots{})

Primary Confluent Hypergoemetric U function A&E 13.1.3 
All inputs are double as is the output.

@var{err} contains an estimate of the absolute error in the value @var{out}.a.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


gsl_sf
-*- texinfo -*-
@deftypefn {Loadable Function} {} gsl_sf ()

Octave bindings to the GNU Scientific Library. All GSL functions can be
called with by the GSL names within octave.
@end deftypefn

clausen
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} clausen (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} clausen (@dots{})

The Clausen function is defined by the following integral,

Cl_2(x) = - \\int_0^x dt \\log(2 \\sin(t/2))

It is related to the dilogarithm by Cl_2(\\theta) = \\Im Li_2(\\exp(i \\theta)).

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


dawson
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} dawson (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} dawson (@dots{})

The Dawson integral is defined by \\exp(-x^2) \\int_0^x dt \\exp(t^2).
A table of Dawson integral can be found in Abramowitz & Stegun, Table 7.5. 

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


debye_1
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} debye_1 (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} debye_1 (@dots{})

The Debye functions are defined by the integral 

D_n(x) = n/x^n \\int_0^x dt (t^n/(e^t - 1)).

For further information see Abramowitz & Stegun, Section 27.1.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


debye_2
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} debye_2 (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} debye_2 (@dots{})

The Debye functions are defined by the integral

D_n(x) = n/x^n \\int_0^x dt (t^n/(e^t - 1)).

For further information see Abramowitz & Stegun, Section 27.1.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


debye_3
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} debye_3 (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} debye_3 (@dots{})

The Debye functions are defined by the integral

D_n(x) = n/x^n \\int_0^x dt (t^n/(e^t - 1)).

For further information see Abramowitz & Stegun, Section 27.1.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


debye_4
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} debye_4 (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} debye_4 (@dots{})

The Debye functions are defined by the integral

D_n(x) = n/x^n \\int_0^x dt (t^n/(e^t - 1)).

For further information see Abramowitz & Stegun, Section 27.1.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


erf_gsl
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} erf_gsl (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} erf_gsl (@dots{})

These routines compute the error function 
erf(x) = (2/\\sqrt(\\pi)) \\int_0^x dt \\exp(-t^2).

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


erfc_gsl
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} erfc_gsl (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} erfc_gsl (@dots{})

These routines compute the complementary error function 
erfc(x) = 1 - erf(x) = (2/\\sqrt(\\pi)) \\int_x^\\infty \\exp(-t^2).

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


log_erfc
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} log_erfc (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} log_erfc (@dots{})

These routines compute the logarithm of the complementary error
function \\log(\\erfc(x)).

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


erf_Z
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} erf_Z (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} erf_Z (@dots{})

These routines compute the Gaussian probability function 
Z(x) = (1/(2\\pi)) \\exp(-x^2/2).

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


erf_Q
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} erf_Q (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} erf_Q (@dots{})

These routines compute the upper tail of the Gaussian probability
function  Q(x) = (1/(2\\pi)) \\int_x^\\infty dt \\exp(-t^2/2).

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


hazard
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} hazard (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} hazard (@dots{})

The hazard function for the normal distrbution, also known as the 
inverse Mill\\'s ratio, is defined as 
h(x) = Z(x)/Q(x) = \\sqrt@{2/\\pi \\exp(-x^2 / 2) / \\erfc(x/\\sqrt 2)@}. 
It decreases rapidly as x approaches -\\infty and asymptotes to 
h(x) \\sim x as x approaches +\\infty.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


expm1
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} expm1 (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} expm1 (@dots{})

These routines compute the quantity \\exp(x)-1 using an algorithm that 
is accurate for small x.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


exprel
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} exprel (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} exprel (@dots{})

These routines compute the quantity (\\exp(x)-1)/x using an algorithm 
that is accurate for small x. For small x the algorithm is based on 
the expansion (\\exp(x)-1)/x = 1 + x/2 + x^2/(2*3) + x^3/(2*3*4) + \\dots.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


exprel_2
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} exprel_2 (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} exprel_2 (@dots{})

These routines compute the quantity 2(\\exp(x)-1-x)/x^2 using an
algorithm that is accurate for small x. For small x the algorithm is 
based on the expansion 
2(\\exp(x)-1-x)/x^2 = 1 + x/3 + x^2/(3*4) + x^3/(3*4*5) + \\dots.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


expint_E1
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} expint_E1 (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} expint_E1 (@dots{})

These routines compute the exponential integral E_1(x),

E_1(x) := Re \\int_1^\\infty dt \\exp(-xt)/t.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


expint_E2
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} expint_E2 (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} expint_E2 (@dots{})

These routines compute the second-order exponential integral E_2(x),

E_2(x) := \\Re \\int_1^\\infty dt \\exp(-xt)/t^2.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


expint_Ei
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} expint_Ei (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} expint_Ei (@dots{})

These routines compute the exponential integral E_i(x),

Ei(x) := - PV(\\int_@{-x@}^\\infty dt \\exp(-t)/t)

where PV denotes the principal value of the integral.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


Shi
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} Shi (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} Shi (@dots{})

These routines compute the integral Shi(x) = \\int_0^x dt \\sinh(t)/t.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


Chi
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} Chi (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} Chi (@dots{})

These routines compute the integral 

Chi(x) := Re[ \\gamma_E + \\log(x) + \\int_0^x dt (\\cosh[t]-1)/t] , 

where \\gamma_E is the Euler constant.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


expint_3
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} expint_3 (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} expint_3 (@dots{})

These routines compute the exponential integral 
Ei_3(x) = \\int_0^x dt \\exp(-t^3) for x >= 0.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


Si
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} Si (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} Si (@dots{})

These routines compute the Sine integral Si(x) = \\int_0^x dt \\sin(t)/t.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


Ci
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} Ci (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} Ci (@dots{})

These routines compute the Cosine integral 
Ci(x) = -\\int_x^\\infty dt \\cos(t)/t for x > 0. 

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


atanint
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} atanint (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} atanint (@dots{})

These routines compute the Arctangent integral 
AtanInt(x) = \\int_0^x dt \\arctan(t)/t. 

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


fermi_dirac_mhalf
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} fermi_dirac_mhalf (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} fermi_dirac_mhalf (@dots{})

These routines compute the complete Fermi-Dirac integral F_@{-1/2@}(x).

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


fermi_dirac_half
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} fermi_dirac_half (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} fermi_dirac_half (@dots{})

These routines compute the complete Fermi-Dirac integral F_@{1/2@}(x).

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


fermi_dirac_3half
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} fermi_dirac_3half (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} fermi_dirac_3half (@dots{})

These routines compute the complete Fermi-Dirac integral F_@{3/2@}(x).

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


gamma_gsl
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} gamma_gsl (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} gamma_gsl (@dots{})

These routines compute the Gamma function \\Gamma(x), subject to x not 
being a negative integer. The function is computed using the real 
Lanczos method. The maximum value of x such that \\Gamma(x) is not 
considered an overflow is given by the macro GSL_SF_GAMMA_XMAX and is 171.0.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


lngamma_gsl
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} lngamma_gsl (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} lngamma_gsl (@dots{})

These routines compute the logarithm of the Gamma function, 
\\log(\\Gamma(x)), subject to x not a being negative integer. 
For x<0 the real part of \\log(\\Gamma(x)) is returned, which is 
equivalent to \\log(|\\Gamma(x)|). The function is computed using 
the real Lanczos method.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


gammastar
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} gammastar (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} gammastar (@dots{})

These routines compute the regulated Gamma Function \\Gamma^*(x) 
for x > 0. The regulated gamma function is given by,

\\Gamma^*(x) = \\Gamma(x)/(\\sqrt@{2\\pi@} x^@{(x-1/2)@} \\exp(-x))
            = (1 + (1/12x) + ...)  for x \\to \\infty

and is a useful suggestion of Temme. 

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


gammainv_gsl
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} gammainv_gsl (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} gammainv_gsl (@dots{})

These routines compute the reciprocal of the gamma function, 1/\\Gamma(x) using the real Lanczos method.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


lambert_W0
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} lambert_W0 (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} lambert_W0 (@dots{})

These compute the principal branch of the Lambert W function, W_0(x).

Lambert\\'s W functions, W(x), are defined to be solutions of the
equation W(x) \\exp(W(x)) = x. This function has multiple branches 
for x < 0; however, it has only two real-valued branches. 
We define W_0(x) to be the principal branch, where W > -1 for x < 0, 
and W_@{-1@}(x) to be the other real branch, where W < -1 for x < 0.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


lambert_Wm1
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} lambert_Wm1 (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} lambert_Wm1 (@dots{})

These compute the secondary real-valued branch of the Lambert 
W function, W_@{-1@}(x).

Lambert\\'s W functions, W(x), are defined to be solutions of the
equation W(x) \\exp(W(x)) = x. This function has multiple branches 
for x < 0; however, it has only two real-valued branches. 
We define W_0(x) to be the principal branch, where W > -1 for x < 0, 
and W_@{-1@}(x) to be the other real branch, where W < -1 for x < 0.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


log_1plusx
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} log_1plusx (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} log_1plusx (@dots{})

These routines compute \\log(1 + x) for x > -1 using an algorithm that
is accurate for small x.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


log_1plusx_mx
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} log_1plusx_mx (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} log_1plusx_mx (@dots{})

These routines compute \\log(1 + x) - x for x > -1 using an algorithm 
that is accurate for small x.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


psi
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} psi (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} psi (@dots{})

These routines compute the digamma function \\psi(x) for general x, 
x \
e 0.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


psi_1piy
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} psi_1piy (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} psi_1piy (@dots{})

These routines compute the real part of the digamma function on 
the line 1+i y, Re[\\psi(1 + i y)].

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


synchrotron_1
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} synchrotron_1 (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} synchrotron_1 (@dots{})

These routines compute the first synchrotron function 
x \\int_x^\\infty dt K_@{5/3@}(t) for x >= 0.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


synchrotron_2
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} synchrotron_2 (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} synchrotron_2 (@dots{})

These routines compute the second synchrotron function 
x K_@{2/3@}(x) for x >= 0.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


transport_2
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} transport_2 (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} transport_2 (@dots{})

These routines compute the transport function J(2,x).

The transport functions J(n,x) are defined by the integral
representations J(n,x) := \\int_0^x dt t^n e^t /(e^t - 1)^2.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


transport_3
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} transport_3 (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} transport_3 (@dots{})

These routines compute the transport function J(3,x).

The transport functions J(n,x) are defined by the integral
representations J(n,x) := \\int_0^x dt t^n e^t /(e^t - 1)^2.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


transport_4
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} transport_4 (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} transport_4 (@dots{})

These routines compute the transport function J(4,x).

The transport functions J(n,x) are defined by the integral
representations J(n,x) := \\int_0^x dt t^n e^t /(e^t - 1)^2.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


transport_5
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} transport_5 (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} transport_5 (@dots{})

These routines compute the transport function J(5,x).

The transport functions J(n,x) are defined by the integral
representations J(n,x) := \\int_0^x dt t^n e^t /(e^t - 1)^2.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


sinc_gsl
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} sinc_gsl (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} sinc_gsl (@dots{})

These routines compute \\sinc(x) = \\sin(\\pi x) / (\\pi x) for any value of x.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


lnsinh
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} lnsinh (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} lnsinh (@dots{})

These routines compute \\log(\\sinh(x)) for x > 0.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


lncosh
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} lncosh (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} lncosh (@dots{})

These routines compute \\log(\\cosh(x)) for any x.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


zeta
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} zeta (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} zeta (@dots{})

These routines compute the Riemann zeta function \\zeta(s) for 
arbitrary s, s \
e 1.

The Riemann zeta function is defined by the infinite sum 
\\zeta(s) = \\sum_@{k=1@}^\\infty k^@{-s@}. 

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


eta
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} eta (@var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} eta (@dots{})

These routines compute the eta function \\eta(s) for arbitrary s.

The eta function is defined by \\eta(s) = (1-2^@{1-s@}) \\zeta(s).

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


bessel_Jn
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} bessel_Jn (@var{n}, @var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} bessel_Jn (@dots{})

These routines compute the regular cylindrical Bessel function of
order n, J_n(x).

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


bessel_Yn
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} bessel_Yn (@var{n}, @var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} bessel_Yn (@dots{})

These routines compute the irregular cylindrical Bessel function of 
order n, Y_n(x), for x>0.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


bessel_In
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} bessel_In (@var{n}, @var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} bessel_In (@dots{})

These routines compute the regular modified cylindrical Bessel
function of order n, I_n(x).

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


bessel_In_scaled
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} bessel_In_scaled (@var{n}, @var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} bessel_In_scaled (@dots{})

These routines compute the scaled regular modified cylindrical Bessel
function of order n, \\exp(-|x|) I_n(x)

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


bessel_Kn
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} bessel_Kn (@var{n}, @var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} bessel_Kn (@dots{})

These routines compute the irregular modified cylindrical Bessel
function of order n, K_n(x), for x > 0.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


bessel_Kn_scaled
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} bessel_Kn_scaled (@var{n}, @var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} bessel_Kn_scaled (@dots{})



@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


bessel_jl
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} bessel_jl (@var{n}, @var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} bessel_jl (@dots{})

These routines compute the regular spherical Bessel function of 
order l, j_l(x), for l >= 0 and x >= 0.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


bessel_yl
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} bessel_yl (@var{n}, @var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} bessel_yl (@dots{})

These routines compute the irregular spherical Bessel function of
order l, y_l(x), for l >= 0.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


bessel_il_scaled
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} bessel_il_scaled (@var{n}, @var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} bessel_il_scaled (@dots{})

These routines compute the scaled regular modified spherical Bessel
function of order l, \\exp(-|x|) i_l(x)

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


bessel_kl_scaled
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} bessel_kl_scaled (@var{n}, @var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} bessel_kl_scaled (@dots{})

These routines compute the scaled irregular modified spherical Bessel
function of order l, \\exp(x) k_l(x), for x>0.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


exprel_n
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} exprel_n (@var{n}, @var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} exprel_n (@dots{})

These routines compute the N-relative exponential, which is the n-th
generalization of the functions gsl_sf_exprel and gsl_sf_exprel2. The
N-relative exponential is given by,

exprel_N(x) = N!/x^N (\\exp(x) - \\sum_@{k=0@}^@{N-1@} x^k/k!)
            = 1 + x/(N+1) + x^2/((N+1)(N+2)) + ...
            = 1F1 (1,1+N,x)

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


fermi_dirac_int
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} fermi_dirac_int (@var{n}, @var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} fermi_dirac_int (@dots{})

These routines compute the complete Fermi-Dirac integral with an
integer index of j, F_j(x) = (1/\\Gamma(j+1)) \\int_0^\\infty dt (t^j
/(\\exp(t-x)+1)).

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


taylorcoeff
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} taylorcoeff (@var{n}, @var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} taylorcoeff (@dots{})

These routines compute the Taylor coefficient x^n / n! 
for x >= 0, n >= 0.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


legendre_Pl
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} legendre_Pl (@var{n}, @var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} legendre_Pl (@dots{})

These functions evaluate the Legendre polynomial P_l(x) for a specific
value of l, x subject to l >= 0, |x| <= 1

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


legendre_Ql
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} legendre_Ql (@var{n}, @var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} legendre_Ql (@dots{})

These routines compute the Legendre function Q_l(x) for x > -1, x != 1
and l >= 0.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


psi_n
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} psi_n (@var{n}, @var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} psi_n (@dots{})

These routines compute the polygamma function \\psi^@{(m)@}(x) 
for m >= 0, x > 0.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


bessel_Jnu
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} bessel_Jnu (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} bessel_Jnu (@dots{})

These routines compute the regular cylindrical Bessel function of
fractional order nu, J_\
u(x).

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


bessel_Ynu
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} bessel_Ynu (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} bessel_Ynu (@dots{})

These routines compute the irregular cylindrical Bessel function of
fractional order nu, Y_\
u(x).

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


bessel_Inu
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} bessel_Inu (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} bessel_Inu (@dots{})

These routines compute the regular modified Bessel function of
fractional order nu, I_\
u(x) for x>0, \
u>0.

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


bessel_Inu_scaled
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} bessel_Inu_scaled (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} bessel_Inu_scaled (@dots{})

These routines compute the scaled regular modified Bessel function of
fractional order nu, \\exp(-|x|)I_\
u(x) for x>0, \
u>0.

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


bessel_Knu
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} bessel_Knu (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} bessel_Knu (@dots{})

These routines compute the irregular modified Bessel function of
fractional order nu, K_\
u(x) for x>0, \
u>0.

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


bessel_lnKnu
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} bessel_lnKnu (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} bessel_lnKnu (@dots{})

These routines compute the logarithm of the irregular modified Bessel
function of fractional order nu, \\ln(K_\
u(x)) for x>0, \
u>0.

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


bessel_Knu_scaled
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} bessel_Knu_scaled (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} bessel_Knu_scaled (@dots{})

These routines compute the scaled irregular modified Bessel function
of fractional order nu, \\exp(+|x|) K_\
u(x) for x>0, \
u>0.

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


exp_mult
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} exp_mult (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} exp_mult (@dots{})

These routines exponentiate x and multiply by the factor y to return
the product y \\exp(x).

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


fermi_dirac_inc_0
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} fermi_dirac_inc_0 (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} fermi_dirac_inc_0 (@dots{})

These routines compute the incomplete Fermi-Dirac integral with an
index of zero, F_0(x,b) = \\ln(1 + e^@{b-x@}) - (b-x).

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


poch
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} poch (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} poch (@dots{})

These routines compute the Pochhammer symbol 

(a)_x := \\Gamma(a + x)/\\Gamma(a), 

subject to a and a+x not being negative integers. The Pochhammer
symbol is also known as the Apell symbol.

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


lnpoch
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} lnpoch (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} lnpoch (@dots{})

These routines compute the logarithm of the Pochhammer symbol,
\\log((a)_x) = \\log(\\Gamma(a + x)/\\Gamma(a)) for a > 0, a+x > 0.

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


pochrel
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} pochrel (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} pochrel (@dots{})

These routines compute the relative Pochhammer symbol ((a,x) - 1)/x
where (a,x) = (a)_x := \\Gamma(a + x)/\\Gamma(a).

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


gamma_inc_Q
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} gamma_inc_Q (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} gamma_inc_Q (@dots{})

These routines compute the normalized incomplete Gamma Function 
Q(a,x) = 1/\\Gamma(a) \\int_x\\infty dt t^@{a-1@} \\exp(-t) for a > 0, x >= 0.

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


gamma_inc_P
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} gamma_inc_P (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} gamma_inc_P (@dots{})

These routines compute the complementary normalized incomplete Gamma
Function P(a,x) = 1/\\Gamma(a) \\int_0^x dt t^@{a-1@} \\exp(-t) 
for a > 0, x >= 0.

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


gamma_inc
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} gamma_inc (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} gamma_inc (@dots{})

These functions compute the incomplete Gamma Function the
normalization factor included in the previously defined functions:
\\Gamma(a,x) = \\int_x\\infty dt t^@{a-1@} \\exp(-t) for a real and x >= 0.

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


beta_gsl
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} beta_gsl (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} beta_gsl (@dots{})

These routines compute the Beta Function, 
B(a,b) = \\Gamma(a)\\Gamma(b)/\\Gamma(a+b) for a > 0, b > 0.

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


lnbeta
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} lnbeta (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} lnbeta (@dots{})

These routines compute the logarithm of the Beta Function,
\\log(B(a,b)) for a > 0, b > 0.

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


hyperg_0F1
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} hyperg_0F1 (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} hyperg_0F1 (@dots{})

These routines compute the hypergeometric function 0F1(c,x).

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


conicalP_half
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} conicalP_half (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} conicalP_half (@dots{})

These routines compute the irregular Spherical Conical Function
P^@{1/2@}_@{-1/2 + i \\lambda@}(x) for x > -1.

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


conicalP_mhalf
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} conicalP_mhalf (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} conicalP_mhalf (@dots{})

These routines compute the regular Spherical Conical Function
P^@{-1/2@}_@{-1/2 + i \\lambda@}(x) for x > -1.

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


conicalP_0
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} conicalP_0 (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} conicalP_0 (@dots{})

These routines compute the conical function P^0_@{-1/2 + i \\lambda@}(x)
for x > -1.

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


conicalP_1
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} conicalP_1 (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} conicalP_1 (@dots{})

These routines compute the conical function P^1_@{-1/2 + i \\lambda@}(x)
for x > -1.

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


hzeta
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{z} =} hzeta (@var{x}, @var{y})
@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} hzeta (@dots{})

These routines compute the Hurwitz zeta function \\zeta(s,q) 
for s > 1, q > 0.

@var{err} contains an estimate of the absolute error in the value @var{z}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


airy_Ai
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} airy_Ai (@var{x}, @var{mode})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} airy_Ai (@dots{})

These routines compute the Airy function Ai(x) with an accuracy
specified by mode.

The second argument @var{mode} must be an integer corresponding to

@table @asis
@item 0 = GSL_PREC_DOUBLE
    Double-precision, a relative accuracy of approximately @code{2 * 10^-16}.
@item 1 = GSL_PREC_SINGLE
    Single-precision, a relative accuracy of approximately @code{10^-7}.
@item 2 = GSL_PREC_APPROX
    Approximate values, a relative accuracy of approximately @code{5 * 10^-4}.
@end table

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


airy_Bi
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} airy_Bi (@var{x}, @var{mode})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} airy_Bi (@dots{})

These routines compute the Airy function Bi(x) with an accuracy
specified by mode.

The second argument @var{mode} must be an integer corresponding to

@table @asis
@item 0 = GSL_PREC_DOUBLE
    Double-precision, a relative accuracy of approximately @code{2 * 10^-16}.
@item 1 = GSL_PREC_SINGLE
    Single-precision, a relative accuracy of approximately @code{10^-7}.
@item 2 = GSL_PREC_APPROX
    Approximate values, a relative accuracy of approximately @code{5 * 10^-4}.
@end table

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


airy_Ai_scaled
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} airy_Ai_scaled (@var{x}, @var{mode})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} airy_Ai_scaled (@dots{})

These routines compute a scaled version of the Airy function 
S_A(x) Ai(x). For x>0 the scaling factor S_A(x) is \\exp(+(2/3) x^(3/2)), and
is 1 for x<0.

The second argument @var{mode} must be an integer corresponding to

@table @asis
@item 0 = GSL_PREC_DOUBLE
    Double-precision, a relative accuracy of approximately @code{2 * 10^-16}.
@item 1 = GSL_PREC_SINGLE
    Single-precision, a relative accuracy of approximately @code{10^-7}.
@item 2 = GSL_PREC_APPROX
    Approximate values, a relative accuracy of approximately @code{5 * 10^-4}.
@end table

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


airy_Bi_scaled
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} airy_Bi_scaled (@var{x}, @var{mode})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} airy_Bi_scaled (@dots{})

These routines compute a scaled version of the Airy function 
S_B(x) Bi(x). For x>0 the scaling factor S_B(x) is exp(-(2/3) x^(3/2)), and
is 1 for x<0.

The second argument @var{mode} must be an integer corresponding to

@table @asis
@item 0 = GSL_PREC_DOUBLE
    Double-precision, a relative accuracy of approximately @code{2 * 10^-16}.
@item 1 = GSL_PREC_SINGLE
    Single-precision, a relative accuracy of approximately @code{10^-7}.
@item 2 = GSL_PREC_APPROX
    Approximate values, a relative accuracy of approximately @code{5 * 10^-4}.
@end table

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


airy_Ai_deriv
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} airy_Ai_deriv (@var{x}, @var{mode})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} airy_Ai_deriv (@dots{})

These routines compute the Airy function derivative Ai'(x) with an
accuracy specified by mode.

The second argument @var{mode} must be an integer corresponding to

@table @asis
@item 0 = GSL_PREC_DOUBLE
    Double-precision, a relative accuracy of approximately @code{2 * 10^-16}.
@item 1 = GSL_PREC_SINGLE
    Single-precision, a relative accuracy of approximately @code{10^-7}.
@item 2 = GSL_PREC_APPROX
    Approximate values, a relative accuracy of approximately @code{5 * 10^-4}.
@end table

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


airy_Bi_deriv
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} airy_Bi_deriv (@var{x}, @var{mode})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} airy_Bi_deriv (@dots{})

These routines compute the Airy function derivative Bi'(x) with an
accuracy specified by mode.

The second argument @var{mode} must be an integer corresponding to

@table @asis
@item 0 = GSL_PREC_DOUBLE
    Double-precision, a relative accuracy of approximately @code{2 * 10^-16}.
@item 1 = GSL_PREC_SINGLE
    Single-precision, a relative accuracy of approximately @code{10^-7}.
@item 2 = GSL_PREC_APPROX
    Approximate values, a relative accuracy of approximately @code{5 * 10^-4}.
@end table

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


airy_Ai_deriv_scaled
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} airy_Ai_deriv_scaled (@var{x}, @var{mode})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} airy_Ai_deriv_scaled (@dots{})

These routines compute the derivative of the scaled Airy function
S_A(x) Ai(x).

The second argument @var{mode} must be an integer corresponding to

@table @asis
@item 0 = GSL_PREC_DOUBLE
    Double-precision, a relative accuracy of approximately @code{2 * 10^-16}.
@item 1 = GSL_PREC_SINGLE
    Single-precision, a relative accuracy of approximately @code{10^-7}.
@item 2 = GSL_PREC_APPROX
    Approximate values, a relative accuracy of approximately @code{5 * 10^-4}.
@end table

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


airy_Bi_deriv_scaled
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} airy_Bi_deriv_scaled (@var{x}, @var{mode})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} airy_Bi_deriv_scaled (@dots{})

These routines compute the derivative of the scaled Airy function
S_B(x) Bi(x).

The second argument @var{mode} must be an integer corresponding to

@table @asis
@item 0 = GSL_PREC_DOUBLE
    Double-precision, a relative accuracy of approximately @code{2 * 10^-16}.
@item 1 = GSL_PREC_SINGLE
    Single-precision, a relative accuracy of approximately @code{10^-7}.
@item 2 = GSL_PREC_APPROX
    Approximate values, a relative accuracy of approximately @code{5 * 10^-4}.
@end table

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


ellint_Kcomp
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} ellint_Kcomp (@var{x}, @var{mode})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} ellint_Kcomp (@dots{})

These routines compute the complete elliptic integral K(k) 
@tex
\\beforedisplay
$$
\\eqalign{
K(k)   &= \\int_0^{\\pi/2}  {dt \\over \\sqrt{(1 - k^2 \\sin^2(t))}}  \\cr
}
$$
\\afterdisplay
@end tex

The notation used here is based on Carlson, @cite{Numerische
Mathematik} 33 (1979) and differs slightly from that used by
Abramowitz & Stegun, where the functions are given in terms of the
parameter @math{m = k^2}.


The second argument @var{mode} must be an integer corresponding to

@table @asis
@item 0 = GSL_PREC_DOUBLE
    Double-precision, a relative accuracy of approximately @code{2 * 10^-16}.
@item 1 = GSL_PREC_SINGLE
    Single-precision, a relative accuracy of approximately @code{10^-7}.
@item 2 = GSL_PREC_APPROX
    Approximate values, a relative accuracy of approximately @code{5 * 10^-4}.
@end table

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


ellint_Ecomp
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} ellint_Ecomp (@var{x}, @var{mode})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} ellint_Ecomp (@dots{})

These routines compute the complete elliptic integral E(k) to the
accuracy specified by the mode variable mode.

@tex
\\beforedisplay
$$
\\eqalign{
E(k)   &= \\int_0^{\\pi/2}    \\sqrt{(1 - k^2 \\sin^2(t))} dt \\cr
}
$$
\\afterdisplay

@end tex

The notation used here is based on Carlson, @cite{Numerische
Mathematik} 33 (1979) and differs slightly from that used by
Abramowitz & Stegun, where the functions are given in terms of the
parameter @math{m = k^2}.

The second argument @var{mode} must be an integer corresponding to

@table @asis
@item 0 = GSL_PREC_DOUBLE
    Double-precision, a relative accuracy of approximately @code{2 * 10^-16}.
@item 1 = GSL_PREC_SINGLE
    Single-precision, a relative accuracy of approximately @code{10^-7}.
@item 2 = GSL_PREC_APPROX
    Approximate values, a relative accuracy of approximately @code{5 * 10^-4}.
@end table

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


airy_zero_Ai
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} airy_zero_Ai (@var{n})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} airy_zero_Ai (@dots{})

These routines compute the location of the s-th zero of the Airy
function Ai(x).

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


airy_zero_Bi
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} airy_zero_Bi (@var{n})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} airy_zero_Bi (@dots{})

These routines compute the location of the s-th zero of the Airy
function Bi(x).

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


airy_zero_Ai_deriv
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} airy_zero_Ai_deriv (@var{n})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} airy_zero_Ai_deriv (@dots{})

These routines compute the location of the s-th zero of the Airy
function derivative Ai(x).

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


airy_zero_Bi_deriv
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} airy_zero_Bi_deriv (@var{n})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} airy_zero_Bi_deriv (@dots{})

These routines compute the location of the s-th zero of the Airy
function derivative Bi(x).

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


bessel_zero_J0
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} bessel_zero_J0 (@var{n})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} bessel_zero_J0 (@dots{})

These routines compute the location of the s-th positive zero of the
Bessel function J_0(x).

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


bessel_zero_J1
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} bessel_zero_J1 (@var{n})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} bessel_zero_J1 (@dots{})

These routines compute the location of the s-th positive zero of the
Bessel function J_1(x).

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


psi_1_int
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} psi_1_int (@var{n})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} psi_1_int (@dots{})

These routines compute the Trigamma function \\psi(n) for positive
integer n.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


zeta_int
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} zeta_int (@var{n})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} zeta_int (@dots{})

These routines compute the Riemann zeta function \\zeta(n) for 
integer n, n \
e 1.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


eta_int
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} eta_int (@var{n})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} eta_int (@dots{})

These routines compute the eta function \\eta(n) for integer n.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


legendre_Plm
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} legendre_Plm (@var{n}, @var{m}, @var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} legendre_Plm (@dots{})

These routines compute the associated Legendre polynomial P_l^m(x) 
for m >= 0, l >= m, |x| <= 1.

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


legendre_sphPlm
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{y} =} legendre_sphPlm (@var{n}, @var{m}, @var{x})
@deftypefnx {Loadable Function} {[@var{y}, @var{err}] =} legendre_sphPlm (@dots{})

These routines compute the normalized associated Legendre polynomial
$\\sqrt@{(2l+1)/(4\\pi)@} \\sqrt@{(l-m)!/(l+m)!@} P_l^m(x)$ suitable for use
in spherical harmonics. The parameters must satisfy m >= 0, l >= m,
|x| <= 1. Theses routines avoid the overflows that occur for the
standard normalization of P_l^m(x).

@var{err} contains an estimate of the absolute error in the value @var{y}.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


hyperg_U
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{out} =} hyperg_U (@var{x0}, @var{x1}, @var{x2})
@deftypefnx {Loadable Function} {[@var{out}, @var{err}] =} hyperg_U (@dots{})

Secondary Confluent Hypergoemetric U function A&E 13.1.3 
All input are double as is the output.

@var{err} contains an estimate of the absolute error in the value @var{out}.a.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


hyperg_1F1
  -*- texinfo -*-
@deftypefn {Loadable Function} {@var{out} =} hyperg_1F1 (@var{x0}, @var{x1}, @var{x2})
@deftypefnx {Loadable Function} {[@var{out}, @var{err}] =} hyperg_1F1 (@dots{})

Primary Confluent Hypergoemetric U function A&E 13.1.3 
All inputs are double as is the output.

@var{err} contains an estimate of the absolute error in the value @var{out}.a.

This function is from the GNU Scientific Library,
see @url{http://www.gnu.org/software/gsl/} for documentation.
@end deftypefn


