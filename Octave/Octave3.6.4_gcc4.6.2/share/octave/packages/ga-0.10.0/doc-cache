# Created by Octave 3.6.4, Sat Mar 30 10:12:05 2013 Jerusalem Daylight Time <unknown@NITH02>
# name: cache
# type: cell
# rows: 3
# columns: 9
# name: <cell-element>
# type: sq_string
# elements: 1
# length: 18
crossoverscattered


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 135
 simplified example (nvars == 4)
 p1 = [varA varB varC varD]
 p2 = [var1 var2 var3 var4]
 b = [1 1 0 1]
 child = [varA varB var3 varD]



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
 simplified example (nvars == 4)
 p1 = [varA varB varC varD]
 p2 = [var1 var2 va



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 14
fitscalingrank


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 71
TODO
ranks ([7,2,2]) == [3.0,1.5,1.5]
is [3,1,2] (or [3,2,1]) useful? 



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 27
TODO
ranks ([7,2,2]) == [3.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 2
ga


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1866
 -- Function File: X = ga (FITNESSFCN, NVARS)
 -- Function File: X = ga (FITNESSFCN, NVARS, A, B)
 -- Function File: X = ga (FITNESSFCN, NVARS, A, B, AEQ, BEQ)
 -- Function File: X = ga (FITNESSFCN, NVARS, A, B, AEQ, BEQ, LB, UB)
 -- Function File: X = ga (FITNESSFCN, NVARS, A, B, AEQ, BEQ, LB, UB,
          NONLCON)
 -- Function File: X = ga (FITNESSFCN, NVARS, A, B, AEQ, BEQ, LB, UB,
          NONLCON, OPTIONS)
 -- Function File: X = ga (PROBLEM)
 -- Function File: [X, FVAL] = ga (...)
 -- Function File: [X, FVAL, EXITFLAG] = ga (...)
 -- Function File: [X, FVAL, EXITFLAG, OUTPUT] = ga (...)
 -- Function File: [X, FVAL, EXITFLAG, OUTPUT, POPULATION] = ga (...)
 -- Function File: [X, FVAL, EXITFLAG, OUTPUT, POPULATION, SCORES] = ga
          (...)
     Find minimum of function using genetic algorithm.

     *Inputs*
    FITNESSFCN
          The objective function to minimize. It accepts a vector X of
          size 1-by-NVARS, and returns a scalar evaluated at X.

    NVARS
          The dimension (number of design variables) of FITNESSFCN.

    OPTIONS
          The structure of the optimization parameters; can be created
          using the `gaoptimset' function. If not specified, `ga'
          minimizes with the default optimization parameters.

    PROBLEM
          A structure containing the following fields:
             * `fitnessfcn'

             * `nvars'

             * `Aineq'

             * `Bineq'

             * `Aeq'

             * `Beq'

             * `lb'

             * `ub'

             * `nonlcon'

             * `randstate'

             * `randnstate'

             * `solver'

             * `options'

     *Outputs*
    X
          The local unconstrained found minimum to the objective
          function, FITNESSFCN.

    FVAL
          The value of the fitness function at X.

     See also: gaoptimset





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 49
Find minimum of function using genetic algorithm.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 17
gacreationuniform


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 487
 -- Function File: POPULATION = gacreationuniform (GENOMELENGTH,
          FITNESSFCN, OPTIONS)
     Create a random initial population with a uniform distribution.

     *Inputs*
    GENOMELENGTH
          The number of indipendent variables for the fitness function.

    FITNESSFCN
          The fitness function.

    OPTIONS
          The options structure.

     *Outputs*
    POPULATION
          The initial population for the genetic algorithm.

     See also: ga, gaoptimset





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 63
Create a random initial population with a uniform distribution.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 10
gaoptimset


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1242
 -- Function File: OPTIONS = gaoptimset
 -- Function File: OPTIONS = gaoptimset ('PARAM1', VALUE1, 'PARAM2',
          VALUE2, ...)
     Create genetic algorithm options structure.

     *Inputs*
    PARAM
          Parameter to set. Unspecified parameters are set to their
          default values; specifying no parameters is allowed.

    VALUE
          Value of PARAM.

     *Outputs*
    OPTIONS
          Structure containing the options, or parameters, for the
          genetic algorithm.

     *Options*
    `CreationFcn'

    `CrossoverFcn'

    `CrossoverFraction'

    `EliteCount'

    `FitnessLimit'

    `FitnessScalingFcn'

    `Generations'

    `InitialPopulation'
          Can be partial.

    `InitialScores'
          column vector | [] (default) . Can be partial.

    `MutationFcn'

    `PopInitRange'

    `PopulationSize'

    `SelectionFcn'

    `TimeLimit'

    `UseParallel'
          "always" | "never" (default) . Parallel evaluation of
          objective function. TODO: parallel evaluation of nonlinear
          constraints

    `Vectorized'
          "on" | "off" (default) . Vectorized evaluation of objective
          function. TODO: vectorized evaluation of nonlinear constraints

     See also: ga





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 43
Create genetic algorithm options structure.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 16
mutationgaussian


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 30
 start mutationgaussian logic



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 30
 start mutationgaussian logic




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 13
rastriginsfcn


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 69
 -- Function File: Y = rastriginsfcn (X)
     Rastrigin's function.




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 21
Rastrigin's function.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 18
selectionstochunif


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 104
 fix an entry of the steps (or parents) vector
assert (steps(1, index_steps) < max_step_size); ## DEBUG



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
 fix an entry of the steps (or parents) vector
assert (steps(1, index_steps) < m



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
test_ga


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 69
 -- Script File:  test_ga
     Execute all available tests at once.




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 36
Execute all available tests at once.





