# Created by Octave 3.6.4, Sat Mar 30 12:27:35 2013 Jerusalem Daylight Time <unknown@NITH02>
# name: cache
# type: cell
# rows: 3
# columns: 6
# name: <cell-element>
# type: sq_string
# elements: 1
# length: 10
BandToFull


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 90
 function Afull=BandToSparse(Aband)
 convert a banded symmetric matrix to a sparse matrix



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
 function Afull=BandToSparse(Aband)
 convert a banded symmetric matrix to a spar



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 12
BandToSparse


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 92
 function Asparse=BandToSparse(Aband)
 convert a banded symmetric matrix to a sparse matrix



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
 function Asparse=BandToSparse(Aband)
 convert a banded symmetric matrix to a sp



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 18
ExampleEigenValues


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 94
 the Laplace equation on the unit square is discretized
 with nx and ny interiour grid points



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
 the Laplace equation on the unit square is discretized
 with nx and ny interiou



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 21
ExampleGenEigenValues


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 22
 solve A*x=lambda*B*x



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 22
 solve A*x=lambda*B*x




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 10
FullToBand


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 88
 function Aband=FullToBand(Afull)
 convert a banded symmetric matrix to a sparse matrix



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
 function Aband=FullToBand(Afull)
 convert a banded symmetric matrix to a sparse



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
gapTest


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 149
 estimate=gapTest(Lambda,err)
   compute the errors using the gap test
   Lambda and err are results of a call to [Lambda,{Ev,err}] = SBEig(A,V,tol)



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
 estimate=gapTest(Lambda,err)
   compute the errors using the gap test
   Lambda





