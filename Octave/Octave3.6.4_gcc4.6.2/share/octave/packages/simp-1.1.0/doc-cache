# Created by Octave 3.6.4, Sat Mar 30 12:22:47 2013 Jerusalem Daylight Time <unknown@NITH02>
# name: cache
# type: cell
# rows: 3
# columns: 28
# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
addInt


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 71
 addInt adds a set of intervals returning 0 + int1 + int2 + ... + intn



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 61
 addInt adds a set of intervals returning 0 + int1 + int2 + .



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 12
dB10ToLinInt


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 54
 dB10ToLinInt returns 10 ^ (1 / 10th of the dB value)



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 54
 dB10ToLinInt returns 10 ^ (1 / 10th of the dB value)




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 12
dB20ToLinInt


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 54
 dB20ToLinInt returns 10 ^ (1 / 20th of the dB value)



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 54
 dB20ToLinInt returns 10 ^ (1 / 20th of the dB value)




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
divInt


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 65
 divSingleInt divides two set of intervals returning int1 / int2



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 65
 divSingleInt divides two set of intervals returning int1 / int2




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 10
engFormInt


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 50
 engFormInt print an interval in engineear format



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 50
 engFormInt print an interval in engineear format




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 11
errorBarInt


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 51
 plot x intervals center point versus y error bars



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 51
 plot x intervals center point versus y error bars




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 11
findRootInt


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 75
 findRootInt compute the incremental ration of f(x) in x0 with dx2/2 delta



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 75
 findRootInt compute the incremental ration of f(x) in x0 with dx2/2 delta




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 11
functionInt


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 165
 functionInt applies the given function f the required interval, it checks for monotonicitic. The user may set the minimum number of point to check on each interval



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
 functionInt applies the given function f the required interval, it checks for m



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 10
intFormInt


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 86
 intFormInt create an interval from a string or vector of strings in engineear format



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
 intFormInt create an interval from a string or vector of strings in engineear f



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 8
intToTol


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 75
 intToTol given an interval return its tolerance to get the given interval



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 75
 intToTol given an interval return its tolerance to get the given interval




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 11
intToTol100


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 78
 intToTol100 given an interval return its tolerance to get the given interval



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 78
 intToTol100 given an interval return its tolerance to get the given interval




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 8
intToVal


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 53
 intToVal given an interval return its central value



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 53
 intToVal given an interval return its central value




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 12
invertAddInt


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 116
 mInvertAddInt adds the inverse of a set of intervals returning their inverse: 1 /( 1/int1 + 1/int2 + ... + 1/intn)



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
 mInvertAddInt adds the inverse of a set of intervals returning their inverse: 1



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 9
invertInt


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 69
 invertInt return 1 / the given interval (which must not take the 0)



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 69
 invertInt return 1 / the given interval (which must not take the 0)




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 17
linSpaceTol100Int


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 130
 linSpaceTol100Int return column vector of intervals of N values equally spaced between base and limit, with the given tolerance.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
 linSpaceTol100Int return column vector of intervals of N values equally spaced 



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 12
linToDB10Int


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 60
 linToDB10Int returns 10 log10 of the interval linear value



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 60
 linToDB10Int returns 10 log10 of the interval linear value




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 12
linToDB20Int


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 60
 linToDB20Int returns 20 log10 of the interval linear value



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 60
 linToDB20Int returns 20 log10 of the interval linear value




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 17
logSpaceTol100Int


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 143
 logSpaceTol100Int return column vector of intervals of N values logaritmically spaced between 10^base and 10^limit, with the given tolerance.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
 logSpaceTol100Int return column vector of intervals of N values logaritmically 



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 20
monotonicFunctionInt


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 131
 monotonicFunctionInt applies the given monotonic function f the required interval (if f is not monotonic the result may be wrong)



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
 monotonicFunctionInt applies the given monotonic function f the required interv



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
mulInt


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 77
 mulInt multiplies a set of intervals returning 1 * int1 * int2 * ... * intn



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 67
 mulInt multiplies a set of intervals returning 1 * int1 * int2 * .



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 9
negateInt


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 58
 negateInt return the negative of the given interval set 



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 58
 negateInt return the negative of the given interval set 




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
plotInt


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 50
 plot x intervals center point versus y intervals



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 50
 plot x intervals center point versus y intervals




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 8
powerInt


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 97
 powerInt rises the given interval to the power required returning the new interval interval ^ n



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
 powerInt rises the given interval to the power required returning the new inter



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 9
sqrAddInt


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 88
 sqrAddInt returns the square root of the addition of the square of the given intervals



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
 sqrAddInt returns the square root of the addition of the square of the given in



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
sqrInt


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 47
 sqrInt returns the square of a given interval



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 47
 sqrInt returns the square of a given interval




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
sqrtInt


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 53
 sqrtInt returns the square root of a given interval



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 53
 sqrtInt returns the square root of a given interval




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
subInt


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 47
 subInt subtract intervals returning int1-int2



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 47
 subInt subtract intervals returning int1-int2




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 14
valtol100ToInt


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 199
 valtol100ToInt return an interval given a value with its tolerance expressed in percentage (optionally also a negative tolerance). I.E. 10+-5% is tolToInt (10, 5); 10+20%-5% is tolToInt (10,20,-5).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
 valtol100ToInt return an interval given a value with its tolerance expressed in





