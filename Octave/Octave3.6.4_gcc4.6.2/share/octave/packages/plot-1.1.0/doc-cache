# Created by Octave 3.6.4, Sat Mar 30 12:17:58 2013 Jerusalem Daylight Time <unknown@NITH02>
# name: cache
# type: cell
# rows: 3
# columns: 7
# name: <cell-element>
# type: sq_string
# elements: 1
# length: 8
dxfwrite


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 245
 -- Function File: NB = dxfwrite (FILENAME, PL, ...)
     Write FILENAME as a DXF file. Polyline PL must be defined as
     matrix of 1, 2 or 3 columns respectively for x, y and z
     coordinates. The number of polyline (NB) or 0 is returned.




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 29
Write FILENAME as a DXF file.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
gplot3


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 628
 -- Function File:  gplot3 (A, XYZ)
 -- Function File:  gplot3 (A, XYZ, LINE_STYLE)
 -- Function File: [X, Y, Z] = gplot3 (A, XYZ)
     Plot a 3-dimensional graph defined by A and XYZ in the graph
     theory sense.  A is the adjacency matrix of the array to be
     plotted and XY is an N-by-3 matrix containing the coordinates of
     the nodes of the graph.

     The optional parameter LINE_STYLE defines the output style for the
     plot.  Called with no output arguments the graph is plotted
     directly.  Otherwise, return the coordinates of the plot in X and
     Y.

     See also: gplot, treeplot, etreeplot, spy





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 74
Plot a 3-dimensional graph defined by A and XYZ in the graph theory
sense.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
hist2d


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 304
 -- Function File: [COUNTS, XBINS, YBINS] = hist2d ([X, Y], XBINS,
          YBINS, NORM)
     Produce a 2D histogram.

     Points xi,yi are stored in a 2-column array.  If ybins is missing,
     use xbins.  If bins is a scalar, use that many bins.  If bins is a
     vector, it represents bin edges.





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 23
Produce a 2D histogram.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 12
plotdecimate


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 871
 -- Function File:  plotdecimate (P)
 -- Function File:  plotdecimate (P, SO)
 -- Function File:  plotdecimate (P, SO, RES)
     Optimise plot data by removing redundant points and segments

     The first parameter P is a two-column matrix to be plotted as X and
     Y coordinates.   The second optional argument SO disables segment
     optimisation when set to FALSE (default is TRUE). The third
     optional argument RES is the size of the largest error on the plot:
     if it is a scalar, it is meant relative to the range of X and Y
     values (default 1e-3); if it is a 2x1 array, it contains the
     absolute errors for X and Y.  Returns a two-column matrix
     containing a subset of the rows of P. A line plot of P has the
     same appearance as a line plot of the output, with errors smaller
     than RES.  When creating point plots, set SO to FALSE.




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 61
Optimise plot data by removing redundant points and segments




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 4
tics


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 452
 -- Function File:  tics (AXIS, [POS1, POS2, ...], [LAB1, LAB2, ...],)
     Explicitly set the tic positions and labels for the given axis.

     AXIS must be 'x', 'y' or 'z'.

     If no positions or labels are given, then restore the default.  If
     positions are given but no labels, use those positions with the
     normal labels. If positions and labels are given, each position
     labeled with the corresponding row from the label matrix.





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 63
Explicitly set the tic positions and labels for the given axis.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 10
tricontour


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 741
 -- Function File:  tricontour (TRI, X, Y, Z, LEVELS)
 -- Function File:  tricontour (TRI, X, Y, Z, LEVELS, LINESPEC)
     Plot level curves for the values of `Z' on a triangular mesh in 2D.

     The variable TRI is the triangular meshing of the points `(X, Y)'
     which is returned from `delaunay'. The variable LEVELS is a vector
     with the values of the countour levels. If LEVELS is a scalar,
     then it corresponds to the number of level curves to be drawn. If
     exactly one level curve is desired, list the level twice in the
     vector LEVELS.

     If given, LINESPEC determines the properties to use for the lines.

     The output argument H is the graphic handle to the plot.

     See also: plot, trimesh, delaunay





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 67
Plot level curves for the values of `Z' on a triangular mesh in 2D.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 4
zoom


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 69
 -- Function File:  zoom
     Compatibility function; does nothing.




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 37
Compatibility function; does nothing.





