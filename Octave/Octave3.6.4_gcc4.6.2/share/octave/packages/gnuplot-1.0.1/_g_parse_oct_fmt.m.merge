### Copyright (c) 2007, Tyzx Corporation. All rights reserved.

function [isFmt, fmtContents] = _g_parse_oct_fmt (str,plotn)
## [isFmt, fmtContents] = _g_parse_oct_fmt (str,plotn)
## Take a string FMT, e.g. "-5;Foobar;", in octave's plot (x,y,FMT) format and
## tries to translate it into fmtContents, a gnuplot string like "with lines
## linetype 5 title 'Foobar'".
##
## isFmt is 1 if FMT makes sense in octave's plot syntax, 0 otherwise.

  if nargin<2, plotn = 0; endif

  isFmt = 0; 
  defaultTitle = "";
  if plotn, defaultTitle = sprintf ("Line %i",plotn); endif
  fmtContents = ["with lines title '",defaultTitle,"'"];
  if !ischar(str), return; endif
  
  ## Matches style, color, key
  re = "^(\\.|@|-[@+*x]?|[L\\+\\*ox\\^]|)([1-6][1-6]?|[krgbmcw]|)(;[^;]*;|)$";
  [S, E, TE, M, T, NM] = regexp (str, re);

  style = "lines";
  color = "";
  title = "title ''";
  pointstyle = "";
  if !isempty (S)
    if length (T{1}{1})		# Style
      switch T{1}{1}
	case "-+", style = "linespoints";
	case "-@", style = "linespoints";
	case "^",  style = "impulses";
	case "@",  style = "points";
	case "*",  style = "points";
	case "+",  style = "points";
	case "-",  style = "lines";
	case "L",  style = "steps";
	case ".",  style = "dots";
      endswitch
    endif
    style = ["with ",style];
#if defined( FILE2 )
    endif
#endif
    if length (T{1}{2})		# Color (and maybe pointstyle)
      if index ("123456", T{1}{2}(1))
	color = T{1}{2}(1);
	if length (T{1}{2}) > 1
	  pointstyle = ["pt ",T{1}{2}(2)];
	endif
      else			# Convert letter to digit
	color = struct(qw("k 6 r 1 g 2 b 3 m 4 c 5 w 7"){:}).(T{1}{2});
      endif
      color = ["lt ",color];
    endif
    if length (T{1}{3})		# title (aka key, label)
      title = ["title '",T{1}{3}(2:end-1),"'"];
    endif
  endif
  ##fmtContents = [style," ",color," ",title," lw 3 "];
  fmtContents = [style," ",color," ",title];
  isFmt = 1;
endfunction
