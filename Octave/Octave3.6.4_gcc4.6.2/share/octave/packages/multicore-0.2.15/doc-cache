# Created by Octave 3.6.4, Sat Mar 30 10:15:20 2013 Jerusalem Daylight Time <unknown@NITH02>
# name: cache
# type: cell
# rows: 3
# columns: 15
# name: <cell-element>
# type: sq_string
# elements: 1
# length: 20
deletewithsemaphores


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 245
DELETEWITHSEMAPHORES  Delete files using semaphors.
   DELETEWITHSEMAPHORES(FILELIST) deletes the files in cell array FILELIST
   using semaphores.

		Markus Buehren
		Last modified 13.11.2007

   See also SETFILESEMAPHORE, REMOVEFILESEMAPHORE.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 51
DELETEWITHSEMAPHORES  Delete files using semaphors.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 9
existfile


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 773
EXISTFILE  Check for file existence.
	  RES = EXISTFILE(FILENAME) returns true if the file FILENAME is existing
	  on the current path and false otherwise. It works similar to
	  EXIST(FILENAME, 'file'), except that it does not find files on the
	  Matlab path!

		The function is realized as a mex function (existfile.c). To compile the mex-function, move to the directory where
   file existfile.c is located and type
		
		  mex existfile.c

		If this is the first time you run function MEX on your system, you
		might have to select a compiler by typing

		  mex -setup

		If the mex-file (e.g. existfile.mexw32 or existfile.mexglx) is not
		existing, a (very slow) MATLAB realization is called instead.

		Markus Buehren
		Last modified 13.11.2007
 
   See also EXIST.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 36
EXISTFILE  Check for file existence.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 9
findfiles


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 661
FINDFILES  Recursively search directory for files.
   FINDFILES returns a cell array with the file names of all files
   in the current directory and all subdirectories.

   FINDFILES(DIRNAME) returns the file names of all files in the given
   directory and its subdirectories.

   FINDFILES(DIRNAME, FILESPEC) only returns the file names matching the
   given file specification (like '*.c' or '*.m').

   FINDFILES(DIRNAME, FILESPEC, 'nonrecursive') searches only in the top
   directory.

   FINDFILES(DIRNAME, FILESPEC, EXLUDEDIR1, ...) excludes the additional
   directories from the search.

		Markus Buehren
		Last modified 13.11.2007

   See also DIR.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 50
FINDFILES  Recursively search directory for files.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 11
gethostname


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 235
GETHOSTNAME  Get host name.
		HOSTNAME = GETHOSTNAME returns the name of the computer that MATLAB 
		is running on. Function should work for both Linux and Windows.

		Markus Buehren
		Last modified 13.11.2007

		See also GETUSERNAME.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 27
GETHOSTNAME  Get host name.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 11
getusername


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 226
GETUSERNAME  Get user name.
		USERNAME = GETUSERNAME returns the login name of the current MATLAB 
		user. Function should work for both Linux and Windows.

		Markus Buehren
		Last modified 13.11.2007

		See also GETHOSTNAME.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 27
GETUSERNAME  Get user name.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 9
multicore


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 213
 	PARALLEL PROCESSING ON MULTIPLE CORES
 
 	For a demo for Octave, run:
 
 		multicoredemo_octave

 	By Markus Buehren, 2007
 		mb_matlab@gmx.de
 		http://www.markusbuehren.de
 	Version
 	Last modified 07.12.2007



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
 	PARALLEL PROCESSING ON MULTIPLE CORES
 
 	For a demo for Octave, run:
 
 		mul



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 13
multicoredemo


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 603
MULTICOREDEMO  Test parallel processing on multiple cores.
   MULTICOREDEMO runs function testfun with 20 different parameters using
   function STARTMULTICOREMASTER. Open a second Matlab session on a
   multi-core machine and start function STARTMULTICORESLAVE to see the
   effect of the parallelization.

   MULTICOREDEMO(DIRNAME) uses directory DIRNAME to put the intermediate
   files. Use this notation to test the parallelization of different
   machines that have access to a common directory.

		Markus Buehren
		Last modified 13.11.2007

   See also STARTMULTICOREMASTER, STARTMULTICORESLAVE.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 58
MULTICOREDEMO  Test parallel processing on multiple cores.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 20
multicoredemo_octave


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 67
 Another test for MULTICORE on Octave
 By Chuong Nguyen 2007-10-12



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 67
 Another test for MULTICORE on Octave
 By Chuong Nguyen 2007-10-12




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 19
removefilesemaphore


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 277
REMOVEFILESEMAPHORE  Remove semaphore after file access.
   REMOVEFILESEMAPHORE(SEMAPHORE) removes the semaphore(s) set by function
   SETFILESEMAPHORE to allow file access for other Matlab processes.

		Markus Buehren
		Last modified 13.11.2007

   See also SETFILESEMAPHORE.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 56
REMOVEFILESEMAPHORE  Remove semaphore after file access.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 16
setfilesemaphore


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1032
SETFILESEMAPHORE  Set semaphore for file access.
   SEMAPHORE = SETFILESEMAPHORE(FILENAME) sets a semaphore to get
   exclusive access on file FILE. The semaphore is realized by generating
   a simple Matlab data file after checking that no other semaphores are
   existing. The function exits if the semaphore is set. Exclusive file
   access is of course only guaranteed if all other Matlab processes use
   semaphores to access the same file.

   The output variable SEMAPHORE is needed to correctly remove the file
   semaphore after file access. It is an error to call function
   SETFILESEMAPHORE without output arguments.

   SEMAPHORE = SETFILESEMAPHORE(FILELIST) sets semaphores for all files
   given in cell array FILELIST. Note that function SETFILESEMAPHORE waits
   for exclusive file access on ALL files in the list before exiting.

		Note: A semaphore older than 20 seconds is considered as invalid and
		will immediately be deleted.
   
		Markus Buehren
		Last modified 13.11.2007

   See also REMOVEFILESEMAPHORE.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 48
SETFILESEMAPHORE  Set semaphore for file access.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 20
startmulticoremaster


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 3109
STARTMULTICOREMASTER  Start multi-core processing master process.
   RESULTCELL = STARTMULTICOREMASTER(FHANDLE, PARAMETERCELL, DIRNAME)
   starts a multi-core processing master process. The function specified
   by the given function handle is evaluated with the parameters saved in
   each cell of PARAMETERCELL. Each cell may include parameters in any
   form or another cell array which is expanded to an argument list using
   the {:} notation to pass multiple input arguments. The outputs of the
   function are returned in cell array RESULTCELL of the same size as
   PARAMETERCELL. Only the first output argument of the function is
   returned. If you need to get multiple outputs, write a small adapter
   function which puts the outputs of your function into a cell array.

   To make use of multiple cores/machines, function STARTMULTICOREMASTER
   saves files with the function handle and the parameters to the given
   directory DIRNAME. These files are loaded by function
   STARTMULTICORESLAVE running on other Matlab processes which have access
   to the same directory. The slave processes evaluate the given function
   with the saved parameters and save the result in another file into the
   same directory. The results are later collected by the master process.

		RESULTCELL = STARTMULTICOREMASTER(FHANDLE, PARAMETERCELL, DIRNAME,
		MAXMASTEREVALUATIONS) restricts the number of function evaluations done
		by the master process to MAXMASTEREVALUATIONS. After the given number
		of evaluations is reached, the master process waits for other processes
		to complete instead of working down the list of parameter sets itself.
		Use this value if the overall number of function evaluations is quite
		small or the duration of a single evaluation is very long. However,
		note that if the slave process is interrupted, the master process will
		never terminate the computations!

   Note that you can make use of multiple cores on a single machine or on
   different machines with a commonly accessible directory/network share
   or a combination of both.

   RESULTCELL = STARTMULTICOREMASTER(FHANDLE, PARAMETERCELL) uses the
   directory <TEMPDIR2>/multicorefiles, where <TEMPDIR2> is the directory
   returned by function TEMPDIR2. Use this form if you are running on
   multiple cores on a single machine.

   RESULTCELL = STARTMULTICOREMASTER(FHANDLECELL, PARAMETERCELL, ...),
   with a cell array FHANDLECELL including function handles, allows to
   evaluate different functions.

   Example: If you have your parameters saved in parameter cell
   PARAMETERCELL, the for-loop

   	for k=1:numel(PARAMETERCELL)
   		RESULTCELL{k} = FHANDLE(PARAMETERCELL{k});
   	end

   which you would run in a single process can be run in parallel on
   different cores/machines using STARTMULTICOREMASTER and
   STARTMULTICORESLAVE. Run

   	RESULTCELL = STARTMULTICOREMASTER(FHANDLE, PARAMETERCELL, DIRNAME)

   in one Matlab process and

   	STARTMULTICORESLAVE(DIRNAME)

   in other Matlab processes.

		Markus Buehren
		Last modified 13.11.2007

   See also STARTMULTICORESLAVE, FUNCTION_HANDLE.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 65
STARTMULTICOREMASTER  Start multi-core processing master process.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 19
startmulticoreslave


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 519
STARTMULTICORESLAVE  Start multi-core processing slave process.
   STARTMULTICORESLAVE(DIRNAME) starts a slave process for function
   STARTMULTICOREMASTER. The given directory DIRNAME is checked for data
   files including which function to run and which parameters to use.

   STARTMULTICORESLAVE (without input arguments) uses the directory
   <TEMPDIR>/multicorefiles, where <TEMPDIR> is the directory returned by
   function tempdir.

		Markus Buehren
		Last modified 13.11.2007

   See also STARTMULTICOREMASTER.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 63
STARTMULTICORESLAVE  Start multi-core processing slave process.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 8
tempdir2


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 361
TEMPDIR2  Return temporary directory.
		DIR = TEMPDIR2 returns a temporary directory. If the username is
		contained in the directory returned by function TEMPDIR, the directory
		<TEMPDIR>/MATLAB is returned. Otherwise, the directory
		<TEMPDIR>/<USERNAME>/MATLAB is returned.

		Markus Buehren
		Last modified 13.11.2007

		See also USERTEMPDIR, GETUSERNAME.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 37
TEMPDIR2  Return temporary directory.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
testfun


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 178
TESTFUN  Do something stupid that takes some time to compute.
   Y = TESTFUN(X) does some computations and returns Y=X.^2 as output.

		Markus Buehren
		Last modified 13.11.2007



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 61
TESTFUN  Do something stupid that takes some time to compute.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 14
testfun_octave


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 178
TESTFUN  Do something stupid that takes some time to compute.
   Y = TESTFUN(X) does some computations and returns Y=X.^2 as output.

		Markus Buehren
		Last modified 13.11.2007



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 61
TESTFUN  Do something stupid that takes some time to compute.





