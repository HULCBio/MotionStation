# Created by Octave 3.6.4, Sat Mar 30 11:48:33 2013 Jerusalem Daylight Time <unknown@NITH02>
# name: cache
# type: cell
# rows: 3
# columns: 4
# name: <cell-element>
# type: sq_string
# elements: 1
# length: 18
tst_backward_euler


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1396
 -- Function File: [OUT,NITER] = tst_backward_euler(CIRSTRUCT,X,T,TOL,
          MAXIT,PLTVARS,VERBOSITY,DAE_FUN)
     Perform a transient simulation of the system described by
     CIRSTRUCT over the time interval T using the backward Euler
     algorithm.

     The initial value for the state vector is computed by solving a
     steady state problem at T(1), with starting guess X.

     TOL and MAXIT are parameters passed to `nls_newton_raphson'.

     The output OUT will contain the value of the state vector at each
     point of T.

     The optional parameter VERBOSITY controls the amount of output
     produced:

        - if verbosity(1) != 0, information on the progress of the
          algorithm are output at runtime

        - if verbosity(2) != 0, the plot of the variables whose names
          are listed in PLTVARS is produced after the computation

     For special purposes one may need to pass modified jacobian and
     residual functions. This can be done via the cell array of function
     handles DAE_FUN.

     Such functions should have the same input and output parameter
     list as the default sub-functions TSTBWEFUNJAC0,TSTBWEFUNRES0,
     TSTBWEFUNJAC,TSTBWEFUNRES.

     The optional output NITER returns the number of Newton iterations
     needed to reach convergence.

     See also: tst_daspk, tst_theta_method, tst_odepkg,
     nls_newton_raphson





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
Perform a transient simulation of the system described by CIRSTRUCT
over the tim



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 9
tst_daspk


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1375
 -- Function File: [OUT] = tst_daspk (CIRSTRUCT,X,T,TOL,MAXIT,
          PLTVARS,VERBOSITY,DASKOPTS,DAE_FUN);
     Perform a transient simulation of the system described by
     CIRSTRUCT over the time interval T using `daspk'.

     The initial value for the state vector is computed by solving a
     steady state problem at T(1), with starting guess X.

     TOL and MAXIT are parameters passed to `nls_newton_raphson'.

     The output OUT will contain the value of the state vector at each
     point of T.

     Extra options for `daspk' can be passed as name/value pairs in the
     cellarray DASKOPTS.

     The optional parameter  VERBOSITY controls the amount of output
     produced:

        - if verbosity(1) != 0, information on the progress of the
          algorithm are output at runtime

        - if verbosity(2) != 0, the plot of the variables whose names
          are listed in PLTVARS is produced after the computation

     For special purposes one may need to pass modified jacobian and
     residual functions. This can be done via the cell array of function
     handles DAE_FUN.

     Such functions should have the same input and output parameter
     list as the default sub-functions TSTBWEFUNJAC0,TSTBWEFUNRES0,
     TSTBWEFUNJAC,TSTBWEFUNRES.

     See also: tst_backward_euler, tst_odepkg, tst_theta_method,
     nls_newton_raphson, daspk





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
Perform a transient simulation of the system described by CIRSTRUCT
over the tim



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 10
tst_odepkg


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1325
 -- Function File: [OUT, [TOUT]] = tst_odepkg (CIRSTRUCT,X,T,TOL,MAXIT,
          PLTVARS,SOLVER,ODESTRUCT,VERBOSITY);
     Perform a transient simulation of the system described by
     CIRSTRUCT over the time interval T using the `odepkg' DAE solver
     specified in SOLVER.

     Pssible values for SOLVER are `ode2r', `ode5r', `oders' or `odesx'.

     The initial value for the state vector is computed by solving a
     steady state problem at T(1), with starting guess X.

     TOL and MAXIT are parameters passed to `nls_newton_raphson'.

     If one output is requested OUT will contain the value of the state
     vector at each point of T.

     If two outputs are requested OUT will contain the value of the
     state vector at each point of TOUT.

     Extra options for options for the solver can be passed to the
     solver via ODESTRUCT.

     The optional parameter  VERBOSITY controls the amount of output
     produced:

        - if verbosity(1) != 0, information on the progress of the
          algorithm are output at runtime

        - if verbosity(2) != 0, the plot of the variables whose names
          are listed in PLTVARS is produced after the computation

     See also: tst_backward_euler, tst_theta_method, tst_daspk,
     nls_newton_raphson, odepkg, odeset,  ode2r, ode5r, oders, odesx





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
Perform a transient simulation of the system described by CIRSTRUCT
over the tim



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 16
tst_theta_method


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1072
 -- Function File: [OUT,NITER] = tst_theta_method (CIRSTRUCT,X,T,TOL,
          MAXIT,THETA,PLTVARS, VERBOSITY);
     Perform a transient simulation of the system described by
     CIRSTRUCT over the time interval T using the theta-method with
     parameter THETA.

     The initial value for the state vector is computed by solving a
     steady state problem at T(1), with starting guess X.

     TOL and MAXIT are parameters passed to `nls_newton_raphson'.

     The output OUT will contain the value of the state vector at each
     point of T.

     The optional parameter VERBOSITY controls the amount of output
     produced:

        - if verbosity(1) != 0, information on the progress of the
          algorithm are output at runtime

        - if verbosity(2) != 0, the plot of the variables whose names
          are listed in PLTVARS is produced after the computation

     The optional output NITER returns the number of Newton iterations
     needed to reach convergence.

     See also: tst_backward_euler, tst_daspk, tst_odepkg,
     nls_newton_raphson





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
Perform a transient simulation of the system described by CIRSTRUCT
over the tim





