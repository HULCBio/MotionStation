# Created by Octave 3.6.4, Sat Mar 30 12:42:02 2013 Jerusalem Daylight Time <unknown@NITH02>
# name: cache
# type: cell
# rows: 3
# columns: 5
# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
findsym


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 527
 -- Function File: VARS = findsym (F, N)
     Find symbols in expression F and return them comma-separated in
     string VARS. The symbols are sorted in alphabetic order. If N is
     specified, the N symbols closest to "x" are returned.

     Example:
          symbols
          x     = sym ("x");
          y     = sym ("y");
          f     = x^2+3*x*y-y^2;
          vars  = findsym (f);
          vars2 = findsym (f,1);

     This is intended for m****b compatibility, calls findsymbols().

     See also: findsymbols





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 76
Find symbols in expression F and return them comma-separated in string
VARS.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 8
poly2sym


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 601
 -- Function File: P = poly2sym (C, X)
     Creates a symbolic polynomial expression P with coefficients C.
     If P is not specified, the free variable is set to sym("x"). C may
     be a vector or a cell-array of symbols. X may be a symbolic
     expression or a string.  The coefficients correspond to decreasing
     exponent of the free variable.

     Example:
          symbols
          x = sym("x");
          y = sym("y");
          p = poly2sym ([2,5,-3]);         # p = 2*x^2+5*x-3
          c = poly2sym ({2*y,5,-3},x);     # p = 2*y*x^2+5*x-3

     See also: sym2poly, polyval, roots





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 63
Creates a symbolic polynomial expression P with coefficients C.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 5
splot


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 85
 -- Function File: splot (F,X,RANGE)
     Plot a symbolic function f(x) over range.




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 41
Plot a symbolic function f(x) over range.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 8
sym2poly


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 766
 -- Function File: C = sym2poly (P, X)
     Returns the coefficients of the symbolic polynomial expression P
     as a vector. If there is only one free variable in P the
     coefficient vector C is a plain numeric vector. If there is more
     than one free variable in P, a second argument X specifies the
     free variable and the function returns a cell vector of symbolic
     expressions.  The coefficients correspond to decreasing exponent
     of the free variable.

     Example:
          symbols
          x = sym("x");
          y = sym("y");
          c = sym2poly (x^2+3*x-4);    # c = [1,3,-4]
          c = sym2poly (x^2+y*x,x);    # c = {2,y,0}

     If P is not a polynomial the result has no warranty.

     See also: poly2sym, polyval, roots





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 77
Returns the coefficients of the symbolic polynomial expression P as a
vector.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 9
symfsolve


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1284
 -- Function File: [X, INF, MSG] = symfsolve (...)
     Solve a set of symbolic equations using `fsolve'. There are a
     number of ways in which this function can be called.

     This solves for all free variables, initial values set to 0:

          symbols
          x=sym("x");   y=sym("y");
          f=x^2+3*x-1;  g=x*y-y^2+3;
          a = symfsolve(f,g);

     This solves for x and y and sets the initial values to 1 and 5
     respectively:

          a = symfsolve(f,g,x,1,y,5);
          a = symfsolve(f,g,{x==1,y==5});
          a = symfsolve(f,g,[1 5]);

     In all the previous examples vector a holds the results: x=a(1),
     y=a(2).  If initial conditions are specified with variables, the
     latter determine output order:

          a = symfsolve(f,g,{y==1,x==2});  # here y=a(1), x=a(2)

     The system of equations to solve for can be given as separate
     arguments or as a single cell-array:

          a = symfsolve({f,g},{y==1,x==2});  # here y=a(1), x=a(2)

     If the variables are not specified explicitly with the initial
     conditions, they are placed in alphabetic order. The system of
     equations can be comma- separated or given in a cell-array. The
     return-values are those of fsolve; X holds the found roots.

   See also: fsolve




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 49
Solve a set of symbolic equations using `fsolve'.





