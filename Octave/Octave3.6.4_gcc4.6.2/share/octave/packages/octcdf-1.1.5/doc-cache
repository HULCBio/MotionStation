# Created by Octave 3.6.4, Sat Mar 30 12:05:56 2013 Jerusalem Daylight Time <unknown@NITH02>
# name: cache
# type: cell
# rows: 3
# columns: 15
# name: <cell-element>
# type: sq_string
# elements: 1
# length: 14
example_netcdf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 48
 Example for creating and reading a netcdf file



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 48
 Example for creating and reading a netcdf file




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 15
example_opendap


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 54
 Example for loading a dataset from an OPeNDAP server



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 54
 Example for loading a dataset from an OPeNDAP server




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
ncbyte


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 578
 -- Loadable Function: NCVAR =  ncbyte(DIMNAME_1,...,DIMNAME_N)
     creates a netcdf variable of type ncbyte. DIMNAME_1 is the name of
     the 1st netcdf dimension, and so on. The return value is a netcdf
     variable object and must be affected to a netcdf file, before its
     content can be defined.

     Example:
          nc = netcdf('test.nc','w');
          nc('lon') = 360;
          nc('lat') = 180;
          nc{'var'} =  ncbyte('lon','lat');
     A new 360 by 180 netcdf variable named 'var' of type byte is
     created in file 'test.nc'.

   See also: netcdf




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 41
creates a netcdf variable of type ncbyte.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
ncchar


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 578
 -- Loadable Function: NCVAR =  ncchar(DIMNAME_1,...,DIMNAME_N)
     creates a netcdf variable of type ncchar. DIMNAME_1 is the name of
     the 1st netcdf dimension, and so on. The return value is a netcdf
     variable object and must be affected to a netcdf file, before its
     content can be defined.

     Example:
          nc = netcdf('test.nc','w');
          nc('lon') = 360;
          nc('lat') = 180;
          nc{'var'} =  ncchar('lon','lat');
     A new 360 by 180 netcdf variable named 'var' of type char is
     created in file 'test.nc'.

   See also: netcdf




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 41
creates a netcdf variable of type ncchar.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 8
ncdouble


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 586
 -- Loadable Function: NCVAR =  ncdouble(DIMNAME_1,...,DIMNAME_N)
     creates a netcdf variable of type ncdouble. DIMNAME_1 is the name
     of the 1st netcdf dimension, and so on. The return value is a
     netcdf variable object and must be affected to a netcdf file,
     before its content can be defined.

     Example:
          nc = netcdf('test.nc','w');
          nc('lon') = 360;
          nc('lat') = 180;
          nc{'var'} =  ncdouble('lon','lat');
     A new 360 by 180 netcdf variable named 'var' of type double is
     created in file 'test.nc'.

   See also: netcdf




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 43
creates a netcdf variable of type ncdouble.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
ncdump


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 530
 -- Loadable Function: ncdump (FILENAME)
 -- Loadable Function: ncdump (FILENAME,OUTPUT_FILENAME)
     This function writes the content of the NetCDF file FILENAME
     except the actual values of the variables to the screen or to the
     file OUTPUT_FILENAME is this argument is provided.  The output
     used the same syntax that the octcdf toolbox. Therefore ncdump can
     be used to create a program that produces a NetCDF file with the
     same metadata than the NetCDF file FILENAME.

   See also: ncdim, ncvar, ncatt




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
This function writes the content of the NetCDF file FILENAME except the
actual v



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 9
ncfillval


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 192
 -- Loadable Function: FILLVALUE =  ncfillval (NCVAR)
 -- Loadable Function: ncfillval (NCVAR,FILLVALUE)
     returns or sets the FILLVALUE of the NetCDF variable NCVAR.

   See also: netcdf




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 59
returns or sets the FILLVALUE of the NetCDF variable NCVAR.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
ncfloat


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 582
 -- Loadable Function: NCVAR =  ncfloat(DIMNAME_1,...,DIMNAME_N)
     creates a netcdf variable of type ncfloat. DIMNAME_1 is the name
     of the 1st netcdf dimension, and so on. The return value is a
     netcdf variable object and must be affected to a netcdf file,
     before its content can be defined.

     Example:
          nc = netcdf('test.nc','w');
          nc('lon') = 360;
          nc('lat') = 180;
          nc{'var'} =  ncfloat('lon','lat');
     A new 360 by 180 netcdf variable named 'var' of type float is
     created in file 'test.nc'.

   See also: netcdf




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 42
creates a netcdf variable of type ncfloat.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
ncinfo


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 159
 finfo = ncinfo(filename)
 vinfo = ncinfo(filename,varname)
 return information about complete netCDF file (filename) or about
 the specific variable varname.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
 finfo = ncinfo(filename)
 vinfo = ncinfo(filename,varname)
 return information 



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 5
ncint


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 574
 -- Loadable Function: NCVAR =  ncint(DIMNAME_1,...,DIMNAME_N)
     creates a netcdf variable of type ncint. DIMNAME_1 is the name of
     the 1st netcdf dimension, and so on. The return value is a netcdf
     variable object and must be affected to a netcdf file, before its
     content can be defined.

     Example:
          nc = netcdf('test.nc','w');
          nc('lon') = 360;
          nc('lat') = 180;
          nc{'var'} =  ncint('lon','lat');
     A new 360 by 180 netcdf variable named 'var' of type int is
     created in file 'test.nc'.

   See also: netcdf




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 40
creates a netcdf variable of type ncint.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
nclong


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 578
 -- Loadable Function: NCVAR =  nclong(DIMNAME_1,...,DIMNAME_N)
     creates a netcdf variable of type nclong. DIMNAME_1 is the name of
     the 1st netcdf dimension, and so on. The return value is a netcdf
     variable object and must be affected to a netcdf file, before its
     content can be defined.

     Example:
          nc = netcdf('test.nc','w');
          nc('lon') = 360;
          nc('lat') = 180;
          nc{'var'} =  nclong('lon','lat');
     A new 360 by 180 netcdf variable named 'var' of type long is
     created in file 'test.nc'.

   See also: netcdf




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 41
creates a netcdf variable of type nclong.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
ncread


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 282
 x = ncread(filename,varname)
 x = ncread(filename,varname,start,count,stride)
 read the variable varname from file filename.
 The parameter start contains the starting indices, count
 is the number of elements and stride the increment between
 two successive elements (default 1).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
 x = ncread(filename,varname)
 x = ncread(filename,varname,start,count,stride)
 



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
ncshort


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 582
 -- Loadable Function: NCVAR =  ncshort(DIMNAME_1,...,DIMNAME_N)
     creates a netcdf variable of type ncshort. DIMNAME_1 is the name
     of the 1st netcdf dimension, and so on. The return value is a
     netcdf variable object and must be affected to a netcdf file,
     before its content can be defined.

     Example:
          nc = netcdf('test.nc','w');
          nc('lon') = 360;
          nc('lat') = 180;
          nc{'var'} =  ncshort('lon','lat');
     A new 360 by 180 netcdf variable named 'var' of type short is
     created in file 'test.nc'.

   See also: netcdf




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 42
creates a netcdf variable of type ncshort.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
nctest


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 131
 -- Loadable Function: nctest
     Tests the octcdf toolbox. Tests results are written to nctest.log.
     All tests should pass.




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 25
Tests the octcdf toolbox.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
ncwrite


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 241
 ncwrite(filename,varname,x)
 ncwrite(filename,varname,x,start,stride)
 write the variable varname to file filename.
 The parameter start contains the starting indices 
 and stride the increment between
 two successive elements (default 1).



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
 ncwrite(filename,varname,x)
 ncwrite(filename,varname,x,start,stride)
 write th





