# Created by Octave 3.6.4, Sat Mar 30 12:27:04 2013 Jerusalem Daylight Time <unknown@NITH02>
# name: cache
# type: cell
# rows: 3
# columns: 6
# name: <cell-element>
# type: sq_string
# elements: 1
# length: 12
base64decode


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 586
 -- Function File: RVAL = base64decode (CODE)
 -- Function File: RVAL = base64decode (CODE, AS_STRING)
     Convert a base64 CODE  (a string of printable characters according
     to RFC 2045) into the original ASCII data set of range 0-255. If
     option AS_STRING is passed, the return value is converted into a
     string.

                    ##base64decode(base64encode('Hakuna Matata'),true)
                    base64decode('SGFrdW5hIE1hdGF0YQ==',true)
                    ##returns 'Hakuna Matata'

     See: http://www.ietf.org/rfc/rfc2045.txt

     See also: base64encode





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
Convert a base64 CODE  (a string of printable characters according to
RFC 2045) 



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 12
base64encode


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 477
 -- Function File: Y = base64encode (X)
 -- Function File: Y = base64encode (X, DO_RESHAPE)
     Convert X into string of printable characters according to RFC
     2045.  The input may be a string or a matrix of integers in the
     range 0..255.  If want the output in the 1-row of strings format,
     pass the DO_RESHAPE argument as true.

     Example:
          base64encode('Hakuna Matata',true)
          ##returns 'SGFrdW5hIE1hdGF0YQ=='

     See also: base64decode





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 68
Convert X into string of printable characters according to RFC 2045.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
cstrcmp


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 845
 -- Function File: RVAL = cstrcmp (S1, S2)
     Compare strings S1 and S2 like the C function.

     Aside the difference to the return values, this function API is
     exactly the same as Octave's `strcmp' and will accept cell arrays
     as well.

     RVAL indicates the relationship between the strings:
        * A value of 0 indicates that both strings are equal;

        * A value of +1 indicates that the first character that does
          not match has a greater value in S1 than in S2.

        * A value of -1 indicates that the first character that does
          not match has a match has a smaller value in S1 than in S2.

          cstrcmp("marry","marry")
                =>  0
          cstrcmp("marry","marri")
                => +1
          cstrcmp("marri","marry")
                => -1

     See also: strcmp, strcmpi





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 46
Compare strings S1 and S2 like the C function.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 12
editdistance


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 882
 -- Function File: [DIST,L] = editdistance (STRING1, STRING2, WEIGHTS)
     Compute the Levenshtein edit distance between the strings STRING1
     and STRING2. This operation is symmetrical.

     The optional argument WEIGHTS specifies weights for the deletion,
     matched, and insertion operations; by default it is set to +1, 0,
     +1 respectively, so that a least editdistance means a closer match
     between the two strings. This function implements the Levenshtein
     edit distance as presented in Wikipedia article, accessed Nov
     2006. Also the levenshtein edit distance of a string with an empty
     string is defined to be its length.

     The default return value is DIST the edit distance, and the other
     return value  L is the distance matrix.

                   editdistance('marry','marie')
                   ##returns value +2 for the distance.





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 78
Compute the Levenshtein edit distance between the strings STRING1 and
STRING2.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
strjoin


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 741
 -- Function File: RVAL = strjoin (PREFIXSTR, STRINGCELL)
 -- Function File: RVAL = strjoin (PREFIXSTR, VARARGS)
     Joins the strings in STRINGCELL with the PREFIXSTR like the
     list-join function in Python; the second version allows usage with
     variable number of arguments.  Note that, if using cell-array as a
     second argument, only 2 arguments are accepted.  Also note that,
     both the arguments are strings or containers of strings (cells).

                    strjoin(' loves-> ','marie','amy','beth')
                    ##returns 'marie loves-> amy loves-> beth'

                    strjoin('*',{'Octave','Scilab','Lush','Yorick'})
                    ##returns 'Octave*Scilab*Lush*Yorick'

     See also: strcmp





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
Joins the strings in STRINGCELL with the PREFIXSTR like the list-join
function i



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
strsort


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 120
 -- Function File: [...] = strsort (...)
     Overloads the sort function to operate on strings.

     See also: sort





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 50
Overloads the sort function to operate on strings.





