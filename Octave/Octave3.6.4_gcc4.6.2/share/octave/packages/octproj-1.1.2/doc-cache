# Created by Octave 3.6.4, Sat Mar 30 12:11:08 2013 Jerusalem Daylight Time <unknown@NITH02>
# name: cache
# type: cell
# rows: 3
# columns: 5
# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
op_fwd


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 796
 -- Function File: [X,Y] = op_fwd(LON,LAT,PARAMS)
     This function projects geodetic coordinates into cartesian
     projected coordinates in the defined cartographic projection using
     the PROJ.4 function pj_fwd().

     LON contains the geodetic longitude, in radians.  LAT contains the
     geodetic latitude, in radians.  PARAMS is a text string containing
     the projection parameters in PROJ.4 format.

     LON or LAT can be scalars, vectors or matrices with equal
     dimensions.

     X is the X projected coordinates.  Y is the Y projected
     coordinates.

     If a projection error occurs, the resultant coordinates for the
     affected points have both Inf value and a warning message is
     emitted (one for each erroneous point).

     See also: op_inv, op_transform





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
This function projects geodetic coordinates into cartesian projected
coordinates



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 12
op_geoc2geod


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 803
 -- Function File: [LON,LAT,H] = op_geoc2geod(X,Y,Z,A,F)
     This function converts cartesian tridimensional geocentric
     coordinates into geodetic coordinates using the PROJ.4 function
     pj_geocentric_to_geodetic().

     X contains the X geocentric coordinate.  Y contains the Y
     geocentric coordinate.  Z contains the Z geocentric coordinate.  A
     is a scalar containing the semi-major axis of the ellipsoid.  F is
     a scalar containing the flattening of the ellipsoid.

     X, Y or Z can be scalars, vectors or matrices with equal
     dimensions.  The units of X, Y, Z and A must be the same.

     LON is the geodetic longitude, in radians.  LAT is the geodetic
     latitude, in radians.  H is the ellipsoidal height, in the same
     units of A.

     See also: op_geod2geoc





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
This function converts cartesian tridimensional geocentric coordinates
into geod



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 12
op_geod2geoc


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 845
 -- Function File: [X,Y,Z] = op_geod2geoc(LON,LAT,H,A,F)
     This function converts geodetic coordinates into cartesian
     tridimensional geocentric coordinates using the PROJ.4 function
     pj_geodetic_to_geocentric().

     LON contains the geodetic longitude, in radians.  LAT contains the
     geodetic latitude, in radians.  H contains the ellipsoidal height.
     A is a scalar containing the semi-major axis of the ellipsoid.  F
     is a scalar containing the flattening of the ellipsoid.

     LON, LAT or H can be scalars, vectors or matrices with equal
     dimensions.  The units of H and A must be the same.

     X is the X geocentric coordinate, in the same units of A.  Y is
     the Y geocentric coordinate, in the same units of A.  Z the Z
     geocentric coordinate, in the same units of A.

     See also: op_geoc2geod





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
This function converts geodetic coordinates into cartesian
tridimensional geocen



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 6
op_inv


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 789
 -- Function File: [LON,LAT] = op_inv(X,Y,PARAMS)
     This function unprojects cartesian projected coordinates (in a
     defined cartographic projection) into geodetic coordinates using
     the PROJ.4 function pj_inv().

     X contains the X projected coordinates.  Y contains the Y
     projected coordinates.  PARAMS is a text string containing the
     projection parameters in PROJ.4 format.

     X or Y can be scalars, vectors or matrices with equal dimensions.

     LON is the geodetic longitude, in radians.  LAT is the geodetic
     latitude, in radians.

     If a projection error occurs, the resultant coordinates for the
     affected points have both Inf value and a warning message is
     emitted (one for each erroneous point).

     See also: op_fwd, op_transform





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
This function unprojects cartesian projected coordinates (in a defined
cartograp



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 12
op_transform


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1360
 -- Function File: [X2,Y2,Z2] = op_transform(X1,Y1,Z1,PAR1,PAR2)
 -- Function File: [X2,Y2] = op_transform(X1,Y1,PAR1,PAR2)
     This function transforms X/Y/Z, lon/lat/h points between two
     coordinate systems 1 and 2 using the PROJ.4 function
     pj_transform().

     X1 contains the first coordinates in the source coordinate system.
     If X1 is geodetic longitude, it must be expressed in radians.  Y1
     contains the second coordinates in the source coordinate system. If
     Y1 is geodetic latitude, it must be expressed in radians.  Z1
     contains the third coordinates in the source coordinate system.
     PAR1 is a text string containing the projection parameters for the
     source system, in PROJ.4 format.  PAR2 is a text string containing
     the projection parameters for the destination system, in PROJ.4
     format.

     X1, Y1 or X1 can be scalars, vectors or matrices with equal
     dimensions.

     X2 is the first coordinate in the destination coordinate system. If
     X2 is geodetic longitude, it is output in radians.  Y2 is the
     second coordinate in the destination coordinate system. If Y2 is
     geodetic longitude, it is output in radians.  Z2 is the third
     coordinate in the destination coordinate system. If argument Z1
     was omitted, this value is an empty matrix.

     See also: op_fwd, op_inv





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
This function transforms X/Y/Z, lon/lat/h points between two coordinate
systems 





