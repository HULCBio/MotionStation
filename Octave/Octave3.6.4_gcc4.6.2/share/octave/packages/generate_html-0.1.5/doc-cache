# Created by Octave 3.6.4, Sat Mar 30 09:38:47 2013 Jerusalem Daylight Time <unknown@NITH02>
# name: cache
# type: cell
# rows: 3
# columns: 9
# name: <cell-element>
# type: sq_string
# elements: 1
# length: 17
generate_alphabet


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 86
 -- Function File: generate_alphabet (DIRECTORY, DATA_FILE, ROOT,
          OPTIONS)




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 0




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 20
generate_html_manual


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 58
 -- Function File: generate_html_manual (SRCDIR, OUTDIR)




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 0




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 18
generate_operators


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 138
 -- Function File: generate_operators (OUTDIR, OPTIONS)
     Generate a HTML page with a list of operators available in GNU
     Octave.




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 70
Generate a HTML page with a list of operators available in GNU Octave.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 21
generate_package_html


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1279
 -- Function File: generate_package_html (NAME, OUTDIR, OPTIONS)
     Generate HTML documentation for a package.

     The function reads information about package NAME using the
     package system. This is then used to generate bunch of HTML files;
     one for each function in the package, and one overview page. The
     files are all placed in the directory OUTDIR, which defaults to
     the current directory. The OPTIONS structure is used to control
     the design of the web pages.

     As an example, the following code generates the web pages for the
     image package, with a design suitable for the Octave-Forge project.

          options = get_html_options ("octave-forge");
          generate_package_html ("image", "image_html", options);

     The resulting files will be available in the "image_html"
     directory. The overview page will be called
     "image_html/overview.html".

     As a convenience, if OPTIONS is a string, a structure will be
     generated by calling `get_html_options'. This means the above
     example can be reduced to the following.

          generate_package_html ("image", "image_html", "octave-forge");

     It should be noted that the function only works for installed
     packages.

     See also: get_html_options





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 42
Generate HTML documentation for a package.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 16
get_html_options


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 817
 -- Function File: OPTIONS = get_html_options (PROJECT_NAME)
     Returns a structure containing design options for various project
     web sites.

     Given a string PROJECT_NAME, the function returns a structure
     containing various types of information for generating web pages
     for the specified project.  Currently, the accepted values of
     PROJECT_NAME are

    "octave-forge"
          Design corresponding to the pages at http://octave.sf.net.

    "octave"
          Design corresponding to the pages at http://octave.org. The
          pages are meant to be processed with the `m4' preprocessor,
          using the macros for the site.

    "docbrowser"
          Design corresponding to the pages in the documentation
          browser.

     See also: generate_package_html, html_help_text





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 76
Returns a structure containing design options for various project web
sites.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 14
html_help_text


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1097
 -- Function File: html_help_text (NAME, OUTNAME, OPTIONS)
     Writes a function help text to disk formatted as HTML.

     The help text of the function NAME is written to the file OUTNAME
     formatted as HTML. The design of the generated HTML page is
     controlled through the OPTIONS variable. This is a structure with
     the following optional fields.

    `header'
          This field contains the HTML header of the generated file.
          Through this things such as CSS style sheets can be set.

    `footer'
          This field contains the HTML footer of the generated file.
          This should match the `header' field to ensure all opened
          tags get closed.

    `title'
          This field sets the title of the HTML page. This is enforced
          even if the `header' field contains a title.

     OPTIONS structures for various projects can be with the
     `get_html_options' function. As a convenience, if OPTIONS is a
     string, a structure will be generated by calling
     `get_html_options'.

     See also: get_html_options, generate_package_html





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 54
Writes a function help text to disk formatted as HTML.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 9
texi2html


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1097
 -- Function File: html_help_text (NAME, OUTNAME, OPTIONS)
     Writes a function help text to disk formatted as HTML.

     The help text of the function NAME is written to the file OUTNAME
     formatted as HTML. The design of the generated HTML page is
     controlled through the OPTIONS variable. This is a structure with
     the following optional fields.

    `header'
          This field contains the HTML header of the generated file.
          Through this things such as CSS style sheets can be set.

    `footer'
          This field contains the HTML footer of the generated file.
          This should match the `header' field to ensure all opened
          tags get closed.

    `title'
          This field sets the title of the HTML page. This is enforced
          even if the `header' field contains a title.

     OPTIONS structures for various projects can be with the
     `get_html_options' function. As a convenience, if OPTIONS is a
     string, a structure will be generated by calling
     `get_html_options'.

     See also: get_html_options, generate_package_html





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 54
Writes a function help text to disk formatted as HTML.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 9
txi2index


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 841
 -- Function File: INDEX = txi2index (FILE_PATTERN)
     Convert `.txi' files in the Octave source into an INDEX structure
     suitable for generating a functon reference.

     FILE_PATTERN must be a string containing either the name of a
     `.txi' file, or a pattern for globbing a set of files (e.g.
     "*.txi"). The resulting cell array INDEX contains a set of
     structures corresponding to those generated by `pkg ("describe")'.
     These structures can then be given to `generate_package_html' to
     produce HTML content.

     As an example, if the Octave source code is located in
     ~/octave_code, then this function can be called with

          octave_source_code = "~/octave_code";
          index = txi2index (fullfile (octave_source_code, "doc/interpreter", "*.txi"));

     See also: pkg, generate_package_html





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 10
Convert `.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 13
txi2reference


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 749
 -- Function File: REFERENCE = txi2reference (FILE_PATTERN)
     Convert `.txi' files in the Octave source into a functon reference.

     FILE_PATTERN must be a string containing either the name of a
     `.txi' file, or a pattern for globbing a set of files (e.g.
     "*.txi"). The resulting cell array REFERENCE contains a string for
     each `.txi' file. These strings can the be passed to `makeinfo' to
     create output in many formats.

     As an example, if the Octave source code is located in
     ~/octave_code, then this function can be called with

          octave_source_code = "~/octave_code";
          reference = txi2reference (fullfile (octave_source_code, "doc/interpreter", "*.txi"));

     See also: makeinfo, txi2index





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 10
Convert `.





