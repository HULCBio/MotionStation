# Created by Octave 3.6.4, Sat Mar 30 12:51:44 2013 Jerusalem Daylight Time <unknown@NITH02>
# name: cache
# type: cell
# rows: 3
# columns: 3
# name: <cell-element>
# type: sq_string
# elements: 1
# length: 20
createCubeOctahedron


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 746
 -- Function File: [V, E, F] = createCubeOctahedron ()
 -- Function File: MESH = createCubeOctahedron ()
     Create a 3D mesh representing a cube-octahedron

     [V E F] = createCubeOctahedron;   Cubeoctahedron can be seen
     either as a truncated cube, or as a   truncated octahedron.    V
     is the 12-by-3 array of vertex coordinates   E is the 27-by-2
     array of edge vertex indices   F is the 1-by-14 cell array of face
     vertex indices

     [V F] = createCubeOctahedron;   Returns only the vertices and the
     face vertex indices.

     MESH = createCubeOctahedron;   Returns the data as a mesh
     structure, with fields 'vertices', 'edges'   and 'faces'.

     See also: meshes3d, drawMesh, createCube, createOctahedron





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 48
Create a 3D mesh representing a cube-octahedron




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 8
drawMesh


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1373
 -- Function File: H = drawMesh (VERTICES, FACES)
 -- Function File: H = drawMesh (MESH)
 -- Function File: H = drawMesh (..., COLOR)
 -- Function File: H = drawMesh (..., NAME,VALUE)
     Draw a 3D mesh defined by vertices and faces

     drawMesh(VERTICES, FACES)   Draws the 3D mesh defined by vertices
     VERTICES and the faces FACES.    vertices is a [NVx3] array
     containing coordinates of vertices, and FACES   is either a [NFx3]
     or [NFx4] array containing indices of vertices of   the triangular
     or rectangular faces.    FACES can also be a cell array, in the
     content of each cell is an array   of indices to the vertices of
     the current face. Faces can have different   number of vertices.

     drawMesh(MESH)   Where mesh is a structure with fields 'vertices'
     and 'faces', draws the   given mesh.

     drawMesh(..., COLOR)   Use the specified color to render the mesh
     faces.

     drawMesh(..., NAME, VALUE)   Use one or several pairs of parameter
     name/value to specify drawing   options. Options are the same as
     the 'patch' function.

     H = drawMesh(...);   Also returns a handle to the created patch.

     WARNING: This function doesn't work with gnuplot (as of version
     4.1)

     Example:
              [v f] = createSoccerBall;
              drawMesh(v, f);

     See also: polyhedra, meshes3d, patch





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 45
Draw a 3D mesh defined by vertices and faces




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 17
meshes3d_Contents


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 4032
 -- Function File: meshes3d_Contents ()
     MESHES3D 3D Surface Meshes Version 1.0 21-Mar-2011 .

     Creation, vizualization, and manipulation of 3D surface meshes or
     polyhedra.

     Meshes and Polyhedra are represented by a couple of variables {V,
     F}:   V: Nv-by-3 array of vertices: [x1 y1 z1; ... ; xn yn zn];
     F: is either a NF-by-3 or NF-by-4 array containing reference for
     vertices of each face, or a NF-by-1 cell array, where each cell is
     an   array containing a variable number of node indices.    For
     some functions, the array E of edges is needed. It consists in a
     NE-by-2 array containing indices of source and target vertices.

     The library provides function to create basic polyhedric meshes
     (the 5   platonic solids, plus few others), as well as functions
     to perform   basic computations (surface area, normal angles, face
     centroids ...).    The 'MengerSponge' structure is an example of
     mesh that is not simply   connected (multiple tunnels in the
     structure).

     The drawMesh function is mainly a wrapper to the Matlab 'patch'
     function, allowing passing arguments more quickly.

     Example
              # create a soccer ball mesh and display it
              [n e f] = createSoccerBall;
              drawMesh(n, f, 'faceColor', 'g', 'linewidth', 2);
              axis equal;

     General functions   meshFace                 - Return the vertex
     indices of a face in a mesh   computeMeshEdges         - Computes
     edges array from face array   meshEdgeFaces            - Compute
     index of faces adjacent to each edge of a mesh   faceCentroids
           - Compute centroids of a mesh faces   faceNormal
      - Compute normal vector of faces in a 3D mesh

     Measures on meshes   meshSurfaceArea          - Surface area of a
     polyhedral mesh   trimeshSurfaceArea       - Surface area of a
     triangular mesh   meshEdgeLength           - Lengths of edges of a
     polygonal or polyhedral mesh   meshDihedralAngles       - Dihedral
     at edges of a polyhedal mesh   polyhedronNormalAngle    - Compute
     normal angle at a vertex of a 3D polyhedron
     polyhedronMeanBreadth    - Mean breadth of a convex polyhedron

     Basic processing   triangulateFaces         - Convert face array
     to an array of triangular faces   meshReduce               - Merge
     coplanar faces of a polyhedral mesh   minConvexHull            -
     Return the unique minimal convex hull of a set of 3D points
     polyhedronSlice          - Intersect a convex polyhedron with a
     plane.    checkMeshAdjacentFaces   - Check if adjacent faces of a
     mesh have similar orientation   clipMeshVertices         - Clip
     vertices of a surfacic mesh and remove outer faces
     clipConvexPolyhedronHP   - Clip a convex polyhedron by a plane

     Typical polyhedra   polyhedra                - Index of classical
     polyhedral meshes   createCube               - Create a 3D mesh
     representing the unit cube   createOctahedron         - Create a
     3D mesh representing an octahedron   createCubeOctahedron     -
     Create a 3D mesh representing a cube-octahedron
     createIcosahedron        - Create a 3D mesh representing an
     Icosahedron.    createDodecahedron       - Create a 3D mesh
     representing a dodecahedron   createTetrahedron        - Create a
     3D mesh representing a tetrahedron   createRhombododecahedron -
     Create a 3D mesh representing a rhombododecahedron
     createTetrakaidecahedron - Create a 3D mesh representing a
     tetrakaidecahedron

     Less typical polyhedra   createSoccerBall         - Create a 3D
     mesh representing a soccer ball   createMengerSponge       -
     Create a cube with an inside cross removed   steinerPolytope
       - Create a steiner polytope from a set of vectors

     Drawing functions   drawFaceNormals          - Draw normal vector
     of each face in a mesh   drawMesh                 - Draw a 3D mesh
     defined by vertices and faces




# name: <cell-element>
# type: sq_string
# elements: 1
# length: 37
MESHES3D 3D Surface Meshes Version 1.





