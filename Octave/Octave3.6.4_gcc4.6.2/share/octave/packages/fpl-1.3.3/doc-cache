# Created by Octave 3.6.4, Sat Mar 30 09:59:50 2013 Jerusalem Daylight Time <unknown@NITH02>
# name: cache
# type: cell
# rows: 3
# columns: 10
# name: <cell-element>
# type: sq_string
# elements: 1
# length: 18
fpl_dx_write_field


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1662
 -- Function File:  fpl_dx_writefield (BASENAME, MESH, U, ATTR_NAME,
          ATTR_RANK, ATTR_SHAPE, ENDFILE)
     Output data field in ASCII Open-DX format.

     BASENAME is a string containing the base-name of the dx file where
     the data will be saved.

     MESH is a PDE-tool like mesh, like the ones generated by the "msh"
     package.

     U is the field to be saved. It should represent scalar, vector or
     tensor of doubles.

     ATTR_NAME is a descriptive name for the field U, while ATTR_RANK
     is the rank of the field (0 for scalar, 1 for vector, etc.) and
     ATTR_SHAPE is the number of components of the field (assumed 1 for
     scalar).

     ENDFILE should be 0 if you want to add other variables to the same
     file, 1 otherwise.

     Notice that when appending fields to an already existing file:

        * MESH will not be printed to FILENAME, but it will be only
          used to determine if the field is piece-wise constant or
          piece-wise linear

        * U is not checked for consistency against the MESH already
          printed in FILENAME

     Example 1 (wrong usage):
          <generate msh1/u1 msh2/u2 in some way>
          fpl_dx_write_field("field.dx",msh1,u1,"density",1,0,0);
          fpl_dx_write_field("field.dx",msh2,u2,"temperature",1,0,1);
     generate a file that fails at OpenDX run-time.

     Example 2:
          <generate msh1 and two fields u1-u2 in some way>
          fpl_dx_write_field("field",msh1,u1,"density",1,0,0);
          fpl_dx_write_field("field",msh1,u2,"temperature",1,0,1);
     will generate a valid OpenDX ASCII data file.

     See also: fpl_dx_write_series





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 42
Output data field in ASCII Open-DX format.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 19
fpl_dx_write_series


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 812
 -- Function File:  fpl_dx_write_series (BASENAME, MESH, U, SP,
          ATTR_NAME, ATTR_RANK, ATTR_SHAPE)
     Output data series in ASCII Open-DX format.

     BASENAME is a string containing the base-name of the dx file where
     the data will be saved.

     MESH is a PDE-tool like mesh, like the ones generated by the "msh"
     package.

     U is the series to be saved. It should represent scalar, vector or
     tensor of doubles. SP is the vector of the sampled points (e.g.
     time points in the case of a time series).

     ATTR_NAME is a descriptive name for the series U, while ATTR_RANK
     is the rank of the field items (0 for scalar, 1 for vector, etc.)
     and ATTR_SHAPE is the number of components of the field items
     (assumed 1 for scalar).

     See also: fpl_dx_write_field





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 43
Output data series in ASCII Open-DX format.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 23
fpl_vtk_assemble_series


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 626
 -- Function File:  fpl_vtk_assemble_series (COLLECTION, BASENANME,
          FORMAT, IDX, TIME)
     Assemble a ParaView collection file (pvd) from a set of files
     representing data at different time-steps.

     COLLECTION is a string containing the base-name of the pvd file
     where the data will be saved.

     BASENAME, FORMAT, IDX are two strings and a set of integers, the
     name of the i-th file in the collection will be computed as
     `sprintf ([basename, format, ".vtu"], idx(i))'.

     TIME is the set of time-steps to which data correspond

     See also: fpl_vtk_write_field, fpl_dx_write_series





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
Assemble a ParaView collection file (pvd) from a set of files
representing data 



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 23
fpl_vtk_b64_write_field


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1305
 -- Function File:  fpl_vtk_b64_write_field (BASENAME, MESH, NODEDATA,
          CELLDATA)
     Output data field in binary serial XML-VTK UnstructuredGrid format.

     BASENAME is a string containing the base-name of the (vtu) file
     where the data will be saved.

     MESH is a PDE-tool like mesh, like the ones generated by the "msh"
     package.

     NODEDATA and CELLDATA are (Ndata x 2) cell arrays containing
     respectively <PointData> and <CellData> representing scalars or
     vectors:
        - *DATA{:,1} = variable data;

        - *DATA{:,2} = variable names;

     Example:
          %% generate msh1, node centered field nc1, cell centered field cc1
          fpl_vtk_b64_write_field ("example", msh1, {nc1, "temperature"}, {cc1, "density"});
          %% generate msh2, node centered field nc2
          fpl_vtk_b64_write_field ("example", msh2, {nc2, "temperature"}, {});

     The difference between `fpl_vtk_write_field' and
     `fpl_vtk_b64_write_field' is that the former saves data in ASCII
     format while the latter uses base64-encoded binary format. To save
     data in un-encoded binary format use `fpl_vtk_raw_write_field'.

     See also: fpl_dx_write_field, fpl_dx_write_series,
     fpl_vtk_assemble_series, fpl_vtk_write_field,
     fpl_vtk_raw_write_field





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 67
Output data field in binary serial XML-VTK UnstructuredGrid format.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 23
fpl_vtk_raw_write_field


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1295
 -- Function File:  fpl_vtk_raw_write_field (BASENAME, MESH, NODEDATA,
          CELLDATA)
     Output data field in binary serial XML-VTK UnstructuredGrid format.

     BASENAME is a string containing the base-name of the (vtu) file
     where the data will be saved.

     MESH is a PDE-tool like mesh, like the ones generated by the "msh"
     package.

     NODEDATA and CELLDATA are (Ndata x 2) cell arrays containing
     respectively <PointData> and <CellData> representing scalars or
     vectors:
        - *DATA{:,1} = variable data;

        - *DATA{:,2} = variable names;

     Example:
          %% generate msh1, node centered field nc1, cell centered field cc1
          fpl_vtk_raw_write_field ("example", msh1, {nc1, "temperature"}, {cc1, "density"});
          %% generate msh2, node centered field nc2
          fpl_vtk_raw_write_field ("example", msh2, {nc2, "temperature"}, {});

     The difference between `fpl_vtk_write_field' and
     `fpl_vtk_raw_write_field' is that the former saves data in ASCII
     format while the latter uses raw binary format. To save data in
     b64-encoded binary format use `fpl_vtk_b64_write_field'.

     See also: fpl_dx_write_field, fpl_dx_write_series,
     fpl_vtk_assemble_series, fpl_vtk_write_field,
     fpl_vtk_b64_write_field





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 67
Output data field in binary serial XML-VTK UnstructuredGrid format.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 19
fpl_vtk_write_field


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 1137
 -- Function File:  fpl_vtk_write_field (BASENAME, MESH, NODEDATA,
          CELLDATA, ENDFILE)
     Output data field in serial XML-VTK UnstructuredGrid format.

     BASENAME is a string containing the base-name of the (vtu) file
     where the data will be saved.

     MESH is a PDE-tool like mesh, like the ones generated by the "msh"
     package.

     NODEDATA and CELLDATA are (Ndata x 2) cell arrays containing
     respectively <PointData> and <CellData> representing scalars or
     vectors:
        - *DATA{:,1} = variable data;

        - *DATA{:,2} = variable names;

     ENDFILE should be 0 if you want to add other variables to the same
     file, 1 otherwise.

     Example:
          <generate msh1, node centered field nc1, cell centered field cc1>
          fpl_vtk_write_field ("example", msh1, {nc1, "temperature"}, {cc1, "density"}, 0);
          <generate msh2, node centered field nc2>
          fpl_vtk_write_field ("example", msh2, {nc2, "temperature"}, {}, 1);
     will generate a valid XML-VTK UnstructuredGrid file.

     See also: fpl_dx_write_field, fpl_dx_write_series,
     fpl_vtk_assemble_series





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 60
Output data field in serial XML-VTK UnstructuredGrid format.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
pdemesh


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 295
 -- Function File: H = pdemesh (P, E, T, U)
     Plot a triangular mesh in 3D given a mesh structure and node data.
     P, T are the mesh vertices and connectivity, U node data.  E is
     ignored and is accepted only for compatibiity.

     See also: fpl_dx_write_field, fpl_vtk_write_field





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 66
Plot a triangular mesh in 3D given a mesh structure and node data.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
pdesurf


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 250
 -- Function File: H = pdesurf (P, T, U)
     Plot a 3D surface given node or element data on a triangular mesh.
     P, T are the mesh vertices and connectivity, U node or element
     data.

     See also: fpl_dx_write_field, fpl_vtk_write_field





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 66
Plot a 3D surface given node or element data on a triangular mesh.



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 7
savevtk


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 713
 -- Function File: [ STATUS] = savevtk ( X, Y, Z, FILENAME )
     Save a 3-D scalar array ARRAY to the file FILENAME in VTK
     structured-grid format.

     This file format is used by Mayavi2 or ParaView for example.   If
     no write errors occurred, output argument STATUS is set to 1,
     otherwise 0.

     Example:

             n = 30;
             X = zeros (n, n, n);
             for x = 1:n
               for y = 1:n
                 for z = 1:n
                     X(x, y, z) = 1 / sqrt (x*x + y*y + z*z);
                 endfor
               endfor
             endfor
             X = X * 200 / max (max (max (X)));
             savevtk (X, "spherical.vtk");

     See also: savevtkvector





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
Save a 3-D scalar array ARRAY to the file FILENAME in VTK
structured-grid format



# name: <cell-element>
# type: sq_string
# elements: 1
# length: 13
savevtkvector


# name: <cell-element>
# type: sq_string
# elements: 1
# length: 465
 -- Function File: [ STATUS] = savevtkvector (X, Y, Z, FILENAME)
     Save a 3-D vector field of components X, Y, Z to the file FILENAME
     in VTK format.

     This file format is used by Mayavi2 or ParaView for example.   X,
     Y and Z should be 3-D arrays of the same  size, each storing
     vector components in a given Cartesian direction.

     If no write errors occurred, output argument STATUS is set to 1,
     otherwise 0.

     See also: savevtk





# name: <cell-element>
# type: sq_string
# elements: 1
# length: 80
Save a 3-D vector field of components X, Y, Z to the file FILENAME in
VTK format





