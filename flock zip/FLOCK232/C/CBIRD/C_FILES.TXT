                            C_FILES.TXT


C_FILES.TXT contains a list of the source files in the C subdirectory,
a brief description of each, and a list of the compiliers that have been 
tested.


                       Table 1 - Source File Description


DOS PATH                      Description                             
============================================================================
C Directory ..\C

      CBIRD.exe               Standalone executable file generated from
                              BCBRDINT.bat using Borland C rev 3.1
                              The executable can be used to demonstrate 
                              RS232 serial communication with one or  
                              multiple 6DFOBs and/or an Extended Range 
                              Controller

      BIRDMAIN.c              C source file for Main Menu

      BIRDCMDS.c              C source file for Bird Commands

      CMDUTIL.c               C source file for Bird Command Utilities

      MENU.c                  C source file for Menu Utilities

      RSTOFBB.c               C source file for RS232 to FBB Command
                              Utilities and Group Mode Utilities

      SERDPCPL.c              C source file for Serial Routines in
                              Polled Mode - for PC/DOS platforms

      SERDPCIN.c              C source file for Serial Routines in
                              Interrupt Mode - for PC/DOS platforms

      SERKNR.c                C source file for Serial Routines in
                              Kernighan and Ritchie Mode via open, read
                              and write calls - for NON-DOS platforms

      PCTIMER.c               C source file for the PC Timer routines
                              used to take over the DOS IRQ0 Timer

      COMPILER.h              C header file for Microsoft/Turbo/ANSI C
                              differences

      ASCTECH.h               C header file for Ascension Technology
                              definitions

      BIRDMAIN.h              C header file for BIRDMAIN.c

      BIRDCMDS.h              C header file for BIRDCMDS.c

      CMDUTIL.h               C header file for CMDUTIL.c

      MENU.h                  C header file for MENU.c

      SERIAL.h                C header file for SERIAL.c and SERINT.c

      PCTIMER.h               C header file for PCTIMER.c (PC TIMER)

      PCPIC.h                 C header file for Interrupt Controller Macros

      RSTOFBB.h               C header file for RS232 to FBB Command 

      MCBRDPOL.bat            DOS batch file to compile and link in
                              polled mode with Microsoft C

      MCBRDINT.bat            DOS batch file to compile and link in
                              Interrupt mode with Microsoft C

      BCBRDPOL.bat            DOS batch file to compile and link in
                              Polled mode with Borland C++

      BCBRDINT.bat            DOS batch file to compile and link in
                              Interrupt mode with Borland C++

      UNIX.mak                UNIX compatible makefile for the MAKE
                              utility on a Unix platform...should be
                              modified by the user by uncommenting the
                              correct OS macro for platform

      HC.mak                  makefile for MAKEing Metaware HC version
                              of CBIRD



*****************************************************************************


                     Table 2 - Compilers/Assemblers Tested

  Compiler/Assembler            Release           Batch File(s)/Makefiles
  ======================================================================

  Microsoft C                   5.1,6.0           MCBRDPOL,MCBRDINT
  Microsoft MASM                4.0,5.1           MABRDPOL,MABRDINT
  Borland C++                   2.0,3.0,3.1       BCBRDPOL,BCBRDINT
  Borland Turbo C               1.0,2.0           use modified BC*.bat files
  Borland Turbo C++             1.0               use modified BC*.bat files
  Metaware High C++             3.11              HC.mak
  Mark Williams                 COHERENT 3.1.0    UNIX.mak (NOT fully tested)
  SGI 'C' Compiler              IRIX 4.0.5        UNIX.mak
  IBM RISC 6000 'C' Compiler    AIX 3.2           UNIX.mak (NOT fully tested)
  SUN 'C' Compiler              SUNOS 4.1         UNIX.mak
  pending DEC 'C' Compiler      TBD               UNIX.mak


******************************************************************************



C FUNCTIONS
-----------

Five C source files contain the source code required to create the
CBIRD.exe executable file in polled, interrupt mode or ANSI compatible.  
A brief description of the functions in the source code is found in Table 3.   


                             Table 3 - C Functions


Subroutine/Function           Description                             
============================================================================

BIRDMAIN.c 
  main                        main routine called by C startup code,
                              displays the main menu of the Bird
                              software

  getbirddata                 set up software to collect correct data
                              from bird.

  diplistinit                 set up and display list Start and Stop 
                              addrress

  systest                     menu for bird test selection (sec 8 
                              user manual)

  nextmastercmd               pass command over to new master in flock

  nextxmtrcmd                 change transmitter control unit and/or 
                              transmitter number

  setxmtrtype                 user selects type of transmitter

  get_output_mode             queries user for output mode, POINT,
                              CONTINUOUS or STREAM

  serial_init                 menu for COM1 or COM2 initialization


BIRDCMDS.c
  bird_anglealign             implements the ANGLE ALIGN (J) command

  bird_changevalue            implements the CHANGE VALUE (P) command

  bird_crtsync                implements the CRT SYNC (A) command 

  bird_examinevalue           implements the EXAMINE VALUE (O) command

  bird_hemisphere             implements the HEMISPHERE (L) command

  bird_matrix                 implements the MATRIX (X) command

  bird_mousebuttons           implements the BUTTON MODE (M) and READ
                              (N) command

  bird_referframe             implements the REFERENCE FRAME (H) command


  bird_reportrate             implements the REPORT RATE (Q,R,S,T)
                              commands

  bird_sleepwake              implements the SLEEP/WAKE (G,F) commands

  bird_xonxoff                implements the XON/XOFF (DC1,DC3) commands

  getsinglebirddata           displays current bird data in POINT,
                              CONTINUOUS, or STREAM mode

  displayflocksys             display entire flock status, unit by unit.

  showfbbconfig               display the FBB configuration information
                              stored in user software


CMDUTIL.c
  getangles                   queries the user for azimuth, elevation
                              and roll

  getcrystalfreq              requests the crystal frequency from the
                              Bird via the EXAMINE command

  printarray                  displays an array of unsigned integers on
                              the CRT

  printmatrix                 display the matrix data 3 x 3 on the CRT

  readbirddata                read the record data and decode into
                              integers

  readbirddata                read a record from bird, adjust the least
                              and most significant bytes into 2's compement

  check_done                  checks for a user keystrock, else continues a
                              test via the point (B) command.

  displaybirddata             display the bird data record to the screen and
                              datafile

  getangles                   get 3 floating point angles from user

  getaddrmode                 get current address mode from bird

  getsystemstatus             get system status from bird

  checkerrorstatus            get the bird error status

  displayerror                display the current error status



MENU.c
  askyesno                    prompts the user with a yes/no question

  getnumber                   queries the user for a unsigned integer 0
                              to 65536

  getfloatstring              queries the user for a floating point
                              number

  hitkeycontinue              waits for the user to 'hit any key'

  sendmenuhdr                 send a menu header to the CRT 

  sendmenu                    send a menu to the CRT and wait for user
                              entry

  clearconsole                clear screen

  clearkey                    clear STDIN

  ckkbhit                     check if key is ready

  getkey                      read key from buffer

  getushort                   get unsigned short number with text prompt

  getfloat                    get float number with text prompt

  getfilename                 get filename from user

  initconsole                 initualize the console

  restoreconsole              restore console to its initual state


 
SERDPCPL.c
  clear_rx                    clear the serial receive buffer and reset
                              flags

  configserialport            configure the serial port hardware for
                              COM1 or COM2

  get_serial_char             try to receive a character in polled mode

  get_serial_record           try to receive a record from the Bird
                              while checking for proper phasing
                              information

  restoreserialconfig         restores the state of the serial port
                              saved upon entry to the program

  saveserialconfig            save the state of the serial port upon
                              entry to the program

  send_serial_char            send a serial character out the serial
                              port in polled mode

  send_serial_cmd             send a serial command (string of chars)
                              out the serial port in polled mode
  waitforchar                 wait for a character for 4 seconds

  waitforphase                wait for a character with phase bit set
                              for 4 seconds
  


SERDPCIN.c
  clear_rx                    clear the serial receive buffer and reset
                              flags

  configserialport            configure the serial port hardware for
                              COM1 or COM2

  get_serial_char             try to receive a character in interrupt
                              mode

  get_serial_record           try to receive a record from the Bird
                              while checking for proper phasing
                              information

  restoreserialconfig         restores the state of the serial port
                              saved upon entry to the program

  saveserialconfig            save the state of the serial port upon
                              entry to the program

  send_serial_char            send a serial character out the serial
                              port in interrupt mode


  send_serial_cmd             send a serial command (string of chars)
                              out the serial port in interrupt mode

  serialisr                   interrupt service routine for the serial
                              interrupt (COM1 = IRQ4 or COM2 = IRQ4)

  waitforchar                 wait for a character for 4 seconds

  waitforphase                wait for a character with phase bit set
                              for 4 seconds
 
SERKNR.c
  clear_rx                    clears errors counters

  configserialport            configure the serial port hardware for
                              COM1 or COM2, using system() C Lib call

  get_serial_char             try to receive a character via read()

  get_serial_record           try to receive a record from the Bird
                              while checking for proper phasing
                              information via a read() 

  restoreserialconfig         closes the Comport Handle/Descriptor

  saveserialconfig            no functionality

  send_serial_char            send a serial character out the serial
                              port via write()

  send_serial_cmd             send a serial command (string of chars)
                              out the serial port via write()

  waitforchar                 just calls get_serial_char

  get_record                  get a record from serial port


SERIAL PORT INTERRUPT VS POLLED MODE
------------------------------------


PC and compatible computers provide users with a versatile means
of communication with other devices via the serial port, yet PC
programmers quickly find that neither the BIOS, DOS nor their
compiler libraries provides them with adequate tools for using the
serial communication (COM) ports.  Specifically, the BIOS and DOS
only allow 'polled' serial port operation.  The Bird software (in
C and Assembly) goes around these limitations by communicating with
the hardware directly.  Source code is provided for controlling the
serial port in 'polled' (SERIAL.*) or 'interrupt' (SERINT.*) mode,
which gives the user the flexibility to tailor the software to
their own system requirements.  A brief description of polled and
interrupt mode operation is provided.

Polled mode operation implies that whenever a character is received
by the serial port hardware (UART), the user software MUST get the
character out of the serial receive buffer prior to receiving the
next character.  For example at 9600 baud, with 1 start, 8 data,
and 1 stop bit, the character is transmitted in approximately 1.042
milliseconds (10 bits / 9600 bits/sec). If characters are sent to the
serial port contiguously then every 1.042 the software better check
(or poll) the serial port for receive data, else data will be lost. 
As for transmission, when the software wants to send a character
out the serial port the software must verify that the transmit
register is empty, else the character currently in the buffer would
be overwritten.  Using the same data rate as before, if the user
wants to transmit a string of 10  characters then the software
would have to wait the 1.024 milliseconds (until the transmit register
is empty) after each character is sent.  Realistically, the software
could be doing other chores instead of polling the serial port for
these asynchronous events.

Interrupt mode operation enables the software to receive and
transmit characters without constantly checking to see if
characters are ready or if the transmit buffer is empty,
respectively.  This is done via hardware provided on the serial card
and the PC.  When characters are ready to be received or can be
transmitted a serial port interrupt is generated.  COM port 1
(COM1) generates interrupts on IRQ4 and COM port 2 (COM2) on IRQ3. 
These signals (IRQ3 and IRQ4) inform the central processing unit
(CPU) to execute a specific section of software called the
interrupt service routine (ISR).  The ISR can store the received
character in a buffer, or transmit a character from a buffer
asynchronously to the software task at hand.  This approach allows
the CPU to do the serial port task and another task concurrently.

