UNIX.TXT contains software programming notes associated with using
the "C" language Bird interface program "CBIRD" on UNIX platforms.
RS232 interface cable wiring for various UNIX platforms can be
found in the file RS232.TXT.



                                UNIX CBIRD
                                ----------

General Notes:

-    CBIRD assumes that it has complete control of the serial
     port (ie. /dev/tty*) on the UNIX platform.  Therefore, other
     processes that utilize the serial port, such as a GETTY must
     be disabled prior to executing CBIRD.   The GETTY
     initialization occurs in:

          SGI IRIX       - /etc/inittab
          SUN SUNOS      - /etc/??
          IBM AIX        - /etc/??
          PC COHERENT    - /etc/??
     
     Shut off the GETTY by setting the initialization of the
     GETTY to OFF or by commenting out the line that starts up
     the GETTY to the selected port.

-    CBIRD source modules can be compiled using the platform's
     (SUN, SGI, IBM, etc.) standard 'C' compiler.  To compile the
     software, the user may use the UNIX makefile, unix.mak,
     supplied on diskette.  The makefile contains macro
     definitions for all the currently supported UNIX platforms. 
     Uncomment the macro for the platform you are compiling on
     using any text editor.  The makefile defines KNR and OS
     specific macros (ie. IRIX, SUNOS, etc.) which are used in
     COMPILER.h to set compile time switches and include specific
     header files required for proper compilation (see the
     COMPILER.h file for specifics).  Then to compile, type:

          >make

     If you do not wish to utilize the make utility, you can
     compile and link birdmain.c, birdcmds.c, cmdutil.c, menu.c,
     rstofbb.c and serknr.c as follows:

          >cc -DKNR -D(OS*) birdmain.c birdcmds.c cmdutil.c
          serknr.c menu.c rstofbb.c -lm -o cbird
     
     Where (OS*) is an operating system macro (IRIX,AIX,SUNOS,
     etc.)

-    The software uses TERMIO.h and IOCTL.h for the definitions
     required for IOCTL calls.  IOCTL calls are used to manage
     the user interface (in MENU.c) and for the serial port
     control (in SERKNR.c).

-    The standard serial port driver (/dev/ttyd1, /dev/ttyd2,
     etc.) does not have the capability to assert or deassert the
     REQUEST TO SEND (RTS) signal.  Therefore, a straight forward
     approach is to use a 3 wire interface between the host
     computer and the 6DFOB.  Do not connect the RTS signal to
     the 6DFOB's signal unless you can control the state of the
     RTS signal.  






-    The software does not assume any specific by order with
     respect to 'C' types (ie. float, int, short, etc.) because
     different CPUs do not store information in the same order. 

User Interface Notes:

-    The console (STDIN) is opened in a RAW mode using IOCTL call
     to setup the console for NON-CONONICAL processing.  This is
     needed to allow code in MENU.c to process special menuing
     characters such as  ESCAPE and CR-LF without prior
     processing via UNIX.

-    The IOCTL parameter FIONREAD is used to query for the number
     of characters available from the console since the port is
     opened in a RAW mode.

6DFOB (RS232) Interface Notes:
 
-    open() is used to get a handle to the serial port (/dev/tty*
     device)
     read() is used to input information from the serial port
     write() is used to output information to the serial port

-    The routine get_serial_record in SERKNR.c returns the newest
     record available from the serial port by manually emptying
     the device's buffer until only one record is available.  


*****************************************************************


                             SGI - IRIX Notes
                             ----------------


Tested On:          SGI Indigo
OS Version:         IRIX 4.0.5
Compile Defines:    KNR, IRIX

-    If /dev/tty* device is opened with the O_NDELAY parameter
     the read from the /dev/tty* does not respect the VTIME and
     VMIN paramaters and therefore, does not wait for a response
     from the Bird. 

-    Ideally the IOCTL call to read the number of characters
     currently available (using FIONREAD to the /dev/ttyd*
     handle) would match characters available to the read(). 
     Unfortunately, the number of characters available to READ is
     delayed from the number of characters actually available as
     indicated by the IOCTL call with the FIONREAD parameter (ie. 
     If a call to IOCTL with FIONREAD to the serial port handle
     returns indicating 6 characters are available and
     immediately following a READ is performed requesting 6
     characters, then the READ can return before the 2 second
     timeout with less than 6 characters.  It appears as though
     the READ is delayed in being updated with the lastest
     information as compared to IOCTL).  Therefore, code has been
     added to get_record() to assure that if the READ returns
     less than the number of characters desired a multiple READs
     
     
     
     
     
     
     will occur.  This occurs because the /dev/ttyd* has been
     configured for NON-CANONICAL input processing, with VMIN = 0
     and VTIME = 20.  These parameters inform the device driver
     to never wait more than 2 seconds (20 times 0.1 seconds)
     when waiting for a character.   This approach allows the
     driver to time out without the use of the UNIX ALARM
     function.

-    To eliminate the problem of SGI missing RS232 characters from 
     the Bird and to decrease the delay in receiving characters, 
     replace the initialization of the TTY* port in the /etc/inittab file
     with the following:

     t*:x:respawn:/etc/getty  ttyd2  co_**  noneLDISC1
     
     where * is the TTY port number and ** is the baud rate (ie 9600).

*****************************************************************


                             SUN - SUNOS Notes
                             -----------------


Tested On:          SPARC 
OS Version:         4.1
Compile Defines:    KNR, SUNOS


-    If the /dev/tty* is opened without the O_NDELAY parameter,
     the open blocks (hangs).  Use the O_NDELAY parameter in
     open.


*****************************************************************



                              IBM - AIX Notes
                              ---------------


Tested On:          R6000
OS Version:         AIX 4.2
Compile Defines:    KNR, AIX

-    *** NOTE *** AIX code HAS NOT BEEN FULLY DEBUGGED

-    If the /dev/tty* is opened without the O_NDELAY parameter,
     the open blocks (hangs).  Use the O_NDELAY parameter in
     open.

-    If the RS232 cable does not contain the Carrier Detect (CD)
     signal then the serial device must be OPEN with the O_NDELAY
     parameter.  If CD is not asserted and the device is OPENed
     without the O_NDELAY parameter, the call to OPEN will block.



*****************************************************************
