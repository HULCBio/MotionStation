                            A_FILES.TXT


A_FILES.TXT contains a list of the source files in the ASM subdirectory,
a brief description of each, and a list of the compiliers that have been 
tested.

                       Table 1 - Source File Description


DOS PATH                      Description                             
============================================================================

ASM Directory ..\ASM

      ABIRD.exe               Standalone executable file generated from
                              MABIRD.bat using Microsoft Macro Assembler rev 5.1
                              The executable can be used to demonstrate 
                              RS232 serial communication with a single 
                              6DFOB or an Extended Range Controller

      BIRDMAIN.asm            Assembly source file for Main Menu

      BIRDCMDS.asm            Assembly source file for Bird Commands

      CMDUTIL.asm             Assembly source file for Bird Command Utilities

      MENU.asm                Assembly source file for Menu Utilities

      SERDPCPL.asm            Assembly source file for Serial Routines
                              in Polled Mode

      SERDPCIN.asm            Assembly source file for Serial Routines
                              in Interrupt Mode

      ASCTECH.inc             Include file for Ascension Technology
                              definitions

      MENUDEF.inc             Include file for MENU definitions

      SERIAL.inc              Include file for SERIAL.asm and SERINT.asm

      MABRDPOL.bat            DOS batch file to assemble and link in
                              Polled mode with Microsoft Macro Assembler

      MABRDINT.bat            DOS batch file to assemble and link in
                              Interrupt mode with Microsoft Macro
                              Assembler

      TABRDPOL.bat            DOS batch file to assemble and link in
                              Polled mode with Borland Turbo
                              Assembler

      TABRDINT.bat            DOS batch file to assemble and link in
                              Interrupt mode with Borland Turbo
                              Assembler


*************************************************************************

                     Table 2 - Compilers/Assemblers Tested

  Compiler/Assembler            Release           Batch File(s)/Makefiles
  ======================================================================
  Microsoft MASM                4.0,5.1           MABRDPOL,MABRDINT
  Borland TASM                  1.0,2.0,2.5       TABRDPOL,TABRDINT




***************************************************************************

ASSEMBLY SUBROUTINES
--------------------

Five assembly source files contain the source code required to
create the ABIRD.exe executable file in polled or interrupt mode. 
A brief description of the subroutines is found in Table 3.  



                        Table 3 - Assembly Subroutines

Subroutine/Function           Description                             
============================================================================

BIRDMAIN.asm
  asmbird                     entry point from DOS, displays the main
                              menu of the Bird software

  get_output_mode             queries user for output mode, POINT,
                              CONTINUOUS or STREAM

  serial_init                 menu for COM1 or COM2 initialization



BIRDCMDS.asm
  bird_anglealign             implements the ANGLE ALIGN (J) command

  bird_angles                 implements the ANGLES command (W)

  bird_changevalue            implements the CHANGE VALUE (P) command

  bird_crtsync                implements the CRT SYNC (A) command 

  bird_examinevalue           implements the EXAMINE VALUE (O) command

  bird_hemisphere             implements the HEMISPHERE (L) command

  bird_matrix                 implements the MATRIX (X) command

  bird_mousebuttons           implements the BUTTON MODE (M) and READ
                              (N) command

  bird_position               implements the POSITION (V) command

  bird_positionandangles      implements the POSITION/ANGLES (Y) command

  bird_positionandmatrix      implements the POSITION/MATRIX (Z) command

  bird_referframe             implements the REFERENCE FRAME (H) command

  bird_reportrate             implements the REPORT RATE (Q,R,S,T)
                              commands
  bird_sleepwake              implements the SLEEP/WAKE (G,F) commands

  bird_xonxoff                implements the XON/XOFF (DC1,DC3) commands

  checkdone                   checks for a user key stroke, else
                              continues a test via the POINT (B) command

  convert                     used by converttounits to display unit
                              data on CRT

  converttounits              convert to signed integer to a formatted
                              floating point ascii string using fixed
                              point math

  cosangle                    computes the cosine of an angle

  dumparray                   implements the DUMP ARRAY (a) factory
                              command

  getangles                   queries the user for azimuth, elevation
                              and roll

  getcrystalfreq              requests the crystal frequency from the
                              Bird via the EXAMINE command

  printarray                  displays an array of unsigned integers on
                              the CRT

  printmatrix                 display the matrix data 3 x 3 on the CRT

  readbirddata                read the record data and decode into
                              integers

  sinangle                    computes the sine of an angle




MENU.asm
  asciitohex                  converts ascii number string to a hex
                              number

  askyesno                    prompts the user with a yes/no question

  ckkeyrdy                    check if a key has been selected

  clearkey                    clears all keys currently pending

  clearscreen                 clears the CRT

  closefile                   close a previously opened file

  displayunsiged              display a unsigned number on the CRT

  getchr                      get one character from the keyboard

  getfloatstring              queries the user for a floating point
                              number

  getnumber                   queries the user for a unsigned integer 0
                              to 65536

  getstring                   get a string of characters from the
                              keyboard

  hitkeycontinue              waits for the user to 'hit any key'

  putchr                      display one character on the CRT

  putstring                   display a string of characters on the CRT

  newline                     display a carriage return and linefeed on
                              the CRT

  openfile                    open a file

  readfile                    read one character from a file

  readfileline                read one line from a file

  sendmenuhdr                 send a menu header to the CRT 

  sendmenu                    send a menu to the CRT and wait for user
                              entry



SERDPCPL.asm
  clear_rx                    clear the serial receive buffer and reset
                              flags

  configserialport            configure the serial port hardware for
                              COM1 or COM2

  get_serial_char             try to receive a character in polled mode

  get_serial_record           try to receive a record from the Bird
                              while checking for proper phasing
                              information

  getdosticks                 get the currents DOS 'tick' counter (18.2
                              tick per second counter available on all
                              PCs)

  restoreserialconfig         restores the state of the serial port
                              saved upon entry to the program


  saveserialconfig            save the state of the serial port upon
                              entry to the program

  send_serial_char            send a serial character out the serial
                              port in polled mode

  send_serial_cmd             send a serial command (string of chars)
                              out the serial port in polled mode

  waitforchar                 wait for a character for 4 seconds

  waitforphase                wait for a character with phase bit set
                              for 4 seconds


 
SERDPCIN.asm
  clear_rx                    clear the serial receive buffer and reset
                              flags

  configserialport            configure the serial port hardware for
                              COM1 or COM2

  get_serial_char             try to receive a character in interrupt
                              mode

  get_serial_record           try to receive a record from the Bird
                              while checking for proper phasing
                              information

  getdosticks                 get the currents DOS 'tick' counter (18.2
                              tick per second counter available on all
                              PCs)

  restoreserialconfig         restores the state of the serial port
                              saved upon entry to the program

  saveserialconfig            save the state of the serial port upon
                              entry to the program

  send_serial_char            send a serial character out the serial
                              port in interrupt mode

  send_serial_cmd             send a serial command (string of chars)
                              out the serial port in interrupt mode


  serialisr                   interrupt service routine for the serial
                              interrupt (COM1 = IRQ4 or COM2 = IRQ4)

  waitforchar                 wait for a character for 4 seconds

  waitforphase                wait for a character with phase bit set
                              for 4 seconds


***************************************************************************


SERIAL PORT INTERRUPT VS POLLED MODE
------------------------------------


PC and compatible computers provide users with a versatile means
of communication with other devices via the serial port, yet PC
programmers quickly find that neither the BIOS, DOS nor their
compiler libraries provides them with adequate tools for using the
serial communication (COM) ports.  Specifically, the BIOS and DOS
only allow 'polled' serial port operation.  The Bird software (in
C and Assembly) goes around these limitations by communicating with
the hardware directly.  Source code is provided for controlling the
serial port in 'polled' (SERIAL.*) or 'interrupt' (SERINT.*) mode,
which gives the user the flexibility to tailor the software to
their own system requirements.  A brief description of polled and
interrupt mode operation is provided.

Polled mode operation implies that whenever a character is received
by the serial port hardware (UART), the user software MUST get the
character out of the serial receive buffer prior to receiving the
next character.  For example at 9600 baud, with 1 start, 8 data,
and 1 stop bit, the character is transmitted in approximately 1.042
milliseconds (10 bits / 9600 bits/sec). If characters are sent to the
serial port contiguously then every 1.042 the software better check
(or poll) the serial port for receive data, else data will be lost. 
As for transmission, when the software wants to send a character
out the serial port the software must verify that the transmit
register is empty, else the character currently in the buffer would
be overwritten.  Using the same data rate as before, if the user
wants to transmit a string of 10  characters then the software
would have to wait the 1.024 milliseconds (until the transmit register
is empty) after each character is sent.  Realistically, the software
could be doing other chores instead of polling the serial port for
these asynchronous events.

Interrupt mode operation enables the software to receive and
transmit characters without constantly checking to see if
characters are ready or if the transmit buffer is empty,
respectively.  This is done via hardware provided on the serial card
and the PC.  When characters are ready to be received or can be
transmitted a serial port interrupt is generated.  COM port 1
(COM1) generates interrupts on IRQ4 and COM port 2 (COM2) on IRQ3. 
These signals (IRQ3 and IRQ4) inform the central processing unit
(CPU) to execute a specific section of software called the
interrupt service routine (ISR).  The ISR can store the received
character in a buffer, or transmit a character from a buffer
asynchronously to the software task at hand.  This approach allows
the CPU to do the serial port task and another task concurrently.

