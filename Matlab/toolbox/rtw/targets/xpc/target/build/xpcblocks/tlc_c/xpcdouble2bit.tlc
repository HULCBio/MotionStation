%% Abstract:
%%      TLC file for xPC Target Bit Unpacking block.
%%
%% Copyright 1996-2004 The MathWorks, Inc.
%% $Revision: 1.1.4.1 $ $Date: 2004/03/04 20:09:41 $

%implements xpcdouble2bit "C"

%function Outputs(block, system) Output
  %assign masks     = getMasks()
  %assign nbitsZero = getNBitsZero()

  %assign map = block.SFcnParamSettings.Map
  %assign len = block.SFcnParamSettings.Lengths
   %assign buf = ""
   %assign tmpVarNeeded = 0

   %openfile buf
   %foreach i = block.NumDataOutputPorts
     %assign cast = "(%<LibBlockOutputSignalDataTypeName(i,"")>)"
      %assign line = ""
      %assign specMap = FEVAL("getmap", map, i)
      %assign oExpr   = genBitPack(specMap)
      %% if length is negative, it is a signed type. Then, if the last bit is
      %% one, we need to sign extend it. We sign extend to 32 bits, then the
      %% casting at the end will take care of the data.

      /* Output Port %<i + 1> */
      %if len[i] < 0
        %assign tmpVarNeeded = 1
        tmp = %<oExpr>
        if (tmp & %<nbitsZero[-len[i] - 1]>) {
          tmp |= %<nbitsZero[-len[i] - 1]>;
        }
        %<LibBlockOutputSignal(i, "", "", 0)> = %<cast>tmp;
      %else
        %<LibBlockOutputSignal(i, "", "", 0)> = %<cast>
        %<oExpr>
      %endif
    %endforeach
    %closefile buf

   /* Bit Unpacking: %<block.Name> */
  {
    const uint32_T *y = \
      (const uint32_T *)%<LibBlockInputSignalAddr(0, "", "", 0)>;
    %if tmpVarNeeded
      uint32_T tmp;
    %endif
    %<buf>
  }
%endfunction

%% Return the code for one mask/shift operation.
%function oneLine(map)
  %assign masks = getMasks()

  %assign oOff   = map[0]
  %assign len    = map[1]
  %assign iChunk = map[2]
  %assign iOff   = map[3]
  %assign expr   = shiftWithParams(masks[len - 1], iOff, 0)
  %assign expr   = shiftWithParams("(y[%<iChunk>] & %<expr>)", oOff, iOff)
  %return "%<expr>"
%endfunction

%% Return the code for one output based on map.
%function genBitPack(map)
  %assign maskExpr = oneLine(getRow(map, 0))
  %assign addParen = 0
  %foreach row = SIZE(map, 0) - 1
    %assign maskExpr = maskExpr + " |\n%<oneLine(getRow(map, row + 1))>"
    %assign addParen = 1
  %endforeach
  %if addParen == 1
    %assign maskExpr = "(%<maskExpr>)"
  %endif
  %return "%<maskExpr>;"
%endfunction

%% Return the expr with an appropriate shift expression. If the shift
%% expression is non-empty, surround the whole thing with params.
%function shiftWithParams(expr, o, i)
  %assign s = shift(o, i)
  %if s == ""
    %return expr
  %else
    %return "(%<expr>%<s>)"
  %endif
%endfunction

%% Return the appropriate (left or right) shift from offset i to o. Thus
%% if o > i, it is a left shift, and vice versa.
%function shift(o, i)
  %if o == i
    %return ""
  %endif
  %assign result = (o > i) ? " << " : " >> "
  %return (result + "%<(o \> i) ? (o - i) : (i - o)>")
%endfunction

%% Return the row of the matrix or vector. If map is a vector to start with,
%% it is returned in its entirety. This ensures that the caller always gets
%% a row vector.
%function getRow(map, row)
  %if SIZE(map, 0) > 1
    %return map[row]
  %else
    %assert row == 0
    %return map
  %endif
%endfunction

%function getMasks()
  %return ...
    [       "0x1",        "0x3",        "0x7",        "0xf", ...
           "0x1f",       "0x3f",       "0x7f",       "0xff", ...
          "0x1ff",      "0x3ff",      "0x7ff",      "0xfff", ...
         "0x1fff",     "0x3fff",     "0x7fff",     "0xffff", ...
        "0x1ffff",    "0x3ffff",    "0x7ffff",    "0xfffff", ...
       "0x1fffff",   "0x3fffff",   "0x7fffff",   "0xffffff", ...
      "0x1ffffff",  "0x3ffffff",  "0x7ffffff",  "0xfffffff", ...
     "0x1fffffff", "0x3fffffff", "0x7fffffff", "0xffffffff"]
%endfunction

%function getNBitsZero()
  %return ...
    ["0xffffffff", "0xfffffffe", "0xfffffffc", "0xfffffff8", ...
     "0xfffffff0", "0xffffffe0", "0xffffffc0", "0xffffff80", ...
     "0xffffff00", "0xfffffe00", "0xfffffc00", "0xfffff800", ...
     "0xfffff000", "0xffffe000", "0xffffc000", "0xffff8000", ...
     "0xffff0000", "0xfffe0000", "0xfffc0000", "0xfff80000", ...
     "0xfff00000", "0xffe00000", "0xffc00000", "0xff800000", ...
     "0xff000000", "0xfe000000", "0xfc000000", "0xf8000000", ...
     "0xf0000000", "0xe0000000", "0xc0000000", "0x80000000"]
 %endfunction