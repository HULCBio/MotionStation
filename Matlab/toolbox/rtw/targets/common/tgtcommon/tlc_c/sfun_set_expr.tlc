%% File: toolbox/rtw/targets/mpc555dk/rt/blockset/tlc_c/RCS/sfun_set_expr.tlc
%%
%% Abstract:
%%   This file generates code to assign the input to a generic
%%   C-Code expression
%%
%% $Revision: 1.1.6.2 $
%% $Date: 2004/04/19 01:22:39 $
%%
%% Copyright 2002-2004 The MathWorks, Inc.

%implements sfun_set_expr "C"
%include "targets_general_includes.tlc"

%% Function: BlockInstanceSetup ===============================================
%% Abstract:
%%   Pre-code generation work
%%
%function BlockInstanceSetup(block, system) void
  %if !ISEMPTY(RTWdata.header)
      %<LibAddToCommonIncludes(RTWdata.header)>
  %endif
  %if !ISEMPTY(RTWdata.src)
      %<LibAddToModelSources(RTWdata.src)>
  %endif
  %<LibBlockSetIsExpressionCompliant(block)>
%endfunction

%% Function: Outputs ==========================================================
%% Abstract:
%%     Generate code according the the expression supplied by
%%     the user. 
%%
%function Outputs(block, system) Output

    %assign codeGenForSim = SLibCodeGenForSim()
    %if codeGenForSim 
    
        %% Generate no driver code

        %% This mode of code generation is either for S-Function
        %% target or for processor in the loop

    %else
    
        %% Generate no driver code
        
        %assign expr = RTWdata.expr

        %if %<"\"" + RTWdata.InputIsContiguous + "\"" >
            %assign i=0
            %if (EXISTS(OptionalParameter)) && (LibBlockParameterSize(OptionalParameter)[0] != 0)
                %assign p=LibBlockParameter(OptionalParameter,"","",0)
            %endif
            %assign u = LibBlockInputSignalAddr(0,"","",0)
            %switch RTWdata.operationType
            %case "LHS"
                %<expr> = %<u>;
                %break
            %case "GENERIC"
                %<expr>
                %break
            %endswitch
         %else

             %if (EXISTS(OptionalParameter)) && (LibBlockParameterSize(OptionalParameter)[0] != 0)
                 %assign rollVars = ["U","P"]
             %else
                 %assign rollVars = ["U"]
             %endif
             %roll  idx = RollRegions, lcv = RollThreshold, block, "Roller", rollVars
                %assign u = LibBlockInputSignal(0,"" ,lcv, idx)
                %assign i = FcnGetLoopIndex("",lcv,idx)
                %if (EXISTS(OptionalParameter)) && (LibBlockParameterSize(OptionalParameter)[0] != 0)
                    %assign p = LibBlockParameter(OptionalParameter,"",lcv,idx)
                %endif
                %assign texpr  = "\"%<expr>\""
                %assign texpr  = %<texpr>
                %switch RTWdata.operationType
                %case "LHS"
                    %<texpr> = %<u>;
                    %break
                %case "GENERIC"
                    %<texpr>
                    %break
                %endswitch
             %endroll
         %endif
     %endif
%endfunction

%function FcnGetLoopIndex(ucv,lcv,idx) void
    %if ucv != ""
        %assign i = ucv
    %elseif lcv != ""
        %assign i = lcv
    %else
        %assign i = idx
    %endif
    %return i
%endfunction

