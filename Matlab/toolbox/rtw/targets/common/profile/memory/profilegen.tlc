%% File: profilegen.tlc
%%
%% $Revision: 1.1.6.2 $
%% $Date: 2004/04/19 01:21:37 $
%%
%% Abstract:
%%   This is the tlc file used to generate m file which 
%%   will generate HTML profile report later.
%%

%% Usage:
%%   To use this tool, user needs follow steps:
%%   1. Create CompiledModel.Settings and CompiledModel.PathInfo record which defines following parameters:
%%      CompiledModel.Settings.TargetCompiler
%%        - Name for cross compiler for target processor. It will decide rule file name. 
%%          It can be overriden by function parameter.
%%      CompiledModel.Settings.
%%      CompiledModel.PathInfo.MODEL_ABS_PATH
%%        - absolute path for model, i.e., D:\MATLAB6P5\Work\model_mpc555pil
%%      CompiledModel.PathInfo.PATH_SEP
%%        - path seperator, on PC it's normal "\", and "/" on UNIX
%%      CompiledModel.PathInfo.PROFILE_DIR
%%        - Path for profile tool directory, i.e., matlabroot/toolbox/rtw/targets/common/profile/1.0
%%      CompiledModel.PathInfo.MATLABROOT
%%        - root for MATLAB
%%      CompiledModel.PathInfo.
%%   2. In main TLC process flow, include profilegen.tlc. We recommend put the 
%%      include statement inside <target>_genfiles.tlc for clarity. If you include
%%      it in the System Target File, please make sure do it after "codegenentry.tlc"
%%      as it needs info for generated module code.
%%
%%   3. Place the "htmlreport.m" callback in <target>_make_rtw_hook.m, 
%%      within 'exit' case, i.e.,
%%        switch method
%%        ... 
%%        case 'exit':
%%        if (buildOpts.generateCodeOnly == 0)
%%          ...
%%          htmlreport;
%%          ...
%%        end
%%        ...

%% Output files:
%%   <build_dir>/htmlreport.m 
%%      - the generated m file locates in build directory which 
%%        execute the report generation action.
%%   <build_dir>/html/profile.html
%%      - the final code profiling report linked with normal HTML report

%% Intermediate files:
%%   During the profile report generation stage, following files will be 
%%   generated for internal usage.
%%   <build_dir>/<ModelName>_gen_file_list.txt
%%      - it's a text file lists all files generated by Simulink.
%%   <build_dir>/<ModelName>.csv
%%      - it's a comma seperated file store intermediate parse result.


%% Copyright 2002-2003 The MathWorks, Inc.
%%
%selectfile NULL_FILE

%% Function: LibGenCodeProfileReport ===========================================
%% Abstract:
%%   the main entry function to be called by user
%% Parameter:
%%   rtwlib_filelist_file
%%     - A text file which contains rtwlib library name, i.e., rtwlib.PPCEABI.H.a, 
%%       rtwlib.a, rtwlib.lib, etc. See toolbox/rtw/targets/common/profile/1.0/rtwlib.txt
%%       for example.
%%       User can provide empty string "" for this parameter, in this case, profile 
%%       tool will use default rtwlib.txt as input.
%%   target_compiler
%%     - name of target compiler. i.e., "CodeWarrior" or "Diab". This parameter is used to
%%       to decide rule file name.
%%       User can provide empty string "" for this parameter, in this case, 
%%       CompiledModel.Settings.TargetCompiler will be used to determine compiler.
%%   exec_file
%%     - name of executable building result. It's needed to validate build by checking time flag.
%%       User can provide empty string "" for this parameter, in this case, 
%%       <model>*.elf will be the default name for CodeWarrior compiler,
%%       <model>*.out for Diab compiler.
%%   map_file
%%     - name of map file generated for this model. 
%%       User can provide empty string "" for this parameter, in this case, 
%%       <model>.map will be the default name.
%%   html_format
%%     - choose the format for HTML report. Current support 2 formats: "export" and "normal"
%%       "export" is for algorithm export target, refer to exp_html.rul.
%%       "normal" refers to html.rul.
%%       User can provide empty string "" for this parameter, in this case, 
%%       "normal" will be the default value.
%function LibGenCodeProfileReport(rtwlib_filelist_file, target_compiler, exec_file, map_file, html_format) void
  %with CompiledModel.PathInfo
    %assign ModelName = CompiledModel.Name
    %if ISEMPTY(rtwlib_filelist_file)
    %assign rtwlib_filelist_file = "%<PROFILE_DIR>%<PATH_SEP>rtwlib.txt"
    %endif
    %if ISEMPTY(target_compiler)
      %if ISFIELD(CompiledModel, "Settings")
        %assign target_compiler = CompiledModel.Settings.TargetCompiler
      %else
        %exit Real-Time Workshop Error: Please specify correct target compiler.
      %endif
    %endif  
    %if ISEMPTY(exec_file)
      %if target_compiler == "CodeWarrior"
        %assign exec_file = "%<MODEL_ABS_PATH>%<PATH_SEP>..%<PATH_SEP>%<ModelName>*.elf"
      %elseif  target_compiler == "Diab"
        %assign exec_file = "%<MODEL_ABS_PATH>%<PATH_SEP>..%<PATH_SEP>%<ModelName>*.out"
      %elseif  target_compiler == "Tasking"
        %assign exec_file = "%<MODEL_ABS_PATH>%<PATH_SEP>..%<PATH_SEP>%<ModelName>*.abs"
      %else
        %exit Real-Time Workshop Error: Please specify correct target compiler.
      %endif
    %endif  
    %if ISEMPTY(map_file)
      %assign map_file = "%<MODEL_ABS_PATH>%<PATH_SEP>..%<PATH_SEP>%<ModelName>.map"
    %endif
    %if ISEMPTY(html_format)
      %assign html_format = "normal"
    %endif
   
    %assign model_gen_file_list = "%<MODEL_ABS_PATH>%<PATH_SEP>%<ModelName>_gen_file_list.txt"
    %<CreateMdlGenFileList(model_gen_file_list)>
    
    %assign gen_mfile_name = "htmlreport.m"
    %assign PERL = "%<MATLABROOT>%<PATH_SEP>sys%<PATH_SEP>perl%<PATH_SEP>win32%<PATH_SEP>bin%<PATH_SEP>perl"

    %% The core support files exist in the toolbox/rtw/targets/common/profile/memory directory.
    %assign commondir = "%<MATLABROOT>%<PATH_SEP>toolbox%<PATH_SEP>rtw%<PATH_SEP>targets%<PATH_SEP>common%<PATH_SEP>profile%<PATH_SEP>memory"
    %assign MAP2IR = "%<commondir>%<PATH_SEP>map2ir.pl"
    %assign IR2HTML = "%<commondir>%<PATH_SEP>ir2html.pl"
    %assign HOOKUP_HTML = "%<commondir>%<PATH_SEP>hookup.pl"
    
    %if target_compiler == "CodeWarrior"
      %assign RULE_FILE = "%<PROFILE_DIR>%<PATH_SEP>cw.rul"
    %elseif  target_compiler == "Diab"
      %assign RULE_FILE = "%<PROFILE_DIR>%<PATH_SEP>diab.rul"
    %elseif  target_compiler == "Tasking" || target_compiler == "tasking"
      %assign RULE_FILE = "%<PROFILE_DIR>%<PATH_SEP>tasking.rul"
    %elseif  target_compiler == "GNU"
      %assign RULE_FILE = "%<PROFILE_DIR>%<PATH_SEP>gnu.rul"
    %else
      %% Assume full path to compiler rule file has been given
      %assign RULE_FILE = target_compiler
    %endif  
    %assign IR_FILE = "%<MODEL_ABS_PATH>%<PATH_SEP>%<ModelName>.csv"
    %if html_format == "export"
      %assign HTML_RULE_FILE = "%<PROFILE_DIR>%<PATH_SEP>exp_html.rul"
    %elseif html_format == "normal"
      %assign HTML_RULE_FILE = "%<PROFILE_DIR>%<PATH_SEP>html.rul"
    %else
      %% Assume full path to html rule file has been given
      %assign HTML_RULE_FILE = html_format
    %endif
    %% we need PATH_SEP so we could pass it directly to IR2HTML perl script;
    %assign HTML_REPORT_DIR = "%<MODEL_ABS_PATH>%<PATH_SEP>html%<PATH_SEP>"
    %assign PROFILE_REPORT_FILE = "%<HTML_REPORT_DIR>profile.html"
    %assign noPATH_PROFILE_REPORT_FILE = "profile.html"
    %assign HTML_REPORT_CONTENTS =  "%<HTML_REPORT_DIR>%<ModelName>_contents.html"
    %assign HTML_REPORT_FRAME = "%<MODEL_ABS_PATH>%<PATH_SEP>html%<PATH_SEP>%<ModelName>_codegen_rpt.html"
    %<CreateHTMLreportMFile(gen_mfile_name, map_file, exec_file, ModelName, PERL, MAP2IR, RULE_FILE, IR_FILE, model_gen_file_list, rtwlib_filelist_file, IR2HTML, HTML_RULE_FILE, PROFILE_REPORT_FILE, HTML_REPORT_DIR, PATH_SEP, HOOKUP_HTML, HTML_REPORT_CONTENTS, noPATH_PROFILE_REPORT_FILE, HTML_REPORT_FRAME)>
  %endwith
%endfunction

%% internal function to create model generated file list file
%function CreateMdlGenFileList(model_gen_file_list) void
  %openfile buffer = "%<model_gen_file_list>"
  %if ISFIELD(CompiledModel,"ModelFiles")
  %with CompiledModel
    %with ModelFiles
      %foreach fileIdx = LibGetNumModelFiles()
        %assign fileName  = LibGetModelFileAttribute(fileIdx,"Name")
        %assign fileSrc   = LibGetModelFileAttribute(fileIdx,"Creator")
        %assign fileType  = LibGetModelFileAttribute(fileIdx,"Type")
        %assign opFile    = ModelFile[fileIdx]
        %if fileType == "SystemBody"
  	%<opFile.Name>
        %endif
      %endforeach
    %endwith
  %endwith
  %else
    %foreach fileIdx = ::CompiledModel.NumSources
      %assign mdlSrc  = ::CompiledModel.Sources[fileIdx]
       %<mdlSrc>
    %endforeach
  %endif
  %closefile buffer
%endfunction

%% internal function to create htmlreport.m 
%function CreateHTMLreportMFile(gen_mfile_name, MAP_FILE, ELF_FILE, ModelName, PERL, MAP2IR, RULE_FILE, IR_FILE, model_gen_file_list, rtwlib_filelist_file, IR2HTML, HTML_RULE_FILE, PROFILE_REPORT_FILE, HTML_REPORT_DIR, PATH_SEP, HOOKUP_HTML, HTML_REPORT_CONTENTS, noPATH_PROFILE_REPORT_FILE, HTML_REPORT_FRAME) void
  %openfile buffer = "%<gen_mfile_name>"
  function htmlreport
  %if "%<GenerateReport>" == "1"
      OldFiles=[];
      %% Check timeflag of MAP file to determine whether model been successfully built
      if cmpTimeFlag('%<gen_mfile_name>', '%<MAP_FILE>') <= 0
        OldFiles=[OldFiles ' %<MAP_FILE>'];
      end
      %% Check timeflag of elf file to determine whether model been successfully built
      if cmpTimeFlag('%<gen_mfile_name>', '%<ELF_FILE>') <= 0
        OldFiles=[OldFiles ' %<ELF_FILE>'];
      end
      if ~isempty(OldFiles)
        error(['### Detected target build failure. Map and/or program file(s) are not up-to-date.'])
      end
      fprintf('### Generating code profile report for model: %s\n', '%<ModelName>');
      %assign target_compiler = CompiledModel.Settings.TargetCompiler
      %if target_compiler != "Tasking"
        [status,result] = system('"%<PERL>" "%<MAP2IR>" "%<MAP_FILE>" "%<RULE_FILE>" "%<IR_FILE>" "%<model_gen_file_list>" "%<rtwlib_filelist_file>"');
      %else 
        [status,result] = system('"%<PERL>" "%<MAP2IR>" "%<MAP_FILE>" "%<RULE_FILE>" "%<IR_FILE>"');
      %endif	

      [status,result] = system('"%<PERL>" "%<IR2HTML>" "%<IR_FILE>" "%<HTML_RULE_FILE>" "%<PROFILE_REPORT_FILE>" "%<HTML_REPORT_DIR>%<PATH_SEP>"');
                                                                           %% need double \ here to prevent pass in "
      [status,result] = system('"%<PERL>" "%<HOOKUP_HTML>" "%<HTML_REPORT_CONTENTS>" "%<noPATH_PROFILE_REPORT_FILE>"');
      drawnow;
      rtwprivate('rtwshowhtml', '%<HTML_REPORT_FRAME>')
      fprintf('### Generated code profile report for model: %s\n', '%<ModelName>');
  %endif

  function result = cmpTimeFlag(file1, file2)
    %% CMPTIMEFLAG Compare time/date flag of the two input files
    %% CMPTIMEFLAG(file1, file2) return 1  if file1 is earlier than file2
    %%			      return 0  if same time or any file doesn't exist
    %%			      return -1 if file1 is later than file2
    %%   file2 can be wildcard, it will return -1 unless every file2 ealier than file1
      record1 = dir(eval('file1'));
        [row col] = size(record1);
        if (row == 0) | (col == 0)
          result = 0;
          return
        end
      record2 = dir(eval('file2'));
        [row col] = size(record2);
        if (row == 0) | (col == 0)
          result = 0;
          return
        end    
      date1 = datevec(record1.date);
  
      match_file_num = row;
      for loop = 1:match_file_num
        date2 = datevec(record2(loop).date);
        for i = 1:6
          if date1(i) < date2(i)
            result = 1;
            return
          elseif date1(i) > date2(i)
            result = -1;
            if (loop == match_file_num)
              return
            else
              break
            end
          else
          end
        end
      end
      result = 0;
  
  %closefile buffer
%endfunction
