%% File: sfun_can_frame_constructor.tlc
%%
%% Abstract:
%%   
%%
%% $Revision: 1.14.6.3 $
%% $Date: 2004/04/19 01:19:56 $
%%
%% Copyright 2001-2003 The MathWorks, Inc.


%implements sfun_can_frame_constructor "C"

%include "canincludes.tlc"

%function BlockTypeSetup(block,system) void
   %<SetupCanDataTypes(block)>
%endfunction

%function Start(block,system) Output
 	%assign frame = LibBlockOutputSignal(0,"","",0)
	/*--- %<Type> Block: %<Name> ---*/
   %% if output is in the block I/O (rather than being inlined)
   %% then we may need to initialise the invarient parts of the output 
   %if (LibBlockOutputSignalIsInBlockIO(0))
      %if !SLibCodeGenForSim()
         %% For RT mode, we may apply the following optimisations
         %% Set this invariant data in the Start function
         %% NOTE: For accelerator mode, PIL etc, we need to set this info, in the Outputs fcn.
      	%<frame>.ID = %<CAST("Unsigned",SFcnCanDbMessage.id[0])>;
	      %<frame>.type = %<CAST("Unsigned",SFcnCanDbMessage.idType[0])>;
   	   %<frame>.LENGTH = %<CAST("Unsigned",SFcnCanDbMessage.length[0])>;
      %endif
   %endif
%endfunction 

%function Outputs(block,system) Output
   %assign frame = LibBlockOutputSignal(0,"","",0)
   %if SLibCodeGenForSim()
      %% apply the invarient settings in Outputs fcn - this deals with Accelerator mode
      %<frame>.ID = %<CAST("Unsigned",SFcnCanDbMessage.id[0])>;
	   %<frame>.type = %<CAST("Unsigned",SFcnCanDbMessage.idType[0])>;
   	%<frame>.LENGTH = %<CAST("Unsigned",SFcnCanDbMessage.length[0])>;
   %endif
      
	/*--- %<Type> Block: %<Name> ---*/
	%<GenerateSignalPacking(block,system,SFcnCanDbMessage,"%<frame>.DATA")>
%endfunction


%% Function: BlockInitialValues ================================================
%%
%function BlockInitialValues(block, system, vectType) void

  %return CAN_BlockInitialValues(block,system,vectType)

%endfunction  %% BlockInitialValues


