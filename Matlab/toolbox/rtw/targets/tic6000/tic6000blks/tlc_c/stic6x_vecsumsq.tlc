%% $RCSfile: stic6x_vecsumsq.tlc,v $
%% $Revision: 1.1.6.1 $
%% $Date: 2004/01/22 18:32:52 $
%%
%% Copyright 2001-2003 The MathWorks, Inc.
%%
%% Abstract: TI C62/C64 DSPLIB "vecsumsq"
%%           (optimized fixed-point Vector Sum Of Squares function)

%implements stic6x_vecsumsq "C"

%include "tiblksutil.tlc"

%% Function: BlockTypeSetup ==============================================
%function BlockTypeSetup(block, system) void

  %<Include_ti_header(block, "dsp_vecsumsq")>

%endfunction %% BlockTypeSetup

%% Function: Outputs ==========================================================
%%
%function Outputs(block, system) Output
  %%
  %assign INPORT   = 0
  %assign OUTPORT  = 0
  %assign inpWidth = LibBlockInputSignalWidth(INPORT)
  %assign outWidth = LibBlockOutputSignalWidth(OUTPORT)
  %% outWidth = number of channels of input
  %%
  /* C%<chipID.Value[0]>x DSP Library vecsumsq (%<ParamSettings.FunctionName>) - '%<Name>' */
  %if (outWidth == 1) %% Must be one channel input
    %<LibBlockOutputSignal(OUTPORT,"","",0)> = DSP_vecsumsq( (%<LibBlockInputSignalAddr(INPORT,"","",0)>), %<inpWidth> );
  %else
    %assign nSamps = inpWidth / outWidth
    {
      const short *x = %<LibBlockInputSignalAddr(INPORT,"","",0)>;
      int         *r = %<LibBlockOutputSignalAddr(OUTPORT,"","",0)>;
      int   nChans   = %<outWidth>;
      while(nChans--) {
        *r++ = DSP_vecsumsq((short *)x, %<nSamps>);
         x += %<nSamps>;
      }
    }
  %endif

%endfunction

%% [EOF] stic6x_vecsumsq.tlc
