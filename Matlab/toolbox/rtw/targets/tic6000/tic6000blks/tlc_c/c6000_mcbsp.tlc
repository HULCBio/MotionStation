%% $RCSfile: c6000_mcbsp.tlc,v $
%% $Revision: 1.1.6.1 $ 
%% $Date: 2004/01/22 18:32:06 $
%% Copyright 2001-2003 The MathWorks, Inc.
%% part of the Target for TI C6000 DSP


%if !EXISTS("C6000_MCBSP_TLC")
%assign C6000_MCBSP_TLC = 1

%include "c6000_util.tlc"

%%  These helper functions may only be called after all the
%%  BlockInstanceSetup functions have run.  That is, the functions
%%  should only be called during mdlStart or later.



%% ==========================================================================
%% Function: renderMcBSPDefinesC6x1x
%% Abstract: 
%%      This function adds McBSP constants for TMS320c6x1x to chip header file

%function renderMcBSPDefinesC6x1x(block) void
%openfile buff

/* Define McBSP0 Registers */
#define McBSP0_DRR      0x18c0000   /* Address of data receive reg.         */
#define McBSP0_DXR      0x18c0004   /* Address of data transmit reg.        */
#define McBSP0_SPCR     0x18c0008   /* Address of serial port contl. reg.   */
#define McBSP0_RCR      0x18c000C   /* Address of receive control reg.      */
#define McBSP0_XCR      0x18c0010   /* Address of transmit control reg.     */
#define McBSP0_SRGR     0x18c0014   /* Address of sample rate generator     */
#define McBSP0_MCR      0x18c0018   /* Address of multichannel reg.         */
#define McBSP0_RCER     0x18c001C   /* Address of receive channel enable.   */
#define McBSP0_XCER     0x18c0020   /* Address of transmit channel enable.  */
#define McBSP0_PCR      0x18c0024   /* Address of pin control reg.          */

/* Define McBSP1 Registers */
#define McBSP1_DRR      0x1900000   /* Address of data receive reg.         */
#define McBSP1_DXR      0x1900004   /* Address of data transmit reg.        */
#define McBSP1_SPCR     0x1900008   /* Address of serial port contl. reg.   */
#define McBSP1_RCR      0x190000C   /* Address of receive control reg.      */
#define McBSP1_XCR      0x1900010   /* Address of transmit control reg.     */
#define McBSP1_SRGR     0x1900014   /* Address of sample rate generator     */
#define McBSP1_MCR      0x1900018   /* Address of multichannel reg.         */
#define McBSP1_RCER     0x190001C   /* Address of receive channel enable.   */
#define McBSP1_XCER     0x1900020   /* Address of transmit channel enable.  */
#define McBSP1_PCR      0x1900024   /* Address of pin control reg.          */

/* C64-only registers not defined here; 
   consult C6000 Peripherals book if those are needed */

%if EXISTS("::CompiledModel.aic23_adc_instance") || EXISTS("::CompiledModel.aic23_dac_instance")
MCBSP_Handle hMcbspCtrl;
MCBSP_Handle hMcbspData;
%endif

%closefile buff
%return buff
%endfunction %% renderMcBSPDefinesC6x1x


%% ==========================================================================
%% Function: renderMcBSPDefinesC6701
%% Abstract: 
%%      This function adds McBSP constants for TMS320c6701 to chip header file

%function renderMcBSPDefinesC6701(block) void
%openfile buff

/* McBSP header ------------------------------------------------------------ */
/* see the TMS320C6000 Peripherals Reference Guide (SPRU190C)                */
/* for technical specifications                                              */

/* Multi-Channel Buffered Serial Port Control Registers & Bits */
#define MCBSP0_ADDR    0x018C0000
#define MCBSP0_DRR     *(volatile unsigned int *)(MCBSP0_ADDR)
#define MCBSP0_DXR     *(volatile unsigned int *)(MCBSP0_ADDR+0x04)
#define MCBSP0_SPCR    *(volatile unsigned int *)(MCBSP0_ADDR+0x08)
#define MCBSP0_RCR     *(volatile unsigned int *)(MCBSP0_ADDR+0x0c)
#define MCBSP0_XCR     *(volatile unsigned int *)(MCBSP0_ADDR+0x10)
#define MCBSP0_SRGR    *(volatile unsigned int *)(MCBSP0_ADDR+0x14)
#define MCBSP0_MCR     *(volatile unsigned int *)(MCBSP0_ADDR+0x18)
#define MCBSP0_RCER    *(volatile unsigned int *)(MCBSP0_ADDR+0x1C)
#define MCBSP0_XCER    *(volatile unsigned int *)(MCBSP0_ADDR+0x20)
#define MCBSP0_PCR     *(volatile unsigned int *)(MCBSP0_ADDR+0x24)

#define MCBSP1_ADDR    0x01900000
#define MCBSP1_DRR     *(volatile unsigned int *)(MCBSP1_ADDR)
#define MCBSP1_DXR     *(volatile unsigned int *)(MCBSP1_ADDR+0x04)
#define MCBSP1_SPCR    *(volatile unsigned int *)(MCBSP1_ADDR+0x08)
#define MCBSP1_RCR     *(volatile unsigned int *)(MCBSP1_ADDR+0x0c)
#define MCBSP1_XCR     *(volatile unsigned int *)(MCBSP1_ADDR+0x10)
#define MCBSP1_SRGR    *(volatile unsigned int *)(MCBSP1_ADDR+0x14)
#define MCBSP1_MCR     *(volatile unsigned int *)(MCBSP1_ADDR+0x18)
#define MCBSP1_RCER    *(volatile unsigned int *)(MCBSP1_ADDR+0x1C)
#define MCBSP1_XCER    *(volatile unsigned int *)(MCBSP1_ADDR+0x20)
#define MCBSP1_PCR     *(volatile unsigned int *)(MCBSP1_ADDR+0x24)

/* Multi-channel Serial Port Control Register Bits */
#define RRST           0
#define RRDY           1
#define RFULL          2
#define RSYNC_ERR      3
#define RINTM          4
#define RINTM_SZ       2
#define CLKSTP        11
#define CLKSTP_SZ      2
#define RJUST         13
#define RJUST_SZ       2
#define DLB           15
#define XRST          16
#define XRDY          17
#define XEMPTY        18
#define XSYNC_ERR     19
#define XINTM         20
#define XINTM_SZ       2
#define GRST          22
#define FRST          23

/* Multi-channel Serial Port Pin Control Reg Bits */
#define CLKRP          0
#define CLKXP          1
#define FSRP           2
#define FSXP           3
#define DR_STAT        4
#define DX_STAT        5
#define CLKS_STAT      6
#define CLKRM          8
#define CLKXM          9
#define FSRM          10
#define FSXM          11
#define RIOEN         12
#define XIOEN         13

/* Multi-channel Serial Port RX & TX Ctrl Reg Bits */
#define RWDLEN1        5
#define RWDLEN1_SZ     3
#define RFRLEN1        8
#define RFRLEN1_SZ     7
#define RDATDLY       16
#define RDATDLY_SZ     2
#define RFIG          18
#define RCOMPAND      19
#define RCOMPAND_SZ    2
#define RWDLEN2       21
#define RWDLEN2_SZ     3
#define RFRLEN2       24
#define RFRLEN2_SZ     7
#define RPHASE        31
#define XWDLEN1        5
#define XWDLEN1_SZ     3
#define XFRLEN1        8
#define XFRLEN1_SZ     7
#define XDATDLY       16
#define XDATDLY_SZ     2
#define XFIG          18
#define XCOMPAND      19
#define XCOMPAND_SZ    2
#define XWDLEN2       21
#define XWDLEN2_SZ     3
#define XFRLEN2       24
#define XFRLEN2_SZ     7
#define XPHASE        31

/* Multi-channel Serial Port Sample Rate Gen Reg Bits */
#define CLKGDV         0
#define CLKGDV_SZ      8
#define FWID           8
#define FWID_SZ        8
#define FPER          16
#define FPER_SZ       12
#define FSGM          28
#define CLKSM         29
#define CLKSP         30
#define GSYNC         31

/* Multi-channel Serial Port Multi-Chan Ctrl Reg Bits */
#define RMCM           0
#define RCBLK          2
#define RCBLK_SZ       3
#define RPABLK         5
#define RPABLK_SZ      2
#define RPBBLK         7
#define RPBBLK_SZ      2
#define XMCM          16
#define XMCM_SZ        2
#define XCBLK         18
#define XCBLK_SZ       3
#define XPABLK        21
#define XPABLK_SZ      2
#define XPBBLK        23
#define XPBBLK_SZ      2

/* Multi-channel Serial Port Rec Enable Register Bits */
#define RCEA0          0
#define RCEA1          1
#define RCEA2          2
#define RCEA3          3
#define RCEA4          4
#define RCEA5          5
#define RCEA6          6
#define RCEA7          7
#define RCEA8          8
#define RCEA9          9
#define RCEA10        10
#define RCEA11        11
#define RCEA12        12
#define RCEA13        13
#define RCEA14        14
#define RCEA15        15

#define RCEB0         16
#define RCEB1         17
#define RCEB2         18
#define RCEB3         19
#define RCEB4         20
#define RCEB5         21
#define RCEB6         22
#define RCEB7         23
#define RCEB8         24
#define RCEB9         25
#define RCEB10        26
#define RCEB11        27
#define RCEB12        28
#define RCEB13        29
#define RCEB14        30
#define RCEB15        31

/* Multi-channel Serial Port TX Enable Register Bits */
#define XCEA0          0
#define XCEA1          1
#define XCEA2          2
#define XCEA3          3
#define XCEA4          4
#define XCEA5          5
#define XCEA6          6
#define XCEA7          7
#define XCEA8          8
#define XCEA9          9
#define XCEA10        10
#define XCEA11        11
#define XCEA12        12
#define XCEA13        13
#define XCEA14        14
#define XCEA15        15

#define XCEB0         16
#define XCEB1         17
#define XCEB2         18
#define XCEB3         19
#define XCEB4         20
#define XCEB5         21
#define XCEB6         22
#define XCEB7         23
#define XCEB8         24
#define XCEB9         25
#define XCEB10        26
#define XCEB11        27
#define XCEB12        28
#define XCEB13        29
#define XCEB14        30
#define XCEB15        31

#define MCBSP_RX      1
#define MCBSP_TX      2
#define MCBSP_BOTH    3

/* Multi-channel Control Register (MCCR) bits */
#define RMCM          0
#define RPABLK        5
#define RPABLK_SZ     2
#define RPBBLK        7
#define RPBBLK_SZ     2
#define XMCM          16
#define XMCM_SZ       2
#define XPABLK        21
#define XPABLK_SZ     2
#define XPBBLK        23
#define XPBBLK_SZ     2

/* Receive Channel Enable Register (RCER) bits */
#define RCEA          0
#define RCEA_SZ       16
#define RCEB          16
#define RCEB_SZ       16

/* Transmit Channel Enable Register (XCER) bits */
#define XCEA          0
#define XCEA_SZ       16
#define XCEB          16
#define XCEB_SZ       16

/* CONFIGURATION REGISTER BIT and BITFIELD values                             */
/* Serial Port Control Register SPCR                                          */
#define INTM_RDY            0x00     /* R/X INT driven by R/X RDY             */
#define INTM_BLOCK          0x01     /* R/X INT driven by new multichannel blk*/
#define INTM_FRAME          0x02     /* R/X INT driven by new frame sync      */
#define INTM_SYNCERR        0x03     /* R/X INT generated by R/X SYNCERR      */

#define DLB_ENABLE          0x01     /* Enable Digital Loopback Mode          */
#define DLB_DISABLE         0x00     /* Disable Digital Loopback Mode         */

#define RXJUST_RJZF         0x00     /* Receive Right Justify Zero Fill       */
#define RXJUST_RJSE         0x01     /* Receive Right Justify Sign Extend     */
#define RXJUST_LJZF         0x02     /* Receive Left Justify Zero Fill        */

/* Pin Control Register PCR                                                   */
#define CLKR_POL_RISING     0x01     /* R Data Sampled on Rising Edge of CLKR */
#define CLKR_POL_FALLING    0x00     /* R Data Sampled on Falling Edge of CLKR*/
#define CLKX_POL_RISING     0x00     /* X Data Sent on Rising Edge of CLKX    */
#define CLKX_POL_FALLING    0x01     /* X Data Sent on Falling Edge of CLKX   */
#define FSYNC_POL_HIGH      0x00     /* Frame Sync Pulse Active High          */
#define FSYNC_POL_LOW       0x01     /* Frame Sync Pulse Active Low           */

#define CLK_MODE_EXT        0x00     /* Clock derived from external source    */
#define CLK_MODE_INT        0x01     /* Clock derived from internal source    */

#define FSYNC_MODE_EXT      0x00     /* Frame Sync derived from external src  */
#define FSYNC_MODE_INT      0x01     /* Frame Sync dervived from internal src */

/* Transmit Receive Control Register XCR/RCR                                  */
#define SINGLE_PHASE        0x00     /* Selects single phase frames           */
#define DUAL_PHASE          0x01     /* Selects dual phase frames             */

#define MAX_FRAME_LENGTH    0x7f     /* maximum number of words per frame     */

#define WORD_LENGTH_8       0x00     /* 8 bit word length (requires filling)  */
#define WORD_LENGTH_12      0x01     /* 12 bit word length       ""           */
#define WORD_LENGTH_16      0x02     /* 16 bit word length       ""           */
#define WORD_LENGTH_20      0x03     /* 20 bit word length       ""           */
#define WORD_LENGTH_24      0x04     /* 24 bit word length       ""           */
#define WORD_LENGTH_32      0x05     /* 32 bit word length (matches DRR DXR sz*/

#define MAX_WORD_LENGTH     WORD_LENGTH_32

#define NO_COMPAND_MSB_1ST  0x00     /* No Companding, Data XFER starts w/MSb */
#define NO_COMPAND_LSB_1ST  0x01     /* No Companding, Data XFER starts w/LSb */
#define COMPAND_ULAW        0x02     /* Compand ULAW, 8 bit word length only  */
#define COMPAND_ALAW        0x03     /* Compand ALAW, 8 bit word length only  */

#define FRAME_IGNORE        0x01     /* Ignore frame sync pulses after 1st    */
#define NO_FRAME_IGNORE     0x00     /* Utilize frame sync pulses             */

#define DATA_DELAY0         0x00     /* 1st bit in same clk period as fsync   */
#define DATA_DELAY1         0x01     /* 1st bit 1 clk period after fsync      */
#define DATA_DELAY2         0x02     /* 1st bit 2 clk periods after fsync     */

/* Sample Rate Generator Register SRGR */
#define MAX_SRG_CLK_DIV     0xFF     /* max value to divide Sample Rate Gen Cl*/
#define MAX_FRAME_WIDTH     0xFF     /* maximum FSG width in CLKG periods     */
#define MAX_FRAME_PERIOD    0x0FFF   /* FSG period in CLKG periods            */

#define FSX_DXR_TO_XSR      0x00     /* Transmit FSX due to DXR to XSR copy   */
#define FSX_FSG             0x01     /* Transmit FSX due to FSG               */

#define CLK_MODE_CLKS       0x00     /* Clock derived from CLKS source        */
#define CLK_MODE_CPU        0x01     /* Clock derived from CPU clock source   */

#define CLKS_POL_FALLING    0x01     /* falling edge generates CLKG and FSG   */
#define CLKS_POL_RISING     0x00     /* rising edge generates CLKG and FSG    */

#define GSYNC_OFF           0x00     /* CLKG always running                   */
#define GSYNC_ON            0x01     /* CLKG and FSG synched to FSR           */ 

%closefile buff
%return buff
%endfunction %% renderMcBSPDefinesC6701



%% ==========================================================================
%% Function: renderConfigMcBSPFunctionC6711 
%% Abstract: 
%%      This function adds definition of ConfigMcBSP function for TMS320c6711 

%function renderConfigMcBSPFunctionC6711(block) void
%openfile buff

/* Function: mcbsp0_write() ----------------------------------
 *
 * Abstract:
 *      This function writes to McBSP 0
 */
 
void mcbsp0_write (unsigned int out_data)
{
    while( !(MCBSP_xrdy(hMcbsp)));
    MCBSP_write( hMcbsp, out_data );
}



/* Function: mcbsp0_read() -----------------------------------
 *
 * Abstract:
 *      This function reads from McBSP 0
 */
 
unsigned int mcbsp0_read (void)
{
    while(!(MCBSP_rrdy(hMcbsp)));
    return (MCBSP_read(hMcbsp));
}



/* Function: config_McBSP ----------------------------------------------
 *
 * Abstract:
 *      This function configures McBSP 0
 */

void config_McBSP(int port)
{ 
%if EXISTS("::CompiledModel.c6711dsk_adc_instance") || EXISTS("::CompiledModel.c6711dsk_dac_instance")
	%assign mode = "MCBSP_MODE_TLC535_CODEC"
	const int mcbspDev = MCBSP_DEV0;
%elseif EXISTS("::CompiledModel.tmdx326040_adc_instance") || EXISTS("::CompiledModel.tmdx326040_dac_instance")
	%assign mode = "MCBSP_MODE_I2S_SLAVE"
	const int mcbspDev = MCBSP_DEV1;
%endif

    hMcbsp = MCBSP_open( mcbspDev, MCBSP_OPEN_RESET ); 
  
    /* Configure the Serial Port */
%if mode == "MCBSP_MODE_TLC535_CODEC"   
    MCBSP_configArgs(
        hMcbsp,
        MCBSP_SPCR_RMK(
        	MCBSP_SPCR_FREE_YES,
        	MCBSP_SPCR_SOFT_NO,
            MCBSP_SPCR_FRST_YES,
            MCBSP_SPCR_GRST_YES,
            MCBSP_SPCR_XINTM_XRDY,
            MCBSP_SPCR_XSYNCERR_NO,
            MCBSP_SPCR_XRST_NO,
            MCBSP_SPCR_DLB_OFF,
            MCBSP_SPCR_RJUST_RZF,
            MCBSP_SPCR_CLKSTP_DISABLE,
            MCBSP_SPCR_DXENA_OFF,
            MCBSP_SPCR_RINTM_RRDY,
            MCBSP_SPCR_RSYNCERR_NO,
            MCBSP_SPCR_RRST_NO     
            ),
        MCBSP_RCR_RMK(
            MCBSP_RCR_RPHASE_SINGLE,
            MCBSP_RCR_RFRLEN2_OF(0),
            MCBSP_RCR_RWDLEN2_8BIT, /* Not using Phase */
            MCBSP_RCR_RCOMPAND_MSB,
            MCBSP_RCR_RFIG_YES,
            MCBSP_RCR_RDATDLY_1BIT,
            MCBSP_RCR_RFRLEN1_OF(0),
            MCBSP_RCR_RWDLEN1_16BIT,
            MCBSP_RCR_RWDREVRS_DISABLE
            ),
        MCBSP_XCR_RMK(
            MCBSP_XCR_XPHASE_SINGLE,
            MCBSP_XCR_XFRLEN2_OF(0),
            MCBSP_XCR_XWDLEN2_8BIT, /* Not using Phase */
            MCBSP_XCR_XCOMPAND_MSB,
            MCBSP_XCR_XFIG_YES,
            MCBSP_XCR_XDATDLY_1BIT,
            MCBSP_XCR_XFRLEN1_OF(0),
            MCBSP_XCR_XWDLEN1_16BIT,
            MCBSP_XCR_XWDREVRS_DISABLE
            ),
        MCBSP_SRGR_DEFAULT,
        MCBSP_MCR_DEFAULT,
        MCBSP_RCER_DEFAULT,
        MCBSP_XCER_DEFAULT,
        MCBSP_PCR_DEFAULT
	);
%elseif mode == "MCBSP_MODE_I2S_MASTER"
	MCBSP_configArgs(
		hMcbsp,
		MCBSP_SPCR_OF(0x00000000), /* reset port */
		  MCBSP_RCR_RMK(
		  MCBSP_RCR_RPHASE_SINGLE,
		  MCBSP_RCR_RFRLEN2_OF(0),
		  MCBSP_RCR_RWDLEN2_8BIT, /* Not using Phase */
		  MCBSP_RCR_RCOMPAND_MSB,
		  MCBSP_RCR_RFIG_YES,
		  MCBSP_RCR_RDATDLY_0BIT,
		  MCBSP_RCR_RFRLEN1_OF(0),
		  MCBSP_RCR_RWDLEN1_32BIT, /* packed 16-bit L/R data */
		  MCBSP_RCR_RWDREVRS_DISABLE),
		MCBSP_XCR_RMK(
	    MCBSP_XCR_XPHASE_SINGLE,
		  MCBSP_XCR_XFRLEN2_OF(0),
	  	MCBSP_XCR_XWDLEN2_8BIT, /* Not using Phase */
	  	MCBSP_XCR_XCOMPAND_MSB,
	  	MCBSP_XCR_XFIG_YES,
	  	MCBSP_XCR_XDATDLY_0BIT,
	  	MCBSP_XCR_XFRLEN1_OF(0),
	  	MCBSP_XCR_XWDLEN1_32BIT, /* packed 16-bit L/R data */
	  	MCBSP_XCR_XWDREVRS_DISABLE),
		MCBSP_SRGR_RMK(
		  MCBSP_SRGR_GSYNC_FREE,
		  MCBSP_SRGR_CLKSP_DEFAULT,
		  MCBSP_SRGR_CLKSM_CLKS,
		  MCBSP_SRGR_FSGM_FSG,
		  MCBSP_SRGR_FPER_OF(31),
		  MCBSP_SRGR_FWID_OF(15),
		  MCBSP_SRGR_CLKGDV_OF(7)),
		MCBSP_MCR_DEFAULT,
		MCBSP_RCER_DEFAULT,
		MCBSP_XCER_DEFAULT,
		MCBSP_PCR_RMK(
		  MCBSP_PCR_XIOEN_SP,
		  MCBSP_PCR_RIOEN_SP,
		  MCBSP_PCR_FSXM_INTERNAL,
		  MCBSP_PCR_FSRM_EXTERNAL,
	  	MCBSP_PCR_CLKXM_OUTPUT,
		  MCBSP_PCR_CLKRM_INPUT,
		  MCBSP_PCR_CLKSSTAT_0,
		  MCBSP_PCR_DXSTAT_0,
		  MCBSP_PCR_FSXP_ACTIVEHIGH,
		  MCBSP_PCR_FSRP_ACTIVEHIGH,
	  	MCBSP_PCR_CLKXP_FALLING,
	  	MCBSP_PCR_CLKRP_RISING)
		);
	
	MCBSP_RSETH(hMcbsp, SPCR, 0x00400000); /* start srg */
	MCBSP_RSETH(hMcbsp, SPCR, 0x00C00000); /* start fsg */
	MCBSP_RSETH(hMcbsp, SPCR, 0x00C10001); /* enable tx/rx */
	MCBSP_RSETH(hMcbsp,  DXR, 0x00000000);  /* prime tx interrupt */
%elseif mode == "MCBSP_MODE_I2S_SLAVE"
	MCBSP_configArgs(
		hMcbsp,
		MCBSP_SPCR_OF(0x00000000), /* reset port */
		MCBSP_RCR_RMK(
			MCBSP_RCR_RPHASE_SINGLE,
			MCBSP_RCR_RFRLEN2_OF(0),
			MCBSP_RCR_RWDLEN2_8BIT, 
			MCBSP_RCR_RCOMPAND_MSB,
			MCBSP_RCR_RFIG_YES,
			MCBSP_RCR_RDATDLY_0BIT,
			MCBSP_RCR_RFRLEN1_OF(0),
			MCBSP_RCR_RWDLEN1_32BIT, /* packed 16-bit L/R data */
			MCBSP_RCR_RWDREVRS_DISABLE), 
		MCBSP_XCR_RMK(
			MCBSP_XCR_XPHASE_SINGLE,
			MCBSP_XCR_XFRLEN2_OF(0),
			MCBSP_XCR_XWDLEN2_8BIT, 
			MCBSP_XCR_XCOMPAND_MSB,
			MCBSP_XCR_XFIG_YES,
			MCBSP_XCR_XDATDLY_0BIT,
			MCBSP_XCR_XFRLEN1_OF(0),
			MCBSP_XCR_XWDLEN1_32BIT, /* packed 16-bit L/R data */
			MCBSP_XCR_XWDREVRS_DISABLE),
		MCBSP_SRGR_DEFAULT,
		MCBSP_MCR_DEFAULT,
		MCBSP_RCER_DEFAULT,
		MCBSP_XCER_DEFAULT,
		MCBSP_PCR_RMK( 
			MCBSP_PCR_XIOEN_SP,
			MCBSP_PCR_RIOEN_SP,
			MCBSP_PCR_FSXM_EXTERNAL,
			MCBSP_PCR_FSRM_EXTERNAL,
			MCBSP_PCR_CLKXM_INPUT,
			MCBSP_PCR_CLKRM_INPUT,
			MCBSP_PCR_CLKSSTAT_0,
			MCBSP_PCR_DXSTAT_0,
			MCBSP_PCR_FSXP_ACTIVEHIGH,
			MCBSP_PCR_FSRP_ACTIVEHIGH,
			MCBSP_PCR_CLKXP_RISING,
			MCBSP_PCR_CLKRP_FALLING)
		);
	MCBSP_RSETH(hMcbsp, SPCR, 0x00010001); /* enable tx/rx */
%endif
}

%closefile buff
%return buff
%endfunction %% renderConfigMcBSPFunctionC6711 


%% ==========================================================================
%% Function: renderConfigMcBSPFunctionAIC23 
%% Abstract: 
%%      This function adds definition of ConfigMcBSP function for AIC23
%%      on either C6416DSK or C6713DSK. 

%function renderConfigMcBSPFunctionAIC23(block) void
%openfile buff
/* Function: config_McBSP_control ----------------------------------------------
 *
 * Abstract:
 *      This function configures Control-port McBSP 
 */

void config_McBSP_control(void)
{

    /* McBSP codec control port configuration */
    MCBSP_Config mcbspCfgCtrl = {
    MCBSP_FMKS(SPCR, FREE, NO)              |
    MCBSP_FMKS(SPCR, SOFT, NO)              |
    MCBSP_FMKS(SPCR, FRST, YES)             |
    MCBSP_FMKS(SPCR, GRST, YES)             |
    MCBSP_FMKS(SPCR, XINTM, XRDY)           |
    MCBSP_FMKS(SPCR, XSYNCERR, NO)          |
    MCBSP_FMKS(SPCR, XRST, YES)             |
    MCBSP_FMKS(SPCR, DLB, OFF)              |
    MCBSP_FMKS(SPCR, RJUST, RZF)            |
    MCBSP_FMKS(SPCR, CLKSTP, NODELAY)       |
    MCBSP_FMKS(SPCR, DXENA, OFF)            |
    MCBSP_FMKS(SPCR, RINTM, RRDY)           |
    MCBSP_FMKS(SPCR, RSYNCERR, NO)          |
    MCBSP_FMKS(SPCR, RRST, YES),

    MCBSP_FMKS(RCR, RPHASE, DEFAULT)        |
    MCBSP_FMKS(RCR, RFRLEN2, DEFAULT)       |
    MCBSP_FMKS(RCR, RWDLEN2, DEFAULT)       |
    MCBSP_FMKS(RCR, RCOMPAND, DEFAULT)      |
    MCBSP_FMKS(RCR, RFIG, DEFAULT)          |
    MCBSP_FMKS(RCR, RDATDLY, DEFAULT)       |
    MCBSP_FMKS(RCR, RFRLEN1, DEFAULT)       |
    MCBSP_FMKS(RCR, RWDLEN1, DEFAULT)       |
    MCBSP_FMKS(RCR, RWDREVRS, DEFAULT),

    MCBSP_FMKS(XCR, XPHASE, SINGLE)         |
    MCBSP_FMKS(XCR, XFRLEN2, OF(0))         |
    MCBSP_FMKS(XCR, XWDLEN2, 8BIT)          |
    MCBSP_FMKS(XCR, XCOMPAND, MSB)          |
    MCBSP_FMKS(XCR, XFIG, NO)               |
    MCBSP_FMKS(XCR, XDATDLY, 0BIT)          |
    MCBSP_FMKS(XCR, XFRLEN1, OF(0))         |
    MCBSP_FMKS(XCR, XWDLEN1, 16BIT)         |
    MCBSP_FMKS(XCR, XWDREVRS, DISABLE),
        
    MCBSP_FMKS(SRGR, GSYNC, FREE)           |
    MCBSP_FMKS(SRGR, CLKSP, RISING)         |
    MCBSP_FMKS(SRGR, CLKSM, INTERNAL)       |
    MCBSP_FMKS(SRGR, FSGM, DXR2XSR)         |
    MCBSP_FMKS(SRGR, FPER, OF(0))           |
    MCBSP_FMKS(SRGR, FWID, OF(19))          |
    MCBSP_FMKS(SRGR, CLKGDV, OF(99)),

    MCBSP_MCR_DEFAULT,
%if (BoardType=="C6416DSK")
    MCBSP_RCERE0_DEFAULT,
    MCBSP_RCERE1_DEFAULT,
    MCBSP_RCERE2_DEFAULT,
    MCBSP_RCERE3_DEFAULT,
    MCBSP_XCERE0_DEFAULT,
    MCBSP_XCERE1_DEFAULT,
    MCBSP_XCERE2_DEFAULT,
    MCBSP_XCERE3_DEFAULT,
%else %% "C6713DSK" has different register fields
    MCBSP_RCER_DEFAULT,
    MCBSP_XCER_DEFAULT,
%endif

    MCBSP_FMKS(PCR, XIOEN, SP)              |
    MCBSP_FMKS(PCR, RIOEN, SP)              |
    MCBSP_FMKS(PCR, FSXM, INTERNAL)         |
    MCBSP_FMKS(PCR, FSRM, EXTERNAL)         |
    MCBSP_FMKS(PCR, CLKXM, OUTPUT)          |
    MCBSP_FMKS(PCR, CLKRM, INPUT)           |
    MCBSP_FMKS(PCR, CLKSSTAT, DEFAULT)      |
    MCBSP_FMKS(PCR, DXSTAT, DEFAULT)        |
    MCBSP_FMKS(PCR, FSXP, ACTIVELOW)        |
    MCBSP_FMKS(PCR, FSRP, DEFAULT)          |
    MCBSP_FMKS(PCR, CLKXP, FALLING)         |
    MCBSP_FMKS(PCR, CLKRP, DEFAULT)
    };

    /* Open, configure, and start the codec control McBSP */
%if (BoardType=="C6416DSK")
    %assign ctrlMcbspDev = "MCBSP_DEV1"
%else   %% C6713DSK
    %assign ctrlMcbspDev = "MCBSP_DEV0"
%endif
    hMcbspCtrl = MCBSP_open(%<ctrlMcbspDev>, MCBSP_OPEN_RESET);
    MCBSP_config(hMcbspCtrl, &mcbspCfgCtrl);
    MCBSP_start(hMcbspCtrl, MCBSP_XMIT_START |
        MCBSP_SRGR_START | MCBSP_SRGR_FRAMESYNC, 100);

}

/* Function: config_McBSP_data ----------------------------------------------
 *
 * Abstract:
 *      This function configures codec data port McBSP 
 */

void config_McBSP_data(void)
{

    /* McBSP codec data port configuration */
    MCBSP_Config mcbspCfgData = {
    MCBSP_FMKS(SPCR, FREE, NO)              |
    MCBSP_FMKS(SPCR, SOFT, NO)              |
    MCBSP_FMKS(SPCR, FRST, YES)             |
    MCBSP_FMKS(SPCR, GRST, YES)             |
    MCBSP_FMKS(SPCR, XINTM, XRDY)           |
    MCBSP_FMKS(SPCR, XSYNCERR, NO)          |
    MCBSP_FMKS(SPCR, XRST, YES)             |
    MCBSP_FMKS(SPCR, DLB, OFF)              |
    MCBSP_FMKS(SPCR, RJUST, RSE)            |
    MCBSP_FMKS(SPCR, CLKSTP, DISABLE)       |
    MCBSP_FMKS(SPCR, DXENA, OFF)            |
    MCBSP_FMKS(SPCR, RINTM, RRDY)           |
    MCBSP_FMKS(SPCR, RSYNCERR, NO)          |
    MCBSP_FMKS(SPCR, RRST, YES),

    MCBSP_FMKS(RCR, RPHASE, SINGLE)         |
    MCBSP_FMKS(RCR, RFRLEN2, DEFAULT)       |
    MCBSP_FMKS(RCR, RWDLEN2, DEFAULT)       |
    MCBSP_FMKS(RCR, RCOMPAND, MSB)          |
    MCBSP_FMKS(RCR, RFIG, NO)               |
    MCBSP_FMKS(RCR, RDATDLY, 0BIT)          |
    MCBSP_FMKS(RCR, RFRLEN1, OF(1))         |
    %% RWDLEN1 must match CODEC IWL setting:
    %%   16BIT, 20BIT, 24BIT, or 32BIT.
    %% The McBSP settings happen to match the notation of our
    %%   codec tlc variable "DataFormat".
    MCBSP_FMKS(RCR, RWDLEN1, %<DataFormat>)         |
    MCBSP_FMKS(RCR, RWDREVRS, DISABLE),

    MCBSP_FMKS(XCR, XPHASE, SINGLE)         |
    MCBSP_FMKS(XCR, XFRLEN2, DEFAULT)       |
    MCBSP_FMKS(XCR, XWDLEN2, DEFAULT)       |
    MCBSP_FMKS(XCR, XCOMPAND, MSB)          |
    MCBSP_FMKS(XCR, XFIG, NO)               |
    MCBSP_FMKS(XCR, XDATDLY, 0BIT)          |
    MCBSP_FMKS(XCR, XFRLEN1, OF(1))         |
    MCBSP_FMKS(XCR, XWDLEN1, %<DataFormat>)         |
    MCBSP_FMKS(XCR, XWDREVRS, DISABLE),
        
    MCBSP_FMKS(SRGR, GSYNC, DEFAULT)        |
    MCBSP_FMKS(SRGR, CLKSP, DEFAULT)        |
    MCBSP_FMKS(SRGR, CLKSM, DEFAULT)        |
    MCBSP_FMKS(SRGR, FSGM, DEFAULT)         |
    MCBSP_FMKS(SRGR, FPER, DEFAULT)         |
    MCBSP_FMKS(SRGR, FWID, DEFAULT)         |
    MCBSP_FMKS(SRGR, CLKGDV, DEFAULT),

    MCBSP_MCR_DEFAULT,
%if (BoardType=="C6416DSK")
    MCBSP_RCERE0_DEFAULT,
    MCBSP_RCERE1_DEFAULT,
    MCBSP_RCERE2_DEFAULT,
    MCBSP_RCERE3_DEFAULT,
    MCBSP_XCERE0_DEFAULT,
    MCBSP_XCERE1_DEFAULT,
    MCBSP_XCERE2_DEFAULT,
    MCBSP_XCERE3_DEFAULT,
%else %% "C6713DSK" has different register fields
    MCBSP_RCER_DEFAULT,
    MCBSP_XCER_DEFAULT,
%endif

    MCBSP_FMKS(PCR, XIOEN, SP)              |
    MCBSP_FMKS(PCR, RIOEN, SP)              |
    MCBSP_FMKS(PCR, FSXM, EXTERNAL)         |
    MCBSP_FMKS(PCR, FSRM, EXTERNAL)         |
    MCBSP_FMKS(PCR, CLKXM, INPUT)           |
    MCBSP_FMKS(PCR, CLKRM, INPUT)           |
    MCBSP_FMKS(PCR, CLKSSTAT, DEFAULT)      |
    MCBSP_FMKS(PCR, DXSTAT, DEFAULT)        |
    MCBSP_FMKS(PCR, FSXP, ACTIVEHIGH)       |
    MCBSP_FMKS(PCR, FSRP, ACTIVEHIGH)       |
    MCBSP_FMKS(PCR, CLKXP, FALLING)         |
    MCBSP_FMKS(PCR, CLKRP, RISING)
    };

    /* Open, configure, and start the codec data McBSP */
%if (BoardType=="C6416DSK")
    %assign dataMcbspDev = "MCBSP_DEV2"
%else  %%  C6713DSK
    %assign dataMcbspDev = "MCBSP_DEV1"
%endif
    hMcbspData = MCBSP_open(%<dataMcbspDev>, MCBSP_OPEN_RESET);
    MCBSP_config(hMcbspData, &mcbspCfgData);
    MCBSP_start(hMcbspData, MCBSP_XMIT_START | MCBSP_RCV_START |
        MCBSP_SRGR_START | MCBSP_SRGR_FRAMESYNC, 220);

}
%closefile buff
%return buff
%endfunction %% renderConfigMcBSPFunctionAIC23


%% ==========================================================================
%% Function: renderConfigMcBSPFunctionC6701 
%% Abstract: 
%%      This function adds definition of ConfigMcBSP function for TMS320c6701 

%function renderConfigMcBSPFunctionC6701(block) void
%openfile buff

/* Function: config_McBSP ----------------------------------------------
 *
 * Abstract:
 *      This function configures McBSP
 */

void config_McBSP(int port)
{
    /* define control register values */
    const unsigned int pcr  =
          MASK(CLKX_POL_RISING,CLKXP)
        | MASK(CLKR_POL_FALLING,CLKRP)
        | MASK(FSYNC_POL_HIGH,FSXP)
        | MASK(FSYNC_POL_HIGH,FSRP)
        | MASK(CLK_MODE_EXT,CLKXM)
        | MASK(CLK_MODE_EXT,CLKRM)
        | MASK(FSYNC_MODE_EXT,FSXM)
        | MASK(FSYNC_MODE_EXT,FSRM);
    const unsigned int xcr =
          MASK(SINGLE_PHASE,XPHASE)
        | MASK(0,XFRLEN1)
        | MASK(0,XFRLEN2)
        | MASK(WORD_LENGTH_32,XWDLEN1)
        | MASK(WORD_LENGTH_32,XWDLEN2)
        | MASK(NO_FRAME_IGNORE,XFIG)
        | MASK(DATA_DELAY0,XDATDLY);
    const unsigned int rcr =
          MASK(SINGLE_PHASE,RPHASE)
        | MASK(0,RFRLEN1)
        | MASK(0,RFRLEN2)
        | MASK(WORD_LENGTH_32,RWDLEN1)
        | MASK(WORD_LENGTH_32,RWDLEN2)
        | MASK(FRAME_IGNORE,RFIG)
        | MASK(DATA_DELAY0,RDATDLY);
    const unsigned int spcr = 
          MASK(1,DLB)
        | MASK(1,XRST)
        | MASK(1,RRST)
        | MASK(1,FRST);

    /* take port out of loopback mode */
    /* disable tx/rx before configuration */
    /* reset frame sync generation counters */
    MCBSP0_SPCR &= ~spcr;

    /* configure port */
    MCBSP0_PCR |= pcr;
    MCBSP0_XCR |= xcr;
    MCBSP0_RCR |= rcr;
}

%closefile buff
%return buff
%endfunction %% renderConfigMcBSPFunctionC6701



%% ==========================================================================
%% Function: renderConfigMcBSPFunctionPrototype
%% Abstract: 
%%      This function adds function prototype to chip header file

%function renderConfigMcBSPFunctionPrototype(block) void
%openfile buff
%if (BoardType=="C6416DSK" || BoardType=="C6713DSK")
void config_McBSP_control(void);
void config_McBSP_data(void);
%else
void config_McBSP(int port);
%endif
%closefile buff
%return buff
%endfunction %% renderConfigMcBSPFunctionPrototype



%% ==========================================================================
%% Function Create_config_McBSP
%% Abstract: 
%%      This function generates code needed for MCBSP configuration

%function Create_config_McBSP(block) void
    %if JustCreatedCompiledModelRecord("Configure_serial_port")
        %%
        %openfile hdrFile = "MW_c6xxx_csl.h", "a"
        %openfile srcFile = "MW_c6xxx_csl.c", "a"     
        %%
        %selectfile hdrFile
        %% Create and cache the function prototype
        %<renderConfigMcBSPFunctionPrototype(block)>
        %%
        %% Create and cache McBSP defines and function definition
        %if BoardType=="C6711DSK"
		    %<renderMcBSPDefinesC6x1x(block)>
		    %selectfile srcFile
		    %<renderConfigMcBSPFunctionC6711(block)>  
        %elseif BoardType=="C6416DSK"
		    %<renderMcBSPDefinesC6x1x(block)>
		    %selectfile srcFile
		    %<renderConfigMcBSPFunctionAIC23(block)>  
        %elseif BoardType=="C6713DSK"
		    %<renderMcBSPDefinesC6x1x(block)>
		    %selectfile srcFile
		    %<renderConfigMcBSPFunctionAIC23(block)>  
        %elseif BoardType=="C6701EVM"
		    %<renderMcBSPDefinesC6701(block)>
            %selectfile srcFile
            %<renderConfigMcBSPFunctionC6701(block)>            
        %endif
        %%
        %closefile hdrFile
        %closefile srcFile
        %%
    %endif %% only allow config serial port to be created once
%endfunction %% Create_config_McBSP()

%endif %% C6000_MCBSP_TLC

%% [EOF] c6000_mcbsp.tlc
