%% $RCSfile: c6000_vectors.tlc,v $
%% $Revision: 1.6.4.2 $ $Date: 2004/01/22 18:26:03 $
%% Copyright 2001-2003 The MathWorks, Inc.
%% part of the Target for C6000 DSP

%openfile vvFile = "vectors.asm"   
%%
; Abstract: 
;   This file defines the reset vectors for the TMS320C6xxxx.  It handles the
;   reset and interrupts.
;
;--------------------------------------------------------------------------


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%if (BoardType=="C6711DSK" || BoardType=="C6713DSK" || BoardType=="C6416DSK")

    %assign HSRTDX = FEVAL("isUsingHighSpeedRTDX_TItarget")

    %if (IRInfo.DMAIntNeeded)
        .ref        _EDMA_isr
    %endif
    %if (IRInfo.timerIntNeeded)
        .ref        _Timer1_ISR
    %endif
    %if (IRInfo.RTDXIntNeeded && !HSRTDX)
        .ref	    RTEMU_msg
    %endif        
        .ref        _c_int00
        .sect       "vectors"
    
RESET_RST:
		MVKL        _c_int00, B3
		MVKH        _c_int00, B3
		B           B3
		MVK         0x0, B0			    ; get address of interrupt vectors
		MVC         B0, ISTP			; set table to point here
		NOP 	
		NOP 	
		NOP 
		
NMI_RST: 
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP

RESV1:  
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP

RESV2:
    %if (IRInfo.RTDXIntNeeded) 
      %if (HSRTDX)
	    .ref        _HSRTDX_msgint_isr
      %endif
		STW         b0, *b15--[2]
	  %if (HSRTDX)
	||	MVKL        _HSRTDX_msgint_isr, B0
		MVKH        _HSRTDX_msgint_isr, B0
	  %else
	||	MVKL        RTEMU_msg, b0
		MVKH        RTEMU_msg, b0
	  %endif
		B           b0
		LDW         *++b15[2], b0
		NOP         4
		NOP
		NOP
    %else 
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
	%endif

INT4:   
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP

INT5:   
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
                   
INT6: 
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP

INT7:   
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP

INT8:   
    %if (IRInfo.DMAIntNeeded)
		STW         b0, *b15--[2]
	||	MVKL        _EDMA_isr, b0
		MVKH        _EDMA_isr, b0
		B           b0
		LDW         *++b15[2], b0
		NOP         4
		NOP
		NOP
    %else
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP        
    %endif        

INT9:   
	%if (BoardType=="C6416DSK" && IRInfo.RTDXIntNeeded && !HSRTDX)
		STW 	b0, *b15--[2]
	||	MVKL 	RTEMU_msg, b0
		MVKH	RTEMU_msg, b0
		B		b0
		LDW 	*++b15[2], b0
		NOP 	2
		NOP
		NOP
	%else
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
	%endif

INT10:   
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP

INT11:
    %if (IRInfo.RTDXIntNeeded && HSRTDX)
        .ref        _HSRTDX_xmt_isr
		STW         b0,*b15--[2]			
	||	MVKL        _HSRTDX_xmt_isr, b0		
		MVKH        _HSRTDX_xmt_isr, b0
		B           B0			
		LDW         *++b15[2], b0
		NOP         2
		NOP
		NOP
    %else 
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
	%endif

INT12:  
    %if (IRInfo.RTDXIntNeeded && HSRTDX)
        .ref        _HSRTDX_rec_isr
		STW         b0,*b15--[2]			
	||	MVKL        _HSRTDX_rec_isr, b0		
		MVKH        _HSRTDX_rec_isr, b0
		B           B0			
		LDW         *++b15[2], b0
		NOP         2
		NOP
		NOP
    %else 
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
	%endif

INT13:   
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP

INT14:  
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP

INT15:
    %if (IRInfo.timerIntNeeded)
		STW         b0, *b15--[2]
	||	MVKL        _Timer1_ISR, b0
		MVKH        _Timer1_ISR, b0
		B           b0
		LDW         *++b15[2], b0
		NOP         4
		NOP
		NOP
    %else
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP        
    %endif 
    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%else        %% BoardType=="C6701EVM"

		.ref        _c_int00
	%if (IRInfo.RTDXIntNeeded)	
		.ref        RTEMU_msg
    %endif
		.def        _isr_jump_table
             
; assorted macros

ISR_HOOK:  
        .macro      x
        .asg        x,vec
        STW   .d2   b0, *--b15
    ||  MVKL        (_isr_jump_table + vec * 4), b0
        MVKH        (_isr_jump_table + vec * 4), b0
        LDW   .d2   *b0, b0
        NOP         4
        B     .s2   b0
    ||  LDW   .d2   *b15++, b0
        NOP         5
        .endm

RTDX_HOOK:
	%if (IRInfo.RTDXIntNeeded)	
        .macro       x
        STW         b0, *b15--[2]
    ||  MVKL        RTEMU_msg, b0
        MVKH        RTEMU_msg, b0
        B           b0
        LDW         *++b15[2], b0
        NOP         4
        NOP
        NOP
        .endm
    %else
        .macro  
        NOP
        NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP  
        .endm		
	%endif

;-------------------------------------------------------------------------------

        .sect       ".reset"
_RESET:
_INT0       
        MVKL        _c_int00, b0
        MVKH        _c_int00, b0
        B     .s2   b0
        NOP         5
        NOP
        NOP
        NOP
        NOP
_INT1:  
        ISR_HOOK    1
_INT2:  
        ISR_HOOK    2
_INT3:
	%if (IRInfo.RTDXIntNeeded)	
        RTDX_HOOK   3
    %else
        RTDX_HOOK    
    %endif
_INT4:  
        ISR_HOOK    4
_INT5:  
        ISR_HOOK    5
_INT6:  
        ISR_HOOK    6
_INT7:  
        ISR_HOOK    7
_INT8:  
        ISR_HOOK    8
_INT9:  
        ISR_HOOK    9
_INT10: 
        ISR_HOOK    10
_INT11: 
        ISR_HOOK    11
_INT12: 
        ISR_HOOK    12
_INT13: 
        ISR_HOOK    13
_INT14: 
        ISR_HOOK    14
_INT15: 
        ISR_HOOK    15

;------------------------------------------------------------------------------

; Define ISR Jump Table
        .sect ".jump"
_isr_jump_table:			
        .align 4
        .word _RESET
        .word _INT1
        .word _INT2
        .word _INT3
        .word _INT4
        .word _INT5
        .word _INT6
        .word _INT7
        .word _INT8
        .word _INT9
        .word _INT10
        .word _INT11
        .word _INT12
        .word _INT13
        .word _INT14
        .word _INT15

%endif  %% BoardType    

%closefile vvFile    

%% [EOF] c6000_vectors.tlc
