ha_help_begin
 ENCODE Encodes a message using Hamming code method.
    CODE = ENCODE(MSG, N, K, METHOD), METHOD = 'hamming', encodes the binary
    codeword in CODE using the Hamming code method. The codeword length is N and
    the message length is K. The format of MSG can be either a vector or
    K-column matrix. Hamming code is a single error-correction code. Its
    codeword length is N = 2^M-1. Its message length is N-M.
    
    CODE = ENCODE(MSG, N, K, METHOD, P_POLY), METHOD = 'hamming', specifies the
    primitive polynomial used in the Hamming encode. P_POLY is a degree N
    polynomial defined in GF(2).
    
    CODE = ENCODE(MSG, N, K, METHOD...), METHOD = 'hamming/decimal', specifies
    that the input data in MSG is decimal integers. This function converts the
    decimal integer into M bits binary before processing the encode computation,
    where M is the smallest integer such that N <= 2^M-1.
    
    [CODE, ADDED] = ENCODE(...) outputs the number of columns added to the input
    variable MSG in order to make the MSG fit for encoding. 
ha_help_end

li_help_begin
 ENCODE Encodes a message using linear block code method.
    CODE = ENCODE(MSG, N, K, METHOD, GEN), METHOD = 'linear', encodes the       
    binary message in MSG using the linear block code method. The codeword       
    length is N and the message length is K. The format of MSG can be       
    either a vector or K-column matrix. The generator matrix GEN is a       
    K-by-N matrix. Linear block code is a generic code. For example, You       
    can use HAMMGEN function to generate a generator matrix for Hamming        
    code.
    
    CODE = ENCODE(MSG, N, K, METHOD, GEN), METHOD = 'linear/decimal',       
    specifies that the input data in CODE is decimal integers. This       
    function converts the decimal integer into M bits binary before       
    processing the encode computation, where M is the smallest integer       
    such that N <= 2^M-1.
    
    [CODE, ADDED] = ENCODE(...) outputs the number of columns added to the       
    input variable MSG in order to make the MSG fit for encoding.
li_help_end

cy_help_begin
 ENCODE encodes a message using cyclic code method.
    CODE = ENCODE(MSG, N, K, METHOD, CYC_POLY), METHOD = 'cyclic', encodes
    binary message in MSG using the cyclic code method. The codeword length is N
    and the message length is K. The format for MSG can be either a vector or
    K-column matrix. CYC_POL is a degree N-K cyclic polynomial. You can use
    function CYCLPOLY to produce the cyclic polynomial.
    
    CODE = ENCODE(MSG, N, K, METHOD...), METHOD = 'cyclic/decimal', specifies
    that the input data in MSG is decimal integers. This function converts the
    decimal integer into M bits binary before processing the encode computation,
    where M is the smallest integer such that N <= 2^M-1.
    
    [CODE, ADDED] = ENCODE(...) outputs the number of columns added to the input
    variable MSG in order to make the MSG fit for encoding.
cy_help_end

bc_help_begin
 ENCODE encodes a message using BCH code method.
 
    WARNING : This is now an obsolete mode of ENCODE.  Please use BCHENC
              instead.
bc_help_end

rs_help_begin
 ENCODE encodes a message using Reed-Solomon code.
 
    WARNING : This is now an obsolete mode of ENCODE.  Please use RSENC
              instead.
rs_help_end

co_help_begin
 ENCODE encodes a message using convolutional code.
 
    WARNING : This is now an obsolete mode of ENCODE.  Please use CONVENC
              instead.
co_help_end      

%   Copyright 1996-2004 The MathWorks, Inc.
$Revision: 1.7.4.2 $   $Date: 2004/04/20 23:15:00 $ 
