%% $RCSfile: sdspsubmtrx.tlc,v $
%% $Revision: 1.4.4.2 $
%% $Date: 2004/04/12 23:09:51 $
%%
%% Copyright 1995-2003 The MathWorks, Inc.
%%
%% Abstract: Submatrix
%%

%implements sdspsubmtrx "C"

%include "dsplib.tlc"

%% Function: BlockInstanceSetup ===============================================
%%
%% Abstract:
%%      Rename the S-Function parameters for easy reference.
%%
%function BlockInstanceSetup(block, system) void
    %%
    %% I/O PORT CONSTANTS
    %%
    %assign INPORT  = 0
    %assign OUTPORT = 0
    %%
    %% INPUT PORT CHARACTERISTICS
    %%
    %assign inDims           = LibBlockInputSignalDimensions(   INPORT)
    %assign NUM_ROWS_INPUT   = inDims[0]
    %assign INPUT_DTYPE_NAME = LibBlockInputSignalDataTypeName( INPORT, "%<tRealPart>")
    %assign COMPLEX_INPUT    = LibBlockInputSignalIsComplex(    INPORT)
    %%
    %% PASSED-IN NON-TUNABLE PARAMETERS
    %%
    %assign ROW_START_IDX = SFcnParamSettings.RowStartIdx
    %assign ROW_END_IDX   = SFcnParamSettings.RowEndIdx
    %assign COL_START_IDX = SFcnParamSettings.ColStartIdx
    %assign COL_END_IDX   = SFcnParamSettings.ColEndIdx
    %%
    %% DERIVED CONSTANTS
    %%
    %assign numColSampsToCopy = ROW_END_IDX - ROW_START_IDX + 1
    %%
    %assign block = block + INPORT           + OUTPORT
    %assign block = block + INPUT_DTYPE_NAME + COMPLEX_INPUT
    %assign block = block + NUM_ROWS_INPUT
    %assign block = block + ROW_START_IDX
    %assign block = block + COL_START_IDX    + COL_END_IDX
    %assign block = block + numColSampsToCopy
    %%
%endfunction %% BlockInstanceSetup


%% Function: Outputs ==========================================================
%%
%function Outputs(block, system) Output
%%
/* Signal Processing Blockset Submatrix %<Type> (%<ParamSettings.FunctionName>) - '%<Name>'
%if (COMPLEX_INPUT)
** Complex input, data type: %<INPUT_DTYPE_NAME>
%else
** Real input, data type: %<INPUT_DTYPE_NAME>
%endif
*/
{
    byte_T *u = (byte_T *) %<LibBlockInputSignalAddr(INPORT, "", "",0)>;
    byte_T *y = (byte_T *) %<LibBlockOutputSignalAddr(OUTPORT, "", "",0)>;
    %%
    %if COMPLEX_INPUT
      const int_T bytesPerElement = 2 * sizeof(%<INPUT_DTYPE_NAME>);
    %else
      const int_T bytesPerElement = sizeof(%<INPUT_DTYPE_NAME>);
    %endif
    %%
    %if (COL_START_IDX != COL_END_IDX)
    int_T   colIdx;
    %endif
    %%
    %if (COL_START_IDX != 0)

        /* Initialize u to point to beginning of first column to copy. */
        /* Offset as follows: (Start col index) * (Tot bytes per col)  */
        %assign input_offset_multiplier = COL_START_IDX * NUM_ROWS_INPUT
        %if (input_offset_multiplier > 1)
          u += (%<input_offset_multiplier> * bytesPerElement);
        %else
          u += bytesPerElement;
        %endif
    %endif

    %if (COL_START_IDX != COL_END_IDX)
    /* Loop from starting column index through ending column index */
    for (colIdx = %<COL_START_IDX>; colIdx <= %<COL_END_IDX>; colIdx++)
    {
    %endif
    %%
    %if (ROW_START_IDX != 0)
      memcpy(y, u + (%<ROW_START_IDX> * bytesPerElement), (%<numColSampsToCopy> * bytesPerElement));
    %else
      memcpy(y, u, (%<numColSampsToCopy> * bytesPerElement));
    %endif
    %%
    %if (COL_START_IDX != COL_END_IDX)
      u += (%<NUM_ROWS_INPUT> * bytesPerElement); /* Adding total bytes per column */
      y += (%<numColSampsToCopy> * bytesPerElement); /* Adding bytes just copied */
    }
    %endif
    %%
}

%endfunction  %% Outputs

%% [EOF] sdspsubmtrx.tlc
