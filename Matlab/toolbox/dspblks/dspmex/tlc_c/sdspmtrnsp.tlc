%% $RCSfile: sdspmtrnsp.tlc,v $
%% $Revision: 1.10.4.2 $ 
%% $Date: 2004/04/12 23:09:12 $
%%
%% Copyright 1995-2003 The MathWorks, Inc.
%%
%% Abstract: Matrix transpose

%implements sdspmtrnsp "C"

%% Function: BlockInstanceSetup ===============================================
%%
%% Abstract:
%%      Rename the S-Function parameter for easy reference.
%%
%function BlockInstanceSetup(block, system) void
  %%
  %<LibRenameParameter(block, P1, "Cols")>
  %<LibRenameParameter(block, P2, "Hermit")>
  %%
%endfunction

%% Function: Outputs ==========================================================
%%
%function Outputs(block, system) Output
  /* Signal Processing Blockset Matrix Transpose (%<ParamSettings.FunctionName>) - %<Name> */
  %%
  %assign INPORT    = 0
  %assign OUTPORT   = 0
  %assign need_copy = (LibBlockInputSignalBufferDstPort(INPORT) != OUTPORT)  
  %assign cplx      = LibBlockInputSignalIsComplex(INPORT) != 0
  %assign dtype     = cplx ? "creal_T" : "real_T"
  %assign hermit    = cplx ? LibBlockParameterValue(Hermit,0) : 0
  %assign cols      = CAST("Number",LibBlockParameterValue(Cols,0))
  %assign width     = CAST("Number",LibDataInputPortWidth(0))
  %assign rows      = CAST("Number",width/cols)
  %%
  %if need_copy
    %if cols == 1 ||  rows == 1
      %%
      %% Vector input
      %%
      %assign rollVars = ["U","Y"]
      %roll sigIdx = RollRegions, lcv = RollThreshold, \
	block, "Roller", rollVars
	%if !hermit
	  %assign u = LibBlockInputSignal(INPORT,   "", lcv, sigIdx)
	  %assign y = LibBlockOutputSignal(OUTPORT, "", lcv, sigIdx)
	  %<y> = %<u>;
	%else
	  %assign u_re = LibBlockInputSignal(INPORT,   "", lcv, "%<tRealPart>%<sigIdx>")
	  %assign u_im = LibBlockInputSignal(INPORT,   "", lcv, "%<tImagPart>%<sigIdx>")
	  %assign y_re = LibBlockOutputSignal(OUTPORT, "", lcv, "%<tRealPart>%<sigIdx>")
	  %assign y_im = LibBlockOutputSignal(OUTPORT, "", lcv, "%<tImagPart>%<sigIdx>")
	  %<y_re> =  %<u_re>;	  
	  %<y_im> = -%<u_im>;	  
	%endif
      %endroll
    %else
      %%
      %% Matrix input
      %%
      %if !IsInputPortContiguous(block,INPORT)
	%<LibDiscontiguousInputError(block)>
      %endif 
      %%
      {
	/* 
	* Transpose matrix:  Walk the inputs in order down 
	* the columns and write the outputs across the rows 
	*/
	%<dtype> *u = %<LibBlockInputSignalAddr(INPORT,   "", "", 0)>;
	%<dtype> *y = %<LibBlockOutputSignalAddr(OUTPORT, "", "", 0)>;
	int_T j = %<cols>;
	while(j-- > 0) {
	  %<dtype> *yy = y++;
	  int_T   i  = %<rows>;
	  while(i-- > 0) {
	    %if !hermit
	      *yy = *u++;
	    %else
	      yy->re = u->re;
	      yy->im = -(u++)->im;
	    %endif
	    yy += %<cols>;
	  }
	}
      }
    %endif
  %else
    /* Output is identical to input.  No code needed. */
  %endif  %% need_copy    
  
%endfunction

%% [EOF] sdspmtrnsp.tlc




