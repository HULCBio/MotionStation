%% $RCSfile: sdspoffset.tlc,v $
%% $Revision: 1.1.6.2 $ 
%% $Date: 2004/04/12 23:09:16 $
%%
%% Copyright 1995-2003 The MathWorks, Inc.
%%
%% Abstract: Outputs offset version of inputs
%%

%implements sdspoffset "C"

%% Function: Outputs ==========================================================
%%
%function Outputs(block, system) Output
{
    %%
    %assign OUTPORT     = 0
    %assign IN_WIDTH    = LibDataInputPortWidth(0)
    %assign NUM_DATA_INPORTS  = CAST("Number", SFcnParamSettings.NumDataOffsetPairs)
    %assign Mode              = CAST("Number", SFcnParamSettings.Mode)
    %assign OUT_WIDTH   = LibDataOutputPortWidth(0) 
    %assign InDatDTName   = LibBlockInputSignalDataTypeName(0,"%<tRealPart>")               
    %assign InOffDTName   = LibBlockInputSignalDataTypeName(1,"%<tRealPart>")     
    /* Signal Processing Blockset Offset (%<ParamSettings.FunctionName>) - '%<Name>' - Output */
    %%
    %assign IN_DTYPE_ID = LibBlockInputSignalDataTypeId(0)
    %%
    %assign IN_OFFDTYPE_ID = LibBlockInputSignalDataTypeId(1)
    %%
    %if (IN_OFFDTYPE_ID == tSS_SINGLE)
      %assign ForNull = "F"
    %else
      %assign ForNull = ""
    %endif
    %%
    %%CASE-1: OUT_WIDTH = IN_WIDTH
    %if (OUT_WIDTH >= IN_WIDTH)
	%%
	const int_T BytesPerRealElem    = sizeof(%<InDatDTName>);
	const int_T ByterPerRealInputFr = %<IN_WIDTH>*BytesPerRealElem;
	%if (OUT_WIDTH > IN_WIDTH)
         const int_T ByterPerRealOutputFr = %<OUT_WIDTH>*BytesPerRealElem;
	 %%else %% ByterPerOutputFr = ByterPerRealInputFr
	%endif
	int_T DiscardBytes,BytesToCopy;
	%<InOffDTName> tempOffset;
	
	%%
	%if (Mode==1 || Mode==4)
	  %assign PlusDiscardBytes = "+ DiscardBytes"
	%else %%(Mode==2 || Mode==3)
	  %assign PlusDiscardBytes = ""
	%endif
	%foreach PortIdx = NUM_DATA_INPORTS %% PortIdx = 0:NUM_DATA_INPORTS-1, repeat the C code
	{
	  %assign isInpCplx = LibBlockInputSignalIsComplex(2*PortIdx)
	  %%
	  %if (isInpCplx)
	     %assign cplxMF = "2*"
	  %else
	     %assign cplxMF = ""
	  %endif
	  %%
	  %if (IN_OFFDTYPE_ID == tSS_DOUBLE || IN_OFFDTYPE_ID == tSS_SINGLE)
	    tempOffset =  (%<LibBlockInputSignal(2*PortIdx+1, "0", "", 0)>+0.5%<ForNull>);
	  %else
	    tempOffset =  %<LibBlockInputSignal(2*PortIdx+1, "0", "", 0)>;
	  %endif
	  %%
	  %if !(IN_OFFDTYPE_ID == tSS_UINT8 || IN_OFFDTYPE_ID == tSS_UINT16 || IN_OFFDTYPE_ID == tSS_UINT32)
	    if (tempOffset<0) tempOffset = 0;
	    else 
          %endif
	    if (tempOffset>%<IN_WIDTH>) tempOffset = %<IN_WIDTH>;
	    %%
	    %if (Mode==1 || Mode==2)
	      DiscardBytes = (int_T)tempOffset*%<cplxMF>BytesPerRealElem;
	      BytesToCopy = %<cplxMF>ByterPerRealInputFr - DiscardBytes;
	    %else %%(Mode==3 || Mode==4)
	      BytesToCopy = (int_T)tempOffset*%<cplxMF>BytesPerRealElem;
	      DiscardBytes = %<cplxMF>ByterPerRealInputFr - BytesToCopy;
	    %endif
	    %%
	    memcpy((byte_T*)%<LibBlockOutputSignalAddr(PortIdx, "", "", 0)>,
		   (byte_T*)%<LibBlockInputSignalAddr(2*PortIdx, "", "", 0)> %<PlusDiscardBytes>, %% only one diff in Mode1 and Mode2
		    BytesToCopy);
            %if (OUT_WIDTH == IN_WIDTH)
	    memset((byte_T*)%<LibBlockOutputSignalAddr(PortIdx, "", "", 0)> + BytesToCopy,0,
		    DiscardBytes);
            %else  %%if (OUT_WIDTH > IN_WIDTH)
            memset((byte_T*)%<LibBlockOutputSignalAddr(PortIdx, "", "", 0)> + BytesToCopy,0,
		    %<cplxMF>ByterPerRealOutputFr-BytesToCopy);
	    %endif

         }
        %endforeach    
    %else %%if (OUT_WIDTH < IN_WIDTH)
	%%
	const int_T BytesPerRealElem    = sizeof(%<InDatDTName>);
	const int_T ByterPerRealInputFr = %<IN_WIDTH>*BytesPerRealElem;
	const int_T ByterPerRealOutputFr = %<OUT_WIDTH>*BytesPerRealElem;
	int_T DiscardBytes,BytesToCopy;
	%<InOffDTName> tempOffset;
	%% ByterPerOutputFr = ByterPerRealInputFr
	%%
	%if (Mode==1 || Mode==4)
	  %assign PlusDiscardBytes = "+ DiscardBytes"
	%else %%(Mode==2 || Mode==3)
	  %assign PlusDiscardBytes = ""
	%endif
	%foreach PortIdx = NUM_DATA_INPORTS %% PortIdx = 0:NUM_DATA_INPORTS-1, repeat the C code
	{
	  %assign isInpCplx = LibBlockInputSignalIsComplex(2*PortIdx)
	  %%
	  %if (isInpCplx)
	     %assign cplxMF = "2*"
	  %else
	     %assign cplxMF = ""
	  %endif
	  %%
	  %if (IN_OFFDTYPE_ID == tSS_DOUBLE || IN_OFFDTYPE_ID == tSS_SINGLE)
	    tempOffset =  (%<LibBlockInputSignal(2*PortIdx+1, "0", "", 0)>+0.5%<ForNull>);
	  %else
	    tempOffset =  %<LibBlockInputSignal(2*PortIdx+1, "0", "", 0)>;
	  %endif
	  %%
	  %if !(IN_OFFDTYPE_ID == tSS_UINT8 || IN_OFFDTYPE_ID == tSS_UINT16 || IN_OFFDTYPE_ID == tSS_UINT32)
	    if (tempOffset<0) tempOffset = 0;
	    else 
          %endif
	    if (tempOffset>%<IN_WIDTH>) tempOffset = %<IN_WIDTH>;
	    %%
	    %if (Mode==1 || Mode==2)
	      DiscardBytes = (int_T)tempOffset*%<cplxMF>BytesPerRealElem;
	      BytesToCopy = MIN(%<cplxMF>ByterPerRealInputFr - DiscardBytes,%<cplxMF>ByterPerRealOutputFr);
	    %else %%(Mode==3 || Mode==4)
	      BytesToCopy = MIN((int_T)tempOffset*%<cplxMF>BytesPerRealElem,%<cplxMF>ByterPerRealOutputFr);
	      DiscardBytes = %<cplxMF>(ByterPerRealInputFr - (int_T)tempOffset*BytesPerRealElem);
	    %endif
	    %%
	    memset((byte_T*)%<LibBlockOutputSignalAddr(PortIdx, "", "", 0)>,0,%<cplxMF>ByterPerRealOutputFr);%%see commented out memset below
	    memcpy((byte_T*)%<LibBlockOutputSignalAddr(PortIdx, "", "", 0)>,
		   (byte_T*)%<LibBlockInputSignalAddr(2*PortIdx, "", "", 0)> %<PlusDiscardBytes>, %% only one diff in Mode1 and Mode2
		    BytesToCopy);
	    %%memset((byte_T*)%<LibBlockOutputSignalAddr(PortIdx, "", "", 0)> + BytesToCopy,0,
	    %%	    max(%<cplxMF>ByterPerRealOutputFr-BytesToCopy,0));
         }
        %endforeach  
    %endif    
}
%endfunction  %% Outputs

%% [EOF] sdspoffset.tlc

