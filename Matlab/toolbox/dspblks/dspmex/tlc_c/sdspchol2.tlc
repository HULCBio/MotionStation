%% $RCSfile: sdspchol2.tlc,v $
%% $Revision: 
%% $Date: 
%%
%% Abstract: TLC Code generation for Signal Processing Blockset Cholesky factorization block.
%%
%% Copyright 1995-2003 The MathWorks, Inc.
%%

%implements sdspchol2 "C"

%% Function: BlockTypeSetup ====================================================
%function BlockTypeSetup(block, system) void

    %<Include_rt_header(block,"dspchol_rt")>

%endfunction %% BlockTypeSetup

%% Function: BlockInstanceSetup ================================================
%%
%function BlockInstanceSetup(block, system) void
    %assign INPORT  = 0
    %assign OUTPORT = 0

    %%dimension of lower triangular matrix
    %assign INPUT_DIMS = LibBlockInputSignalDimensions(INPORT)
    %assign N          = INPUT_DIMS[0]

    %%Data types
    %assign DTYPE_ID    = LibBlockInputSignalDataTypeId(INPORT)
    %assign INP_COMPLEX = LibBlockInputSignalIsComplex(INPORT)

    %assign block = block + INPORT + OUTPORT + N
    %assign block = block + DTYPE_ID + INP_COMPLEX
%endfunction %% BlockInstanceSetup

%% Function: Outputs ===========================================================
%%
%function Outputs(block, system) Output
    /* Signal Processing Blockset Cholesky Factorization
       (%<ParamSettings.FunctionName>) - '%<Name>' */
    %assign dnam    = ["R", "C", "D", "Z"]                %% Data type
    %assign dtype   = (DTYPE_ID == tSS_SINGLE) ? 0 : 2    %% Double or single
    %assign dA      = dnam[dtype+INP_COMPLEX]             %% Input Data type
    %assign needcopy = (LibBlockInputSignalBufferDstPort(INPORT) != OUTPORT)
    %%
    %if N == 1
        %%Solve inline if matrix dimension is 1x1
        %<CholScalar(block)>
    %else
        %%call run-time function since matrix dimension is not 1x1 
        %if (needcopy)  %%copy input to output only if not in-place
            %<LibBlockCopyInputsToOutputs(INPORT, OUTPORT)>
        %endif
        MWDSP_Chol_%<dA>(\
                %<LibBlockOutputSignalAddr(OUTPORT,  "", "", 0)>, %<N>);
    %endif
%endfunction  %% Outputs

%% Function: CholScalar=========================================================
%%
%% Inline code for 1x1 matrix input
%function CholScalar(block) Output
    %if INP_COMPLEX
        %if DTYPE_ID == tSS_SINGLE
            %<LibBlockOutputSignal(OUTPORT, "", "", 0)>.im = 0.0F;
            %<LibBlockOutputSignal(OUTPORT, "", "", 0)>.re =\
                (real32_T)sqrt((real_T)(%<LibBlockInputSignal(INPORT, "", "", 0)>.re));
        %else
            %<LibBlockOutputSignal(OUTPORT, "", "", 0)>.im = 0.0;
            %<LibBlockOutputSignal(OUTPORT, "", "", 0)>.re =\
                sqrt(%<LibBlockInputSignal(INPORT, "", "", 0)>.re);
        %endif
    %else
        %if DTYPE_ID == tSS_SINGLE
            %<LibBlockOutputSignal(OUTPORT, "", "", 0)> =\
                (real32_T)sqrt((real_T)(%<LibBlockInputSignal(INPORT, "", "", 0)>));
        %else
            %<LibBlockOutputSignal(OUTPORT, "", "", 0)> =\
                sqrt(%<LibBlockInputSignal(INPORT, "", "", 0)>);
        %endif
    %endif
%endfunction

%% [EOF] sdspchol2.tlc

