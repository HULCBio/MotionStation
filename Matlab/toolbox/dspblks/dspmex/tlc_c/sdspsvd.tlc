%% $RCSfile: sdspsvd.tlc,v $
%% $Revision: 
%% $Date: 
%%
%% Abstract: TLC Code generation for Signal Processing Blockset SVD block.
%%
%% Copyright 1995-2003 The MathWorks, Inc.
%%

%implements sdspsvd "C"

%% Function: BlockTypeSetup ====================================================
%function BlockTypeSetup(block, system) void

    %<Include_rt_header(block,"dspsvd_rt")>
    %<Include_rt_header(block,"dspisfinite_rt")>
    %<Include_rt_header(block,"dspgivensrot_rt")>

%endfunction %% BlockTypeSetup

%% Function: BlockInstanceSetup ================================================
%%
%function BlockInstanceSetup(block, system) void
    %assign WANTV = SFcnParamSettings.WANTV   %%Forward or Backward

    %assign INPORT    = 0
    %assign OUTPORT_U = 0
    %assign OUTPORT_S = 1
    %assign OUTPORT_V = 2

    %%dimension of input matrix
    %assign NUM_INP_DIMS = LibBlockInputSignalNumDimensions(INPORT)
    %assign INPUT_DIMS   = LibBlockInputSignalDimensions(   INPORT)
    %assign M            = INPUT_DIMS[0]
    %assign N            = (NUM_INP_DIMS == 2) ? INPUT_DIMS[1] : 1
    %if M < N
        %assign Mnew = N
        %assign Nnew = M
    %else
        %assign Mnew = M
        %assign Nnew = N
    %endif

    %%Data types
    %assign DTYPE_ID     = LibBlockInputSignalDataTypeId(INPORT)
    %assign INP_COMPLEX  = LibBlockInputSignalIsComplex(INPORT)

    %assign block = block + INPORT + OUTPORT_U + OUTPORT_S + OUTPORT_V
    %assign block = block + DTYPE_ID + INP_COMPLEX + WANTV
    %assign block = block + M + N + Mnew + Nnew
%endfunction %% BlockInstanceSetup

%% Function: Outputs ===========================================================
%%
%function Outputs(block, system) Output
    /* Signal Processing Blockset SVD (%<ParamSettings.FunctionName>) - '%<Name>' */
    %assign dnam    = ["R", "C", "D", "Z"]                %% Data type
    %assign dtype   = (DTYPE_ID == tSS_SINGLE) ? 0 : 2    %% Double or single
    %assign dlet    = dnam[dtype+INP_COMPLEX]             %% R|C|D|Z
    %if WANTV == 1
        %if M >= N
            %assign outportu = LibBlockOutputSignalAddr(OUTPORT_U,  "", "", 0)
            %assign outportv = LibBlockOutputSignalAddr(OUTPORT_V,  "", "", 0)
        %else
            %assign outportv = LibBlockOutputSignalAddr(OUTPORT_U,  "", "", 0)
            %assign outportu = LibBlockOutputSignalAddr(OUTPORT_V,  "", "", 0)
        %endif
    %else
        %assign outportu = "NULL"
        %assign outportv = "NULL"
    %endif
    %%
    %assign arguments = LibBlockDWorkAddr(X, "", "", 0) + ", "     \
                        + STRING(Mnew) + ", "                      \
                        + STRING(Nnew) + ", "                      \
                        + LibBlockDWorkAddr(S,    "", "", 0) + ", "\
                        + LibBlockDWorkAddr(E,    "", "", 0) + ", "\
                        + LibBlockDWorkAddr(WORK, "", "", 0) + ", "\
                        + outportu + ", "                          \
                        + outportv + ", "                          \
                        + STRING(WANTV)
    MWDSP_SVD_Copy_%<dlet>(%<LibBlockInputSignalAddr(INPORT, "", "", 0)>,\
                 %<LibBlockDWorkAddr(X, "", "", 0)>,                     \
                 %<M>, %<N>);
    MWDSP_SVD_%<dlet>(%<arguments>);
    %assign copyportnum = WANTV ? OUTPORT_S : OUTPORT_U
    %assign P = M > N ? N : M
    MWDSP_SVD_CopyOutput_%<dlet>(%<LibBlockOutputSignalAddr(copyportnum,  "", "", 0)>,\
                       %<LibBlockDWorkAddr(S,    "", "", 0)>,                         \
                       %<P>);
%endfunction  %% Outputs

%% [EOF] sdspsvd.tlc

