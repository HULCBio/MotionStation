%% sdspinterp.tlc
%% Abstract: TLC for Signal Processing Blockset Interpolation block (sdspinterp)
%%
%% Copyright 1995-2003 The MathWorks, Inc.
%% $Revision: 1.6.4.2 $ $Date: 2004/04/12 23:08:49 $

%implements sdspinterp "C"

%include "dsplib.tlc"

%% function : BlockInstanceSetup===========================================
%%
%function BlockInstanceSetup(block, system) void

    %assign INPORT   = 0
    %assign OUTPORT  = 0
    %assign INTERP_PORT = 1
    %assign block   = block + INPORT + OUTPORT + INTERP_PORT 

%endfunction %%BlockInstanceSetup 

%% Function: BlockTypeSetup ================================================
%function BlockTypeSetup(block, system) void

    %<Include_rt_header(block,"dspinterp_rt")>

%endfunction  %%BlockTypeSetup


%% Function: Outputs ==========================================================
%%
%% Abstract:
%%
%function Outputs(block, system) Output
    %%
    /* Signal Processing Blockset Interp (%<ParamSettings.FunctionName>) - '%<Name>' */
    %%
    %assign dtype_in = LibBlockInputSignalDataTypeName(INPORT,"")
    %assign inSingle = (dtype_in == "real32_T") ? 1 : 0
    %assign str      = (%<SFcnParamSettings.LinearMode> == 1) ? (inSingle ? "_Lin_R" : "_Lin_D") : (inSingle ? "_FIR_R" : "_FIR_D")
    %assign argstr   = (%<SFcnParamSettings.LinearMode> == 1) ? "" : ", filt, filtlen, nphases"
	%%
  {
    %<dtype_in>                 *y = %<LibBlockOutputSignalAddr(OUTPORT,"","",0)>; /* Pointer to output data */
    const %<dtype_in> * const    u = %<LibBlockInputSignalAddr(INPORT,"","",0)>;   /* Pointer to Input data  */
  %if SFcnParamSettings.IsSourceInternal == 1
    const %<dtype_in>  *iptr 	  = %<LibBlockParameterAddr(Points,"","",0)>;     /* Pointer to Interpolation indices */
  %else
    const %<dtype_in>  *iptr 	  = %<LibBlockInputSignalAddr(INTERP_PORT,"","",0)>; /* Pointer to Interpolation indices */
  %endif
    const int_T        nSamps = %<SFcnParamSettings.NSamps>;  /* Number of samples/channel for the input data */
    int_T              nChans = %<SFcnParamSettings.NChans>;  /* Number of channels for the input data */
    const int_T        nSampsI= %<SFcnParamSettings.NSampsI>; /* Number of samples/channel for the interpolation indices data */
    const int_T        nChansI= %<SFcnParamSettings.NChansI>; /* Number of channels for the interpolation indices data */
  %if (%<SFcnParamSettings.LinearMode> == 0)
    const %<dtype_in> * const filt = %<LibBlockParameterAddr(FilterArgs,"","",0)>; /* Pointer to Filter coefficients (for FIR mode) */
    const int_T       filtlen = %<SFcnParamSettings.filtLen>; /* Filter length for FIR interpolation mode, 0 for Linear mode */
    const int_T       nphases = %<SFcnParamSettings.nPhases>; /* Number of phases for FIR interpolation mode, 0 for Linear mode */
  %endif

      MWDSP_Interp%<str>(y, u, iptr, nSamps, nChans, nSampsI, nChansI %<argstr>);
    %%
  }
%endfunction %% Outputs

%% [EOF: sdspinterp.tlc]
