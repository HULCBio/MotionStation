%% $RCSfile: sdspcontig.tlc,v $
%% $Revision: 1.9.4.2 $ $Date: 2004/04/12 23:08:14 $
%%
%% TLC for Signal Processing Blockset contiguous copy block 
%%

%% Copyright 1995-2003 The MathWorks, Inc.

%implements sdspcontig "C"

%include "dsplib.tlc"

%function Outputs(block, system) Output
    /* Signal Processing Blockset Contiguous Copy block (%<ParamSettings.FunctionName>): %<Name> */
    %%
    %% Only generate code if output buffer does not share the input buffer area.
    %%
    %% There are two reasons why we might need to generate code here:
    %%  1) Input is discontiguous and therefore inputs cannot overwrite outputs.
    %%     This is exactly the situation for which we know we want to generate code,
    %%     i.e., to make a contiguous copy of discontiguous inputs.
    %%
    %%  2) Input is contiguous, but some other block is overwriting the input area.
    %%     Unfortunately, this case generates code where none should be required.
    %%     In this case, user should eliminate this instance of the block.
    %%
    %if LibBlockInputSignalBufferDstPort(0) == 0
       /* Input data is contiguous - no copy needed */
    %else
	%%
        %% Inputs not overwriting outputs - copy data:
	%%
        %if IsInputPortContiguous(block, 0)
	   /*
	    * Input data is already contiguous, but output data could not overwrite
	    * the input data area (i.e., data needs to be copied to output).
	    * This could be due to another block overwriting the input data area.
	    * Consider removing block "%<Name>" from model.
	    */
	%endif
	%%
	%assign rollVars = ["U","Y"]
	%roll sigIdx = RollRegions, lcv = RollThreshold, block, "Roller", rollVars
	   %assign y = LibBlockOutputSignal(0, "", lcv, sigIdx)
	   %assign u = LibBlockInputSignal(0, "", lcv, sigIdx)
	   %<y> = %<u>;
	%endroll
    %endif

%endfunction

%% [EOF] sdspcontig.tlc
