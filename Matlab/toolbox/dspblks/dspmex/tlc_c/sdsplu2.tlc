%% $RCSfile: sdsplu2.tlc,v $

%% $Revision: 1.3.4.2 $Date: 2004/04/12 23:08:54 $
%% Copyright 1995-2003 The MathWorks, Inc.
%%
%% Abstract: TLC Code generation for Signal Processing Blockset LU Factorization block (for sdsplu2.c)
%%

%implements sdsplu2 "C"

%% Function: BlockTypeSetup ====================================================
%function BlockTypeSetup(block, system) void

    %<Include_rt_header(block,"dsplu_rt")>

%endfunction %% BlockTypeSetup

%% Function: BlockInstanceSetup ===============================================
%%
%function BlockInstanceSetup(block, system) void
  %%
  %assign INPORT_A   = 0
  %assign OUTPORT_LU = 0
  %assign OUTPORT_P  = 1
  %assign OUTPORT_S  = 2
  %%
  %assign NO_S_OUTPORT    = SFcnParamSettings.No_S_Outport
     
  %%Get data type and complexity profiles
  %assign DTYPE_ID_INP1    = LibBlockInputSignalDataTypeId(INPORT_A)
  %assign INP1_COMPLEX     = LibBlockInputSignalIsComplex(INPORT_A)  

  %%Get the order of input
  %assign N                = LibBlockOutputSignalWidth(OUTPORT_P)
  
  %%
  %assign block = block + INPORT_A + OUTPORT_LU + OUTPORT_P + OUTPORT_S
  %assign block = block + DTYPE_ID_INP1 + INP1_COMPLEX
  %assign block = block + N + NO_S_OUTPORT 
  %%
%endfunction %% BlockInstanceSetup


%%%%%%%%%%%%%%%%%%%%% 
%% Function: Outputs ===========================================================
%%
%function Outputs(block, system) Output
/* Signal Processing Blockset LU Factorization (%<ParamSettings.FunctionName>) - '%<Name>' */
%assign INP1_SINGLE = (DTYPE_ID_INP1 == tSS_SINGLE) ? 1 : 0    %% Double or single
%assign need_copy = (LibBlockInputSignalBufferDstPort(INPORT_A) != OUTPORT_LU)
        %if (need_copy)  %%copy input to output only if not in-place
            %<LibBlockCopyInputsToOutputs(INPORT_A, OUTPORT_LU)>
        %endif
%%   
%%Call run-time function based on data type and ftype
    %assign dcast  = ["real32_T *", "creal32_T *", "real_T *", "creal_T *"]
    %assign dnam   = ["R", "C", "D", "Z"]                  %% Data type
    %assign INP1_SINGLE = (DTYPE_ID_INP1 == tSS_SINGLE)? 0 : 2    %% Double or single
    %assign dCTi    = dcast[INP1_SINGLE+INP1_COMPLEX]	    %% Find the right character
    %assign dCTp    = dcast[INP1_SINGLE]	    %% Find the right character
    %assign dFUNC   = dnam[INP1_SINGLE+INP1_COMPLEX] 
    
%%Create function name based on above identified types
    %if (NO_S_OUTPORT)
    %assign y_S   = LibBlockDWorkAddr(STATUS_IDX, "", "", 0)    
          MWDSP_lu_%<dFUNC>(\
          (%<dCTi>)%<LibBlockOutputSignalAddr(OUTPORT_LU, "", "", 0)>,\
          (%<dCTp>)%<LibBlockOutputSignalAddr(OUTPORT_P,  "", "", 0)>,\
          %<N>,\
          %<y_S>);
    %else
          MWDSP_lu_%<dFUNC>(\
          (%<dCTi>)%<LibBlockOutputSignalAddr(OUTPORT_LU, "", "", 0)>,\
          (%<dCTp>)%<LibBlockOutputSignalAddr(OUTPORT_P,  "", "", 0)>,\
          %<N>,\
          %<LibBlockOutputSignalAddr(OUTPORT_S,  "", "", 0)>);
    %endif

%endfunction  %% Outputs    
    

%% [EOF] sdsplu2.tlc
