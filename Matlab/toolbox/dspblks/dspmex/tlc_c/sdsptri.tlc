%% $RCSfile: sdsptri.tlc,v $
%% $Revision: 1.10.4.2 $ 
%% $Date: 2004/04/12 23:09:53 $
%%
%% Copyright 1995-2003 The MathWorks, Inc.
%%
%% Abstract: extract lower/upper triangular part

%implements sdsptri "C"

%% Function: BlockInstanceSetup ===============================================
%%
%% Abstract:
%%      Rename the S-Function parameter for easy reference.
%%
%function BlockInstanceSetup(block, system) void
  %%
  %<LibRenameParameter(block, P2, "Extract")>
  %<LibRenameParameter(block, P1, "Cols")>
  %%
%endfunction 

%% Function: Outputs ==========================================================
%%
%function Outputs(block, system) Output
  %%
  %assign UPPER = 1
  %assign LOWER = 2
  %%
  %assign INPORT    = 0
  %assign OUTPORT   = 0
  %assign extract   = LibBlockParameterValue(Extract,0)
  %assign cols      = CAST("Number", LibBlockParameterValue(Cols,0))
  %assign width     = CAST("Number", LibDataInputPortWidth(0))
  %assign rows      = CAST("Number", width/cols)
  %assign cplx      = LibBlockInputSignalIsComplex(INPORT) != 0
  %assign dtype     = cplx ? "creal_T" : "real_T"  
  %assign need_copy = (LibBlockInputSignalBufferDstPort(INPORT) != OUTPORT)
  %assign uplow     = (extract == UPPER) ? "Upper" : "Lower"
  %%
  %%
  /* Signal Processing Blockset Extract %<uplow> Triangular Matrix (%<ParamSettings.FunctionName>) - %<Name> */
  %%
  %if !IsInputPortContiguous(block,INPORT)
    %<LibDiscontiguousInputError(block)>
  %endif   
  %if need_copy
    %%
    %assign compare = (extract == UPPER) ? ">" : "<"
    {
      %<dtype> *u = %<LibBlockInputSignalAddr(INPORT, "", "", 0)>;
      %<dtype> *y = %<LibBlockOutputSignalAddr(OUTPORT, "", "", 0)>;
      int_T    nc;

      for(nc=0; nc++ < %<cols>; ) {
	int_T nr; 
	for (nr=0; nr++ < %<rows>; ) {
	  %if !cplx
	    *y++ = (nr %<compare> nc) ? 0.0 : *u;
	    u++;
	  %else
	    if(nr %<compare> nc) {
	      y->re     = 0.0;
	      (y++)->im = 0.0;
	      u++;
	    } else {
	      *y++ = *u++;
	    }	    
	  %endif
	}
      }
    }
  %else
    %%
    /* In-place algorithm. */
    %%
    %if width !=1 
      %%
      %if extract == UPPER
	{
	  %<dtype> *y = %<LibBlockOutputSignalAddr(OUTPORT, "", "", 0)>;
	  int_T c;    
	  
	  %assign mincols = MIN(cols,rows)
	  for(c=0; c < %<mincols>; c++) {
	    int_T r;
	    y += c+1;
	    for (r=c+1; r++ < %<rows>; ) {
	      %if !cplx
		*y++ = 0.0;
	      %else
		y->re     = 0.0;
		(y++)->im = 0.0;
	      %endif
	    }
	  }            
	}
      %else %% extract == LOWER
	{
	  %<dtype> *y = %<LibBlockOutputSignalAddr(OUTPORT, "", "", rows)>;
	  int_T c;

	  for(c=1; c < %<cols>; c++) {
	    int_T r;
	    int_T cc = MIN(c, %<rows>);
	    for (r=0; r++ < cc; ) {
	      %if !cplx
		*y++ = 0.0;
	      %else
		y->re     = 0.0;
		(y++)->im = 0.0;
	      %endif
	    }
	    y += (%<rows>-cc);
	  }
	}
      %endif
    %else
      %%
      /* Scalar output equals input.  No code needed. */
      %%
    %endif
  %endif
  
%endfunction

%% [EOF] sdsptri.tlc

