%% sdspsqenc.tlc
%% Abstract: TLC for Signal Processing Blockset block to do encoding for scalar quantization. (sdspsqenc)
%%
%% Copyright 1995-2003 The MathWorks, Inc.
%% $Revision: 1.1.6.3 $ $Date: 2003/12/06 15:28:06 $


%implements "sdspsqenc" "C"
%include "dsplib.tlc"

%% Function: BlockInstanceSetup ===============================================
%%
%function BlockInstanceSetup(block, system) void
  %%
  %% All fixed-point blocks call the fixed-point setup function
  %%
  %<FixPt_Setup(block, system)>
  %%
  %assign INPORT_U     = 0
  %assign INPORT_BP    = 1
  %assign INPORT_CB    = 2
  %assign OUTPORT_IDX  = 0
  %assign OUTPORT_QU   = 1
  %% other outport's number (see below)
  %%
  %assign UdTypeName    = LibBlockInputSignalDataTypeName(INPORT_U,"")
  %assign IdxDTypeName  = LibBlockOutputSignalDataTypeName(OUTPORT_IDX,"")
  %%
  %assign isParamSrcMask   = SFcnParamSettings.isParamSrcMask  
  %assign isBoundedBP      = SFcnParamSettings.isBoundedBP 
  %assign isSearchBin      = SFcnParamSettings.isSearchBin 
  %assign isTieBrHigh      = SFcnParamSettings.isTieBrHigh
  %%
  %assign NumberOfBoundaryPoints   = SFcnParamSettings.NumberOfBoundaryPoints
  %assign NumberOfCodewords   = SFcnParamSettings.NumberOfCodewords
  %%
  %assign need_qu_outport      = SFcnParamSettings.need_qu_outport
  %assign need_qerror_outport  = SFcnParamSettings.need_qerror_outport
  %assign need_status_outport  = SFcnParamSettings.need_status_outport
  %assign need_codebook        = (need_qu_outport || need_qerror_outport)
  %%
  %assign OUTPORT_QERR   = (need_qu_outport)? 2: 1
  %assign OUTPORT_STATUS = need_qu_outport + need_qerror_outport + 1
  %%   
  %assign InputWidth       = LibBlockInputSignalWidth(INPORT_U)
  %%
  %assign GEorGTlin        = (isTieBrHigh)? ">="  :   ">"
  %assign LTorLEbin        = (isTieBrHigh)? "<"   :   "<="
  %%
  %assign HighLowCommentLin = (isTieBrHigh)? ">= for HIGHER index" : ">  for LOWER index"
  %assign HighLowCommentBin = (isTieBrHigh)? "<  for HIGHER index" : "<= for LOWER index"
  %%
  %% I/O port data types
  %assign inUdTYPE       = FixPt_GetInputDataType(INPORT_U)
  %assign outIDXdTYPE    = FixPt_GetOutputDataType(OUTPORT_IDX)
  %%
  %assign block         = block + INPORT_U  + INPORT_BP + INPORT_CB + OUTPORT_IDX ...
                                + OUTPORT_QU + OUTPORT_QERR + OUTPORT_STATUS ...
                                + UdTypeName + IdxDTypeName + isParamSrcMask ...
                                + isBoundedBP + isSearchBin + isTieBrHigh ...
                                + NumberOfBoundaryPoints + NumberOfCodewords + need_qu_outport + need_qerror_outport + need_status_outport ...
                                + need_codebook + InputWidth + GEorGTlin + LTorLEbin + HighLowCommentLin + HighLowCommentBin ...
				+ inUdTYPE + outIDXdTYPE
%endfunction %% BlockInstanceSetup


%% Function: Outputs ==========================================================
%%
%function Outputs(block, system) Output
  %%
  /* Signal Processing Blockset Scalar Quantizer Encoder (%<ParamSettings.FunctionName>) - '%<Name>' */
  %%
  %if FixPt_DataTypeIsFloat(inUdTYPE)
    %%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% FLOATING POINT CODE GENERATION  %%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%
    {
    %<FltPtInlineCode(block)>
    }
    %%
  %else
    %%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% FIXED-POINT CODE GENERATION     %%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%
    {
    %<FixPtInlineCode(block)>
    }
    %%
  %endif
%%
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Subfunction: FltPtInlineCode
%%
%% FLOATING POINT CODE GENERATION             
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%function FltPtInlineCode(block) Output
%%
    %%--------Input pointers----------
    %%
    const %<UdTypeName> *InputU = %<LibBlockInputSignalAddr(INPORT_U, "", "", 0)>;
    %%
    %if (isParamSrcMask)
    const %<UdTypeName> *BoundaryPoints = %<LibBlockParameterAddr(Boundary,"","",0)>; 
    %else
    const %<UdTypeName> *BoundaryPoints = %<LibBlockInputSignalAddr(INPORT_BP, "", "", 0)>;
    %endif
    %%  
    %if (need_codebook)
    %if (isParamSrcMask)
    const %<UdTypeName> *Codebook = %<LibBlockParameterAddr(Codebook,"","",0)>; 
    %else 
    const %<UdTypeName> *Codebook = %<LibBlockInputSignalAddr(INPORT_CB, "", "", 0)>;
    %endif
    %endif
    %%
    %%--------Output pointers----------
    %%
    %<IdxDTypeName> *Yidx = %<LibBlockOutputSignalAddr(OUTPORT_IDX, "", "", 0)>;
    %%
    %if (need_qu_outport)
    %<UdTypeName> *Ycw = %<LibBlockOutputSignalAddr(OUTPORT_QU, "", "", 0)>;
    %endif
    %%
    %if (need_qerror_outport)
    %<UdTypeName> *Yqerr = %<LibBlockOutputSignalAddr(OUTPORT_QERR, "", "", 0)>;
    %endif
    %%
    %if (need_status_outport)
    boolean_T *Ystatus = %<LibBlockOutputSignalAddr(OUTPORT_STATUS, "", "", 0)>;
    %endif
    %%
    %%--------Main Body of the program----------
    %%
    %if (!isSearchBin) %%=====Linear Search=====
    int_T i;
    for (i = 0; i < %<InputWidth>; i++) {
        Yidx[i] = 0; 
	%assign numBP_ = (isBoundedBP)? NumberOfBoundaryPoints -1: NumberOfBoundaryPoints
        while ((Yidx[i] < %<numBP_>) && (InputU[i] %<GEorGTlin> BoundaryPoints[(int_T)Yidx[i]]))  { (Yidx[i])++; } /* %<HighLowCommentLin> */
	%%
        %if (isBoundedBP)
        /* index */ 
        Yidx[i] = (Yidx[i] == 0) ? 0 : (Yidx[i] -1);
	%endif
	%%
	%if (need_qu_outport)
        /* Quantized value */
        Ycw[i] = Codebook[(int_T)Yidx[i]];
	%endif
	%%
	%if (need_qerror_outport)
        Yqerr[i] = InputU[i] - Codebook[(int_T)Yidx[i]];;
        %endif
	%%
	%if (need_status_outport)
        if ((InputU[i] < BoundaryPoints[0]) || (InputU[i] > BoundaryPoints[%<NumberOfBoundaryPoints>-1])){
	    Ystatus[i] = (boolean_T)1;
	}
	else{
	    Ystatus[i] = (boolean_T)0;
	}
        %endif
	%%
    }%% end of for
    %else            %%=====Binary Search=====
      %%
      %assign i_or_iMinus1 = (isBoundedBP)?"i": "i-1"
     int_T j;
     for (j=0;j<%<InputWidth>;j++) {
      int_T i;
      int_T iL = 0;
      int_T iU = %<NumberOfCodewords> ;
      
      while (iU > iL + 1) {
        i = (iL + iU) / 2;
        if (InputU[j] %<LTorLEbin> BoundaryPoints[%<i_or_iMinus1>]) /* %<HighLowCommentBin> */
          iU = i;
        else
          iL = i;
      }
      /* Return the index */
      Yidx[j] =  iL;
	%%
	%if (need_qu_outport)
        /* Quantized value */
        Ycw[j] = Codebook[(int_T)Yidx[j]];
	%endif
	%%
	%if (need_qerror_outport)
        Yqerr[j] = InputU[j] - Codebook[(int_T)Yidx[j]];
        %endif
	%%
	%if (need_status_outport)
        if ((InputU[j] < BoundaryPoints[0]) || (InputU[j] > BoundaryPoints[%<NumberOfBoundaryPoints>-1])){
	    Ystatus[j] = (boolean_T)1;
	}
	else{
	    Ystatus[j] = (boolean_T)0;
	}
        %endif
	%%
    }%% end of for
    %endif
%endfunction   %% FltPtInlineCode



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Subfunction: FixPtInlineCode
%%
%% FIXED POINT CODE GENERATION             
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%function FixPtInlineCode(block) Output
%% 
    %%--------Input pointers----------
    %%
    %assign i_or_j = (!isSearchBin) ? "i" : "j"
    %assign uLabel = LibBlockInputSignal(INPORT_U, "%<i_or_j>", "", 0)   %% get uLabel = mInputU[i or j]
    %%
    %assign i_or_iMinus1 = (isBoundedBP)?"i": "i-1"
    %if (isParamSrcMask)
    %assign  bpLabel0      = LibBlockParameter(Boundary,"0","",0) %% get bpLabel=BoundaryPoints[0]
    %assign  bpLabelY      = LibBlockParameter(Boundary,"(int_T)Yidx[i]","",0) %% get bpLabel=BoundaryPoints[(int_T)Yidx[i]]
    %assign  bpLabelnBPmi1 = LibBlockParameter(Boundary,"%<NumberOfBoundaryPoints>-1","",0) %% get bpLabel=BoundaryPoints[%<NumberOfBoundaryPoints>-1]
    %assign  bpLabeli      = LibBlockParameter(Boundary,"%<i_or_iMinus1>","",0) %% get bpLabel=BoundaryPoints[%<i_or_iMinus1>]
    %else
    %assign  bpLabel0      = LibBlockInputSignal(INPORT_BP, "0", "", 0) %% same as above
    %assign  bpLabelY      = LibBlockInputSignal(INPORT_BP, "(int_T)Yidx[i]", "", 0) %% same as above
    %assign  bpLabelnBPmi1 = LibBlockInputSignal(INPORT_BP, "%<NumberOfBoundaryPoints>-1", "", 0) %% same as above
    %assign  bpLabeli      = LibBlockInputSignal(INPORT_BP, "%<i_or_iMinus1>", "", 0) %% same as above
    %endif
    %%  
    %if (need_codebook)
    %if (isParamSrcMask)
    %assign  cbLabel = LibBlockParameter(Codebook,"(int_T)Yidx[%<i_or_j>]","",0) %% get cbLabel=mCodebook[(int_T)Yidx[i or j]]
    %else 
    %assign  cbLabel = LibBlockInputSignal(INPORT_CB, "(int_T)Yidx[%<i_or_j>]", "", 0) %% same as above
    %endif
    %endif
    %%
    %%--------Output pointers----------
    %%
    %<IdxDTypeName> *Yidx = %<LibBlockOutputSignalAddr(OUTPORT_IDX, "", "", 0)>;
    %%
    %if (need_qu_outport)
    %assign YcwLabel = LibBlockOutputSignal(OUTPORT_QU, "%<i_or_j>", "", 0) 
    %endif
    %%
    %if (need_qerror_outport)
    %assign YqerrLabel = LibBlockOutputSignal(OUTPORT_QERR, "%<i_or_j>", "", 0) 
    %endif
    %%
    %if (need_status_outport)
    boolean_T *Ystatus = %<LibBlockOutputSignalAddr(OUTPORT_STATUS, "", "", 0)>;
    %endif
    %%
    %%--------Main Body of the program----------
    %%
    %if (!isSearchBin) %%=====Linear Search=====
    int_T i;
    for (i = 0; i < %<InputWidth>; i++) {
        Yidx[i] = 0; 
	%assign numBP_ = (isBoundedBP)? NumberOfBoundaryPoints -1: NumberOfBoundaryPoints
        while ((Yidx[i] < %<numBP_>) && (%<uLabel> %<GEorGTlin> %<bpLabelY>))  { (Yidx[i])++; } /* %<HighLowCommentLin> */
	%%
        %if (isBoundedBP)
        /* index */ 
        Yidx[i] = (Yidx[i] == 0) ? 0 : (Yidx[i] -1);
	%endif
	%%
	%if (need_qu_outport)
        /* Quantized value */
        %<FixPt_Fix2FixAlwaysOutput(YcwLabel, inUdTYPE, ...
                                    cbLabel,  inUdTYPE, ...                                            
                                    FixPtRoundingMode, FixPtSaturationMode)>\            %% %<YcwLabel> = %<cbLabel>; 
        %%%%%% %<YcwLabel> = %<cbLabel>;
	%endif
	%%
	%if (need_qerror_outport)
        %<FixPt_Fix2FixAlwaysOutput(YqerrLabel, inUdTYPE, ...
                                    uLabel,  inUdTYPE, ...                                            
                                    FixPtRoundingMode, FixPtSaturationMode)>\            %% %<YqerrLabel>  = %<uLabel>; 

	%<FixPt_AccumNeg_Easy(YqerrLabel, inUdTYPE, ...
                              cbLabel,    inUdTYPE, ...
                              FixPtRoundingMode, FixPtSaturationMode)>\           %% %<YqerrLabel> -= %<cbLabel>;;
	
        %%%%%    %<YqerrLabel> = %<uLabel> - %<cbLabel>;
        %endif
	%%
	%if (need_status_outport)
        if ((%<uLabel> < %<bpLabel0>) || (%<uLabel> > %<bpLabelnBPmi1>)){
	    Ystatus[i] = (boolean_T)1;
	}
	else{
	    Ystatus[i] = (boolean_T)0;
	}
        %endif
	%%
    }%% end of for
    %else            %%=====Binary Search=====
      %%
      %assign i_or_iMinus1 = (isBoundedBP)?"i": "i-1"
     int_T j;
     for (j=0;j<%<InputWidth>;j++) {
      int_T i;
      int_T iL = 0;
      int_T iU = %<NumberOfCodewords> ;
      
      while (iU > iL + 1) {
        i = (iL + iU) / 2;
        if (%<uLabel> %<LTorLEbin> %<bpLabeli>) /* %<HighLowCommentBin> */
          iU = i;
        else
          iL = i;
      }
      /* Return the index */
      Yidx[j] =  iL;
	%%
	%if (need_qu_outport)
        /* Quantized value */
        %<FixPt_Fix2FixAlwaysOutput(YcwLabel, inUdTYPE, ...
                                    cbLabel,  inUdTYPE, ...                                            
                                    FixPtRoundingMode, FixPtSaturationMode)>\            %% %<YcwLabel> = %<cbLabel>; 
	%endif
	%%
	%if (need_qerror_outport)
        %<FixPt_Fix2FixAlwaysOutput(YqerrLabel, inUdTYPE, ...
                                    uLabel,  inUdTYPE, ...                                            
                                    FixPtRoundingMode, FixPtSaturationMode)>\            %% %<YqerrLabel>  = %<uLabel>; 

	%<FixPt_AccumNeg_Easy(YqerrLabel, inUdTYPE, ...
                              cbLabel,    inUdTYPE, ...
                              FixPtRoundingMode, FixPtSaturationMode)>\           %% %<YqerrLabel> -= %<cbLabel>;;
        %%%% %<YqerrLabel> = %<uLabel> - %<cbLabel>;
        %endif
	%%
	%if (need_status_outport)
        if ((%<uLabel> < %<bpLabel0>) || (%<uLabel> > %<bpLabelnBPmi1>)){
	    Ystatus[j] = (boolean_T)1;
	}
	else{
	    Ystatus[j] = (boolean_T)0;
	}
        %endif
	%%
    }%% end of for
    %endif
%endfunction    %%FixPtInlineCode

%% [EOF] sdspsqenc.tlc

