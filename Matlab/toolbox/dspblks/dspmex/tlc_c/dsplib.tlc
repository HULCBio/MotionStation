%%
%% dsplib.tlc - Helper functions for Signal Processing Blockset code generation
%%
%% Copyright 1995-2003 The MathWorks, Inc.
%% $Revision: 1.61.4.4 $ $Date: 2004/04/12 23:07:58 $

%if EXISTS("_DSPLIB_") == 0
%assign _DSPLIB_ = 1


%% ===========================================================================

%assign MATLAB_ROOT_TMP = FEVAL("matlabroot")
%assign MATLAB_ROOT     = FEVAL("strrep", MATLAB_ROOT_TMP, "\\", "/")

%% Include the standard Signal Processing Blockset C header file in all generated code:
%%
%openfile buffer
    #include "dsp_rt.h" /* Signal Processing Blockset general run time support functions */
%closefile buffer
%<LibCacheDefine(buffer)>

%% Include Signal Processing Blockset fixed-point TLC arithmetic function library
%include "dspfixptlib.tlc"


%% ===========================================================================
%% Signal Processing Blockset code-gen framework (fcn definitions, etc.):
%% ===========================================================================


%% Function: JustCreatedCompiledModelRecord ==================================
%% Abstract:
%%   Checks for CompiledModel.recordName
%%   If record already exists, return with a 0 (false)
%%   If record does not exist,
%%        create recordName under CompiledModel
%%        return with 1 (true)
%%
%%   Example usage:
%%
%%     %if JustCreatedCompiledModelRecord("my_cache")
%%        %% This is the first time the record was created
%%        %% <first-time code goes here>
%%     %else
%%        %% 2nd or subsequent call (record already exists!)
%%        %% <subsequent code goes here>
%%     %endif
%%
%function JustCreatedCompiledModelRecord(recordName) void

    %assign fullRecordName = "::CompiledModel." + recordName
    %%
    %if !EXISTS("%<fullRecordName>")
        %assign retval = 1  %% First call

        %% Create record since it does not yet exist:
        %assign %<recordName> = 1
        %assign ::CompiledModel = ::CompiledModel + %<recordName>
        %undef %<recordName>  %% Remove from current scope
    %else
        %assign retval = 0  %% Subsequent call

    %endif
    %return retval

%endfunction %% JustCreatedCompiledModelRecord


%% Function: Include_rt_header ===============================================
%%
%% Abstract:
%%    Cache the include file for run-time support library
%%
%% Example usage:
%%     %<Include_rt_header(block, "dspfft_rt")>
%%
%%     This will add:
%%
%%            #include "dspfft_rt.h"
%%
%%     to the model_common.h file.
%%
%function Include_rt_header(block, libName) void

    %assign recName = libName + "_include"

    %if JustCreatedCompiledModelRecord(recName)
        %% Include the standard Signal Processing Blockset C header file in all generated code:
        %%
        %openfile buffer
            %assign fileDotH = libName + ".h"
            #include "%<fileDotH>" /* Signal Processing Blockset run time support library */
        %closefile buffer
        %<LibCacheDefine(buffer)>
    %endif

%endfunction %% Include_rt_header

%% Function: DSPLibBlockParameterDataTypeId
%% Abstract:
%%    Returns the stored RTP datatype ID.
%% Note:
%%    This is different from LibBlockParameterDataTypeId in that
%%    it returns the OriginalDataTypeIdx field, not the DataTypeIdx field.
%%    For example, if an sfix16_En13 quantity was stored in SOME_RTP,
%%      LibBlockParameterDataTypeId(SOME_RTP)    returns 4
%%      DSPLibBlockParameterDataTypeId(SOME_RTP) returns 13
%%      where 4 is the datatype ID corresponding to an SS_INT16    datatype
%%      and  13 is the datatype ID corresponding to an sfix16_En13 datatype
%%
%function DSPLibBlockParameterDataTypeId(param) void
  %return param.OriginalDataTypeIdx
%endfunction %% DSPLibBlockParameterDataTypeId

%% Function: DSPFixPt_GetParameterDataType
%% Abstract:
%%    Returns the FixPt datatype structure corresponding to the
%%    specified datatype ID.
%% Note:
%%    This is different from FixPt_GetParameterDataType, which 
%%    has three input arguments:
%%       - an N-by-M matrix of datatype IDs
%%       - a 'row' specifier integer, i
%%       - a 'col' specifier integer, j
%%    The FixPt_GetParameterDataType function then returns the
%%    (i,j) element of the specified matrix of datatype IDs.
%%
%%    The DSPFixPt_GetParameterDataType function, however,
%%    returns the FixPt datatype information structure corresponding
%%    to the datatype ID of the specified parameter.
%%    The returned structure contains various fields like:
%%       .NativeType, .Name, .ComplexName, .ActualBits, .Bias, etc
%%
%function DSPFixPt_GetParameterDataType(param) void
  %return FixPt_GetDataTypeFromIndex(DSPLibBlockParameterDataTypeId(param))
%endfunction %% DSPFixPt_GetParameterDataType

%% Function: UsesParameterFile =============================================
%% Abstract:
%%    Returns true (1) if the current code-gen target employs a
%%    "parameter file", e.g., <model>_prm.h.  Returns 0 otherwise.
%%
%%    This function is typically called by block TLC files that
%%    write a function argument cache.  The location of the cache
%%    is ideally the parameter file, but for targets that don't support
%%    it, the location is in the generated source code itself.
%%    This function determines which place to render the cache code.
%%
%% NOTE!
%%    This function might need to be updated whenever a new target
%%    is introduced (e.g., a new "CodeFormat" setting).
%%
%function UsesParameterFile(system) void

  %switch CodeFormat
    %case "RealTime"
    %case "Embedded-C"
		%%
		%% List the CodeFormat of all targets that are known to use
		%% a <model>_prm.h file here!
		%%
		%return 1

    %default
	  %%
	  %% Warn the user that this is not the best possible generated code:
	  %%
      %if RTWVerbose
		  %assign recName = "DSP_ArgCache_Warning"
		  %if JustCreatedCompiledModelRecord(recName)
			%selectfile STDOUT

### '%<CodeFormat>' target does not use a parameter file - 
###     inlining Signal Processing Blockset Run-time Library function argument caches.

            %selectfile NULL_FILE
	      %endif
	 %endif
	 %%
     %return 0
  %endswitch

%endfunction %% UsesParameterFile


%% Function: MAX =============================================================
%%
%% Abstract:  Return the maxof two variables
%%
%function MAX(a,b)

%return ((a > b) ? a : b)

%endfunction


%% Function: MIN =============================================================
%%
%% Abstract:  Return the min of two variables
%function MIN(a,b)

%return ((a < b) ? a : b)

%endfunction


%% Function: IsInputPortContiguous ===========================================
%%
%% Abstract: Determine if an input port's data is contiguous in memory.
%%
%function IsInputPortContiguous(block,port)

%return (STRING(block.Connections.InputPortContiguous[port]) == "yes")

%endfunction


%% Function: LibGetNumberOfElements ==========================================
%%
%% Abstract: Get the number of elements in a parameter.
%%           Equivalent to mxGetNumberOf Elements
%%
%function LibGetNumberOfElements(X) void

%return SIZE(X,0)*SIZE(X,1)

%endfunction %% LibGetNumberOfElements


%% Function: LibBlockInputSignalIsFullMatrix ==================================
%%
%% Abstract:  Return the max of two variables
%%
%function LibBlockInputSignalIsFullMatrix(port) Output

  %assign numDims   = LibBlockInputSignalNumDimensions(port)
  %assign dims      = LibBlockInputSignalDimensions(port)  
  %%
  %return ((numDims > 1) && (dims[0] != 1) && (dims[1] != 1))

%endfunction %% LibBlockInputSignalIsFullMatrix


%% Function: getInportSamps ==================================================
%% Abstract:
%%   This is the analog of "the first half" of the simulation function getInportSampsAndChans()
%%   in dsp_mtrx_sim.c
%%
%function getInportSamps(port)

    %assign dims   = LibBlockInputSignalDimensions(port)
    %assign nSamps = (LibBlockInputSignalIsFrameData(port) || LibBlockInputSignalIsFullMatrix(port)) ? dims[0] : LibBlockInputSignalWidth(port)
    %return nSamps

%endfunction %% getInportSamps


%% Function: getInportChans ==================================================
%% Abstract:
%%   This is the analog of "the other half" of the simulation function getInportSampsAndChans()
%%   in dsp_mtrx_sim.c
%%
%function getInportChans(port) void

    %assign dims   = LibBlockInputSignalDimensions(port)
    %assign nChans = (LibBlockInputSignalIsFrameData(port) || LibBlockInputSignalIsFullMatrix(port))  ? dims[1] : 1
    %return nChans

%endfunction %% getInportChans


%% Function: IsModelMultiTasking =============================================
%%
%% Abstract: Determine if the model is in multitasking mod
%%
%function IsModelMultiTasking() void

%if CompiledModel.SolverType == "FixedStep"
    %assign isMultiTasking = (CompiledModel.FixedStepOpts.SolverMode == "MultiTasking")
%else 
    %assign isMultiTasking = 0
%endif
 
%return isMultiTasking

%endfunction %% IsModelMultiTasking


%% Function: LibDiscontiguousInputError ======================================
%%
%% Abstract: Error message and exit fucntion for blocks that do not support
%%           codegen for discontiguous inputs.
%%
%function LibDiscontiguousInputError(block)

  %assign dspErrorMsg = ("Cannot generate code for discontiguous inputs for "  \
  "block '%<Name>' (%<ParamSettings.FunctionName>).  Consider inserting the "    \
  "Contiguous Copy Block before the input to this block.  The Contiguous Copy "\
  "block is in the Signal Processing Blockset/Signal Management/Signal Attributes library.")
  %exit %<dspErrorMsg>
  
%endfunction


%% Function: ErrorIfDiscontiguous
%%
%% Issues an error if the input port has discontiguous data
%% Otherwise, no errors are produced
%%
%function ErrorIfDiscontiguous(block,port) void
    %if !IsInputPortContiguous(block,port)
        %<LibDiscontiguousInputError(block)>
    %endif
%endfunction %% ErrorIfDiscontiguous


%% Function: LibClipRollRegions  =============================================
%%
%% Abstract:
%%      Clip the RollRegions vector so that it starts with FIRST index
%%      and ends with LAST index, where FIRST and LAST are specified
%%      using 1-based indices.
%%
%% Synopsis:
%%      rollRegions = LibClipRollRegions(RollRegions, firstIdx, lastIdx)
%%
%% Example: Remove first entry from roll region
%%    %assign rollRegions1 = LibClipRollRegions(RollRegions, 2, -1)
%%
%% Example: Truncate roll regions
%%    %assign truncRollRegions = LibClipRollRegions(RollRegions, 1, 5)

%function LibClipRollRegions(origRoll, first, last) void
	%assign strRoll = FEVAL("cliprollregions", "%<origRoll>", first, last)
	%return %<strRoll>
%endfunction


%% Function: CreateParamVarStr ==================================================
%function CreateParamVarStr(var, name, DType) void
%%
%% For complex data, creates an "interleaved" data structure
%%
%% Create a variable from a block parameter.  Maximum number
%% of values to be rendered per line is hard coded here, so
%% we will be consistent.  Note that the parameter data type
%% has to be the same as the input, but the complextiy can differ.
%%
%%    VAR   -- TLC variable which contains the values to be rendered
%%    NAME  -- Name of the C variable to be created
%%    DTYPE -- Simulink data type (real_T, creal_T, uint8_T, cuint8_T, etc...)
%%
    %assign cmplx  = LibIsComplex(var)
    %assign rows   = %<SIZE(var,0)>
    %assign cols   = %<SIZE(var,1)>
    %assign len    = rows * cols
    %assign astr   = ""
    %assign count  = 0
    %assign maxlen = 6
    %%
    %assign astr = "%<DType> %<name>[%<len>] = {\n"
    %%
    %foreach Col = cols
        %foreach Row = rows
            %if !cmplx
                %assign astr = astr + "%<var[count]>"
            %else
                %assign astr = astr + "{%<REAL(var[count])>,%<IMAG(var[count])>}"
            %endif
            %%
            %assign count   = count + 1
            %if (count < len)
                    %assign astr = astr + ","
            %else
                %assign astr = astr + "};"
            %endif
            %%
            %if (count % maxlen == 0 || count == len)
                %assign astr = astr + "\n"
            %endif
            %%
        %endforeach
    %endforeach

	%return astr+"\n"

%endfunction  %% CreateParamVarStr


%% Function: CreateParamVar ==================================================
%function CreateParamVar(var, name, DType) Output
%%
%<CreateParamVarStr(var, name, DType)>

%endfunction  %% CreateParamVar(var, name)


%% Function: CreateParamVarCplxPartsStr ==================================================
%function CreateParamVarCplxPartsStr(var, name, DType) void
%%
%% For complex data, returns two separate declarations, one for the real,
%% and one for the imaginary.
%%
%% Create a variable from a block parameter.  Maximum number
%% of values to be rendered per line is hard coded here, so
%% we will be consistent.  Note that the parameter data type
%% has to be the same as the input, but the complextiy can differ.
%%
%%    VAR   -- TLC variable which contains the values to be rendered
%%    NAME  -- Name of the C variable to be created
%%    DTYPE -- Simulink data type (real_T, creal_T, uint8_T, cuint8_T, etc...)
%%
    %assign cmplx  = LibIsComplex(var)
    %assign rows   = %<SIZE(var,0)>
    %assign cols   = %<SIZE(var,1)>
    %assign len    = rows * cols
    %assign astr   = ""
    %assign count  = 0
    %assign maxlen = 6
    %%
    %assign re_str = "%<DType> %<name>_re[%<len>] = {\n"
	%if !cmplx
		%assign im_str = ""
	%else
	    %assign im_str = "%<DType> %<name>_im[%<len>] = {\n"
	%endif
    %%
    %foreach Col = cols
        %foreach Row = rows
            %assign re_str = re_str + "%<REAL(var[count])>"
            %if cmplx
                %assign im_str = im_str + "%<IMAG(var[count])>"
            %endif
            %%
            %assign count = count + 1
            %if (count < len)
				%assign re_str = re_str + ","
				%if cmplx
                    %assign im_str = im_str + ","
				%endif
            %else
                %assign re_str = re_str + "};"
				%if cmplx
					%assign im_str = im_str + "};"
				%endif
            %endif
            %%
            %if (count % maxlen == 0 || count == len)
                %assign re_str = re_str + "\n"
				%if cmplx
					%assign im_str = im_str + "\n"
				%endif
            %endif
            %%
        %endforeach
    %endforeach

	%assign retStr = re_str 
	%if cmplx
		%assign retStr = retStr + "\n" + im_str
	%endif

	%return retStr + "\n"

%endfunction  %% CreateParamVarCplxPartsStr


%% Function: getRealOrComplexDataType =============================================
%% Abstract:
%%     Returns string with data type name (real_T, creal32_T, etc)
%%     Handles both real and complex data types.
%%
%function getRealOrComplexDataType(DTypeId, Cplx) void

%return (Cplx) ? LibGetDataTypeComplexNameFromId(DTypeId) \
               : LibGetDataTypeNameFromId(DTypeId)

%endfunction %% getRealOrComplexDataType


%% Function: LibTaskSFcnComment ==============================================
%% Abstract:
%%    Generate a C-style comment indicating the sample- and offset-
%%    times for the S-Function TID.  The TID must be any of the
%%    valid TID inputs that LibGetGlobalTIDFromLocalSFcnTID accepts.
%%    String includes the comment delimiters (both /* and */)
%%
%%    Example output:
%%        /* Sample time: [1.0, 0.0] */
%%
%%    Example calls:
%%       For port-based sample times:
%%           LibTaskSFcnComment("InputPortIdx0")
%%           LibTaskSFcnComment("OutputPortIdx0")
%%
%%       For block-based sample times:
%%           LibTaskSFcnComment(0)
%%
%function LibTaskSFcnComment(sfcnTID) Output
    %%
    %<LibTaskComment(LibGetGlobalTIDFromLocalSFcnTID(sfcnTID))>\
    %%
%endfunction %% LibTaskSFcnComment


%% Function: DSPAddToFile ==================================================
%% Abstract:
%%   Write out the function code cache for outputs, updates, etc.
%%
%function DSPAddToFile(fcnbuffer) void

   %assign fileroot = "%<::CompiledModel.Name>_dsp"
   %assign fileDotC = "%<fileroot>.c"
   %assign fileDotH = "%<fileroot>.h"

    %if %<JustCreatedCompiledModelRecord("_MODEL_DSP_C_")>

        %openfile topbuffer
           /*
            * %<fileDotC>
            *
            * Signal Processing Blockset function calls
            %with CompiledModel
                %<SLibCommonHeaderInfo()>\
            %endwith
            */

            #include "%<fileDotH>"

        %closefile topbuffer

        %<LibAddToFile(fileDotC, topbuffer)>

        %% This adds file to list of sources to build
        %<LibAddToModelSources(fileroot)>

    %endif

    %<LibAddToFile(fileDotC, fcnbuffer)>

%endfunction %% DSPAddToFile


%% Function: DSPAddToFileHeader =================================================
%% Abstract:
%%   Write out the function code cache for outputs, updates, etc.
%%
%function DSPAddToFileHeader(buffer) void

   %assign fileDotH = "%<::CompiledModel.Name>_dsp.h"

    %if %<JustCreatedCompiledModelRecord("_MODEL_DSP_H_")>

        %openfile topbuffer
       /*
        * %<fileDotH>
        *
        * Signal Processing Blockset function calls
        %with CompiledModel
            %<SLibCommonHeaderInfo()>\
        %endwith
        */

        #include "dsp_rt.h" /* Signal Processing Blockset general run time support functions */
        %%
        %% Embedded C-format uses different simstruct 
        %% definition and different macros to access it.
        %%
        %if CodeFormat == "Embedded-C"
            #include "ertformat.h"
            #include "%<ExportHeaderFile()>"

        %else
	  %%
	  %% xxx(Mani) - 
	  %% Below, we would like to have an extern declaration of an rtModel
	  %% To avoid dependencies between two large jobs, we are currently 
	  %% doing this with a lot of special code. Ultimately, we should 
	  %% be able to replace all of it with a call to a library function.
	  %% The call would be 
	  %%   %<RTMAddExternRTModelDecl()>
	  %%
	  %if EXISTS(GenRTModel) && GenRTModel
	    #include "%<CompiledModel.Name>.h"
	    
	    extern %<tSimStructType> *const %<tSimStruct>;
	  %else
	    #include "simstruc.h"
	    
	    extern SimStruct *const %<tSimStruct>;
	  %endif
        %endif
        %closefile topbuffer

        %<LibAddToFile(fileDotH, topbuffer)>

        %% Add include line to model_common.h file
        %openfile includebuffer
            /* Signal Processing Blockset header for extern functions */
            #include "%<fileDotH>"

        %closefile includebuffer

        %<LibCacheFunctionPrototype(includebuffer)>

    %endif

    %<LibAddToFile(fileDotH, buffer)>

%endfunction %% DSPAddToFileHeader


%% Function: LibBlockCopyInputsToOutputs =====================================
%%
%% Abstract:
%%   Copy inputs to outputs, using the INPUT width.
%%
%% Assumptions:
%%   If output datatype matches input datatype,
%%   then no fixed-point cast is required, 
%%   copy is performed using memcpy() or direct assignment.
%%
%%   Output width is greater than or equal to input width.  The remaining part of
%%   the output buffer is not touched.
%%
%%   Input and output complexity can differ.
%%
%function LibBlockCopyInputsToOutputs(INPORT, OUTPORT) Output
  %assign inDT                  = FixPt_GetInputDataType(INPORT)
  %assign DTYPE_ID              = LibBlockInputSignalDataTypeId(INPORT)
  %assign DTYPE_STR             = LibBlockInputSignalDataTypeName(INPORT,"%<tRealPart>")
  %assign OUT_COMPLEX           = LibBlockOutputSignalIsComplex(OUTPORT)
  %assign INP_COMPLEX           = LibBlockInputSignalIsComplex(INPORT)
  %assign INP_WIDTH             = LibBlockInputSignalWidth(INPORT)
  %assign NUM_REAL_INP_ELEMENTS = INP_WIDTH * (1 + INP_COMPLEX)
  %assign outputDTSameAsInput   = (DTYPE_ID == LibBlockOutputSignalDataTypeId(OUTPORT))
  %%
  %if (outputDTSameAsInput)
    %if (INP_COMPLEX == OUT_COMPLEX)
      %%
      %% Copy every input sample
      %% to every output sample
      %%
      %if INP_WIDTH > 1
        memcpy( %<LibBlockOutputSignalAddr(OUTPORT, "", "", 0)>, \
          %<LibBlockInputSignalAddr( INPORT,  "", "", 0)>, \
          (%<NUM_REAL_INP_ELEMENTS> * sizeof(%<DTYPE_STR>)) );
      %else
        %<LibBlockOutputSignal(OUTPORT, "", "", 0)> = %<LibBlockInputSignal( INPORT,  "", "", 0)>;
      %endif
    %else
      %%
      %% Input and output differ in complexity
      %%
      %if INP_COMPLEX
        %%
        %% Copy real part of each
        %% complex input sample
        %% to each real output sample.
        %%
        %if INP_WIDTH > 1
          {
            const byte_T *uTemp = (const byte_T *)%<LibBlockInputSignalAddr( INPORT,  "", "", 0)>;
            byte_T       *yTemp = (byte_T       *)%<LibBlockOutputSignalAddr(OUTPORT, "", "", 0)>;
            int_T inpIdx        = %<INP_WIDTH>;
            while (inpIdx-- > 0) {
              memcpy(yTemp, uTemp, sizeof(%<DTYPE_STR>));
              yTemp += sizeof(%<DTYPE_STR>);
              uTemp += 2*sizeof(%<DTYPE_STR>); /* Skip imaginary part */
            }
          }
        %else
          %<LibBlockOutputSignal(OUTPORT, "", "", 0)> = %<LibBlockInputSignal( INPORT,  "", "", "%<tRealPart>0")>;
        %endif
      %else
        %%
        %% Input is real, output is complex
        %% Copy each real input sample
        %% to the real part of each
        %% complex output sample.
        %% Interleave output samples with
        %% data type zero representation
        %% in each imaginary part.
        %%
        %if INP_WIDTH > 1
          {
            const %<DTYPE_STR> zero  = %<SLibGetGroundValueFromId(DTYPE_ID)>;
            const byte_T      *uTemp = (const byte_T *)%<LibBlockInputSignalAddr( INPORT,  "", "", 0)>;
            byte_T            *yTemp = (byte_T       *)%<LibBlockOutputSignalAddr(OUTPORT, "", "", 0)>;
            int_T inpIdx        = %<INP_WIDTH>;
            while (inpIdx-- > 0) {
              memcpy(yTemp, uTemp, sizeof(%<DTYPE_STR>));
              uTemp += sizeof(%<DTYPE_STR>);
              yTemp += sizeof(%<DTYPE_STR>);
              memcpy(yTemp, &zero, sizeof(%<DTYPE_STR>));
              yTemp += sizeof(%<DTYPE_STR>);
            }
          }
        %else
          %<LibBlockOutputSignal(OUTPORT, "", "", "%<tRealPart>0")> = %<LibBlockInputSignal( INPORT,  "", "", 0)>;
          %<LibBlockOutputSignal(OUTPORT, "", "", "%<tImagPart>0")> = %<SLibGetGroundValueFromId(DTYPE_ID)>;
        %endif
      %endif
    %endif
  %else
    %% Assuming fixed point input
    %assign outLabel_re = LibBlockOutputSignal(OUTPORT, "i", "", "%<tRealPart>0")
    %assign outLabel_im = LibBlockOutputSignal(OUTPORT, "i", "", "%<tImagPart>0")
    %assign inLabel_re  = LibBlockInputSignal(INPORT, "i", "", "%<tRealPart>0")
    %assign inLabel_im  = LibBlockInputSignal(INPORT, "i", "", "%<tImagPart>0")
    %assign outDT       = FixPt_GetOutputDataType(OUTPORT)
    {
      int i=0;
      for (; i<%<INP_WIDTH>; i++) {
        %<FixPt_Fix2FixAlwaysOutput(outLabel_re, outDT, inLabel_re, inDT, FixPtRoundingMode, FixPtSaturationMode)>\
        %if OUT_COMPLEX
          %if INP_COMPLEX
            %<FixPt_Fix2FixAlwaysOutput(outLabel_im, outDT, inLabel_im, inDT, FixPtRoundingMode, FixPtSaturationMode)>\
          %else
            %% Assuming zero-bias datatypes, therefore 'zero value' == 0.
            %<outLabel_im> = 0;
          %endif
        %else %% OUT_REAL
          %if INP_COMPLEX
            /* Discarding imaginary part of input */
          %endif
        %endif
      }
    }
  %endif
%endfunction %% LibBlockCopyInputsToOutputs


%% Function: LibBlockCopyAndTruncateInpOut =====================================
%%
%% Abstract:
%%   Copy inputs to outputs, using the OUTPUT width
%%   (possible truncation of input).
%%
%% Assumptions:
%%   Input width is greater than or equal to output width.
%%   Input and output data types match.
%%
%function LibBlockCopyAndTruncateInpOut(INPORT, OUTPORT) Output
  %assign DTYPE_ID              = LibBlockInputSignalDataTypeId(INPORT)
  %assign DTYPE_STR             = LibBlockOutputSignalDataTypeName(OUTPORT,"%<tRealPart>")
  %assign INP_COMPLEX           = LibBlockInputSignalIsComplex(INPORT)
  %assign OUT_COMPLEX           = LibBlockOutputSignalIsComplex(OUTPORT)
  %assign OUT_WIDTH             = LibBlockOutputSignalWidth(OUTPORT)
  %assign NUM_REAL_OUT_ELEMENTS = OUT_WIDTH * (1 + OUT_COMPLEX)
  %if (INP_COMPLEX == OUT_COMPLEX)
    %%
    %% Copy every input sample
    %% to every output sample
    %%
    %if OUT_WIDTH > 1
      memcpy( %<LibBlockOutputSignalAddr(OUTPORT, "", "", 0)>, \
              %<LibBlockInputSignalAddr( INPORT,  "", "", 0)>, \
              (%<NUM_REAL_OUT_ELEMENTS> * sizeof(%<DTYPE_STR>)) );
    %else
      %if OUT_COMPLEX
        memcpy( %<LibBlockOutputSignalAddr(OUTPORT, "", "", 0)>, \
                %<LibBlockInputSignalAddr( INPORT,  "", "", 0)>, \
                (2 * sizeof(%<DTYPE_STR>)) );
      %else
      %<LibBlockOutputSignal(OUTPORT, "", "", 0)> = %<LibBlockInputSignal( INPORT,  "", "", 0)>;
      %endif
    %endif
  %else
    %%
    %% Input and output differ in complexity
    %%
    %if INP_COMPLEX
      %%
      %% Copy real part of each
      %% complex input sample
      %% to each real output sample.
      %%
      %if OUT_WIDTH > 1
        {
          const byte_T *uTemp = (const byte_T *)%<LibBlockInputSignalAddr( INPORT,  "", "", 0)>;
          byte_T       *yTemp = (byte_T       *)%<LibBlockOutputSignalAddr(OUTPORT, "", "", 0)>;
          int_T outIdx        = %<OUT_WIDTH>;
          while (outIdx-- > 0) {
            memcpy(yTemp, uTemp, sizeof(%<DTYPE_STR>));
            yTemp += sizeof(%<DTYPE_STR>);
            uTemp += 2*sizeof(%<DTYPE_STR>); /* Skip imaginary part */
          }
        }
      %else
        %<LibBlockOutputSignal(OUTPORT, "", "", 0)> = %<LibBlockInputSignal( INPORT,  "", "", "%<tRealPart>0")>;
      %endif
    %else
      %%
      %% Input is real, output is complex
      %% Copy each real input sample
      %% to the real part of each
      %% complex output sample.
      %% Interleave output samples with
      %% data type zero representation
      %% in each imaginary part.
      %%
      %if OUT_WIDTH > 1
        {
          const %<DTYPE_STR> zero  = %<SLibGetGroundValueFromId(DTYPE_ID)>;
          const byte_T      *uTemp = (const byte_T *)%<LibBlockInputSignalAddr( INPORT,  "", "", 0)>;
          byte_T            *yTemp = (byte_T       *)%<LibBlockOutputSignalAddr(OUTPORT, "", "", 0)>;
          int_T outIdx             = %<INP_WIDTH>;
          while (outIdx-- > 0) {
            memcpy(yTemp, uTemp, sizeof(%<DTYPE_STR>));
            uTemp += sizeof(%<DTYPE_STR>);
            yTemp += sizeof(%<DTYPE_STR>);
            memcpy(yTemp, &zero, sizeof(%<DTYPE_STR>));
            yTemp += sizeof(%<DTYPE_STR>);
          }
        }
      %else
        %<LibBlockOutputSignal(OUTPORT, "", "", "%<tRealPart>0")> = %<LibBlockInputSignal( INPORT,  "", "", 0)>;
        %<LibBlockOutputSignal(OUTPORT, "", "", "%<tImagPart>0")> = %<SLibGetGroundValueFromId(DTYPE_ID)>;
      %endif
    %endif
  %endif
%endfunction %% LibBlockCopyAndTruncateInpOut

%% Function: LibBlockDSPDataTypeIsFloatingPoint
%%
%function LibBlockDSPDataTypeIsFloatingPoint(dataTypeIdx) void
  %%
  %assign id = LibGetDataTypeStorageIdFromId(dataTypeIdx)
  %%
  %return ( ( id == tSS_DOUBLE ) || ( id == tSS_SINGLE ) )
  %%
%endfunction %% LibBLockDSPDataTypeIsFloatingPoint


%% Function:  LibBlockDSPDataTypeIsFixedPoint
%%
%function LibBlockDSPDataTypeIsFixedPoint(dataTypeIdx) void
  %%
  %if ISFIELD(CompiledModel.DataTypes.DataType[dataTypeIdx],"IsFixedPoint")
    %%
    %assign returnValue = ...
      CompiledModel.DataTypes.DataType[dataTypeIdx].IsFixedPoint
  %else
    %assign returnValue = 0
  %endif

  %%
  %return returnValue
  %%
%endfunction  %% LibBlockDSPDataTypeIsFixedPoint


%% Function:  LibBlockDSPUnaryMinus
%% Generate C code that carries out an unary minus
%%
%% inStruct and outStruct should be a TLC structure like the following examples
%%
%% %createrecord inStruct  { Label     "U";  ...
%%                           IsPtr     0;    ...
%%                           postfixOp ""   }
%%    
%% %createrecord outStruct { Label     "pY"; ...
%%                           IsPtr     1;    ...
%%                           postfixOp "++" }
%%    
%% dataTypeIdx is the data type index of both the input and the output
%%   they must be the same
%%
%% satMode is a string equal to either "Wrap" or "Saturate"
%%
%function LibBlockDSPUnaryMinus(outStruct,inStruct,dataTypeIdx,satMode) Output
  %%
  %if satMode == "Wrap" || LibBlockDSPDataTypeIsFloatingPoint(dataTypeIdx)
    %%
    %% handle wrapping cases and/or floating point cases
    %%
    %if outStruct.IsPtr
      %%
      %assign lValueToUse = "*%<outStruct.Label>%<outStruct.postfixOp>"
    %else
      %assign lValueToUse = outStruct.Label 
    %endif
    %%
    %if inStruct.IsPtr
      %%
      %assign rValueToUse = "*%<inStruct.Label>%<inStruct.postfixOp>"
    %else
      %assign rValueToUse = inStruct.Label  
    %endif
    %%
    %<lValueToUse> = -(%<rValueToUse>);
    %%
  %else
    %%
    %% handle saturation on integer and fixed point types
    %%
    %%
    %switch dataTypeIdx
      %%
      %case tSS_INT8
        %%
        %% these constants are defined inside tmwtypes.h
        %%
        %assign outMax = "MAX_int8_T"
        %assign outMin = "MIN_int8_T"
        %%
        %break
        %%
      %case tSS_INT16
        %%
        %assign outMax = "MAX_int16_T"
        %assign outMin = "MIN_int16_T"
        %%
        %break
        %%
      %case tSS_INT32
        %%
        %assign outMax = "MAX_int32_T"
        %assign outMin = "MIN_int32_T"
        %%
        %break
        %%
      %case tSS_UINT8
      %case tSS_UINT16
      %case tSS_UINT32
      %case tSS_BOOLEAN
        %%
        %<LibReportFatalError("Unary Minus attempted on unsigned integer type.")>
        %%
        %break
        %%
      %default
        %%
        %assign isFixedPoint = LibBlockDSPDataTypeIsFixedPoint(dataTypeIdx)
        %%
        %if isFixedPoint
          %%
          %assign yDT = FixPt_GetDataTypeFromIndex(dataTypeIdx)
          %%
          %assign outMax = FixPt_GetMaxStr(yDT)
          %assign outMin = SPow2NegStr(yDT.RequiredBits-1)
          %%
        %else
          %%
          %% Completely unknown data type
          %%   could "take a shot" or error out
          %%
          %<LibReportFatalError("Unary Minus with saturate on overflow attempted on completely unknown data type.")>
          %%
        %endif
        %%
        %break
        %%
    %endswitch
    %%
    %%
    %if outStruct.IsPtr
      %%
      %assign lValueToUse = "*%<outStruct.Label>"
    %else
      %assign lValueToUse = outStruct.Label 
    %endif
    %%
    %if inStruct.IsPtr
      %%
      %assign rValueToUse = "*%<inStruct.Label>"
    %else
      %assign rValueToUse = inStruct.Label  
    %endif
    %%
    %%
    %% less than or equal, rather than just equal, is desired because
    %% we may be emulating a smaller type inside a larger type.
    %% For example, on a TI C30 or C40 DSP, an int8 or an int16 would
    %% actually live inside an int32.  The less than could be useful
    %% in those cases and doesn't hurt the normal cases.
    %%
    if ( %<rValueToUse> <= %<outMin> )
    {
        %<lValueToUse> = %<outMax>;
    }
    else
    {
        %<lValueToUse> = -(%<rValueToUse>);
    }
    %if outStruct.IsPtr && outStruct.postfixOp != ""
      %%
      %<outStruct.Label>%<outStruct.postfixOp>;
    %endif
    %%
    %if inStruct.IsPtr && inStruct.postfixOp != ""
      %%
      %<inStruct.Label>%<inStruct.postfixOp>;
    %endif
    %%
  %endif
%endfunction %% LibBlockDSPUnaryMinus


%endif %% _DSPLIB_

%% [EOF] dsplib.tlc
