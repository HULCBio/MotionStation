%% $RCSfile: sdspflip.tlc,v $
%% $Revision: 1.10.4.2 $ $Date: 2004/04/12 23:08:40 $
%%
%% Copyright 1995-2003 The MathWorks, Inc.
%%
%% Abstract: Target file for the S-Function sdspflip.c
%%

%implements "sdspflip" "C"


%% Function: BlockTypeSetup ==============================================
%function BlockTypeSetup(block, system) void

  %<Include_rt_header(block,"dspflip_rt")>

%endfunction %% BlockTypeSetup


%% Function: BlockInstanceSetup ===============================================
%%
%function BlockInstanceSetup(block, system) void

  %assign INPORT  = 0
  %assign OUTPORT = 0

  %assign DTypeName = LibBlockInputSignalDataTypeName(INPORT,"")
  %assign numDims   = LibBlockInputSignalNumDimensions(INPORT)
  %assign inDims    = LibBlockInputSignalDimensions(INPORT)
  %assign inCols    = (numDims == 2) ? inDims[1] : 1
  %assign inRows    = inDims[0]

  %assign FlipDir    = SFcnParamSettings.Direction
  %assign RowFlip    = (FlipDir == 1) && (numDims==2)
  %assign ColumnFlip = (FlipDir == 2) && (numDims==2)

  %assign block = block  + INPORT + OUTPORT + numDims + ...
                  DTypeName + inCols + inRows + ...
                  RowFlip + ColumnFlip

%endfunction %% BlockInstanceSetup


%% Function: Outputs ==========================================================
%%
%% Abstract:
%%
%function Outputs(block, system) Output
  %assign inplace    = (LibBlockInputSignalBufferDstPort(INPORT) == OUTPORT)
  %assign u          = LibBlockInputSignalAddr(INPORT,"","",0)
  %assign y          = LibBlockOutputSignalAddr(OUTPORT,"","",0)
  %%
  %% Check for no-op/simple conditions first: scalar input or flip/vector dir 
  %% mismatch (when vector oriented, i.e. 2D)  
  %%
  %if (ColumnFlip && inRows==1) || ...
      (RowFlip    && inCols==1) || ...
      (inRows==1  && inCols==1)
    %%
    %% No code required if we share input and output buffers here
    %%
    %if !inplace
      /* Signal Processing Blockset Flip (%<ParamSettings.FunctionName>) - '%<Name>' */
      %<LibBlockCopyInputsToOutputs(INPORT, OUTPORT)> 

    %endif
  %else
    /* Signal Processing Blockset Flip (%<ParamSettings.FunctionName>) - '%<Name>' */
    %if (inRows > 1) && (inCols > 1)
      %%
      %% Matrix input
      %%
      %if (RowFlip)
        %% Flip along rows
        %if inplace
          MWDSP_FlipMatrixRowIP((byte_T*)%<y>,%<inRows>,%<inCols>,sizeof(%<DTypeName>));
        %else
          MWDSP_FlipMatrixRowOP((byte_T*)%<u>,(byte_T*)%<y>,%<inRows>,%<inCols>,sizeof(%<DTypeName>));
        %endif
      %else
        %% Flip along columns
        %if inplace
          MWDSP_FlipMatrixColIP((byte_T*)%<y>,%<inRows>,%<inCols>,sizeof(%<DTypeName>));
        %else
          MWDSP_FlipMatrixColOP((byte_T*)%<u>,(byte_T*)%<y>,%<inRows>,%<inCols>,sizeof(%<DTypeName>));
        %endif
      %endif
    %else
      %%
      %% Vector input
      %% (unoriented or flip dir and vec dir agree)
      %%
      %if inplace
        MWDSP_FlipVectorIP((byte_T*)%<y>,%<inRows>,%<inCols>,sizeof(%<DTypeName>));
      %else
        MWDSP_FlipVectorOP((byte_T*)%<u>,(byte_T*)%<y>,%<inRows>,%<inCols>,sizeof(%<DTypeName>));
      %endif
    %endif
    
  %endif
%endfunction %% Outputs


%% [EOF: sdspflip.tlc]
