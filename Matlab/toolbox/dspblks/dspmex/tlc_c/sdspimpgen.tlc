%% $RCSfile: sdspimpgen.tlc,v $
%% $Revision: 1.5.4.2 $ 
%% $Date: 2004/04/12 23:08:47 $
%%
%% Copyright 1995-2003 The MathWorks, Inc.
%%
%% Abstract: Discrete Impulse Generator.
%%

%implements "sdspimpgen" "C"

%% Function: InitializeConditions ===================================================================
%% Abstract:
%%      During initialization set the counter to be the number of delays plus one.
%%
%function InitializeConditions(block, system) Output
    /* Signal Processing Blockset Discrete Impulse Generator (%<ParamSettings.FunctionName>) - %<Name> */
    %%
    %assign  dWorkType = LibBlockDWorkDataTypeName(Counter,"")
    %assign  Delay     = SFcnParamSettings.DELAY
    %assign  DelayLen  = LibBlockDWorkWidth(Counter)
    %%
    %if DelayLen == 1
        %% Scalar delay
        %<LibBlockDWork(Counter,"","",0)> = (%<dWorkType>) %<Delay[0] + 1>;

    %else
        %% Vector delay
        {
            %% Build array of delay vector elements:
            real_T Delay[%<DelayLen>] = {
            %foreach idx = DelayLen-1
                %<Delay[idx]>,	
            %endforeach
            %<Delay[DelayLen-1]>};

            %<dWorkType> *pDWork = %<LibBlockDWorkAddr(Counter,"","",0)>;
            %roll Idx = [0:%<DelayLen - 1>], lcv = %<DelayLen>, block, "InlineRoller"
            %assign loopArg = (lcv == "") ? Idx : lcv
                pDWork[%<loopArg>] = (%<dWorkType>) Delay[%<loopArg>] + 1;
            %endroll
        }
    %endif

%endfunction

%%%%%%%%%%%%%%%%%%%%% 
%% Function: Outputs ================================================================================
%%
%function Outputs(block, system) Output   
    /* Signal Processing Blockset Discrete Impulse Generator (%<ParamSettings.FunctionName>) - %<Name> */
    %%
    %% Parameters are not tunable
    %%
    %assign OUTPORT_NUM = 0
    %assign outType     = LibBlockOutputSignalDataTypeName(OUTPORT_NUM,"")
    %assign dWorkType   = LibBlockDWorkDataTypeName(Counter,"")
    {
    %assign outWidth                = LibDataOutputPortWidth(OUTPORT_NUM)
    %assign nChans                  = LibBlockDWorkWidth(Counter)
    %assign frameSize               = outWidth/nChans
    %assign multipleChans           = (nChans > 1)
    %assign multipleSamplesPerFrame = (frameSize > 1)
    %%
    %if multipleSamplesPerFrame && multipleChans
        %<outType>   *y = %<LibBlockOutputSignalAddr(OUTPORT_NUM,"","",0)>;
    %endif
    %%
    %<dWorkType> *cnt = %<LibBlockDWorkAddr(Counter, "", "", 0)>;
    %%
    %if multipleChans
        const int_T nChans = %<nChans>;
	int_T       i;
        for(i=0; i < nChans; i++) {
    %endif
            %if multipleSamplesPerFrame		  
                const int_T frameSize = %<frameSize>;
                int_T       j;
                for(j=0; j<frameSize; j++) {
                    %if multipleChans
                        *y++ = (*cnt != (%<dWorkType>)0) ? (%<outType>)((*cnt)-- == (%<dWorkType>)1) : (%<outType>)0; 
                    %else            
                        %<LibBlockOutputSignal(OUTPORT_NUM,"j","",0)> = (*cnt != (%<dWorkType>)0) ? (%<outType>)((*cnt)-- == (%<dWorkType>)1) : (%<outType>)0; 
                    %endif
                }
	    %else
                %% Single sample per frame
	        %if multipleChans
                    %<LibBlockOutputSignal(OUTPORT_NUM,"i","",0)> = (*cnt != (%<dWorkType>)0) ? (%<outType>)((*cnt)-- == (%<dWorkType>)1) : (%<outType>)0; 
                %else
                    %<LibBlockOutputSignal(OUTPORT_NUM,"","",0)> = \
                        (*cnt != (%<dWorkType>)0) ? (%<outType>)((*cnt)-- == (%<dWorkType>)1) : (%<outType>)0;
                %endif
	    %endif
            %%
            %%
            %if multipleChans
     	    cnt++;
        }
            %endif
}

%endfunction
  
%% [EOF] sdspimpgen.tlc
