<?xml version="1.0" encoding="utf-8"?>
<MATLABInstrumentDriver>
   <FileVersion>1.0</FileVersion>
   <DriverName>D:\A\matlab\matlab\toolbox\instrument\instrument\drivers\agilent_34401a.mdd</DriverName>
   <DriverType>MATLAB interface driver</DriverType>
   <InstrumentType>Digital Multimeter</InstrumentType>
   <InstrumentManufacturer>Agilent</InstrumentManufacturer>
   <InstrumentModel>34401A</InstrumentModel>
   <InstrumentVersion>1.0</InstrumentVersion>
   <Identify>*IDN?</Identify>
   <Reset>*RST</Reset>
   <Selftest>*TST?</Selftest>
   <Error>System:Error?</Error>
   <CreateInitCode>
      <Code>function init(obj)
% This method is called after the object is created.
% OBJ is the device object.
% End of function definition - DO NOT EDIT
</Code>
   </CreateInitCode>
   <ConnectInitCode>
      <Type>InstrumentCommand</Type>
   </ConnectInitCode>
   <CleanupCode>
      <Type>InstrumentCommand</Type>
   </CleanupCode>
   <GroupInfo>
      <Group>
         <Name>parent</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="parent1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ApertureTime</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% Get the interface
interface = get(obj,'interface');

% Initialize PROPERTYVALUE to an empty string.
propertyValue ='';

% Get current function
fprintf(interface,'SENse:FUNCtion?');
measurementType = fscanf(interface);

% Remove extra character at the end of string (after the ending single quote)
measurementType(length(measurementType))= '';

% Check if the current function is supported.
if ~ any(strcmpi(measurementType,{'"FREQ"','"PER"','"VOLT"','"CURR"','"RES"','"FRES"'}))
        error('The function you specified is not supported. Use MEASUREMENTTYPE property to choose a function that is supported.');   
        return   
end

% Remove double quotes in string
measurementType = strrep(measurementType,'"','');

% Get the aperrture for dc current/voltage and resistance
if any(strcmpi(measurementType,{'CURR','VOLT','FRES','RES'}))
    fprintf(interface,[measurementType ':NPLCycles?'])
else
    
% Get the aperture for frequency and period measurement
fprintf(interface,[measurementType ':APERture?'])
end

% return it
propertyValue = eval(fscanf(interface));
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% Get the interface
interface = get(obj,'interface');

% Get current function
fprintf(interface,'SENse:FUNCtion?');
measurementType = fscanf(interface);
    
% Remove extra character at the end of string (after the ending single quote)
measurementType(length(measurementType))= '';

% Check if the current function is supported.
if ~ any(strcmpi(measurementType,{'"FREQ"','"PER"','"VOLT"','"CURR"','"RES"','"FRES"'}))
        error('The function you specified is not supported. Use MEASUREMENTTYPE property to choose a function that is supported.');   
        return   
end

% Remove double quotes in string
measurementType = strrep(measurementType,'"','');

% Convert PropertyValue into string, if it is not.
if isnumeric(propertyValue)
    propertyValue = num2str(propertyValue);
end

% Get the aperrture for dc current/voltage and resistance
if any(strcmpi(measurementType,{'CURR','VOLT','RES','FRES'}))
    fprintf(interface,[measurementType ':NPLCycles ' propertyValue])
else
% set the cycle
fprintf(interface,[measurementType ':APERture ' propertyValue])
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="MIN"/>
                     <Enum Name="max" Value="MAX"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>MeasurementType</DependentProperty>
                  <DependentPropertyValue>"freq"</DependentPropertyValue>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.01</Value>
                     <Value>0.1</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>MeasurementType</DependentProperty>
                  <DependentPropertyValue>"per"</DependentPropertyValue>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.01</Value>
                     <Value>0.1</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>MeasurementType</DependentProperty>
                  <DependentPropertyValue>"volt"</DependentPropertyValue>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.02</Value>
                     <Value>0.2</Value>
                     <Value>1.0</Value>
                     <Value>10.0</Value>
                     <Value>100.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>MeasurementType</DependentProperty>
                  <DependentPropertyValue>"curr"</DependentPropertyValue>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.02</Value>
                     <Value>0.2</Value>
                     <Value>1.0</Value>
                     <Value>10.0</Value>
                     <Value>100.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>MeasurementType</DependentProperty>
                  <DependentPropertyValue>"res"</DependentPropertyValue>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.02</Value>
                     <Value>0.2</Value>
                     <Value>1.0</Value>
                     <Value>10.0</Value>
                     <Value>100.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>MeasurementType</DependentProperty>
                  <DependentPropertyValue>"fres"</DependentPropertyValue>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.02</Value>
                     <Value>0.2</Value>
                     <Value>1.0</Value>
                     <Value>10.0</Value>
                     <Value>100.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.1</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>APERTURETIME      

Sets or queries the integration time based on the millimeter’s present configuration.

Integration time is the period during which the multimeter’s analog-to-digital (A/D) converter samples the input signal for a measurement. Integration time affects the measurement resolution (for better resolution, use longer integration time), and measurement speed (for faster measurements, use shorter integration time).

Note: Applies to all measurement functions, except ac voltage, ac current, frequency and period. The integration time for the math operations is the same as the integration time for the measurement function in use.

The integration time is specified in the number of power line cycles (NPLCs).
The choices are 0.02, 1, 10, or 100 power line cycles. The default is 10 PLCs.

</Description>
            </Property>
            <Property>
               <Name>AutoImpedance</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>INP:IMPedance:AUTO</ConfigureCommand>
                     <QueryCommand>INP:IMPedance:AUTO?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="off" Value="0"/>
                     <Enum Name="on" Value="1"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries whether the multimeter automatically select the input resistance.

The multimeter's input resistance is fixed at 10 M ohm for all dc voltage range to minimize noise pickup. To reduce the effect of measurement loading error, you can set the input resistance to greater then 1o G ohm for the 100 mVdc, 1 Vdc, and 10 Vdc ranges.
</Description>
            </Property>
            <Property>
               <Name>AutoRange</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

%get interface
interface = get(obj,'Interface');

%ask for the MeasurementType
fprintf(interface,'FUNCtion?');

%read the MeasurementType
measurementType = fscanf(interface);

%delete empty quotes from ends of string
measurementType = strrep(measurementType,'"','');

%ask for the state of AutoRange
fprintf(interface,[measurementType, ':RANGe:AUTO?']);

%read the value
propertyValue = eval(fscanf(interface));

%the possible values
values = {'off','on'};

%1 = on, 0 = off
propertyValue = char(values(propertyValue+1));
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

%get interface
interface = get(obj,'Interface');

%ask for the MeasurementType
fprintf(interface,'FUNCtion?');

%read the MeasurementType
measurementType = fscanf(interface);

%delete empty quotes from ends of string
measurementType = strrep(measurementType,'"','');

%set the state of AutoRange
fprintf(interface,[measurementType, ':RANGe:AUTO ', propertyValue]);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="on" Value="ON"/>
                     <Enum Name="off" Value="OFF"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>on</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>AutoZero</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>Zero:Auto</ConfigureCommand>
                     <QueryCommand>Zero:Auto?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="on" Value="1"/>
                     <Enum Name="off" Value="0"/>
                     <Enum Name="once" Value="ONCE"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>on</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the auto-zero mode.

When autozero is enabled (default), the multimeter internally disconnects the input signal following each measurement, and takes a zero reading. It then subtracts the zero reading from the previous readings.

When the autozero is disabled, the multimeter takes one zero reading and subtracts it from all subsequent measurements. It take a new zero reading each time you change the function, range, and integration time.
</Description>
            </Property>
            <Property>
               <Name>Bandwidth</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>DETector:BANDwidth</ConfigureCommand>
                     <QueryCommand>DETector:BANDwidth?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>3.0</Value>
                     <Value>20.0</Value>
                     <Value>200.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="MIN"/>
                     <Enum Name="max" Value="MAX"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>20</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries minimum and maximum frequency components of the input signal for AC measurements.
</Description>
            </Property>
            <Property>
               <Name>DataPointsAvailable</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand/>
                     <QueryCommand>DATA:POINTs?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the number of points stored in the multimeter's internal memory.</Description>
            </Property>
            <Property>
               <Name>InputTerminal</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand/>
                     <QueryCommand>ROUTe:TERMinals?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="front" Value="FRON"/>
                     <Enum Name="rear" Value="REAR"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>front</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Returns whether the front or rear input terminals are expected.
</Description>
            </Property>
            <Property>
               <Name>MeasurementType</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>Sense:Function</ConfigureCommand>
                     <QueryCommand>Sense:Function?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="dcvolts" Value="&#34;volt&#34;"/>
                     <Enum Name="acvolts" Value="&#34;volt:ac&#34;"/>
                     <Enum Name="dccurrent" Value="&#34;curr&#34;"/>
                     <Enum Name="accurrent" Value="&#34;curr:ac&#34;"/>
                     <Enum Name="frequency" Value="&#34;freq&#34;"/>
                     <Enum Name="period" Value="&#34;per&#34;"/>
                     <Enum Name="resistance" Value="&#34;res&#34;"/>
                     <Enum Name="fresistance" Value="&#34;fres&#34;"/>
                     <Enum Name="diode" Value="&#34;diod&#34;"/>
                     <Enum Name="continuity" Value="&#34;cont&#34;"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>dcvolts</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the manual measurement type.</Description>
            </Property>
            <Property>
               <Name>PowerLineFrequency</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand/>
                     <QueryCommand>SYST:LFR?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>10</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>Range</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% Get the interface
interface = get(obj,'interface');

% Get current function
fprintf(interface,'SENse:FUNCtion?');
measurementType = fscanf(interface);

% The string returned (seems to) have a carriage return at the end of it.
% Replacing with the null string before using it.
measurementType(length(measurementType))= '';

% Check if the current function is supported.
if ~ any(strcmpi(measurementType,{'"CURR:AC"','"CURR"','"VOLT:AC"','"VOLT"','"FRES"','"RES"','"FREQ"','"PER"'}))
         %error('The function you specified is not supported. Use MEASUREMENTTYPE property to choose a function that is supported.');   
         propertyValue = '[]'
        return
end

% Remove double quotes in string
measurementType = strrep(measurementType,'"','');

% 'VOLT:' needs to be appended to the string 
% when the current function is RES or FREQ
if (any(strcmpi(measurementType,{'FREQ','PER'})))
    measurementType = [measurementType ':VOLT']
end

% get the range
fprintf(interface,[measurementType ':RANGe?'])

% return it
propertyValue = eval(fscanf(interface));
</GetMCode>
                  <SetMCode>function  set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% Get the interface
interface = get(obj,'interface');

% Get current function
fprintf(interface,'SENse:FUNCtion?');
measurementType = fscanf(interface);
    
% Remove extra character at the end of string (after the ending single quote)
measurementType(length(measurementType))= '';

% Check if the current function is supported.
if ~ any(strcmpi(measurementType,{'"CURR:AC"','"CURR"','"VOLT:AC"','"VOLT"','"FRES"','"RES"','"FREQ"','"PER"','"RES"','"FRES"'}))
        error('The function you specified is not supported. Use MEASUREMENTTYPE property to choose a function that is supported.');   
        return   
end

% Remove double quotes in string
measurementType = strrep(measurementType,'"','');

% 'VOLT:' needs to be appended to the string 
% when the current function is RES or FREQ
if (any(strcmpi(measurementType,{'FREQ','PER'})))
    measurementType = [measurementType ':VOLT']
end

% Convert PropertyValue into string, if it is not.
if isnumeric(propertyValue)
    propertyValue = num2str(propertyValue);
end

% set the range
if strcmpi(propertyValue, 'auto')
	%if auto is desired, it must be turned on.
	fprintf(interface,[measurementType, ':RANGe:AUTO ON']);
else
	fprintf(interface,[measurementType, ':RANGE:AUTO OFF']);
	fprintf(interface,[measurementType ':RANGe ' propertyValue]);
end
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>MeasurementType</DependentProperty>
                  <DependentPropertyValue>"volt"</DependentPropertyValue>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.1</Value>
                     <Value>1.0</Value>
                     <Value>10.0</Value>
                     <Value>100.0</Value>
                     <Value>1000.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>MeasurementType</DependentProperty>
                  <DependentPropertyValue>"volt:ac"</DependentPropertyValue>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.1</Value>
                     <Value>1.0</Value>
                     <Value>10.0</Value>
                     <Value>100.0</Value>
                     <Value>1000.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>MeasurementType</DependentProperty>
                  <DependentPropertyValue>"curr"</DependentPropertyValue>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.01</Value>
                     <Value>0.1</Value>
                     <Value>1.0</Value>
                     <Value>3.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>MeasurementType</DependentProperty>
                  <DependentPropertyValue>"curr:ac"</DependentPropertyValue>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>3.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>MeasurementType</DependentProperty>
                  <DependentPropertyValue>"freq"</DependentPropertyValue>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.1</Value>
                     <Value>1.0</Value>
                     <Value>10.0</Value>
                     <Value>100.0</Value>
                     <Value>1000.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>MeasurementType</DependentProperty>
                  <DependentPropertyValue>"per"</DependentPropertyValue>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.1</Value>
                     <Value>1.0</Value>
                     <Value>10.0</Value>
                     <Value>100.0</Value>
                     <Value>1000.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>MeasurementType</DependentProperty>
                  <DependentPropertyValue>"res"</DependentPropertyValue>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>100.0</Value>
                     <Value>1000.0</Value>
                     <Value>10000.0</Value>
                     <Value>100000.0</Value>
                     <Value>1000000.0</Value>
                     <Value>1.0E7</Value>
                     <Value>1.0E8</Value>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>MeasurementType</DependentProperty>
                  <DependentPropertyValue>"fres"</DependentPropertyValue>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>100.0</Value>
                     <Value>1000.0</Value>
                     <Value>10000.0</Value>
                     <Value>100000.0</Value>
                     <Value>1000000.0</Value>
                     <Value>1.0E7</Value>
                     <Value>1.0E8</Value>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="MIN"/>
                     <Enum Name="max" Value="MAX"/>
                     <Enum Name="auto" Value="AUTO"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.1</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the manual measurement range of the instrument.</Description>
            </Property>
            <Property>
               <Name>Resolution</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% Get the interface
interface = get(obj,'interface');

% Initialize PROPERTYVALUE to an empty string.
propertyValue ='';

% Get current function
fprintf(interface,'SENse:FUNCtion?');
measurementType = fscanf(interface);

% The string returned (seems to) have a carriage return at the end of it.
% Replacing with the null string before using it.
measurementType(length(measurementType))= '';

% Check if the current function is supported.
if ~ any(strcmpi(measurementType,{'"CURR:AC"','"CURR"','"VOLT:AC"','"VOLT"','"FRES"','"RES"'})) 
       propertyValue = '[]'
        return   
end

% Remove double quotes in string
measurementType = strrep(measurementType,'"','');

% get the range
fprintf(interface,[measurementType ':RESolution?'])

% return it
propertyValue = eval(fscanf(interface));
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% Get the interface
interface = get(obj,'interface');

% Get current function
fprintf(interface,'SENse:FUNCtion?');
measurementType = fscanf(interface);
    
% Remove extra character at the end of string (after the ending single quote)
measurementType(length(measurementType))= '';

% Check if the current function is supported.
if ~ any(strcmpi(measurementType,{'"CURR:AC"','"CURR"','"VOLT:AC"','"VOLT"','"RES"','"FRES"'}))
        error('The function you specified is not supported. Use MEASUREMENTTYPE property to choose a function that is supported.');   
        return   
end

% Remove double quotes in string
measurementType = strrep(measurementType,'"','');

%get the current Range value
range = get(obj,'Range');

%get the current MeasurementType value
mt = get(obj,'MeasurementType');

%all the possible values for MeasurementType that could make it this far
mts = {'dcvolts','acvolts','dccurrent','accurrent','resistance',...
	'fresistance'};

%all possible values for range
ranges = [.01,.1,1,3,10,100,1000,1e4,1e5,1e6,1e7,1e8];

%type index, index into 'mts' of current MeasurementType value
tindex = -1;

%range index, index into 'ranges' of current Range value
rindex = -1;

%find where in 'mts' the current type is
for i = 1:length(mts);
	bool = strcmp(mts{i},mt);
	if bool
		tindex = i;
		break
	end
end

%find where in 'ranges' the current range is
for i = 1:length(ranges)

	if ranges(i) == range;
		rindex = i;
		break
	end
end

%if it didn't find it, that's bad
if (rindex == -1 || tindex == -1)
	error('Either MeasurementType or Range properties set to unrecognized values');
end

%Construct a cell array whos rows correspond to 'ranges' and whose columns
% correspond to 'mts'. The contents of each cell is an array of doubles
% which are allowable values of resolution for that pair of Range and
% MesurementType values

%"RESolutionS"
ress = cell(12,6);

%dcvolts
ress(2,1) = {[3e-8,1e-7,3e-7,1e-6,1e-5]};	%.1
ress(3,1) = {[3e-7,1e-6,3e-6,1e-5,1e-4]};	%1
ress(5,1) = {[3e-6,1e-5,3e-5,1e-4,1e-3]};	%10
ress(6,1) = {[3e-5,1e-4,3e-4,1e-3,1e-2]};	%100
ress(7,1) = {[3e-4,1e-3,3e-3,1e-2,1e-1]};	%1000

%acvolts
ress(2,2) = {[1e-7,1e-6,1e-5]};	%.1
ress(3,2) = {[1e-6,1e-5,1e-4]};	%1
ress(5,2) = {[1e-5,1e-4,1e-3]};	%10
ress(6,2) = {[1e-4,1e-3,1e-2]};	%100
ress(7,2) = {[1e-3,1e-2,1e-1]};	%1000

%dccurrent
ress(1,3) = {[3e-9,1e-8,3e-8,1e-7,1e-6]};	%.01
ress(2,3) = {[3e-8,1e-7,3e-7,1e-6,1e-5]};	%.1
ress(3,3) = {[3e-7,1e-6,3e-6,1e-5,1e-4]};	%1
ress(4,3) = {[9e-7,1e-6,3e-6,1e-5,3e-4]};	%3

%accurrent
ress(3,4) = {[1e-6,1e-5,1e-4]};	%1
ress(4,4) = {[3e-6,3e-5,3e-4]};	%3

%resistance
ress(6,5) = {[3e-5,1e-4,3e-4,1e-3,.01]};	%100
ress(7,5) = {[3e-4,1e-3,3e-3,1e-2,.1]};	%1000
ress(8,5) = {[3e-3,1e-2,3e-2,1e-1,1]};		%1e4
ress(9,5) = {[3e-2,1e-1,3e-1,1e0,10]};	%1e5
ress(10,5) = {[3e-1,1e0,3e0,1e1,100]};	%1e6
ress(11,5) = {[3e-0,1e1,3e1,1e2,1000]};	%1e7
ress(12,5) = {[3e1,1e2,3e2,1e3,10000]}; %1e8

%fresistance (same as resistance)
ress(:,6) = ress(:,5);

%If attempting to set to a double, check to see if it's within the
% allowable range, and convert into string.
if isnumeric(propertyValue)
	
	%get the cell which gives the enumerations for the appropriate
	% combination of Range and MeasurementType values
	enums = cell2mat(ress(rindex,tindex));
	
	%&lt;Array&gt; == &lt;Scalar&gt; returns an array the same size as &lt;Array&gt; with
	% ones at the indices of &lt;Array&gt; whose values equal &lt;Scalar&gt;, and zeros
	% elsewhere.
	location = (enums == propertyValue);

	% If propertyValue is in the array, location will be an array with a
	% single 1 and the rest 0's.
	if ~sum(location)
		error('Invalid Resolution value for current MeasurementType and Range properties');
	end
	
	%convert to string
    propertyValue = num2str(propertyValue);

end

% set the range
fprintf(interface,[measurementType ':RESolution ' propertyValue])









</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="MIN"/>
                     <Enum Name="max" Value="MAX"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>min</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select the resolution for the specified function. This property is not valid for frequency, period or ratio.

Acceptable values for Resolution depend on current values for Range and MeasurementType properties.
NOTE: If AutoRange is on, the Range value may not be what is expected, and therefore the allowed values may be different than expected. To check the Range property, use 
	get(obj,'Range')
where obj is the device object. To turn AutoRange off, use
	set(obj,'AutoRange','off')
Be aware that the device is capable of turning on AutoRange without your permission. To check the status of AutoRange, use
	get(obj,'AutoRange')
or look for the word "MAN" on the LED display of the device. If the word is present, AutoRange is OFF.


allowed values					Range
--------------					-----

(dcvolts)
[3e-8,1e-7,3e-7,1e-6,1e-5]		.1
[3e-7,1e-6,3e-6,1e-5,1e-4]		1
[3e-6,1e-5,3e-5,1e-4,1e-3]		10
[3e-5,1e-4,3e-4,1e-3,1e-2]		100
[3e-4,1e-3,3e-3,1e-2,1e-1]		1000

(acvolts)
[1e-7,1e-6,1e-5]				.1
[1e-6,1e-5,1e-4]				1
[1e-5,1e-4,1e-3]				10
[1e-4,1e-3,1e-2]				100
[1e-3,1e-2,1e-1]				1000

(dccurrent)
[3e-9,1e-8,3e-8,1e-7,1e-6]		.01
[3e-8,1e-7,3e-7,1e-6,1e-5]		.1
[3e-7,1e-6,3e-6,1e-5,1e-4]		1
[9e-7,1e-6,3e-6,1e-5,3e-4]		3

(accurrent)
[1e-6,1e-5,1e-4]				1
[3e-6,3e-5,3e-4]				3

(resistance)
[3e-5,1e-4,3e-4,1e-3,.01]		100
[3e-4,1e-3,3e-3,1e-2,.1]		1000
[3e-3,1e-2,3e-2,1e-1,1]			1e4
[3e-2,1e-1,3e-1,1e0,10]			1e5
[3e-1,1e0,3e0,1e1,100]			1e6
[3e-0,1e1,3e1,1e2,1000]			1e7
[3e1,1e2,3e2,1e3,10000] 		1e8

(fresistance)
[3e-5,1e-4,3e-4,1e-3,.01]		100
[3e-4,1e-3,3e-3,1e-2,.1]		1000
[3e-3,1e-2,3e-2,1e-1,1]			1e4
[3e-2,1e-1,3e-1,1e0,10]			1e5
[3e-1,1e0,3e0,1e1,100]			1e6
[3e-0,1e1,3e1,1e2,1000]			1e7
[3e1,1e2,3e2,1e3,10000] 		1e8</Description>
            </Property>
            <Property>
               <Name>SampleCount</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>Sample:Count</ConfigureCommand>
                     <QueryCommand>Sample:Count?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="max" Value="MAX"/>
                     <Enum Name="min" Value="MIN"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="50000.0" Min="1.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>max</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the number of readings per trigger.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>drivertest</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function varargout = agilent_34401a_midtest01
%   AGILENT_34401A_MIDTEST01 M-Code for testing a MATLAB instrument driver.
%
%   This is the machine generated code that tests a MATLAB instrument driver, 
%   
%   The test consists of multiple test steps that can test the MATLAB instrument
%   drivers functions and properties.
%   
%   The test code was generated with the MIDTEST GUI. For more information
%   on MIDTEST, type 'instrhelp midtest' at the MATLAB command prompt.
%   
%   See also ICDEVICE, MIDTEST.
% 
 
%   Creation time: 17-Feb-2004 15:18:57
 

% Wrap entire test in try catch.
try
fprintf('Test: agilent_34401a\n');
fprintf(['Start time: ' datestr(now) '\n']);

% Initialize variables.
varargout              = {};
noErrorMsg             = '+0,"No error"';
stepWarningOccurred    = false;
warningOccurred        = false;
errorOccurred          = false;
OkToDeleteInterfaceObj = true;
 
% Construct the interface object.
interfaceObj = instrfind('Type', 'gpib', 'BoardIndex', 0, 'PrimaryAddress', 2, 'Tag', '');
if isempty(interfaceObj)
    interfaceObj = gpib('IOTech', 0, 2);
else
    okToDeleteInterfaceObj = false;
    fclose(interfaceObj);
    interfaceObj = interfaceObj(1);
end

% Construct the device object.
deviceObj = icdevice('D:\sandbox\matlab\toolbox\instrument\instrument\drivers\agilent_34401a.mdd', interfaceObj);

% Configure the interface object.
set(interfaceObj, 'Timeout', 5.0);

% Connect the device object to the instrument.
connect(deviceObj);


% Test Step 1: reset (Function Test Step)

errorcode = false;
try
    % Execute the function.
    devicereset(deviceObj);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 2: set MeasurementType dcvolts (Set Property Test Step)

% This test step generated no code. Most likely because a
% property or function to test was not selected.
fprintf('Test step status: PASSED\n');

% Test Step 3: (dcvolts) ApertureTime all (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the ApertureTime property.
validValues = {'min', 'max', 0.02, 0.2, 1.0, 10.0, 100.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        set(deviceObj, 'ApertureTime', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.');
            fprintf(result);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf(lasterr);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 4: (dcvolts) Range all (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Range property.
validValues = {0.1, 1.0, 10.0, 100.0, 1000.0, 'min', 'max', 'auto'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        set(deviceObj, 'Range', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.');
            fprintf(result);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf(lasterr);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 5: (dcvolts) LowerLimit min (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Math');
    groupObj = groupObj(1);
    set(groupObj, 'LowerLimit', 'min');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'LowerLimit');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, -1200);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: -1200');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 6: (dcvolts) NullOffsett max (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Math');
    groupObj = groupObj(1);
    set(groupObj, 'NullOffset', 'max');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'NullOffset');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 1200);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 1200');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 7: (dcvolts) UpperLimit 51 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Math');
    groupObj = groupObj(1);
    set(groupObj, 'UpperLimit', 51);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'UpperLimit');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 51);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 51');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 8: (dcvolts) Range 1 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Range', 1.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Range');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 1);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 1');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 9: (dcvolts)(range = 1) Resolution 1e-6 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Resolution', .000001);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Resolution');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, .000001);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: .000001');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 10: AutoImpedence all (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the AutoImpedance property.
validValues = {'off', 'on'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        set(deviceObj, 'AutoImpedance', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.');
            fprintf(result);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(deviceObj, 'AutoImpedance');

            % Compare to the expected value.
            errorcode = ~isequal(tempOut, validValues{i});
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.');
    
                % Post actual value.
                if isnumeric(tempOut)
                    fprintf(['Actual value: ' num2str(tempOut)]);
                else
                    fprintf(['Actual value: ' tempOut]);
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i})]);
                else
                    fprintf(['Expected value: ' validValues{i}]);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.');
                fprintf(result);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf(lasterr);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 11: AutoZero off (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'AutoZero', 'off');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'AutoZero');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'off');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: off');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 12: AutoZero on (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'AutoZero', 'on');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'AutoZero');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'on');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: on');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 13: AutoZero once (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'AutoZero', 'once');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'AutoZero');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'off');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: off');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 14: Bandwidth (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Bandwidth property.
validValues = {3.0, 20.0, 200.0, 'min', 'max'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        set(deviceObj, 'Bandwidth', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.');
            fprintf(result);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf(lasterr);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 15: set MeasurementType acvolts (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'MeasurementType', 'acvolts');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'MeasurementType');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'acvolts');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: acvolts');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 16: (acvolts) Range all (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Range property.
validValues = {0.1, 1.0, 10.0, 100.0, 1000.0, 'min', 'max', 'auto'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        set(deviceObj, 'Range', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.');
            fprintf(result);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf(lasterr);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 17: (acvolts) LowerLimit max (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Math');
    groupObj = groupObj(1);
    set(groupObj, 'LowerLimit', 'max');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'LowerLimit');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 1200);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 1200');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 18: (acvolts) NullOffset min (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Math');
    groupObj = groupObj(1);
    set(groupObj, 'NullOffset', 'min');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'NullOffset');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, -1200);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: -1200');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 19: (acvolts) UpperLimit -73 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Math');
    groupObj = groupObj(1);
    set(groupObj, 'UpperLimit', -73);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'UpperLimit');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, -73);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: -73');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 20: (acvolts) Range 100 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Range', 100.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Range');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 100);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 100');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 21: (acvolts)(range = 100) Resolution .001 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Resolution', .001);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Resolution');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 0.001);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 0.001');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 22: DataPointsAvailable (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    temp = get(deviceObj, 'DataPointsAvailable');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 23: InputTerminal (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    temp = get(deviceObj, 'InputTerminal');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 24: PowerLineFrequency (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    temp = get(deviceObj, 'PowerLineFrequency');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 25: set MeasurementType dccurrent (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'MeasurementType', 'dccurrent');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'MeasurementType');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'dccurrent');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: dccurrent');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 26: (dccurrent) Range 3 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Range', 3);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Range');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 3);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 3');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 27: (dccurrent) ApertureTime all (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the ApertureTime property.
validValues = {'min', 'max', 0.02, 0.2, 1.0, 10.0, 100.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        set(deviceObj, 'ApertureTime', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.');
            fprintf(result);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf(lasterr);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 28: Range auto (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Range', 'auto');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 29: SampleCount all (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the SampleCount property.
validValues = {'max', 'min', 1.0, 5556.0, 11111.0, 16666.0, 22221.0, 27776.0, 33331.0, 38886.0, 44441.0, 50000.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        set(deviceObj, 'SampleCount', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.');
            fprintf(result);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf(lasterr);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 30: AutoRange all (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the AutoRange property.
validValues = {'on', 'off'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        set(deviceObj, 'AutoRange', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.');
            fprintf(result);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(deviceObj, 'AutoRange');

            % Compare to the expected value.
            errorcode = ~isequal(tempOut, validValues{i});
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.');
    
                % Post actual value.
                if isnumeric(tempOut)
                    fprintf(['Actual value: ' num2str(tempOut)]);
                else
                    fprintf(['Actual value: ' tempOut]);
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i})]);
                else
                    fprintf(['Expected value: ' validValues{i}]);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.');
                fprintf(result);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf(lasterr);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 31: (dccurrent) Range 1 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Range', 1);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Range');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 1);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 1');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 32: (dccurrent)(range = 1) Resolution 3e-6 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Resolution', .000003);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Resolution');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, .000003);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: .000003');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 33: set MeasurementType accurrent (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'MeasurementType', 'accurrent');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'MeasurementType');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'accurrent');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: accurrent');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 34: (accurrent) Range 1 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Range', 1.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Range');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 1);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 1');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 35: Range max (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Range', 'max');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Range');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 3);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 3');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 36: Cal:Count (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Calibration');
    groupObj = groupObj(1);
    temp = get(groupObj, 'Count');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 37: Cal:Enabled (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Calibration');
    groupObj = groupObj(1);
    temp = get(groupObj, 'Enabled');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 38: Cal:Message (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Calibration');
    groupObj = groupObj(1);
    set(groupObj, 'Message', 'TheMathWorks');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 39: Cal:Message GET (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Calibration');
    groupObj = groupObj(1);
    temp = get(groupObj, 'Message');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 40: un-securedevice (Function Test Step)

% This test step generated no code. Most likely because a
% property or function to test was not selected.
fprintf('Test step status: PASSED\n');

% Test Step 41: updatecode (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Calibration');
    groupObj = groupObj(1);
    invoke(groupObj, 'updatecode', 'agilent34401');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 42: set MeasurementType frequency (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'MeasurementType', 'frequency');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'MeasurementType');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'frequency');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: frequency');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 43: (frequency) Range all (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Range property.
validValues = {0.1, 1.0, 10.0, 100.0, 1000.0, 'min', 'max', 'auto'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        set(deviceObj, 'Range', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.');
            fprintf(result);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf(lasterr);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 44: (frequency) ApertureTime .01 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'ApertureTime', .01);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'ApertureTime');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, .01);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: .01');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 45: display off (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Display');
    groupObj = groupObj(1);
    set(groupObj, 'Enabled', 'off');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Enabled');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'off');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: off');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 46: display on (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Display');
    groupObj = groupObj(1);
    set(groupObj, 'Enabled', 'on');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Enabled');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'on');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: on');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 47: settext (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Display');
    groupObj = groupObj(1);
    invoke(groupObj, 'settext', 'TMW hard at work');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 48: clear (Function Test Step)

% This test step generated no code. Most likely because a
% property or function to test was not selected.
fprintf('Test step status: PASSED\n');

% Test Step 49: set MeasurementType period (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'MeasurementType', 'period');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'MeasurementType');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'period');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: period');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 50: (period) ApertureTime .1 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'ApertureTime', .1);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'ApertureTime');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, .1);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: .1');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 51: (period) Range all (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Range property.
validValues = {0.1, 1.0, 10.0, 100.0, 1000.0, 'min', 'max', 'auto'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        set(deviceObj, 'Range', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.');
            fprintf(result);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf(lasterr);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 52: Range min (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Range', 'min');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Range');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, .1);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: .1');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 53: DBMReference all (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the DBMReference property.
validValues = {'min', 'max', 50.0, 75.0, 93.0, 110.0, 124.0, 135.0, 150.0, 250.0, 300.0, 500.0, 600.0, 800.0, 900.0, 1000.0, 1200.0, 8000.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Math');
        groupObj = groupObj(1);
        set(groupObj, 'DBMReference', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.');
            fprintf(result);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf(lasterr);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 54: DBReference (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the DBReference property.
validValues = {'min', 'max', -200.0, -156.0, -112.0, -68.0, -24.0, 20.0, 64.0, 108.0, 152.0, 200.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Math');
        groupObj = groupObj(1);
        set(groupObj, 'DBReference', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.');
            fprintf(result);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf(lasterr);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 55: set MeasurementType resistance (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'MeasurementType', 'resistance');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'MeasurementType');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'resistance');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: resistance');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 56: (resistance) ApertureTime all (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the ApertureTime property.
validValues = {'min', 'max', 0.02, 0.2, 1.0, 10.0, 100.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        set(deviceObj, 'ApertureTime', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.');
            fprintf(result);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf(lasterr);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 57: (resistance) Range 10,000 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Range', 10000);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Range');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 10000);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 10000');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 58: (resistance)(range = 10,000) Resolution 3e-2 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Resolution', .03);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Resolution');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, .03);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: .03');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 59: Function all (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Function property.
validValues = {'null', 'db', 'dbm', 'average', 'limit'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Math');
        groupObj = groupObj(1);
        set(groupObj, 'Function', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.');
            fprintf(result);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, 'Function');

            % Compare to the expected value.
            errorcode = ~isequal(tempOut, validValues{i});
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.');
    
                % Post actual value.
                if isnumeric(tempOut)
                    fprintf(['Actual value: ' num2str(tempOut)]);
                else
                    fprintf(['Actual value: ' tempOut]);
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i})]);
                else
                    fprintf(['Expected value: ' validValues{i}]);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.');
                fprintf(result);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf(lasterr);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 60: getaverage (Function Test Step)

% This test step generated no code. Most likely because a
% property or function to test was not selected.
fprintf('Test step status: PASSED\n');

% Test Step 61: set MesurementType fresistance (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'MeasurementType', 'fresistance');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'MeasurementType');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'fresistance');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: fresistance');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 62: (fresistance) ApertureTime all (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the ApertureTime property.
validValues = {'min', 'max', 0.02, 0.2, 1.0, 10.0, 100.0};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        set(deviceObj, 'ApertureTime', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.');
            fprintf(result);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf(lasterr);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 63: (fresistance) Range 1e8 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Range', 100000000);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Range');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 100000000);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 100000000');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 64: (fresistance)(range = 1e8) Resolution 1e4 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Resolution', 10000);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Resolution');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 10000);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 10000');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Cleanup.
disconnect(deviceObj);
delete(deviceObj);

if (okToDeleteInterfaceObj == true)
    delete(interfaceObj);
end

% Post results.
fprintf(['Stop time: ' datestr(now) '\n']);
if (errorOccurred == true)
    fprintf('Test status: FAILED\n');
elseif (warningOccurred == true)
    fprintf('Test status: PASSED with warnings\n');
else
    fprintf('Test status: PASSED\n');
end

catch
    % An error occurred while running the test.
    fprintf('An error occurred while executing the test.\n');
    fprintf(lasterr);

    % Cleanup.
    if exist('interfaceObj') &amp;&amp; (okToDeleteInterfaceObj == true)
        delete(interfaceObj)
    end

    if exist('deviceObj')
        delete(deviceObj)
    end
end

</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>initiate</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="Initiate:Immediate" Output="false"/>
                  </Commands>
               </Code>
               <Description>INITIATE Configure the instrument to wait for a trigger.

INVOKE(OBJ, 'initiate') configures the instrument to wait for a trigger.

See also GETMEASUREMENT.
			</Description>
            </Method>
            <Method>
               <Name>measure</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function propertyValue = measure(obj)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

% Get interface
interface = get(obj,'interface');

% Get source of trigger
fprintf(interface,'TRIGger:SOURce?')
triggerSource = fscanf(interface);

% The string returns (seems) to have a carriage return at the end of it.
% Replace it with the null string before using it
triggerSource(length(triggerSource))='';

% Get measurement type
fprintf(interface,'SENSe:FUNCtion?')
measurementType = fscanf(interface);

% Error if the trigger source is a bus trigger
if strcmpi(triggerSource,'BUS') == 1
    error('Invalid trigger source. Please see INITIATE and/or GETMEASUREMENT functions.')
    return
end

% Initiate immediately and Measure
fprintf(interface,'INITiate:IMMediate')

% Remove double quotes in string
measurementType = strrep(measurementType,'"','');
fprintf(interface,['MEASure:' measurementType '?'])

propertyValue = fscanf(interface);</MCode>
               </Code>
               <Description>MEASURE Initiates and returns a measured value.

INVOKE(OBJ, 'measure') initiates a measurement on the instrument and returns the measured value.

See also GETMEASUREMENT.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>calibration</Name>
         <Description>The calibration group defines properties and functions related to instrument calibration.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Calibration1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Count</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand/>
                     <QueryCommand>CALibration:Count?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="32767.0" Min="0.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Returns number of times the instrument has been calibrated.</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand/>
                     <QueryCommand>CALibration:SECure:STATe?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="on" Value="1"/>
                     <Enum Name="off" Value="0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>on</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Query the secured state for calibration of the instrument.</Description>
            </Property>
            <Property>
               <Name>Message</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% Get interface
interface = get(get(obj,'parent'),'interface');

% Get the string
fprintf(interface,'CALibration:STRing?')

% Return it
propertyValue = fscanf(interface);
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.



% Error checking.
if ~ischar(propertyValue)
    error('MESSAGE must be a string.');
end

% Get interface.
interface = get(get(obj,'parent'),'interface');

% Write the command to instrument.
fprintf(interface, ['CALibration:STRing "' propertyValue '"']);


</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies calibration information for the instrument.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>securedevice</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function securedevice(obj, calibrationCode, state)
% OBJ is the device object.
% code is the code to secure the instrument

% Get interface.
interface = get(get(obj,'parent'),'interface');

% Parse inputs.
switch (nargin)
case 1
    error('CALIBRATIONCODE must be specified.');
case 2
    fprintf(interface,'CALibration:SECure:STATe?');
    currentState = fscanf(interface, '%g');
case 3
    % STATE can either be 'secure' or 'unsecure'.
    if ~any(strcmpi(state, {'secure', 'unsecure'}))
        error('STATE must be either ''secure'' or ''unsecure''.');
    end
   
    % Translating State into the expected current state numeric value.
    if strcmpi(state, 'secure')
        currentState = 0;
    else
        currentState = 1;
    end
otherwise
    error('Too many input arguments.');
end

% Error checking.
if ~ischar(calibrationCode)
    error('CALIBRATIONCODE must be a string.');
end

% Unsecure or secure the instrument.
switch (currentState)
case 0
    % Secure.
    fprintf(interface,['CALibration:SECure:STATe ON , ' calibrationCode]);   
case 1
    % Unsecure.
    fprintf(interface,['CALibration:SECure:STATe OFF , ' calibrationCode]);
end
      
</MCode>
               </Code>
               <Description>SECUREDEVICE secure or unsecure the power supply for calibration

INVOKE(OBJ, 'securedevice','code', STATE) to secure or unsecure the device. Use a STATE of ‘unsecure’ to unsecure the device before initiating the calibration process. Use a STATE of 'secure' to secure the device after the calibration process is complete.


</Description>
            </Method>
            <Method>
               <Name>updatecode</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function updatecode(obj,secureCode)
% OBJ is the device object.
% SecureCode is the new code.

% Get interface.
interface = get(get(obj,'parent'),'interface');

% Validating the code (12-character format).
if ~(isvarname(secureCode) &amp;&amp; length(secureCode) &lt;= 12)
    error(['SECURECODE must be a character string with letters, ',...
           'digits and ' sprintf('\n') 'underscores. The first character ',...
           'in SECURECODE must be a letter.' sprintf('\n') 'The maximum length is 12 characters.']);
end

% Verifying that the device is unsecured before changing the code. 
fprintf(interface,'CALibration:SECure:STATe?')
state = fscanf(interface,'%g');

if (state == 1)
    error(['The device must be unsecured before changing the code.' sprintf('\n'),...
        'Type ''instrhelp(obj, ''securedevice'')'' for more information on how ' sprintf('\n'),...
        'to unsecure the device.']);
    return
end

% Set the secure code to the new code.
fprintf(interface,['CALibration:SECure:CODE ' secureCode])</MCode>
               </Code>
               <Description>UPDATECODE Change the security code.

INVOKE(OBJ, 'updatecode' NEWCODE) updates the calibration security code.  The instrument must first be unsecured using the current security code.

See also SECUREDEVICE
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>display</Name>
         <Description>Define the behavior of the instrument front panel display.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Display1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Enabled</Name>
               <Location>display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>DISPlay</ConfigureCommand>
                     <QueryCommand>DISPlay?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="on" Value="1"/>
                     <Enum Name="off" Value="0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>on</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the state of the front panel display.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>clear</Name>
               <Location>display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="DISPlay:TEXT:CLEar" Output="false"/>
                  </Commands>
               </Code>
               <Description>CLEAR Clear the message displayed on the front panel.

INVOKE(OBJ, 'clear') removes any message displayed on the instrument front panel.

See also SETTEXT</Description>
            </Method>
            <Method>
               <Name>settext</Name>
               <Location>display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function settext(obj,str)
% OBJ is the device object.
% str is the string to display

% Error checking.
if ~ischar(str)
    error('STR must be a string.');
end

% Get interface
interface = get(get(obj,'parent'),'interface');

% Write the command to instrument.
fprintf(interface, ['Display:Text "' str '"']);


</MCode>
               </Code>
               <Description>SETTEXT Set the string displayed on the instrument front panel.

INVOKE(OBJ, 'displaytext', S) displays string, S, on the instrument's front panel.
The Display group's Enable property must be on for the text to be visible.

See also CLEAR.
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>math</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="math1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>DBMReference</Name>
               <Location>math</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>Calculate:DBM:Reference</ConfigureCommand>
                     <QueryCommand>Calculate:DBM:Reference?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="MIN"/>
                     <Enum Name="max" Value="MAX"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>50.0</Value>
                     <Value>75.0</Value>
                     <Value>93.0</Value>
                     <Value>110.0</Value>
                     <Value>124.0</Value>
                     <Value>135.0</Value>
                     <Value>150.0</Value>
                     <Value>250.0</Value>
                     <Value>300.0</Value>
                     <Value>500.0</Value>
                     <Value>600.0</Value>
                     <Value>800.0</Value>
                     <Value>900.0</Value>
                     <Value>1000.0</Value>
                     <Value>1200.0</Value>
                     <Value>8000.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>50</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set or query the dBm reference value.</Description>
            </Property>
            <Property>
               <Name>DBReference</Name>
               <Location>math</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>Calculate:DB:Reference</ConfigureCommand>
                     <QueryCommand>Calculate:DB:Reference?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="MIN"/>
                     <Enum Name="max" Value="MAX"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="200.0" Min="-200.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>-200</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set or query the relative value in the db Relative Register.</Description>
            </Property>
            <Property>
               <Name>Function</Name>
               <Location>math</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>Calculate:Function</ConfigureCommand>
                     <QueryCommand>Calculate:Function?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="null" Value="NULL"/>
                     <Enum Name="db" Value="DB"/>
                     <Enum Name="dbm" Value="DBM"/>
                     <Enum Name="average" Value="AVER"/>
                     <Enum Name="limit" Value="LIM"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>Null</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set or query the math function</Description>
            </Property>
            <Property>
               <Name>LowerLimit</Name>
               <Location>math</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

%get the device
device = get(obj,'Parent');

%get interface
interface = get(device,'Interface');

%ask for the value
fprintf(interface,'CALC:LIM:LOW?');

%read and return the value
propertyValue = eval(fscanf(interface));</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

%get the device
device = get(obj,'Parent');

%get interface
interface = get(device,'Interface');

%need to do some checking if propertyValue is a double
if ~ischar(propertyValue)

	%ask for the MeasurementType
	fprintf(interface, 'FUNCtion?');

	%read the value for MeasurementType
	measurementType = fscanf(interface);

	%remove trailing character
	measurementType(length(measurementType))= '';

	%list of all recognized MeasurementType values
	mts = {'"volt"' , '"volt:ac"' , '"curr"' , '"curr:ac"' , '"freq"' ,...
		'"per"' '"res"' , '"fres"' , '"diod"'};

	%Create matrix of possible allowable values:
	% row corresponds to measurementType, in same order as in 'mts' (above)
	% first column is the minimum allowable value for propertyValue with the
	% corresponding MeasurementType value. Second column is the maximum allowed
	allowableValues = zeros(10,2);

	allowableValues(1,:) = [-1200,1200];	%dcvolt
	allowableValues(2,:) = [-1200,1200];	%acvolt
	allowableValues(3,:) = [-3.6,3.6];		%dccurrent
	allowableValues(4,:) = [-3.6,3.6];		%accurrent
	allowableValues(5,:) = [-1.2e6,1.2e6];	%frequency
	allowableValues(6,:) = [-1.2,1.2];		%period
	allowableValues(7,:) = [-1.2e8,1.2e8];	%resistance
	allowableValues(8,:) = [-1.2e8,1.2e8];	%fresistance
	allowableValues(9,:) = [0,0];			%diode
	allowableValues(10,:) = [0,0];			%continuity


	%the index of the current MeasurementType in 'mts'
	tindex = -1;

	%find the index of the current MeasurementType in 'mts'
	for t = 1:length(mts);
		if strcmpi( char(mts(t)) , measurementType )
			tindex = t;
			break;
		end%if	
	end%for t

	%if it wasn't found, tindex will still be -1
	if tindex == -1
		error('Unrecognized value for MeasurementType');
	end%if

	%min and max allowable values are in the row of 'allowableValues' at tindex
	allowed  = allowableValues(tindex,:);

	%mininum is in the first column
	mn = allowed(1);

	%maximum is in the second column
	mx = allowed(2);

	%propertyValue must be from mn to mx (inclusive)
	% If it isn't, throw and error
	if propertyValue &lt; mn | propertyValue &gt; mx

		error(['Invalid value for ',propertyName,...
			' with current MeasurementType (',get(device,'MeasurementType'),...
			'). Valid values: min',...
			', max or a double between ',num2str(mn),' and ',...
			num2str(mx)]);

	else

		%convert to string
		propertyValue = num2str(propertyValue);
	end%if/else
	
end%if ~ischar(propertyValue)

%set the value
fprintf(interface,['CALC:LIM:LOW ',propertyValue]);







</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="max" Value="max"/>
                     <Enum Name="min" Value="min"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="1200.0" Min="-1200.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set or query the lower limit for limit testing.</Description>
            </Property>
            <Property>
               <Name>NullOffset</Name>
               <Location>math</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

%get the device
device = get(obj,'Parent');

%get interface
interface = get(device,'Interface');

%ask for the value
fprintf(interface,'CALC:NULL:OFFSET?');

%read and return the value
propertyValue = eval(fscanf(interface));</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

%get the device
device = get(obj,'Parent');

%get interface
interface = get(device,'Interface');

%need to do some checking if propertyValue is a double
if ~ischar(propertyValue)

	%ask for the MeasurementType
	fprintf(interface, 'FUNCtion?');

	%read the value for MeasurementType
	measurementType = fscanf(interface);

	%remove trailing character
	measurementType(length(measurementType))= '';

	%list of all recognized MeasurementType values
	mts = {'"volt"' , '"volt:ac"' , '"curr"' , '"curr:ac"' , '"freq"' ,...
		'"per"' '"res"' , '"fres"' , '"diod"'};

	%Create matrix of possible allowable values:
	% row corresponds to measurementType, in same order as in 'mts' (above)
	% first column is the minimum allowable value for propertyValue with the
	% corresponding MeasurementType value. Second column is the maximum allowed
	allowableValues = zeros(10,2);

	allowableValues(1,:) = [-1200,1200];	%dcvolt
	allowableValues(2,:) = [-1200,1200];	%acvolt
	allowableValues(3,:) = [-3.6,3.6];		%dccurrent
	allowableValues(4,:) = [-3.6,3.6];		%accurrent
	allowableValues(5,:) = [-1.2e6,1.2e6];	%frequency
	allowableValues(6,:) = [-1.2,1.2];		%period
	allowableValues(7,:) = [-1.2e8,1.2e8];	%resistance
	allowableValues(8,:) = [-1.2e8,1.2e8];	%fresistance
	allowableValues(9,:) = [0,0];			%diode
	allowableValues(10,:) = [0,0];			%continuity


	%the index of the current MeasurementType in 'mts'
	tindex = -1;

	%find the index of the current MeasurementType in 'mts'
	for t = 1:length(mts);
		if strcmpi( char(mts(t)) , measurementType )
			tindex = t;
			break;
		end%if	
	end%for t

	%if it wasn't found, tindex will still be -1
	if tindex == -1
		error('Unrecognized value for MeasurementType');
	end%if

	%min and max allowable values are in the row of 'allowableValues' at tindex
	allowed  = allowableValues(tindex,:);

	%mininum is in the first column
	mn = allowed(1);

	%maximum is in the second column
	mx = allowed(2);

	%propertyValue must be from mn to mx (inclusive)
	% If it isn't, throw and error
	if propertyValue &lt; mn | propertyValue &gt; mx

		error(['That value is not allowed for property ',propertyName,...
			' with current MeasurementType (',get(device,'MeasurementType'),...
			'). Allowed values are ''min''',...
			', ''max'', or a double between ',num2str(mn),' and ',...
			num2str(mx), ' (inclusive)']);

	else

		%convert to string
		propertyValue = num2str(propertyValue);
	end%if/else
	
end%if ~ischar(propertyValue)

%set the value
fprintf(interface,['CALC:NULL:OFFSET ',propertyValue]);







</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="max" Value="max"/>
                     <Enum Name="min" Value="min"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="1.2E8" Min="-1.2E8"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set or query a null value in the multimeter's null register.</Description>
            </Property>
            <Property>
               <Name>UpperLimit</Name>
               <Location>math</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

%get the device
device = get(obj,'Parent');

%get interface
interface = get(device,'Interface');

%ask for the value
fprintf(interface,'CALC:LIM:UPP?');

%read and return the value
propertyValue = eval(fscanf(interface));</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

%get the device
device = get(obj,'Parent');

%get interface
interface = get(device,'Interface');

%need to do some checking if propertyValue is a double
if ~ischar(propertyValue)

	%ask for the MeasurementType
	fprintf(interface, 'FUNCtion?');

	%read the value for MeasurementType
	measurementType = fscanf(interface);

	%remove trailing character
	measurementType(length(measurementType))= '';

	%list of all recognized MeasurementType values
	mts = {'"volt"' , '"volt:ac"' , '"curr"' , '"curr:ac"' , '"freq"' ,...
		'"per"' '"res"' , '"fres"' , '"diod"'};

	%Create matrix of possible allowable values:
	% row corresponds to measurementType, in same order as in 'mts' (above)
	% first column is the minimum allowable value for propertyValue with the
	% corresponding MeasurementType value. Second column is the maximum allowed
	allowableValues = zeros(10,2);

	allowableValues(1,:) = [-1200,1200];	%dcvolt
	allowableValues(2,:) = [-1200,1200];	%acvolt
	allowableValues(3,:) = [-3.6,3.6];		%dccurrent
	allowableValues(4,:) = [-3.6,3.6];		%accurrent
	allowableValues(5,:) = [-1.2e6,1.2e6];	%frequency
	allowableValues(6,:) = [-1.2,1.2];		%period
	allowableValues(7,:) = [-1.2e8,1.2e8];	%resistance
	allowableValues(8,:) = [-1.2e8,1.2e8];	%fresistance
	allowableValues(9,:) = [0,0];			%diode
	allowableValues(10,:) = [0,0];			%continuity


	%the index of the current MeasurementType in 'mts'
	tindex = -1;

	%find the index of the current MeasurementType in 'mts'
	for t = 1:length(mts);
		if strcmpi( char(mts(t)) , measurementType )
			tindex = t;
			break;
		end%if	
	end%for t

	%if it wasn't found, tindex will still be -1
	if tindex == -1
		error('Unrecognized value for MeasurementType');
	end%if

	%min and max allowable values are in the row of 'allowableValues' at tindex
	allowed  = allowableValues(tindex,:);

	%mininum is in the first column
	mn = allowed(1);

	%maximum is in the second column
	mx = allowed(2);

	%propertyValue must be from mn to mx (inclusive)
	% If it isn't, throw and error
	if propertyValue &lt; mn | propertyValue &gt; mx

		error(['That value is not allowed for property ',propertyName,...
			' with current MeasurementType (',get(device,'MeasurementType'),...
			'). Allowed values are ''min''',...
			', ''max'', or a double between ',num2str(mn),' and ',...
			num2str(mx), ' (inclusive)']);

	else

		%convert to string
		propertyValue = num2str(propertyValue);
	end%if/else
	
end%if ~ischar(propertyValue)

%set the value
fprintf(interface,['CALC:LIM:UPP ',propertyValue]);







</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="max" Value="max"/>
                     <Enum Name="min" Value="min"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="1.2E8" Min="-1.2E8"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set or query the upper limit for limit testing.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>getaverage</Name>
               <Location>math</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function varargout = getaverage(obj)
% OBJ is the device object.

% Error checking.
if (nargout &gt; 4)
    error('Too many output arguments.')
end

% Get the interface.
interface = get(get(obj,'parent'),'interface');

% Get the minimum.
if (nargout &gt;= 0)
    fprintf(interface,'CALCulate:AVERage:MINimum?')
    varargout{1}= fscanf(interface,'%f');
end

% Get the maximum.
if (nargout &gt;= 2)
    fprintf(interface,'CALCulate:AVERage:MAXimum?')
    varargout{2} = fscanf(interface,'%f');
end

% Get the average.
if (nargout &gt;= 3)
    fprintf(interface,'CALCulate:AVERage:AVERage?')
    varargout{3} = fscanf(interface,'%f');
end

% Get the count.
if (nargout &gt;= 4)
    fprintf(interface,'CALCulate:AVERage:COUNT?')
    varargout{4} = fscanf(interface,'%f');
end

</MCode>
               </Code>
               <Description>GETAVERAGE Return statistical information.

[MINVALUE, MAXVALUE, AVERAGEVALUE, COUNT] = INVOKE(OBJ, 'getaverage') returns an array containing the minimum, maximum, average and count of min-max operation respectively.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>system</Name>
         <Description>General instrument system functionality.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="System1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Version</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand/>
                     <QueryCommand>SYST:VERS?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the SCPI version of the instrument.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>beep</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="SYSTem:BEEPer" Output="false"/>
                  </Commands>
               </Code>
               <Description>BEEP Issue a beep.

INVOKE(OBJ, 'beep') issues a beep from the instrument.</Description>
            </Method>
            <Method>
               <Name>disablelocalcontrols</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function disablelocalcontrols(obj)
% OBJ is the group object.

% Get the interface
interface = get(get(obj,'parent'),'interface');

% Get the System interface
fprintf(interface,'SYSTem:INTerface?');
systemInterface =fscanf(interface);

% If the interface is not RS232, generate an error
if (strcmpi(systemInterface,'RS232')~= 1)
    error('Must be in RS232 Interface to use this function');
    return
end

% Otherewise send appropriate command
fprintf(interface,'SYSTem:RWLock');
</MCode>
               </Code>
               <Description>DISABLELOCALCONTROLS Disable all front-panel buttons and knobs.

INVOKE(OBJ, 'disablelocalcontrols') 'unlocks' all front-panel keys and knobs. Valid for RS-232 mode only.</Description>
            </Method>
            <Method>
               <Name>enablelocalcontrols</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function enablelocalcontrols(obj)
% OBJ is the group object.

% Get the interface
interface = get(get(obj,'parent'),'interface');

% Get the (remote) system interface
fprintf(interface,'SYSTem:INTerface?');
systemInterface = fscanf(interface);

% If the interface is not RS232, generate an error
if (strcmpi(systemInterface,'RS232')~= 1)
    error('Must be in RS232 interface to use this function');
return
end

% Otherewise send appropriate command
fprintf(interface,'SYSTem:LOCal');
</MCode>
               </Code>
               <Description>ENABLELOCALCONTROLS Enable all front-panel buttons and knobs.

INVOKE(OBJ, 'enablelocalcontrols') 'locks' all front-panel keys and knobs. Valid for RS-232 mode only.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>trigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>AutoDelay</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>TRIGger:DELay:AUTO</ConfigureCommand>
                     <QueryCommand>TRIGger:DELay:AUTO?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="on" Value="1"/>
                     <Enum Name="off" Value="0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>on</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables the automatic trigger delay. The delay is determined by function range, integration time and ac filter setting.</Description>
            </Property>
            <Property>
               <Name>Count</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>Trigger:Count</ConfigureCommand>
                     <QueryCommand>Trigger:Count?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="50000.0" Min="1.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="MIN"/>
                     <Enum Name="max" Value="MAX"/>
                     <Enum Name="infinity" Value="INF"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set or query the number of readings per trigger.</Description>
            </Property>
            <Property>
               <Name>Delay</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>Trigger:Delay</ConfigureCommand>
                     <QueryCommand>Trigger:Delay?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="3600.0" Min="0.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="MIN"/>
                     <Enum Name="max" Value="MAX"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set or query a trigger delay.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>Trigger:Source</ConfigureCommand>
                     <QueryCommand>Trigger:Source?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="bus" Value="BUS"/>
                     <Enum Name="immediate" Value="IMM"/>
                     <Enum Name="external" Value="EXT"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>immediate</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set or query the instrument trigger source.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>trigger</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="*TRG" Output="false"/>
                  </Commands>
               </Code>
               <Description>TRIGGER Send a software trigger.

INVOKE(OBJ, 'trigger') sends a software trigger to the instrument connected to device object.

See also INITIATE.</Description>
            </Method>
         </MethodInfo>
      </Group>
   </GroupInfo>
</MATLABInstrumentDriver>