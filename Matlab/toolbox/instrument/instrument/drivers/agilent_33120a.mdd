<?xml version="1.0" encoding="utf-8"?>
<MATLABInstrumentDriver>
   <FileVersion>1.0</FileVersion>
   <DriverName>D:\A\matlab\matlab\toolbox\instrument\instrument\drivers\agilent_33120.mdd</DriverName>
   <DriverType>MATLAB interface driver</DriverType>
   <InstrumentType>Function Generator</InstrumentType>
   <InstrumentManufacturer>Agilent</InstrumentManufacturer>
   <InstrumentModel>33120A</InstrumentModel>
   <InstrumentVersion>1.0</InstrumentVersion>
   <Identify>*IDN?</Identify>
   <Reset>*RST</Reset>
   <Selftest>*TST?</Selftest>
   <Error>System:Error?</Error>
   <CreateInitCode>
      <Code>function init(obj)
% This method is called after the object is created.
% OBJ is the device object.
% End of function definition - DO NOT EDIT
</Code>
   </CreateInitCode>
   <ConnectInitCode>
      <Type>MCode</Type>
      <Code>function init(obj)
% This method is called after the object is connected.
% OBJ is the device object.
% End of function definition - DO NOT EDIT
</Code>
   </ConnectInitCode>
   <CleanupCode>
      <Type>InstrumentCommand</Type>
   </CleanupCode>
   <GroupInfo>
      <Group>
         <Name>parent</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="parent1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Amplitude</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>VOLTage</ConfigureCommand>
                     <QueryCommand>VOLTage?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>OutputLoad</DependentProperty>
                  <DependentPropertyValue>50.0</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="10.0" Min="0.05"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>OutputLoad</DependentProperty>
                  <DependentPropertyValue>9.9e37</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="20.0" Min="0.1"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="max" Value="MAX"/>
                     <Enum Name="min" Value="MIN"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.100</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the output amplitude for the currently active function.

MIN selects the smallest amplitude allowed for the selected function (50 mVpp into 50 ohms)
MAX Selects the largest amplitude allowed (10 Vpp into 50 ohms).

The default amplitude is 100 mVpp(into 50 ohms).

For arbitrary waveforms, the maximum amplitude will be limited if the data do not span the full range of the output DAC (Digital-to-Analog Converter). For example, the built-in "SINC" does not use the full range of value between PLUS OR MINUS 1 and therefore its maximum amplitude is 6.084 (into 50 ohms).

For dc volts, the output level is actually controlled by setting the offset voltage. You can set the dc voltage to any value between PLUS OR MINUS 5 Vdc into 50 ohms or PLUS OR MINUS 10 Vdc into an open circuit.
</Description>
            </Property>
            <Property>
               <Name>AmplitudeOffset</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

%get the interface
g = get(obj,'Interface');

%ask for the value
fprintf(g,'VOLTage:OFFSet?');

%read the value and return it
propertyValue = eval(fscanf(g));</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

%get the interface
g = get(obj,'Interface');

%get the OutputLoad
load = get(obj,'OutputLoad');

if ~ischar(propertyValue);

	switch load
	
		case 50
		
			if (propertyValue &gt; .2) || (propertyValue &lt; -.2)
				error(['For the current OutputLoad setting, accepted ',...
					'values for AmplitudeOffset are ''min'',''max'', ',...
					'or a value from -.2 to .2']);
			else 
				fprintf(g,['VOLTage:OFFSet ',num2str(propertyValue)]);
			end%if/else
		
		case 9.9e37
		
			if (propertyValue &gt; .4) || (propertyValue &lt; -.4)
				error(['For the current OutputLoad setting, accepted ',...
					'values for AmplitudeOffset are ''min'',''max'', ',...
					'or a value from -.4 to .4']);
			else 
				fprintf(g,['VOLTage:OFFSet ',num2str(propertyValue)]);
			end%if/else		
		
		otherwise
			error(['Unexpected value for OutputLoad. Expected ',...
				'50 or 9.9e37']);
		
	end%switch load
	
else
	
	fprintf(g,['VOLTage:OFFSet ',propertyValue]);
	
end%if/else




</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>OutputLoad</DependentProperty>
                  <DependentPropertyValue>50.0</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="0.2" Min="-0.2"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>OutputLoad</DependentProperty>
                  <DependentPropertyValue>9.9e37</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="0.4" Min="-0.4"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="MIN"/>
                     <Enum Name="max" Value="MAX"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>-0.2</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>AmplitudeUnits</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>VOLTage:UNIT</ConfigureCommand>
                     <QueryCommand>VOLTage:UNIT?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="vpp" Value="VPP"/>
                     <Enum Name="vrms" Value="VRMS"/>
                     <Enum Name="dbm" Value="DBM"/>
                     <Enum Name="default" Value="DEF"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>VPP</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select the output unit from amplitude only.

</Description>
            </Property>
            <Property>
               <Name>Catalog</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand/>
                     <QueryCommand>DATA:CATAlog?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>List the names of all waveforms currently downloaded to memory.</Description>
            </Property>
            <Property>
               <Name>Dutycycle</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>PULSE:DCYCLe</ConfigureCommand>
                     <QueryCommand>PULSE:DCYCLe?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="MIN"/>
                     <Enum Name="max" Value="MAX"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="80.0" Min="20.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>50</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the duty cycle in percent for square waves only.

Duty cycle represents the amount of time per cycle that the square wave is high.

The duty cycle is remembered when you change from square wave to another function. When you return the square wave function, the previous duty cycle is used. The APPly command automatically sets the duty cycle to 50% for square waves.

The duty cycle is automatically adjusted if you select a frequency that is not valid with the percent duty cycle. For example if you set the duty cycle to 70% and then change the frequency to 8MHz, the function generator will automatically adjust the duty cycle to 60% (the upper limit for this frequency).</Description>
            </Property>
            <Property>
               <Name>Frequency</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>FREQuency</ConfigureCommand>
                     <QueryCommand>FREQuency?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="1.5E7" Min="1.0E-4"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="MIN"/>
                     <Enum Name="max" Value="Max"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0E-4</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the output frequency.

min selects the lowest frequency allowed for currently active function.
max selects the highest frequency allowed for currently active function.

The default frequency is 1 kHz for all functions.

For arbitrary waveforms that you create and download from memory, the maximum frequency depends on the number of points specified in the waveform.

The output frequency is automatically adjusted if you select a function whose maximum frequency is less than that of currently active function. For example, if you output 1 MHz sine wave and then change the function to triangle wave, the function generator will adjust the output to 100 kHz (the upper limit for triangle wave).
</Description>
            </Property>
            <Property>
               <Name>OutputLoad</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>OUTPut:LOAD</ConfigureCommand>
                     <QueryCommand>OUTPut:LOAD?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>50.0</Value>
                     <Value>9.9E37</Value>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="infinity" Value="INF"/>
                     <Enum Name="min" Value="MIN"/>
                     <Enum Name="max" Value="MAX"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>50</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select the output termination for output amplitude and offset voltage.

The function generator has a fixed output impedance of 50 ohms on the OUTPUT terminal. You can specify whether you are terminating the output into a 50 ohms load or an open circuit. Incorrect impedance matching between the function generator and your load will result in an amplitude or offset which does not match the specified signal level.

INF sets the output termination to "high impedance".
MIN selects 50 ohms.
MAX selects "high impedance".
The default is 50 ohms.

The amplitude (or dc offset) is automatically adjusted (and no error is generated) if you change the output termination. For example, if you set the amplitude to 10 Vpp and then change the termination from 50 ohms to "high impedance", the display impedance will double to 20 Vpp. If you change the "high impedance" to 50 ohms, the displayed amplitude will drop in half.

If you specify 50 ohms but are actually terminating into an open circuit, the displayed output will be twice the value specified. For example, if you set the offset to 100 mVdc (and specify a 50 ohms termination) but are actually terminating output into an open circuit, the actual displayed offset will be 200 mVdc.  
</Description>
            </Property>
            <Property>
               <Name>OutputMode</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>propertyValue = function get(obj, propertyName)
% This function is called to set the group object property value.

% get interface
% Get interface.
interface = get(obj,'Interface');

% If it is not stantard, it is arbitrary
shape = fprintf(interface, 'FUNCtion:SHAPe?');

if strcmpi(shape, 'USER')== 1
    propertyValue ='arbitrary'
else
    propertyValue ='standard'
end</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% This function is called to set the device object property value.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="arbitrary" Value="aribtrary"/>
                     <Enum Name="standard" Value="standard"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>standard</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>OutputSync</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>OUTPut:SYNC</ConfigureCommand>
                     <QueryCommand>OUTPut:SYNC?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="on" Value="1"/>
                     <Enum Name="off" Value="0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Enable or disable output SYNC from the terminal.

The default is "ON".

When the SYNC signal is disabled, the output level on the SYNC terminal is indeterminate (it might be a TTL "high" or a TTL "low"). </Description>
            </Property>
            <Property>
               <Name>TriggerSlope</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>TRIGger:SLOPe</ConfigureCommand>
                     <QueryCommand>TRIGger:SLOPe?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="positive" Value="POS"/>
                     <Enum Name="negative" Value="NEG"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>positive</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select the polarity of the EXT Trig terminal.</Description>
            </Property>
            <Property>
               <Name>TriggerSource</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>TRIGger:SOURce</ConfigureCommand>
                     <QueryCommand>TRIGger:SOURce?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="immediate" Value="IMM"/>
                     <Enum Name="external" Value="EXT"/>
                     <Enum Name="bus" Value="BUS"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>immediate</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select the source from which the function generator will accept a trigger.</Description>
            </Property>
            <Property>
               <Name>Waveform</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>FUNCtion:SHAPe</ConfigureCommand>
                     <QueryCommand>FUNCtion:SHAPe?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="sin" Value="SIN"/>
                     <Enum Name="square" Value="SQU"/>
                     <Enum Name="ramp" Value="RAMP"/>
                     <Enum Name="noise" Value="NOIS"/>
                     <Enum Name="DC" Value="DC"/>
                     <Enum Name="user" Value="USER"/>
                     <Enum Name="triangle" Value="TRI"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>sin</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select the output function.

The selected waveform is output using the previously selected frequency, amplitude, and dc offset settings. If you select "USER", the function generator outputs the arbitrary waveform currently selected by the FUNC:USER command.
</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>drivertest</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function varargout = agilent_33120_midtest01
%   AGILENT_33120_MIDTEST01 M-Code for testing a MATLAB instrument driver.
%
%   This is the machine generated code that tests a MATLAB instrument driver, 
%   
%   The test consists of multiple test steps that can test the MATLAB instrument
%   drivers functions and properties.
%   
%   The test code was generated with the MIDTEST GUI. For more information
%   on MIDTEST, type 'instrhelp midtest' at the MATLAB command prompt.
%   
% 
%   See also ICDEVICE, MIDTEST.
% 
 
%   Creation time: 17-Feb-2004 15:45:53
 

% Wrap entire test in try catch.
try
fprintf('Test: agilent_33120\n');
fprintf(['Start time: ' datestr(now) '\n']);

% Initialize variables.
varargout              = {};
noErrorMsg             = '+0,"No error"';
stepWarningOccurred    = false;
warningOccurred        = false;
errorOccurred          = false;
OkToDeleteInterfaceObj = true;
 
% Construct the interface object.
interfaceObj = instrfind('Type', 'gpib', 'BoardIndex', 0, 'PrimaryAddress', 4, 'Tag', '');
if isempty(interfaceObj)
    interfaceObj = gpib('IOTech', 0, 4);
else
    okToDeleteInterfaceObj = false;
    fclose(interfaceObj);
    interfaceObj = interfaceObj(1);
end

% Construct the device object.
deviceObj = icdevice('D:\sandbox\matlab\toolbox\instrument\instrument\drivers\agilent_33120a.mdd', interfaceObj);

% Connect the device object to the instrument.
connect(deviceObj);


% Test Step 1: reset (Function Test Step)

errorcode = false;
try
    % Execute the function.
    devicereset(deviceObj);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 2: AmplitudeUnits vpp (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'AmplitudeUnits', 'vpp');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'AmplitudeUnits');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'vpp');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: vpp');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 3: AmplitudeUnits vrms (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'AmplitudeUnits', 'vrms');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'AmplitudeUnits');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'vrms');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: vrms');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 4: AmplitudeUnits dbm (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'AmplitudeUnits', 'dbm');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'AmplitudeUnits');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'dbm');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: dbm');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 5: AmplitudeUnits default (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'AmplitudeUnits', 'default');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'AmplitudeUnits');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'vpp');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: vpp');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 6: Catalog get (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    temp = get(deviceObj, 'Catalog');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 7: SETUP - set to square (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Waveform', 'square');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Waveform');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'square');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: square');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 8: Dutycycle min (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Dutycycle', 'min');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Dutycycle');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 20);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 20');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 9: Dutycycle max (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Dutycycle', 'max');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Dutycycle');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 80);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 80');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 10: Dutycycle 20 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Dutycycle', 20.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Dutycycle');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 20);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 20');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 11: Dutycycle 40 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Dutycycle', 40.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Dutycycle');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 40);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 40');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 12: Dutycycle 60 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Dutycycle', 60.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Dutycycle');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 60);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 60');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 13: Dutycycle 80 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Dutycycle', 80.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Dutycycle');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 80);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 80');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 14: Dutycycle 50 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Dutycycle', 50.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Dutycycle');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 50);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 50');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 15: Frequency min (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Frequency', 'min');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Frequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, .0001);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: .0001');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 16: Frequency max (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Frequency', 'max');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Frequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 15000000);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 15000000');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 17: Frequency 1e-4 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Frequency', .0001);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Frequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, .0001);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: .0001');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 18: Frequency 2E-3 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Frequency', .002);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Frequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, .002);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: .002');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 19: Frequency 3E-2 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Frequency', .03);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Frequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, .03);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: .03');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 20: Frequency 4e-1 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Frequency', .4);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Frequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, .4);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: .4');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 21: Frequency 5 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Frequency', 5);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Frequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 5);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 5');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 22: Frequency 60 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Frequency', 60);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Frequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 60);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 60');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 23: Frequency 700 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Frequency', 700);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Frequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 700);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 700');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 24: Frequency 8000 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Frequency', 8000);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Frequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 8000);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 8000');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 25: Frequency 90,000 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Frequency', 90000);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Frequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 90000);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 90000');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 26: Frequency 200,000 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Frequency', 200000);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Frequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 200000);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 200000');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 27: Frequency 3,000,000 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Frequency', 3000000);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Frequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 3000000);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 3000000');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 28: Frequency 15,000,000 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Frequency', 15000000);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Frequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 15000000);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 15000000');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 29: Waveform sin (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Waveform', 'sin');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Waveform');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'sin');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: sin');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 30: Waveform square (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Waveform', 'square');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Waveform');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'square');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: square');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 31: Frequency min (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Frequency', 'min');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Frequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, .0001);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: .0001');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 32: Waveform sin (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Waveform', 'sin');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Waveform');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'sin');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: sin');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 33: Waveform square (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Waveform', 'square');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Waveform');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'square');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: square');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 34: Waveform ramp (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Waveform', 'ramp');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Waveform');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'ramp');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: ramp');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 35: Waveform triangle (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Waveform', 'triangle');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Waveform');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'triangle');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: triangle');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 36: Waveform noise (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Waveform', 'noise');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Waveform');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'noise');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: noise');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 37: Waveform user (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Waveform', 'user');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Waveform');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'user');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: user');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 38: Waveform DC (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Waveform', 'DC');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Waveform');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'DC');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: DC');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 39: Frequency max (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Frequency', 'max');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Frequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 15000000);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 15000000');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 40: Frequency min (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Frequency', 'min');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Frequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, .0001);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: .0001');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 41: OutputLoad min (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'OutputLoad', 'min');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'OutputLoad');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 50.0);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 50.0');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 42: OutputLoad max (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'OutputLoad', 'max');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 43: OutputLoad inf (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'OutputLoad', 'infinity');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 44: OutputLoad 50 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'OutputLoad', 50.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'OutputLoad');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 50.0);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 50.0');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 45: OutputMode standard (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    temp = get(deviceObj, 'OutputMode');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end
 
% Verify that the queried value matches the expected value.
if (errorcode == false)
    % Compare to the expected value.
    errorcode = ~isequal(temp, 'standard');
    
    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The property is not configured to the expected value.');
    
        % Post actual value.
        if isnumeric(temp)
            fprintf(['Actual value: ' num2str(temp)]);
        else
            fprintf(['Actual value: ' temp]);
        end
    
        % Post expected value.
        fprintf('Expected value: standard');
    end
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 46: Waveform user (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Waveform', 'user');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Waveform');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'user');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: user');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 47: OutputMode arbitrary (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    temp = get(deviceObj, 'OutputMode');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end
 
% Verify that the queried value matches the expected value.
if (errorcode == false)
    % Compare to the expected value.
    errorcode = ~isequal(temp, 'arbitrary');
    
    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The property is not configured to the expected value.');
    
        % Post actual value.
        if isnumeric(temp)
            fprintf(['Actual value: ' num2str(temp)]);
        else
            fprintf(['Actual value: ' temp]);
        end
    
        % Post expected value.
        fprintf('Expected value: arbitrary');
    end
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 48: OutputSync on (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'OutputSync', 'on');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'OutputSync');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'on');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: on');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 49: OutputSync off (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'OutputSync', 'off');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'OutputSync');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'off');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: off');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 50: OutputSync on (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'OutputSync', 'on');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'OutputSync');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'on');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: on');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 51: TriggerSlope pos (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'TriggerSlope', 'positive');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'TriggerSlope');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'positive');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: positive');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 52: TriggerSlope neg (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'TriggerSlope', 'negative');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'TriggerSlope');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'negative');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: negative');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 53: TriggerSource imm (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'TriggerSource', 'immediate');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'TriggerSource');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'immediate');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: immediate');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 54: TriggerSource ext (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'TriggerSource', 'external');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'TriggerSource');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'external');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: external');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 55: TriggerSource bus (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'TriggerSource', 'bus');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'TriggerSource');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'bus');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: bus');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 56: reset (Function Test Step)

errorcode = false;
try
    % Execute the function.
    devicereset(deviceObj);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 57: Set Property (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'TriggerSource', 'bus');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'TriggerSource');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'bus');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: bus');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 58: Burstmod On (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'Enabled', 'on');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Enabled');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'on');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: on');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 59: Trigger (Function Test Step)

errorcode = false;
try
    % Execute the function.
    invoke(deviceObj, 'trigger');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 60: Burstmod off (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'Enabled', 'off');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Enabled');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'off');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: off');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 61: AM on (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'Enabled', 'on');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Enabled');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'on');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: on');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 62: AM off (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'Enabled', 'off');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Enabled');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'off');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: off');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 63: AM on (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'Enabled', 'on');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Enabled');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'on');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: on');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 64: AM Depth min (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'Depth', 'min');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Depth');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 0);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 0');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 65: AM Depth max (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'Depth', 'max');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Depth');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 120);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 120');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 66: AM Depth 0 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'Depth', 0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Depth');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 0);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 0');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 67: AM Depth .25 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'Depth', .25);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Depth');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, .25);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: .25');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 68: AM Depth 1 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'Depth', 1);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Depth');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 1);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 1');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 69: AM Depth 10 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'Depth', 10);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Depth');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 10);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 10');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 70: AM Depth 100 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'Depth', 100);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Depth');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 100);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 100');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 71: AM Depth 120 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'Depth', 120);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Depth');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 120);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 120');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 72: AM InternalFrequency min (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'InternalFrequency', 'min');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'InternalFrequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 0.01);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 0.01');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 73: AM InternalFrequency max (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'InternalFrequency', 'max');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'InternalFrequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 20000);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 20000');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 74: AM InternalFrequency .01 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'InternalFrequency', .01);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'InternalFrequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 0.01);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 0.01');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 75: AM InternalFrequency. 11 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'InternalFrequency', .11);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'InternalFrequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, .11);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: .11');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 76: AM InternalFrequency 1.4142 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'InternalFrequency', 1.4142);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'InternalFrequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 1.4142);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 1.4142');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 77: AM InternalFrequency 21.3 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'InternalFrequency', 21.3);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'InternalFrequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 21.3);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 21.3');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 78: AM InternalFrequency 356.3 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'InternalFrequency', 356.3);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'InternalFrequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 356.3);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 356.3');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 79: AM InternalFrequency 3141.59 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'InternalFrequency', 3141.59);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'InternalFrequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 3141.59);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 3141.59');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 80: AM InternalFrequency 20000 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'InternalFrequency', 20000);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'InternalFrequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 20000);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 20000');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 81: AM InternalWaveform All (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the InternalWaveform property.
validValues = {'sin', 'square', 'triangle', 'ramp', 'noise', 'user'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Amplitudemod');
        groupObj = groupObj(1);
        set(groupObj, 'InternalWaveform', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.');
            fprintf(result);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, 'InternalWaveform');

            % Compare to the expected value.
            errorcode = ~isequal(tempOut, validValues{i});
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.');
    
                % Post actual value.
                if isnumeric(tempOut)
                    fprintf(['Actual value: ' num2str(tempOut)]);
                else
                    fprintf(['Actual value: ' tempOut]);
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i})]);
                else
                    fprintf(['Expected value: ' validValues{i}]);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.');
                fprintf(result);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf(lasterr);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 82: AM Source all (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Source property.
validValues = {'both', 'external'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Amplitudemod');
        groupObj = groupObj(1);
        set(groupObj, 'Source', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.');
            fprintf(result);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, 'Source');

            % Compare to the expected value.
            errorcode = ~isequal(tempOut, validValues{i});
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.');
    
                % Post actual value.
                if isnumeric(tempOut)
                    fprintf(['Actual value: ' num2str(tempOut)]);
                else
                    fprintf(['Actual value: ' tempOut]);
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i})]);
                else
                    fprintf(['Expected value: ' validValues{i}]);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.');
                fprintf(result);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf(lasterr);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 83: AM off (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'Enabled', 'off');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Enabled');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'off');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: off');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 84: AWF on (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Waveform', 'user');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Waveform');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'user');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: user');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 85: AWF CrestFactor (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    temp = get(groupObj, 'CrestFactor');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 86: AWF CurrentWaveformName (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    temp = get(groupObj, 'CurrentWaveformName');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 87: AWF MaxNumberWaveforms (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    temp = get(groupObj, 'MaxNumberWaveform');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end
 
% Verify that the queried value matches the expected value.
if (errorcode == false)
    % Compare to the expected value.
    errorcode = ~isequal(temp, 9);
    
    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The property is not configured to the expected value.');
    
        % Post actual value.
        if isnumeric(temp)
            fprintf(['Actual value: ' num2str(temp)]);
        else
            fprintf(['Actual value: ' temp]);
        end
    
        % Post expected value.
        fprintf('Expected value: 9');
    end
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 88: AWF Offset min (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    set(groupObj, 'Offset', 'min');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Offset');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, -0.2);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: -0.2');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 89: AWF Offset  max (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    set(groupObj, 'Offset', 'max');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Offset');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, .2);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: .2');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 90: AWF Offset -.15 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    set(groupObj, 'Offset', -0.15);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Offset');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, -.15);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: -.15');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 91: AWF Offset -.1 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    set(groupObj, 'Offset', -0.1);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Offset');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, -.1);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: -.1');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 92: AWF Offset -.05 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    set(groupObj, 'Offset', -0.05);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Offset');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, -.05);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: -.05');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 93: AWF Offset 0 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    set(groupObj, 'Offset', 0.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Offset');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 0);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 0');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 94: AWF Offset .05 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    set(groupObj, 'Offset', 0.05);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Offset');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, .05);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: .05');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 95: AWF Offset .1 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    set(groupObj, 'Offset', 0.1);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Offset');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, .1);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: .1');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 96: AWF Offset .15 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    set(groupObj, 'Offset', 0.15);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Offset');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, .15);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: .15');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 97: AWF Offset .2 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    set(groupObj, 'Offset', 0.2);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Offset');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, .2);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: .2');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 98: AWF SampleRate min (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    set(groupObj, 'SampleRate', 'min');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'SampleRate');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, .0001);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: .0001');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 99: AWF SampleRate max (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    set(groupObj, 'SampleRate', 'max');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'SampleRate');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 5000000);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 5000000');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 100: AWF SampleRate 1e-4 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    set(groupObj, 'SampleRate', .0001);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'SampleRate');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, .0001);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: .0001');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 101: AWF SampleRate 2e-3 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    set(groupObj, 'SampleRate', .002);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'SampleRate');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, .002);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: .002');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 102: AWF SampleRate .03236 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    set(groupObj, 'SampleRate', .03236);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'SampleRate');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, .03236);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: .03236');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 103: AWF SampleRate .4123 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    set(groupObj, 'SampleRate', .4123);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'SampleRate');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, .4123);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: .4123');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 104: Set Property 5.987 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    set(groupObj, 'SampleRate', 5.987);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'SampleRate');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 5.987);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 5.987');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 105: AWF SampleRate 62.45 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    set(groupObj, 'SampleRate', 62.45);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'SampleRate');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 62.45);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 62.45');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 106: AWF SampleRate 764.321 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    set(groupObj, 'SampleRate', 764.321);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'SampleRate');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 764.321);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 764.321');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 107: AWF SampleRate 8,654.3210 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    set(groupObj, 'SampleRate', 8654.3210);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'SampleRate');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 8654.3210);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 8654.3210');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 108: AWF SampleRate 92007.6 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    set(groupObj, 'SampleRate', 92007.6);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'SampleRate');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 92007.6);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 92007.6');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 109: AWF SampleRate 111,654.001 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    set(groupObj, 'SampleRate', 111654.001);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'SampleRate');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 111654.001);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 111654.001');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 110: AWF SampleRate 1,000,000 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    set(groupObj, 'SampleRate', 1000000);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'SampleRate');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 1000000);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 1000000');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 111: AWF SampleRate 2.5 million (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    set(groupObj, 'SampleRate', 2500000);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'SampleRate');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 2500000);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 2500000');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 112: AWF SampleRate 5 million (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    set(groupObj, 'SampleRate', 5000000);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'SampleRate');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 5000000);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 5000000');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 113: AWF WaveformLengthMax (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    temp = get(groupObj, 'WaveformLengthMax');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end
 
% Verify that the queried value matches the expected value.
if (errorcode == false)
    % Compare to the expected value.
    errorcode = ~isequal(temp, 16000);
    
    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The property is not configured to the expected value.');
    
        % Post actual value.
        if isnumeric(temp)
            fprintf(['Actual value: ' num2str(temp)]);
        else
            fprintf(['Actual value: ' temp]);
        end
    
        % Post expected value.
        fprintf('Expected value: 16000');
    end
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 114: AWF WaveformLengthMin (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    temp = get(groupObj, 'WaveformLengthMin');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end
 
% Verify that the queried value matches the expected value.
if (errorcode == false)
    % Compare to the expected value.
    errorcode = ~isequal(temp, 8);
    
    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The property is not configured to the expected value.');
    
        % Post actual value.
        if isnumeric(temp)
            fprintf(['Actual value: ' num2str(temp)]);
        else
            fprintf(['Actual value: ' temp]);
        end
    
        % Post expected value.
        fprintf('Expected value: 8');
    end
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 115: clear (Function Test Step)

% This test step generated no code. Most likely because a
% property or function to test was not selected.
fprintf('Test step status: PASSED\n');

% Test Step 116: SETUP - Waveform Sin (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Waveform', 'sin');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Waveform');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'sin');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: sin');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 117: SETUP - freq 1000 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Frequency', 1000.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Frequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 1000);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 1000');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 118: Burstmod On (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'Enabled', 'on');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Enabled');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'on');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: on');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 119: BM Cycles min (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'Cycles', 'min');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Cycles');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 1);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 1');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 120: BM Cycles max (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'Cycles', 'max');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Cycles');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 50000);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 50000');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 121: BM Cycles inf (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'Cycles', 'infinity');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 122: BM Cycles 1 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'Cycles', 1.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Cycles');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 1);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 1');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 123: BM Cycles 21 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'Cycles', 21.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Cycles');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 21);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 21');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 124: BM Cycles 361 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'Cycles', 361.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Cycles');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 361);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 361');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 125: BM Cycles 4172 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'Cycles', 4172.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Cycles');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 4172);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 4172');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 126: BM Cycles 50000 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'Cycles', 50000.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Cycles');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 50000);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 50000');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 127: BM InternalRate min (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'InternalRate', 'min');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'InternalRate');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 0.01);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 0.01');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 128: BM InternalRate max (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'InternalRate', 'max');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'InternalRate');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 50000);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 50000');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 129: BM InternalRate .01 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'InternalRate', 0.01);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'InternalRate');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 0.01);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 0.01');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 130: BM InternalRate 50000 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'InternalRate', 50000.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'InternalRate');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 50000);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 50000');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 131: BM Phase min (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'Phase', 'min');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Phase');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, -360.0);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: -360.0');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 132: BM Phase max (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'Phase', 'max');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Phase');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 360.0);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 360.0');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 133: BM Phase -360 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'Phase', -360.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Phase');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, -360);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: -360');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 134: BM Phase -180 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'Phase', -180.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Phase');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, -180);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: -180');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 135: BM Phase -92 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'Phase', -92.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Phase');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, -92);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: -92');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 136: BM Phase 45.4 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'Phase', 45.4);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Phase');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 45.4);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 45.4');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 137: BM Phase 360 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'Phase', 360.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Phase');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 360);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 360');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 138: BM Source All (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Source property.
validValues = {'external', 'internal'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Burstmod');
        groupObj = groupObj(1);
        set(groupObj, 'Source', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.');
            fprintf(result);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, 'Source');

            % Compare to the expected value.
            errorcode = ~isequal(tempOut, validValues{i});
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.');
    
                % Post actual value.
                if isnumeric(tempOut)
                    fprintf(['Actual value: ' num2str(tempOut)]);
                else
                    fprintf(['Actual value: ' tempOut]);
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i})]);
                else
                    fprintf(['Expected value: ' validValues{i}]);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.');
                fprintf(result);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf(lasterr);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Cleanup.
disconnect(deviceObj);
delete(deviceObj);

if (okToDeleteInterfaceObj == true)
    delete(interfaceObj);
end

% Post results.
fprintf(['Stop time: ' datestr(now) '\n']);
if (errorOccurred == true)
    fprintf('Test status: FAILED\n');
elseif (warningOccurred == true)
    fprintf('Test status: PASSED with warnings\n');
else
    fprintf('Test status: PASSED\n');
end

catch
    % An error occurred while running the test.
    fprintf('An error occurred while executing the test.\n');
    fprintf(lasterr);

    % Cleanup.
    if exist('interfaceObj') &amp;&amp; (okToDeleteInterfaceObj == true)
        delete(interfaceObj)
    end

    if exist('deviceObj')
        delete(deviceObj)
    end
end

</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>trigger</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="*TRG" Output="false"/>
                  </Commands>
               </Code>
               <Description>TRIGGER Send a software trigger to the instrument.

INVOKE(OBJ, 'trigger') sends a software trigger to the instrument.
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>amplitudemod</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="AmplitudeMod1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Depth</Name>
               <Location>amplitudemod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>AM:DEPTh</ConfigureCommand>
                     <QueryCommand>AM:DEPTh?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="120.0" Min="0.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="MIN"/>
                     <Enum Name="max" Value="MAX"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>100</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the internal modulation depth in percent. 

Select from 0% to 120%. The default is 100%.

If you select an external modulating source, the modulation depth is controlled by the signal level present on the AM Modulation terminal (5 volts peak corresponds to 100% modulation). </Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>amplitudemod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>AM:STATe</ConfigureCommand>
                     <QueryCommand>AM:STATe?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="off" Value="0"/>
                     <Enum Name="on" Value="1"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Disable or enable AM.
 
To ensure proper operation, you should enable AM after you have set up the other modulation parameters. Only one modulation mode can be enabled at a time. When you enable AM the previous modulation is turned off.</Description>
            </Property>
            <Property>
               <Name>InternalFrequency</Name>
               <Location>amplitudemod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>AM:INTernal:FREQuency</ConfigureCommand>
                     <QueryCommand>AM:INTernal:FREQuency?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="20000.0" Min="0.01"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="MIN"/>
                     <Enum Name="max" Value="MAX"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.01</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select the frequency of the modulating waveform.

Used only when the internal modulation source is selected.
Select from 10 mHz to 20 kHz. The default is 100 Hz.
</Description>
            </Property>
            <Property>
               <Name>InternalWaveform</Name>
               <Location>amplitudemod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>AM:INTernal:FUNCtion</ConfigureCommand>
                     <QueryCommand>AM:INTernal:FUNCtion?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="sin" Value="SIN"/>
                     <Enum Name="square" Value="SQU"/>
                     <Enum Name="triangle" Value="TRI"/>
                     <Enum Name="ramp" Value="RAMP"/>
                     <Enum Name="noise" Value="NOIS"/>
                     <Enum Name="user" Value="USER"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>sin</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select the shape of the modulating waveform. 

Used only when the internal modulation source is selected. You can use the noise function as the modulating waveform. However, you cannot use the noise function as or dc volts as the carrier waveform.
</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>amplitudemod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>AM:SOURce</ConfigureCommand>
                     <QueryCommand>AM:SOURce?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="both" Value="BOTH"/>
                     <Enum Name="external" Value="EXT"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>both</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select the source of the modulating signal.

The function generator will accept an internal modulating signal, an external modulating signal, or both. The default is BOTH.
</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>arbitrarywaveform</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ArbitraryWaveform1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>CrestFactor</Name>
               <Location>arbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand/>
                     <QueryCommand>DATA:ATTRibute:CFACtor?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Query the crest factor of all data points for the specified arbitrary waveform. Crest factor is the ratio of the peak to peak value to the RMS value of the waveform.</Description>
            </Property>
            <Property>
               <Name>CurrentWaveformName</Name>
               <Location>arbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand/>
                     <QueryCommand>FUNCtion:USER?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Return the name of the currently ative waveform name.</Description>
            </Property>
            <Property>
               <Name>Gain</Name>
               <Location>arbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

%get IC device
dev = get(obj,'Parent');

%get interface
g = get(dev,'Interface');

%ask for value
fprintf(g,'VOLTage?');

%get and return the value
propertyValue = eval(fscanf(g));
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

%get IC device
dev = get(obj,'Parent');

%get interface
g = get(dev,'Interface');

%check if a string was entered
if ischar(propertyValue)
	
	fprintf(g,['VOLTage ',propertyValue]);

%a string was not entered, must be a double
else	

	load = get(dev,'OutputLoad');
	
	switch load
		
		case 50
			
			if(propertyValue &gt; 6.084515)
				error(['??? Invalid value for Gain. For current',...
				' OutputLoad settings, valid values are max, min, or ',...
				' a value from .0305 to 6.084515']);
			else 
				fprintf(g,['VOLTage ',num2str(propertyValue)]);
			end%if/else
			
		case 9.9E37
			
			if(propertyValue &lt; .06095)
				error(['??? Invalid value for Gain. For current',...
				' OutputLoad settings, valid values are max, min, or ',...
				' a value from .06095 to 12.165']);
			else
				fprintf(g,['VOLTage ',num2str(propertyValue)]);
			end%if/else
			
		otherwise
			
			error(['??? Unexpected value for OutputLoad. ',...
			'Expected either 50 or 9.9e37.']);
					
			
	end%switch
	
end%if/else
	
	
	
	
	
	
	
	
	
	</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="12.165" Min="0.0305"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="6.084515" Min="0.0305"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="MIN"/>
                     <Enum Name="max" Value="MAX"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.100</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the output amplitude for the currently active function.

MIN selects the smallest amplitude allowed for the selected function (50 mVpp into 50 ohms)
MAX Selects the largest amplitude allowed (10 Vpp into 50 ohms).

The default amplitude is 100 mVpp(into 50 ohms).

For arbitrary waveforms, the maximum amplitude will be limited if the data do not span the full range of the output DAC (Digital-to-Analog Converter). For example, the built-in "SINC" does not use the full range of value between PLUS OR MINUS 1 and therefore its maximum amplitude is 6.084 (into 50 ohms).

For dc volts, the output level is actually controlled by setting the offset voltage. You can set the dc voltage to any value between PLUS OR MINUS 5 Vdc into 50 ohms or PLUS OR MINUS 10 Vdc into an open circuit.
</Description>
            </Property>
            <Property>
               <Name>MaxNumberWaveform</Name>
               <Location>arbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = get(obj, propertyName)
% This function is called to set the group object
% property value.

propertyValue = 9;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% This function is called to set the group object property value.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Query the maximun number of waveforms that the function gernerator supports.</Description>
            </Property>
            <Property>
               <Name>Offset</Name>
               <Location>arbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>VOltage:OFFSet</ConfigureCommand>
                     <QueryCommand>VOltage:OFFSet?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="0.2" Min="-0.2"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="MIN"/>
                     <Enum Name="max" Value="MAX"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the dc offset voltage for the currently active function. 

MIN selects the smallest dc offset voltage for the selected function (0 volt).
MAX selects the largest offset for the selected function. 

The default offset voltage is 0 volts for all functions.

You can set the offset to a positive or negative number. If the specified offset voltage is not valid, the function generator will automatically adjust it to the maximum dc voltage allowed with the present amplitude.

The offset voltage is automatically adjusted (and no error is generated) if you change the output termination. For example, if you set the offset to 100 mVdc and then change the termination from 50 ohms to "high impedance", the displayed offset will double to 200 mVdc. If you change from "high impedance" to 50 ohms, the displayed offset will drop in half.   


For dc volts, the output level is actually controlled by setting the offset voltage. You can set the dc voltage to any value between PLUS OR MINUS 5 Vdc into 50 ohms or PLUS OR MINUS 10 Vdc into an open circuit.

For arbitrary waveforms, the OFFSET annunciatior will turn on if the waveform data has an inherent offset present (if the average is not equal to zero). The function generator calculates the average of the data points and compares the average to zero volts. If the average is not within the two DAC counts of zero volts, the OFFSET annunciator turns on.
</Description>
            </Property>
            <Property>
               <Name>SampleRate</Name>
               <Location>arbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>FREQuency</ConfigureCommand>
                     <QueryCommand>FREQuency?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="5000000.0" Min="1.0E-4"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="MIN"/>
                     <Enum Name="max" Value="MAX"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0E-4</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the output frequency.

MIN selects the lowest frequency allowed for currently active function.
MAX selects the highest frequency allowed for currently active function.

The default frequency is 1 kHz for all functions.

For arbitrary waveforms that you create and download from memory, the maximum frequency depends on the number of points specified in the waveform.

The output frequency is automatically adjusted if you select a function whose maximum frequency is less than that of currently active function. For example, if you output 1 MHz sine wave and then change the function to triangle wave, the function generator will adjust the output to 100 kHz (the upper limit for triangle wave).
</Description>
            </Property>
            <Property>
               <Name>WaveformLengthMax</Name>
               <Location>arbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = get(obj, propertyName)
% This function is called to set the group object
% property value.

propertyValue = 16000;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% This function is called to set the group object property value.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>16000</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Maximum number of data points that can be downloaded.</Description>
            </Property>
            <Property>
               <Name>WaveformLengthMin</Name>
               <Location>arbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = get(obj, propertyName)
% This function is called to set the group object
% property value.

propertyValue = 8;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% This function is called to set the group object property value.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>8</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Minimum number of data points that can be downloaded.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>clear</Name>
               <Location>arbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function clear(obj,name)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.
% NAME is the namenof the arbitrary waveform to delete.

% According to the specificaions in the manual you should be able
% to delete user-defined waveforms both in volatile and non-volatile memory,
% except the built-in ones. If a user-defined waveform is currently active,
% you cannot delete it.If you are erasing all user-defined waveforms at once,
% the currently active waveform won't disappear and an error will be generated.


% Get the interface
interface = get(get(obj,'parent'),'interface');
fprintf(interface,'DATA:CATALOG?')
catalog = upper(fscanf(interface));
 
switch(nargin)
    case 1
        fprintf(interface,'DATA:DELete:ALL');
    otherwise
        
        % Verify that the name exists
        if length(findstr(upper(name),catalog))==0
            error('NAME must exist.');
        end
        
        % NAME must not be a built-in arbitrary waveform name.
        if any(strcmpi(name, {'sinc', 'neg_ramp', 'exp_rise', 'exp_fall','cardiac'}))
            error('cannot erase any of the following: sinc, neg_ramp, exp_rise, exp_fall , cardiac');            
        end    
        fprintf(interface,['DATA:DELete ' name]);
end</MCode>
               </Code>
               <Description>INVOKE(obj,clear)

Deletes the waveform in Volatile memory and all user-defined waveforms in non-volatile memory.

INVOKE(obj, clear, name)

Delete the specified arbitrary waveform from memory.</Description>
            </Method>
            <Method>
               <Name>create</Name>
               <Location>arbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function create(obj,name, datapoints)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.
% POINTs is an array of points
% NAME is the name of the arbitrary waveform

% if the user specifies the name as VOLATILE, then the waveform can't be stored in 
% non-volatile memory (using that name).

%Get interface
interface = get(get(obj,'parent'),'interface');

% Check that the array contains only numeric data
if ~isnumeric(datapoints) 
    error('Only numeric data is valid');
end

% Check that the number of points is within range
s = size(datapoints);

if (s &gt; 2 || (min(s) &gt; 1))
    error('The datapoints must be a 1 x N vector of values');
end

if (length(datapoints) &lt; 8 || length(datapoints) &gt; 16000)
    error('The datapoints must be between 8 and 16000 in length.');
end

if (max(datapoints) &gt; 2047 || min(datapoints) &lt; -2047)
    error('Only datapoint values between -2047 and 2047 are accepted by the instrument.');
end

% Validating the name (must not exceed 8 characters).
if ~(isvarname(name) &amp;&amp; length(name) &lt;= 8 )
    error(['NAME must be a character string with letters, ',...
           'digits and ' sprintf('\n') 'underscores. The first character ',...
           'in NAME must be a letter.' sprintf('\n') 'The maximum length is 8 characters.']);
end

% Check that the name is not one of the restricted names
if any(strcmpi(name, {'sinc', 'neg_ramp', 'exp_rise', 'exp_fall','cardiac'}))
    error('NAME cannot be any of the following: sinc, neg_ramp, exp_rise, exp_fall , cardiac');
end

% We used to write the data to the instrument in ASCII format, but
% using binblocks is much faster.

% Create a comma separated string of points
%data ='';
% concatinate each element with a comma separating them
%for each element until the end of the array
%for i =1:length(datapoints)
%    data = [data num2str(datapoints(i))];
%    if i~=length(datapoints)
%        % Concatinate and add a comma
%        data = [data ','];
%    end
%end

% Write to the intrument
% fprintf(interface,['data volatile, ' data])

binblockwrite(interface, datapoints, 'int16', 'data volatile, ');

% Write to the intrument's non-volatile memory
if ~strcmpi(name,'volatile')
    fprintf(interface,['data:Copy ' name])
end


</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>getlength</Name>
               <Location>arbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function points =  getlength(obj,name)

% OBJ is the group object.
% NAME is the name of the arbitrary waveform

% Get interface
interface = get(get(obj,'parent'),'interface'); 

% Get the number of points
 fprintf(interface,['DATA:ATTRibute:POINts? ' name]);
 points = fscanf(interface);</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>setwaveform</Name>
               <Location>arbitrarywaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setwaveform(obj, name)
% OBJ is the group object.
% NAME is the name you want to activate

% Get the interface
interface = get(get(obj,'parent'),'interface');

% Activate the waveform specified by NAME
fprintf(interface,['FUNCtion:USER ' name]);

</MCode>
               </Code>
               <Description/>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>burstmod</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="BurstMod1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Cycles</Name>
               <Location>burstmod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>BM:NCYCles</ConfigureCommand>
                     <QueryCommand>BM:NCYCles?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="50000.0" Min="1.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="MIN"/>
                     <Enum Name="max" Value="MAX"/>
                     <Enum Name="infinity" Value="INF"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the number of cycles to be output per burst( Trigger burst mode only).

Select from one cycle to 50 000 cycles, in 1 cycles increments. The default is 1 cycle.
</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>burstmod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>BM:STATe</ConfigureCommand>
                     <QueryCommand>BM:STATe?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="on" Value="1"/>
                     <Enum Name="off" Value="0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>on</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Enable or disable burst modulation. 

To ensure proper operation, you should enable the burst mode after you have set other modulation parameters. Only one modulation mode can be enabled at a time.
When you enable the burst mode, the previous modulation mode is turned off.
</Description>
            </Property>
            <Property>
               <Name>InternalRate</Name>
               <Location>burstmod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>BM:INTernal:Rate</ConfigureCommand>
                     <QueryCommand>BM:INTernal:Rate?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="50000.0" Min="0.01"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="MIN"/>
                     <Enum Name="max" Value="MAX"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.01</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the burst rate for internally triggered bursts.

The burst rate frequency defines the interval between bursts. Select from 10 mHz to 50 kHz. The default is 100 Hz.

The burst rate is used only when internal triggering is enables. The burst rate is ignored when single triggering or external triggering is enabled.

It is possible to specify a burst rate that is too fast for the function generator to output with the specified carrier frequency and burst count. If the burst rate is too high, the function generator will internally adjust it as needed to continuously re-trigger the burst. The adjustment is handled internally by the function generator.
</Description>
            </Property>
            <Property>
               <Name>Phase</Name>
               <Location>burstmod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>BM:PHASe</ConfigureCommand>
                     <QueryCommand>BM:PHASe?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="360.0" Min="-360.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="MIN"/>
                     <Enum Name="max" Value="MAX"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the starting phase for the burst (Trigger burst mode only).

Select from -360 degrees to +360, in .001 degree increments. The default is 0 degrees.
</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>burstmod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>BM:SOURCe</ConfigureCommand>
                     <QueryCommand>BM:SOURCe?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="external" Value="EXT"/>
                     <Enum Name="internal" Value="INT"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>external</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select the burst modulation source.

In the external gated burst mode, the output waveform is either "on" or "off" based on the level of the external signal applied to the rear panel.

When the internal burst source is selected, the external gated mode is disabled.

When the external gate source is selected, the output is enabled or disabled based on the logic level of the gate signal applied to the EXT TRIG terminal. The default is INT.

When external gate source is selected, the burst count, burst rate, burst phase, and burst trigger are ignored (these parameters are used only for burst mode).</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>calibration</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Calibration1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Count</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand/>
                     <QueryCommand>CALibration:Count?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Query the function generator to determine the number of times it has been calibrated.</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand/>
                     <QueryCommand>CALibration:Secure:State?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="on" Value="1"/>
                     <Enum Name="off" Value="0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>on</DefaultValue>
               <ReadOnly>while open</ReadOnly>
               <Description>Query the secured state of the funtion generator.</Description>
            </Property>
            <Property>
               <Name>Message</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% Get interface
interface = get(get(obj,'parent'),'interface');

% Get the string
fprintf(interface,'CALibration:STRing?')

% Return it
propertyValue = fscanf(interface);
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.



% Error checking.
if ~ischar(propertyValue)
    error('MESSAGE must be a string.');
end

% Get interface.
interface = get(get(obj,'parent'),'interface');

% Write the command to instrument.
fprintf(interface, ['CALibration:STRing "' propertyValue '"']);


</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Record calibration information about the function generator.</Description>
            </Property>
            <Property>
               <Name>Setup</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>CALibration:SETup</ConfigureCommand>
                     <QueryCommand>CALibration:SETup?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="84.0" Min="0.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Configure the function generator's internal state for each of the calibration steps to be performed.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>securedevice</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function securedevice(obj, calibrationCode, state)
% OBJ is the device object.
% code is the code to secure the instrument

%Get parent of object
parent = get(obj,'parent');

% Get interface.
interface = get(parent,'Interface');

% Parse inputs.
switch (nargin)
case 1
    error('CALIBRATIONCODE must be specified.');
case 2
    fprintf(interface,'CALibration:SECure:STATe?');
    currentState = fscanf(interface, '%g');
case 3
    % STATE can either be 'secure' or 'unsecure'.
    if ~any(strcmpi(state, {'secure', 'unsecure'}))
        error('STATE must be either ''secure'' or ''unsecure''.');
    end
   
    % Translating State into the expected current state numeric value.
    if strcmpi(state, 'secure')
        currentState = 0;
    else
        currentState = 1;
    end
otherwise
    error('Too many input arguments.');
end

% Error checking.
if ~ischar(calibrationCode)
    error('CALIBRATIONCODE must be a string.');
end

% Unsecure or secure the instrument.
switch (currentState)
case 0
    % Secure.
    fprintf(interface,['CALibration:SECure:STATe ON, ' calibrationCode]);   
case 1
    % Unsecure.
    fprintf(interface,['CALibration:SECure:STATe OFF , ' calibrationCode]);
end
      
</MCode>
               </Code>
               <Description>SECUREDEVICE secure or unsecure the power supply for calibration

INVOKE(OBJ, 'securedevice','code','secure') to 'secure' the device after the calibration process.

INVOKE(OBJ, 'securedevice','code','unsecure') to ‘unsecure’ the device before calibration.



</Description>
            </Method>
            <Method>
               <Name>setsecurecode</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setsecurecode(obj,secureCode)
% OBJ is the device object.
% SecureCode is the new code.

% Get parent
parent = get(obj,'parent');

% Get the interface.
interface = get(parent,'interface');

% Validating the code (12-character format).
if ~(isvarname(secureCode) &amp;&amp; length(secureCode) &lt;= 12)
    error(['SECAURECODE must be a character string with letters, ',...
           'digits and ' sprintf('\n') 'underscores. The first character ',...
           'in SECURECODE must be a letter.' sprintf('\n') 'The maximum length is 12 characters.']);
end

% Verifying that the device is unsecured before changing the code. 
fprintf(interface,'CALibration:SECure:STATe?')
state = fscanf(interface,'%g');

if (state == 1)
    error(['The device must be unsecured before changing the code.' sprintf('\n'),...
        'Type ''instrhelp(obj, ''securedevice'')'' for more information on how ' sprintf('\n'),...
        'to unsecure the device.']);
    return
end

% Set the secure code to the new code.
fprintf(interface,['CALibration:SECure:CODE ' secureCode])</MCode>
               </Code>
               <Description>SETSECURECDE To change the security code into a new one.

INVOKE(OBJ, 'newcode') to change the current security code to a new one.

Note: You must first unsecure the Fumction Generator using the old security code.
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>display</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Display1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Enabled</Name>
               <Location>display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>DISPlay</ConfigureCommand>
                     <QueryCommand>DISPlay?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="on" Value="1"/>
                     <Enum Name="off" Value="0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>on</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Turn the front panel display on or off.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>clear</Name>
               <Location>display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="DISPlay:TEXT:CLEar" Output="false"/>
                  </Commands>
               </Code>
               <Description>INVOKE(obj, clear)  Clear the message displayed on the front panel.</Description>
            </Method>
            <Method>
               <Name>settext</Name>
               <Location>display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setText(obj,str)
% OBJ is the device object.
% str is the string to display

%get parent
parent = get(obj,'parent');

%Get interface
interface = get(parent,'interface');

% Error checking.
if ~ischar(str)
    error('STR must be a string.');
end

% Write the command to instrument.
fprintf(interface, ['Display:Text "' str '"']);


</MCode>
               </Code>
               <Description>INVOKE(obj,settext,text) Display a message containing up to eleven characters on the front panel.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>frequencymod</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="FrequencyMod1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Enabled</Name>
               <Location>frequencymod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>SOUR:FM:STAte</ConfigureCommand>
                     <QueryCommand>SOUR:FM:STAte?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="on" Value="1"/>
                     <Enum Name="off" Value="0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>on</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Disable or enable FM. 

To ensure proper operation, you should enable FM after you have set up the other modulation parameters. Only one modulation mode can be enabled at a time. When you enable FM, the previous modulation mode is turned off.</Description>
            </Property>
            <Property>
               <Name>InternalDeviation</Name>
               <Location>frequencymod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>FM:DEViation</ConfigureCommand>
                     <QueryCommand>FM:DEViation?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100000.0" Min="0.01"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="MIN"/>
                     <Enum Name="max" Value="MAX"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>100</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the peak frequency deviation in Hertz.

This value represents the variation in frequency of the modulating waveform.  from the carrier frequency.

Select from 10 mHz to 7.5 MHz. Default is 100 Hz.

The carrier frequency must always be greater than or equal to the peak Frequency deviation. If you attempt to set the deviation to a value greater than the carrier frequency (with FM enabled), the function generator will automatically adjust the deviation to equal the carrier frequency.

The sum of the carrier frequency and peak frequency deviation must be less than or equal to the maximum frequency for the selected function plus 100 kHz. If you attempt to set the deviation to an invalid value, the multimeter will automatically adjust the value to the maximum value allowed with the present carrier frequency.
</Description>
            </Property>
            <Property>
               <Name>InternalFrequency</Name>
               <Location>frequencymod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>FM:INTERnal:FREQuency</ConfigureCommand>
                     <QueryCommand>FM:INTERnal:FREQuency?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="10000.0" Min="0.01"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="MIN"/>
                     <Enum Name="max" Value="MAX"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.01</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select the frequency of the modulating waveform.

Select from 10 mHz to 100 kHz. The default is 10 Hz.</Description>
            </Property>
            <Property>
               <Name>InternalWaveform</Name>
               <Location>frequencymod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>FM:INTERnal:FUNCtion</ConfigureCommand>
                     <QueryCommand>FM:INTERnal:FUNCtion?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="sin" Value="sin"/>
                     <Enum Name="square" Value="SQU"/>
                     <Enum Name="triangle" Value="TRI"/>
                     <Enum Name="ramp" Value="RAMP"/>
                     <Enum Name="noise" Value="NOIS"/>
                     <Enum Name="user" Value="USER"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>sin</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select the shape of the modulating function.

You can use the noise function as a modulating waveform. However, you cannot use the noise function as a carrier waveform. The default value is SIN.
</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>frequencysweep</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="FrequencySweep1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Enabled</Name>
               <Location>frequencysweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>SWEep:STATe </ConfigureCommand>
                     <QueryCommand>SWEep:STATe?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="on" Value="1"/>
                     <Enum Name="off" Value="0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>On</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Enable or disable the sweep mode.

To ensure proper operation, you should enable AM after you have set up the other modulation parameters. Only one modulation mode can be enabled at a time. When you enable AM the previous modulation is turned off.</Description>
            </Property>
            <Property>
               <Name>Spacing</Name>
               <Location>frequencysweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>SWEep:SPACing</ConfigureCommand>
                     <QueryCommand>SWEep:SPACing?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="linear" Value="LIN"/>
                     <Enum Name="log" Value="LOG"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>linear</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select the linear or the algorithmic spacing for the sweep.

The default is linear.</Description>
            </Property>
            <Property>
               <Name>Start</Name>
               <Location>frequencysweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>FREQuency:STARt</ConfigureCommand>
                     <QueryCommand>FREQuency:STARt?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="1.5E7" Min="0.01"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="MIN"/>
                     <Enum Name="max" Value="MAX"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.01</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the start frequency 

Select from 10 mHz to 15 MHz. the sweep is phase continuous over the full frequency range. The default is 100 Hz.]

Executing the *RST command does not set the start and stop frequency to their default values. Instead the restart operation set the start frequency to 10 mHz(minimum) and the stop frequency to 15 MHz (maximum).
</Description>
            </Property>
            <Property>
               <Name>Stop</Name>
               <Location>frequencysweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>FREQuency:STOP</ConfigureCommand>
                     <QueryCommand>FREQuency:STOP?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="max" Value="MAX"/>
                     <Enum Name="min" Value="MIN"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="1.5E7" Min="0.01"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1000</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the stop frequency. 

Select from 10mHz to 15 MHz. The sweep is phase is continuous over the full frequency range. The default is 1 kHz.

Executing the *RST command does not set the start and stop frequency to their default values. Instead the restart operation set the start frequency to 10 mHz(minimum) and the stop frequency to 15 MHz (maximum). </Description>
            </Property>
            <Property>
               <Name>Time</Name>
               <Location>frequencysweep</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>SWEep:TIME</ConfigureCommand>
                     <QueryCommand>SWEep:TIME?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="500.0" Min="0.0010"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="MIN"/>
                     <Enum Name="max" Value="MAX"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the number of seconds required to sweep from start of the frequency sweep to stop frequency.

Select from 1 ms to 500 seconds.

The number of frequency points in the sweep depends on the sweep time you select and is automatically calculated by the function generator.
</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>fskmod</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="FSKmod1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Enabled</Name>
               <Location>fskmod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>FSKey:STATe</ConfigureCommand>
                     <QueryCommand>FSKey:STATe?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="on" Value="1"/>
                     <Enum Name="off" Value="0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>on</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Disable or enable the FSK mode. 

To ensure proper operation, you should enable AM after you have set up the other modulation parameters. Only one modulation mode can be enabled at a time. When you enable AM the previous modulation is turned off.</Description>
            </Property>
            <Property>
               <Name>Frequency</Name>
               <Location>fskmod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>FSKey:FREQuency</ConfigureCommand>
                     <QueryCommand>FSKey:FREQuency?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="1.5E7" Min="0.01"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="MIN"/>
                     <Enum Name="max" Value="MAX"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.01</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the FSK "hop" frequency from 10 mHz to 15 MHz.

The default value is 100 Hz.</Description>
            </Property>
            <Property>
               <Name>InternalRate</Name>
               <Location>fskmod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>FSKey:INTernal:RATE</ConfigureCommand>
                     <QueryCommand>FSKey:INTernal:RATE?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="50000.0" Min="0.01"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="MIN"/>
                     <Enum Name="max" Value="MAX"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>10</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the rate at which the internal frequency "shifts" between the carrier and hop frequency. 

Select from 10 mHz to 50 kHz, The default is 10 Hz.

The FSK rate is ignored when the external source is selected.
</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>fskmod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>FSK:SOURCe</ConfigureCommand>
                     <QueryCommand>FSK:SOURCe?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="internal" Value="INT"/>
                     <Enum Name="external" Value="EXT"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>internal</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select an internal or external FSK.

The default is INT.

When the internal source is selected, the rate at which output frequency "shifts" between carrier frequency and hop frequency is determined by the FSK rate specified.

When external source is selected, the output frequency is determined by the signal level on the rear-panel FSK terminal. When a low "TTL" is level is present, the carrier frequency is output.

The maximum external FSK rate is 1 MHz.

The external annunciator turns on when the function generator is waiting for external trigger signal.
</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>system</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="System1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ByteOrder</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>Format:BOrder</ConfigureCommand>
                     <QueryCommand>Format:BOrder?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="normal" Value="NORM"/>
                     <Enum Name="swapped" Value="SWAP"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>normal</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select the byte order for binary transfers in the block mode using the DATA:DAC command.</Description>
            </Property>
            <Property>
               <Name>Version</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand/>
                     <QueryCommand>System:VERsion?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Query the function generator to determine the present SCPI version.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>beep</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="SYSTem:BEEPer" Output="false"/>
                  </Commands>
               </Code>
               <Description>INVOKE(obj,beep) to issue asingle beep immediately.
</Description>
            </Method>
            <Method>
               <Name>deletestate</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function deletestate(obj)

% OBJ is the group object.
% LOCATION is the specified storage location

% Get the interface
interface = get(get(obj,'parent'),'interface');

% Error checking
    % LOCATION must be a scalar and between 1 and 5, inclusive.
    if ~isnumeric(location) 
        error('LOCATION must be numeric');
    elseif  location &gt;3 || location &lt;0
            error('LOCATION must be between 0 and 3 inclusive');
    end
    
% Send memory name query command
fprintf(interface,['MEMory:STATe:DELete ' num2str(location)])

% Return state name
propertyValue = fscanf(interface)</MCode>
               </Code>
               <Description>INVOKE(obj,loadstate,location) to delete a previously stored state.</Description>
            </Method>
            <Method>
               <Name>loadstate</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function loadstate(obj,location)
% OBJ is the group object.
% LOCATION is the specified storage location

% Get the interface
interface = get(get(obj,'parent'),'interface');

% Error checking
    % LOCATION must be a scalar and between 1 and 5, inclusive.
    if ~isnumeric(location) 
        error('LOCATION must be numeric');
    elseif  location &gt;3 || location &lt;0
            error('LOCATION must be between 0 and 3 inclusive');
    end
    
% Send memory name query command
fprintf(interface,['*RCL ' num2str(location)])

% Return state name
propertyValue = fscanf(interface)</MCode>
               </Code>
               <Description>INVOKE(obj,loadstate,location) to recall a previously stored state.</Description>
            </Method>
            <Method>
               <Name>savestate</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function savestate(obj,location)
% OBJ is the group object.
% LOCATION is the specified storage location

% Get the interface
interface = get(get(obj,'parent'),'interface');

% Error checking
    % LOCATION must be a scalar and between 1 and 5, inclusive.
    if ~isnumeric(location) 
        error('LOCATION must be numeric');
    elseif  location &gt;3 || location &lt;0
            error('LOCATION must be between 0 and 3 inclusive');
    end
    
% Send memory name query command
fprintf(interface,['*SAV ' num2str(location)])

% Return state name
propertyValue = fscanf(interface)</MCode>
               </Code>
               <Description>INVOKE(obj,savestate,location) to store an instrument configuration at a LOCATION.
</Description>
            </Method>
         </MethodInfo>
      </Group>
   </GroupInfo>
</MATLABInstrumentDriver>