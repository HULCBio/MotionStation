function build(this)
% Creates uncertainty dialog.

% Author(s): P. Gahinet
% Copyright 1986-2004 The MathWorks, Inc.
% $Revision: 1.1.6.5 $ $Date: 2004/04/11 00:45:18 $
xgap = 2;
FH1 = 8;
FH2 = 16;
BH = 1.5; 
DlgH = BH + FH1 + FH2 + 5.5;
DlgW = 70;
FW = DlgW-2*xgap;

UIColor = get(0,'DefaultUIControlBackgroundColor');
Dlg = figure('Name','Uncertain Parameters', ...
   'Visible','off', ...
   'MenuBar','none', ...
   'Units','character',...
   'Position',[0 0 DlgW DlgH], ...
   'Color', UIColor, ...
   'IntegerHandle','off', ...
   'HandleVisibility','off',...
   'Resize','off',...
   'NumberTitle','off');
centerfig(Dlg,0);
set(Dlg,'CloseRequestFcn',{@localHide Dlg})

this.Figure = handle(Dlg);

% Button group
BW = 10;  Bgap = 1;
X0 = DlgW - xgap - 4*BW - 3*Bgap;
Y0 = 0.5;
Handles.OK = uicontrol('Parent',Dlg, ...
   'Units','character', ...
   'Position',[X0 Y0 BW BH], ...
   'Callback',{@localOK Dlg this},...
   'String','OK');
X0 = X0+BW+Bgap;
uicontrol('Parent',Dlg, ...
   'Units','character', ...
   'Position',[X0 Y0 BW BH], ...
   'Callback',{@localHide Dlg},...
   'String','Cancel');
X0 = X0+BW+Bgap;
uicontrol('Parent',Dlg, ...
   'Units','character', ...
   'Callback','helpview([docroot ''/toolbox/sloptim/sloptim.map''],''uncertain'')', ...
   'Position',[X0 Y0 BW BH], ...
   'String','Help');
X0 = X0+BW+Bgap;
uicontrol('Parent',Dlg, ...
   'Units','character', ...
   'Position',[X0 Y0 BW BH], ...
   'Callback',{@localApply Dlg this},...
   'String','Apply');

% Optimization settings frame
FX = xgap;
X0 = FX+xgap+1;
FY1 = 1+BH;
uicontrol('Parent',Dlg, ...
   'Style','frame', ...
   'Units','character',...
   'BackgroundColor',UIColor,...
   'Position',[xgap FY1 FW FH1]);
uicontrol('Parent',Dlg, ...
   'BackgroundColor',UIColor,...
   'Style','text', ...
   'String','Optimized responses',...
   'HorizontalAlignment','center', ...
   'Units','character',...
   'Position',[2*xgap FY1+FH1-.75 23 1.2]);

x0 = X0;
y0 = FY1+FH1-2.7;
chk1 = uicontrol('Parent',Dlg, ...
   'Style','checkbox', ...
   'BackgroundColor',UIColor,...
   'Units','character',...
   'Value',1,...
   'Callback','',...
   'Position',[x0 y0 3 1.4]);
uicontrol('Parent',Dlg, ...
   'BackgroundColor',UIColor,...
   'Style','text', ...
   'String','Nominal response', ...
   'HorizontalAlignment','left', ...
   'Units','character',...
   'Position',[x0+4 y0 20 1.2]);
y0 = y0-1.6;
chk2 = uicontrol('Parent',Dlg, ...
   'Style','checkbox', ...
   'BackgroundColor',UIColor,...
   'Units','character',...
   'Value',1,...
   'Callback',{@localOptimizeUnc Dlg this},...
   'Position',[x0 y0 3 1.4]);
uicontrol('Parent',Dlg, ...
   'BackgroundColor',UIColor,...
   'Style','text', ...
   'String','Responses for', ...
   'HorizontalAlignment','left', ...
   'Units','character',...
   'Position',[x0+4 y0 20 1.2]);
x0 = x0 + 4;
y0 = y0-1.5;
rb1 = uicontrol('Parent',Dlg, ...
   'Style','radiobutton', ...
   'String','All sample parameter values',...
   'Units','character',...
   'BackgroundColor',UIColor,...
   'Position',[x0 y0 40 1.2],...
   'Callback',{@localToggleRadio Dlg this},...
   'Value',0);
y0 = y0-1.5;
rb2 = uicontrol('Parent',Dlg, ...
   'Style','radiobutton', ...
   'String','Min and max values only',...
   'Units','character',...
   'BackgroundColor',UIColor,...
   'Position',[x0 y0 40 1.2],...
   'Callback',{@localToggleRadio Dlg this},...
   'Value',1);
ud.OptimCheck = [chk1;chk2];
ud.OptimRadio = [rb1;rb2];

% Parameter settings frame
FY2 = 1+FY1+FH1;
uicontrol('Parent',Dlg, ...
   'Style','frame', ...
   'Units','character',...
   'BackgroundColor',UIColor,...
   'Position',[xgap FY2 FW FH2]);
uicontrol('Parent',Dlg, ...
   'BackgroundColor',UIColor,...
   'Style','text', ...
   'String','Uncertain parameters',...
   'HorizontalAlignment','center', ...
   'Units','character',...
   'Position',[2*xgap FY2+FH2-.75 22 1.2]);

ytop = FY2+FH2-2.7;
x0 = X0;
TW = 23;
EW = (FX+FW)-(x0+TW+xgap);
uicontrol('Parent',Dlg, ...
   'BackgroundColor',UIColor,...
   'Style','text', ...
   'String','Sampling method:', ...
   'HorizontalAlignment','left', ...
   'Units','character',...
   'Position',[x0 ytop TW 1.2]);
ud.Distribution = uicontrol(Dlg, ...
   'Style','popup', ...
   'BackgroundColor','white', ...
   'HorizontalAlignment','left', ...
   'Units','character',...
   'String',{'Random (Monte Carlo)';'Grid'},...
   'Value',1,...
   'Callback',{@localToggleDistribution this},...
   'Position',[x0+TW ytop+.2 EW 1.2]);

ytop = ytop-1.9;
uicontrol('Parent',Dlg, ...
   'BackgroundColor',UIColor,...
   'Style','text', ...
   'String','Number of samples:', ...
   'HorizontalAlignment','left', ...
   'Units','character',...
   'Position',[x0 ytop TW 1.2]);
ns1 = uicontrol(Dlg, ...
   'Style','edit', ...
   'BackgroundColor','white', ...
   'HorizontalAlignment','left', ...
   'Units','character',...
   'Callback',{@localSetNumSample this},...
   'Position',[x0+TW ytop EW 1.4]);
ns2 = uicontrol(Dlg, ...
   'Style','text', ...
   'BackgroundColor',UIColor,...
   'HorizontalAlignment','left', ...
   'Units','character',...
   'Visible','off',...
   'Position',[x0+TW ytop EW 1.2]);
ud.NumSample = [ns1;ns2];

ytop = ytop - .6;

% Buttons
ybot = FY2+0.5;
x0 = FX+FW/2-BW-Bgap/2;
b1 = uicontrol('Parent',Dlg, ...
   'Units','character', ...
   'Position',[x0 ybot BW BH], ...
   'Callback',{ @localSelectCallback, this},...
   'String','Add...');
x0 = x0 + BW + Bgap;
b2 = uicontrol('Parent',Dlg, ...
   'Units','character', ...
   'Callback','', ...
   'Position',[x0 ybot BW BH], ...
   'Callback',{ @localDeleteCallback, this, Dlg},...
   'String','Delete');
ud.TableButton = [b1;b2];
ybot = ybot + BH + 0.5;


% REVISIT: Calculate char -> pixel conversion ratios
set(Dlg,'Units','pixel')
fpos = get(Dlg,'Position');
set(Dlg,'Units','character')
char2pix = fpos([3 4])./[DlgW DlgH];

% Parameter tables
x0 = FX+1.4*xgap;
TH = ytop-ybot;
TW = FW-2.4*xgap;
tabpos = round([x0 ybot TW TH] .* [char2pix char2pix]);
table1 = uitable(Dlg);
% REVISIT: Only pixel units currently supported
set(table1,'Visible',1,...
   'Position',tabpos,...
   'NumRows',10,...
   'ColumnNames',{'Parameter' 'Nominal' 'Min' 'Max'})
set(table1.Table,'ColumnSelectionAllowed','off','AutoResizeMode',true)
set(table1.TableScrollPane.getRowHeader,'Visible','off')
table1.setEditable(1,false) % cannot edit column #1
table1.setEditable(2,false)  

table2 = uitable(Dlg);
set(table2,'Visible',0,...
   'Position',tabpos,...
   'NumRows',10,...
   'ColumnNames',{'Parameter' 'Nominal' 'Sample Values'})
set(table2.Table,'ColumnSelectionAllowed','off','AutoResizeMode',true)
set(table2.TableScrollPane.getRowHeader,'Visible','off')
table2.setEditable(1,false) % cannot edit column #1
table2.setEditable(2,false)  

ud.Table = [table1;table2];
set(ud.Table,'DataChangedCallback',{@LocalTableChanged this})

% Enable checkbox
x0 = xgap;
y0 = FY2+FH2+1.2;
ud.EnableCheck = uicontrol('Parent',Dlg, ...
   'Style','checkbox', ...
   'BackgroundColor',UIColor,...
   'Units','character',...
   'Value',1,...
   'Callback',{@localSetEnable Dlg},...
   'Position',[x0 y0 3 1.4]);
uicontrol('Parent',Dlg, ...
   'BackgroundColor',UIColor,...
   'Style','text', ...
   'String','Account for parameter uncertainty', ...
   'HorizontalAlignment','left', ...
   'Units','character',...
   'Position',[x0+4 y0 55 1.2]);

set(Dlg,'UserData',ud)

%------------------

function localDelete(eventsrc,eventdata,Dlg)
% Deletes dialog when parent axes go away
delete(Dlg)


function localHide(eventsrc,eventdata,Dlg)
% Deletes dialog when parent axes go away
set(Dlg,'Visible','off')


function localOK(eventsrc,eventdata,Dlg,this)
% Deletes dialog when parent axes go away
localApply(eventsrc,eventdata,Dlg,this)
set(Dlg,'Visible','off')

   
function localToggleDistribution(eventsrc,eventdata,this)
% Callback for Sampling Distribution callback
this.ActiveSpec = get(eventsrc,'Value');
% update frame contents
update(this)


function localSetEnable(eventsrc,eventdata,Dlg)
% Callback for enable/disable checkbox
ud = get(Dlg,'UserData');
set(ud.OptimRadio,'Enable','off')
if get(eventsrc,'Value')==1
   Enable = 'on';
   if get(ud.OptimCheck(2),'Value')==1
      set(ud.OptimRadio,'Enable','on')
   end
else
   Enable = 'off';
end
set([ud.Distribution;ud.NumSample;ud.TableButton;ud.OptimCheck],'Enable',Enable)
set(ud.Table,'Editable',strcmp(Enable,'on'))


function localOptimizeUnc(eventsrc,eventdata,Dlg,this)
% Select/deselect optimization of uncertain responses
ud = get(Dlg,'UserData');
if get(eventsrc,'Value')==1
   set(ud.OptimRadio,'Enable','on')
   if get(ud.OptimRadio(1),'Value')==1
      set(this.Uncertainty,'Optimized','all')
   else
      set(this.Uncertainty,'Optimized','vertex')
   end
else
   set(ud.OptimRadio,'Enable','off')
   set(this.Uncertainty,'Optimized','none')
end


function localToggleRadio(eventsrc,eventdata,Dlg,this)
% Toggle radio buttons
ud = get(Dlg,'UserData');
isSelected = (eventsrc==ud.OptimRadio);
set(ud.OptimRadio(isSelected),'Value',1)
set(ud.OptimRadio(~isSelected),'Value',0)
if find(isSelected)==1
   set(this.Uncertainty,'Optimized','all')
else
   set(this.Uncertainty,'Optimized','vertex')
end


function localSelectCallback(hSrc, hData, this)
% Opens selection dialog
selectdlg(this)


function localDeleteCallback(hSrc, hData, this, Dlg)
% Opens selection dialog
t = this.Figure.UserData.Table(this.ActiveSpec);
USpec = this.Uncertainty(this.ActiveSpec);
np0 = length(USpec.Parameters);
SelectedRows = 1+t.Table.getSelectedRows;
SelectedRows = SelectedRows(SelectedRows>0 & SelectedRows<=np0);
if ~isempty(SelectedRows)
   ParNames = {USpec.Parameters(SelectedRows).Name};
   ndel = length(ParNames);
   for ct=1:ndel
      this.Uncertainty(1).rmpar(ParNames{ct})
      this.Uncertainty(2).rmpar(ParNames{ct})
   end
   % Update table
   updateTable(this)
end


function localSetNumSample(hSrc, hData, this)
% Set number of samples
s = get(hSrc,'String');
if ~isempty(s)
   this.Uncertainty(1).NumSamples = s;
else
   set(hSrc,'String',this.Uncertainty(1).NumSamples)
end


function localApply(eventsrc,eventdata,Dlg,this)
% Applies uncertainty spec
ud = get(Dlg,'UserData');
Test = this.Test;
if get(ud.EnableCheck,'Value')==1
   % Validate spec
   uspec = this.Uncertainty(this.ActiveSpec);
   if isempty(uspec.Parameters)
      Test.Runs = [];
   else
      try
         % Get list of variable names in model workspace
         ModelWS = get_param(this.Project.Model,'ModelWorkspace');
         s = whos(ModelWS);
         ModelWSVars = {s.name};
         % Evaluate
         evalForm(uspec,ModelWS,ModelWSVars);
      catch
         [junk,errmsg]=strtok(lasterr,sprintf('\n'));
         errordlg(errmsg,'Parameter Error','modal')
         return
      end
      % Apply spec to test
      Test.Runs = uspec;
   end
   Test.Enable = 'on';
else
   Test.Enable = 'off';
end
% Add test to project if necessary
if ~any(this.Project.Tests==Test)
   this.Project.Tests = [this.Project.Tests ; Test];
end


function LocalTableChanged(hSrc, hData, this)
% Callback when editing table
ev = hData.getEvent;
row = ev.getLastRow + 1;
col = ev.getColumn + 1;
USpec = this.Uncertainty(this.ActiveSpec);
if (col > 2) && (row<=length(USpec.Parameters))
  value = ev.getSource.getValueAt(row - 1, col - 1);
  switch col
     case 3
        if this.ActiveSpec==1
           USpec.Parameters(row).Min = value;
        else
           USpec.Parameters(row).Values = value;
        end
     case 4
        USpec.Parameters(row).Max = value;
  end
end
