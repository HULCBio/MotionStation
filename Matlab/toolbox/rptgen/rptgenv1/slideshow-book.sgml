<!DOCTYPE Book PUBLIC "-//OASIS//DTD DocBook V4.0//EN"> 
<Book><?html-filename slideshow-book.html>
  <BookInfo>
    <Title>
      Playshow Book
    </Title>
    <Subtitle>
      Shows Pages of a Slideshow
    </Subtitle>
    <Author>
      <FirstName>
        The MathWorks
      </FirstName>
    </Author>
    <Date>
      01-Sep-2000
    </Date>
  </BookInfo>
  <Chapter>
    <?html-filename slideshow-book-chap-1.html>
      

    <Title>
      Playshow
    </Title>
    <para>
      The PLAYSHOW command creates a slide show which steps the user through a series of commands and displays them to the screen.  This report contains each page of output from the following slide shows:
    </para>
    <ItemizedList Spacing="Compact">
      
      <ListItem>
        <Para>
          
          intro
        </Para>
        
      </ListItem>
      <ListItem>
        <Para>
          
          buckydem
        </Para>
        
      </ListItem>
      <ListItem>
        <Para>
          
          inverter
        </Para>
        
      </ListItem>
      <ListItem>
        <Para>
          
          e2pi
        </Para>
        
      </ListItem>
      <ListItem>
        <Para>
          
          sparsity
        </Para>
        
      </ListItem>
      <ListItem>
        <Para>
          
          matmanip
        </Para>
        
      </ListItem>
      <ListItem>
        <Para>
          
          fitdemo
        </Para>
        
      </ListItem>
    </ItemizedList>
  </Chapter>
  
  <Chapter>
    <?html-filename slideshow-book-chap-2.html>
      

    <Title>
      intro
    </Title>
    
    <Sect1>
      <?html-filename slideshow-book-chap-2-sect1-1.html>
        

      <Title>
        PageNumber: 
        1
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-0-hg.png">
        

      
      <ProgramListing>
 Welcome to MATLAB.  This demonstration (and the
 entire demo system) is written in MATLAB's fourth
 generation language.

 Here are the MATLAB commands used to produce the picture
 shown above.
 >> load logo
 >> surf(L,R), colormap(M), n = length(L(:,1));
 >> axis off, axis([1 n 1 n -.2 .8]), view(-37.5,30)
 >> title('MATLAB.  The Language of Techical Computing.');
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-2-sect1-2.html>
        

      <Title>
        PageNumber: 
        2
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-1-hg.png">
        

      
      <ProgramListing>
 First, let's create a simple vector with 9 elements called 'a'.

 (During most of this demo, we will display the MATLAB
 commands typed at the command line prompt ">>" and the
 corresponding output in the figure window shown above.)
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-2-sect1-3.html>
        

      <Title>
        PageNumber: 
        3
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-2-hg.png">
        

      
      <ProgramListing>
 Now let's add 2 to each element of our vector, 'a', and store
 the result in a new vector.

 Notice how MATLAB requires no special handling of vector
 or matrix math.
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-2-sect1-4.html>
        

      <Title>
        PageNumber: 
        4
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-3-hg.png">
        

      
      <ProgramListing>
 Creating graphs in MATLAB is as easy as one command.
 Let's plot the result of our vector addition with grid lines.

 >> plot(b)
 >> grid on
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-2-sect1-5.html>
        

      <Title>
        PageNumber: 
        5
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-4-hg.png">
        

      
      <ProgramListing>
 MATLAB can make other graph types as well, with axis labels.

>>bar(b)
>>xlabel('Sample #')
>>ylabel('Pounds')
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-2-sect1-6.html>
        

      <Title>
        PageNumber: 
        6
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-5-hg.png">
        

      
      <ProgramListing>
 MATLAB can use symbols in plots as well. Here is an
 example using *'s to mark the points.  MATLAB offers a
 variety of other symbols and line types.

 >> plot(b,'*')
 >> axis([0 10 0 10])
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-2-sect1-7.html>
        

      <Title>
        PageNumber: 
        7
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-6-hg.png">
        

      
      <ProgramListing>
 One area in which MATLAB excels is matrix computation.

 Creating a matrix is as easy as making a vector, using
 semicolons (;) to separate the rows of a matrix.
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-2-sect1-8.html>
        

      <Title>
        PageNumber: 
        8
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-7-hg.png">
        

      
      <ProgramListing>
We can easily find the transpose of the matrix 'A'.
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-2-sect1-9.html>
        

      <Title>
        PageNumber: 
        9
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-8-hg.png">
        

      
      <ProgramListing>
 Now let's multiply these two matrices together.

 Note again that MATLAB doesn't require you to deal with
 matrices as a collection of numbers.  MATLAB knows when
 you are dealing with matrices and adjusts your calculations
 accordingly.
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-2-sect1-10.html>
        

      <Title>
        PageNumber: 
        10
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-9-hg.png">
        

      
      <ProgramListing>
Instead of doing a matrix multiply, we can multiply the
corresponding elements of two matrices or vectors
using the .* operator.
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-2-sect1-11.html>
        

      <Title>
        PageNumber: 
        11
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-10-hg.png">
        

      
      <ProgramListing>
 Let's find the inverse of a matrix ...
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-2-sect1-12.html>
        

      <Title>
        PageNumber: 
        12
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-11-hg.png">
        

      
      <ProgramListing>
 ... and then illustrate the fact that a matrix times its inverse is
 the identity matrix.
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-2-sect1-13.html>
        

      <Title>
        PageNumber: 
        13
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-12-hg.png">
        

      
      <ProgramListing>
 MATLAB has functions for nearly every type of common
 matrix calculation.

 There are functions to obtain eigenvalues ...
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-2-sect1-14.html>
        

      <Title>
        PageNumber: 
        14
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-13-hg.png">
        

      
      <ProgramListing>
 ... as well as the singular value decomposition.
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-2-sect1-15.html>
        

      <Title>
        PageNumber: 
        15
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-14-hg.png">
        

      
      <ProgramListing>
 The "poly" function generates a vector containing the
 coefficients of the characteristic polynomial.

 The characteristic polynomial of a matrix A is

     det(lambda*I - A)
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-2-sect1-16.html>
        

      <Title>
        PageNumber: 
        16
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-15-hg.png">
        

      
      <ProgramListing>
 We can easily find the roots of a polynomial using the
 "roots" function.

 These are actually the eigenvalues of the original matrix.
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-2-sect1-17.html>
        

      <Title>
        PageNumber: 
        17
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-16-hg.png">
        

      
      <ProgramListing>
 MATLAB has many applications beyond just matrix
 computation.

 To convolve two vectors ...
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-2-sect1-18.html>
        

      <Title>
        PageNumber: 
        18
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-17-hg.png">
        

      
      <ProgramListing>
 ... or convolve again

 >> r = conv(p,q); plot(r)

 and plot the result.
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-2-sect1-19.html>
        

      <Title>
        PageNumber: 
        19
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-18-hg.png">
        

      
      <ProgramListing>
 At any time, we can get a listing of the variables we have
 stored in memory using the "who" or "whos" command.
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-2-sect1-20.html>
        

      <Title>
        PageNumber: 
        20
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-19-hg.png">
        

      
      <ProgramListing>
 You can get the value of a particular variable by typing its
 name.
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-2-sect1-21.html>
        

      <Title>
        PageNumber: 
        21
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-20-hg.png">
        

      
      <ProgramListing>
 You can have more than one statement on a single line by
 separating each statement with commas or semicolons.

 If you don't assign a variable to store the result of an operation,
 the result is stored in a temporary variable called "ans".
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-2-sect1-22.html>
        

      <Title>
        PageNumber: 
        22
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-21-hg.png">
        

      
      <ProgramListing>
 In this case, since we separated the statements with commas,
 the result of each operation was echoed to the screen.

 As you can see, MATLAB easily deals with complex and
 infinite numbers in calculations.
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-2-sect1-23.html>
        

      <Title>
        PageNumber: 
        23
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-22-hg.png">
        

      
      <ProgramListing>
 MATLAB has functions which make it ideal as a signal
 processing tool.

 For more details, see the demos of the Signal
 Processing Toolbox

 >> A = zeros(32); A(14:16,14:16) = ones(3);
 >> y = fft2(A);
 >> mesh(abs(y));
 >> title('Magnitude of Two-Dimensional FFT of a Matrix')
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-2-sect1-24.html>
        

      <Title>
        PageNumber: 
        24
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-23-hg.png">
        

      
      <ProgramListing>
 MATLAB also allows you to create and analyze functions
 easily.
 For examples, see the demo "Functions of functions" under
 MATLAB Numerics.
 >> fplot(@humps,[0,2]), hold on
 >> patch([0.5 0.5:0.02:1 1 0.5],[0 humps(0.5:0.02:1) 0 0],'r');
 >> hold off
 >> title('A region under an interesting function.')
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-2-sect1-25.html>
        

      <Title>
        PageNumber: 
        25
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-24-hg.png">
        

      
      <ProgramListing>
Thank you for viewing this introduction to MATLAB.



 >> membrane(5,15,9,9)
 >> axis([-1 1 -1 1 -1 .5])
 >> colormap(hot)
      </ProgramListing>
    </Sect1>
  </Chapter>
  <Chapter>
    <?html-filename slideshow-book-chap-3.html>
      

    <Title>
      buckydem
    </Title>
    
    <Sect1>
      <?html-filename slideshow-book-chap-3-sect1-1.html>
        

      <Title>
        PageNumber: 
        1
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-25-hg.png">
        

      
      <ProgramListing>
[13x71 char]
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-3-sect1-2.html>
        

      <Title>
        PageNumber: 
        2
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-26-hg.png">
        

      
      <ProgramListing>
 A graph can be represented by its adjacency matrix.

 To construct the adjacency matrix, the nodes are numbered
 1 to N.  Then element (i,j) of the matrix is set to 1 if node i is
 connected to node j, and 0 otherwise.
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-3-sect1-3.html>
        

      <Title>
        PageNumber: 
        3
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-27-hg.png">
        

      
      <ProgramListing>
 Here are the nodes in one hemisphere of the bucky ball, numbered
 polygon by polygon.

   >> gplot(B(1:30,1:30),[x(1:30) y(1:30)],'b-')
   >> for j = 1:30, text(x(j),y(j),int2str(j)); end
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-3-sect1-4.html>
        

      <Title>
        PageNumber: 
        4
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-28-hg.png">
        

      
      <ProgramListing>
To visualize the adjacency matrix of this hemisphere, we use the SPY
function to plot the silhouette of the nonzero elements.

>> spy(B(1:30,1:30)), title('spy(B(1:30,1:30))')

Note that the matrix is symmetric, since if node i is connected to node j,
then node j is connected to node i.
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-3-sect1-5.html>
        

      <Title>
        PageNumber: 
        5
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-29-hg.png">
        

      
      <ProgramListing>
 Now we extend our numbering scheme to the whole graph
 by reflecting the numbering of one hemisphere into the other.

  >> [B,V] = bucky;
  >> H = sparse(60,60);
  >> gplot(B-H,V,'b-');
  >> hold on
  >> gplot(H,V,'r-')
  >> for j = 31:60, text(x(j),y(j),int2str(j)); end
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-3-sect1-6.html>
        

      <Title>
        PageNumber: 
        6
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-30-hg.png">
        

      
      <ProgramListing>
Finally, here is a SPY plot of the final sparse matrix.

   >> spy(B), title('spy(B)')
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-3-sect1-7.html>
        

      <Title>
        PageNumber: 
        7
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-31-hg.png">
        

      
      <ProgramListing>
In many useful graphs, each node is connected to only a few other
nodes.  As a result, the adjacency matrices contain
just a few nonzero entries per row.

This demo has shown one place where SPARSE matrices come in handy.
      </ProgramListing>
    </Sect1>
  </Chapter>
  <Chapter>
    <?html-filename slideshow-book-chap-4.html>
      

    <Title>
      inverter
    </Title>
    
    <Sect1>
      <?html-filename slideshow-book-chap-4-sect1-1.html>
        

      <Title>
        PageNumber: 
        1
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-32-hg.png">
        

      
      <ProgramListing>
 Press the "Start" button to see a demonstration of the
 inversion of large matrices in MATLAB.
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-4-sect1-2.html>
        

      <Title>
        PageNumber: 
        2
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-33-hg.png">
        

      
      <ProgramListing>
 This is a graphic representation of a random matrix
 The RAND command creates the matrix, and the
 IMAGESC command plots an image of the matrix,
 automatically scaling the color map appropriately.
 >> n = 100;
 >> a = rand(n);
 >> imagesc(a);
 >> colormap(hot);
 >> axis square
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-4-sect1-3.html>
        

      <Title>
        PageNumber: 
        3
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-34-hg.png">
        

      
      <ProgramListing>
 This is a representation of the inverse of that matrix. While the
 numbers in the previous matrix were completely random, the
 elements in this matrix are anything BUT random. In fact,
 each element in this matrix ("b") depends on every one of the
 ten thousand elements in the previous matrix ("a").

 >> b = inv(a);
 >> imagesc(b);
 >> axis square;
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-4-sect1-4.html>
        

      <Title>
        PageNumber: 
        4
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-35-hg.png">
        

      
      <ProgramListing>
 But how do we know for sure if this is really the correct inverse
 for the original matrix? Multiply the two together and see if the
 result is correct, because just as 3*(1/3) = 1, so must
 a*inv(a) = I, the identity matrix.
 The identity matrix (almost always designated by I) is like an
 enormous number one. It is completely made up of zeros,
 except for ones running along the main diagonal.
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-4-sect1-5.html>
        

      <Title>
        PageNumber: 
        5
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-36-hg.png">
        

      
      <ProgramListing>
 This is the product of the matrix with its inverse: sure
 enough, it has the distinctive look of the identity matrix,
 with a band of ones streaming down the main diagonal,
 surrounded by a sea of zeros.

 >> imagesc(a*b);
 >> axis square;
      </ProgramListing>
    </Sect1>
  </Chapter>
  <Chapter>
    <?html-filename slideshow-book-chap-5.html>
      

    <Title>
      e2pi
    </Title>
    
    <Sect1>
      <?html-filename slideshow-book-chap-5-sect1-1.html>
        

      <Title>
        PageNumber: 
        1
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-37-hg.png">
        

      
      <ProgramListing>
 Press the "Start" button to see an example of visualization
 in MATLAB applied to the question:

 "Which is greater, e^pi or pi^e?"
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-5-sect1-2.html>
        

      <Title>
        PageNumber: 
        2
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-38-hg.png">
        

      
      <ProgramListing>
 The question is: which is greater, e^pi or pi^e? The easy way
 to find out is to type it directly at the MATLAB command
 prompt. But it motivates a more interesting question. What
 is the shape of the function z=x^y-y^x? Here is a plot of z.
 >> x=0:0.16:5; y=0:0.16:5;
 >> [xx,yy]=meshgrid(x,y); zz=xx.^yy-yy.^xx;
 >> h=surf(x,y,zz);
 >> set(h,'EdgeColor',[0.7 0.7 0.7]);
 >> view(20,50); colormap(hsv);
 >> title('z=x^y-y^x'); xlabel('x'); ylabel('y');
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-5-sect1-3.html>
        

      <Title>
        PageNumber: 
        3
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-39-hg.png">
        

      
      <ProgramListing>
[9x73 char]
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-5-sect1-4.html>
        

      <Title>
        PageNumber: 
        4
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-40-hg.png">
        

      
      <ProgramListing>
 Here is a plot of the integer solutions to the equation
 x^y-y^x=0. Notice 2^4=4^2 is the ONLY integer solution
 where x~=y.  And what is the intersection point of the two
 curves that define where x^y=y^x?

 >> h=plot([0:5 2 4],[0:5 4 2],'r.', ...
           'MarkerSize',25,'EraseMode','none');
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-5-sect1-5.html>
        

      <Title>
        PageNumber: 
        5
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-41-hg.png">
        

      
      <ProgramListing>
 Finally, we can see that e^pi is indeed larger than pi^e
 (though not by much) by plotting these points on our surface.
 >> e=exp(1);
 >> e^pi
 ans =
            23.1407
 >> pi^e
 ans =
            22.4592
      </ProgramListing>
    </Sect1>
  </Chapter>
  <Chapter>
    <?html-filename slideshow-book-chap-6.html>
      

    <Title>
      sparsity
    </Title>
    
    <Sect1>
      <?html-filename slideshow-book-chap-6-sect1-1.html>
        

      <Title>
        PageNumber: 
        1
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-42-hg.png">
        

      
      <ProgramListing>
 Press the "Start" button to see a demonstration which
 shows that reordering the rows and columns of a
 sparse matrix S can affect the time and storage required
 for a matrix operation such as factoring S into its
 Cholesky decomposition, S=L*L'.
 >> spy(S), title('A Sparse Symmetric Matrix')
 >> nz = nnz(S);
 >> lblstr = sprintf('nonzeros=%d   (%.3f %%)',nz,nz*pct);
 >> set(get(gca,'XLabel'),'String',lblstr);
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-6-sect1-2.html>
        

      <Title>
        PageNumber: 
        2
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-43-hg.png">
        

      
      <ProgramListing>
 A SPY plot shows the nonzero elements in a matrix.

 This spy plot shows a SPARSE symmetric positive definite
 matrix derived from a portion of the Harwell-Boeing test matrix
 "west0479", a matrix describing connections in a model
 of a diffraction column in a chemical plant.


 >> title('spy(S)')
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-6-sect1-3.html>
        

      <Title>
        PageNumber: 
        3
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-44-hg.png">
        

      
      <ProgramListing>
 Now we compute the Cholesky factor L, where S=L*L'.
 Notice that L contains MANY more nonzero elements than
 the unfactored S, because the computation of the Cholesky
 factorization creates "fill-in" nonzeros.  This slows down the
 algorithm and increases storage cost.

 >> tic, L = chol(S)'; t(1) = toc;
 >> spy(L), title('Cholesky decomposition of S')
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-6-sect1-4.html>
        

      <Title>
        PageNumber: 
        4
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-45-hg.png">
        

      
      <ProgramListing>
 By reordering the rows and columns of a matrix, it may be
 possible to reduce the amount of fill-in created by
 factorization, thereby reducing time and storage cost.

 We will now try three different orderings supported by
 MATLAB.
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-6-sect1-5.html>
        

      <Title>
        PageNumber: 
        5
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-46-hg.png">
        

      
      <ProgramListing>
 The SYMRCM command uses the reverse Cuthill-McKee
 reordering algorithm to move all nonzero elements closer to
 the diagonal, reducing the "bandwidth" of the original matrix.

 >> p = symrcm(S);
 >> spy(S(p,p)), title('S(p,p) after Cuthill-McKee ordering')
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-6-sect1-6.html>
        

      <Title>
        PageNumber: 
        6
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-47-hg.png">
        

      
      <ProgramListing>
 The fill-in produced by Cholesky factorization is confined to
 the band, so that factorization of the reordered matrix takes
 less time and less storage.

 >> tic, L = chol(S(p,p))'; t(2) = toc;
 >> spy(L), title('chol(S(p,p)) after Cuthill-McKee ordering')
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-6-sect1-7.html>
        

      <Title>
        PageNumber: 
        7
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-48-hg.png">
        

      
      <ProgramListing>
 The COLPERM command uses the column count reordering
 algorithm to move rows and columns with higher nonzero
 count towards the end of the matrix.

 >> q = colperm(S);
 >> spy(S(q,q)), title('S(q,q) after column count ordering')
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-6-sect1-8.html>
        

      <Title>
        PageNumber: 
        8
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-49-hg.png">
        

      
      <ProgramListing>
 For this example, the column count ordering happens to
 reduce the time and storage for Cholesky factorization, but
 this behavior cannot be expected in general.

 >> tic, L = chol(S(q,q))'; t(3) = toc;
 >> spy(L), title('chol(S(q,q)) after column count ordering')
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-6-sect1-9.html>
        

      <Title>
        PageNumber: 
        9
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-50-hg.png">
        

      
      <ProgramListing>
 The SYMMMD command uses the minimimum degree
 algorithm (a powerful graph-theoretic technique) to produce
 large blocks of zeros in the matrix.

 >> r = symmmd(S);
 >> spy(S(r,r)), title('S(r,r) after minimum degree ordering')
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-6-sect1-10.html>
        

      <Title>
        PageNumber: 
        10
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-51-hg.png">
        

      
      <ProgramListing>
 The blocks of zeros produced by the minimum degree
 algorithm are preserved during the Cholesky factorization.
 This can significantly reduce time and storage costs.

 >> tic, L = chol(S(r,r))'; t(4) = toc;
 >> spy(L), title('chol(S(r,r)) after minimum degree ordering')
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-6-sect1-11.html>
        

      <Title>
        PageNumber: 
        11
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-52-hg.png">
        

      
      <ProgramListing>
  RESULTS SUMMARY
 original:      nonzero=13.23%  time=0.44 sec
 Cuthill-McKee: nonzero=10.56%  time=0.33 sec
 column count:  nonzero=6.48%   time=0.22 sec
 min degree:    nonzero=4.01%   time=0.11 sec

 >> bar(nc*pct), title('Nonzeros after Cholesky factorization')
 >> ylabel('Percent');
      </ProgramListing>
    </Sect1>
  </Chapter>
  <Chapter>
    <?html-filename slideshow-book-chap-7.html>
      

    <Title>
      matmanip
    </Title>
    
    <Sect1>
      <?html-filename slideshow-book-chap-7-sect1-1.html>
        

      <Title>
        PageNumber: 
        1
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-53-hg.png">
        

      
      <ProgramListing>
Press the "Start" button to see some basic matrix manipulations
in MATLAB.

We start by creating a magic square and assigning it to the variable A.

>> A = magic(3);
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-7-sect1-2.html>
        

      <Title>
        PageNumber: 
        2
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-54-hg.png">
        

      
      <ProgramListing>
Here's how to add 2 to each element of A.

 >> A+2;

 Note that MATLAB requires no special handling of  matrix math.
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-7-sect1-3.html>
        

      <Title>
        PageNumber: 
        3
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-55-hg.png">
        

      
      <ProgramListing>
 The apostrophe symbol denotes the complex conjugate
 transpose of a matrix.

 Here's how to take the transpose of A.

 >> A' ;
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-7-sect1-4.html>
        

      <Title>
        PageNumber: 
        4
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-56-hg.png">
        

      
      <ProgramListing>
 The symbol * denotes multiplication of matrices.

 Let's create a new matrix B and multiply A by B.

 >> B = 2*ones(3);
 >> A*B;
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-7-sect1-5.html>
        

      <Title>
        PageNumber: 
        5
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-57-hg.png">
        

      
      <ProgramListing>
 We can also multiply each element of A with its
 corresponding element of B by using the  .* operator.

 >> A.*B;
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-7-sect1-6.html>
        

      <Title>
        PageNumber: 
        6
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-58-hg.png">
        

      
      <ProgramListing>
 MATLAB has functions for nearly every type of common
 matrix calculation.  For example, we can find the eigenvalues
 of A using the "eig" command.

 >> eig(A);
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-7-sect1-7.html>
        

      <Title>
        PageNumber: 
        7
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-59-hg.png">
        

      
      <ProgramListing>
 This concludes our brief tour of some MATLAB matrix
 handling capabilities.

      </ProgramListing>
    </Sect1>
  </Chapter>
  <Chapter>
    <?html-filename slideshow-book-chap-8.html>
      

    <Title>
      fitdemo
    </Title>
    
    <Sect1>
      <?html-filename slideshow-book-chap-8-sect1-1.html>
        

      <Title>
        PageNumber: 
        1
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-60-hg.png">
        

      
      <ProgramListing>
Press the "Start" button to see a demonstration of the
optimal fitting of a nonlinear function to a set of data.
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-8-sect1-2.html>
        

      <Title>
        PageNumber: 
        2
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-61-hg.png">
        

      
      <ProgramListing>
This example demonstrates fitting a nonlinear function
to a set of data.  We''ll use a function called FMINSEARCH
that implements the Nelder-Mead simplex (direct search) algorithm
for minimizing a nonlinear function of several variables.
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-8-sect1-3.html>
        

      <Title>
        PageNumber: 
        3
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-62-hg.png">
        

      
      <ProgramListing>
  >> Data = ...
        [ 0.0000    5.8955
          ...
           2.0000    0.2636];
 >> t = Data(:,1);
 >> y = Data(:,2);
 >> plot(t,y,'ro')
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-8-sect1-4.html>
        

      <Title>
        PageNumber: 
        4
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-63-hg.png">
        

      
      <ProgramListing>
 We would like to fit the following function with 2 linear
 parameters and 2 nonlinear parameters to the data:

   y =  c(1)*exp(-lam(1)*t) + c(2)*exp(-lam(2)*t)
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-8-sect1-5.html>
        

      <Title>
        PageNumber: 
        5
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-64-hg.png">
        

      
      <ProgramListing>
 To fit this function to the data, we write a function "fitfun"
 that returns the error in the fit given the nonlinear parameter
 "lam" and the data.  We can then guess for initial estimates of
 the nonlinear parameters, and invoke FMINSEARCH.

 >> plot(t,y,'EraseMode','xor')
      </ProgramListing>
    </Sect1>
    <Sect1>
      <?html-filename slideshow-book-chap-8-sect1-6.html>
        

      <Title>
        PageNumber: 
        6
      </Title>
      <Graphic Fileref="./slideshow-book_html_files/image-65-hg.png">
        

      
      <ProgramListing>
 And the optimal curve fit occurs automatically with the use
 of the FMINSEARCH command.

 >> lam = [1 0]';
 >> options = optimset('Display','off','TolX',0.1);
 >> lambda = fminsearch('fitfun',lam,options);
      </ProgramListing>
    </Sect1>
  </Chapter>
</Book>