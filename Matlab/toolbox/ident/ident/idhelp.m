function idhelp(type)
%IDHELP  Micro-manual for navigation within the System
%        Identification Toolbox
%
%   System Identification is about estimating models from data
%   and evaluating their properties.
%
%   The generic estimation command is 
%
%   MODEL = PEM(DATA,MODELSTRUCTURE)
%
%   DATA is the estimation data in the IDDATA or IDFRD object formats.
%        Very basic use: DATA = IDDATA(Outputs,Inputs,SamplingInterval).
%                        Portions of samples are selected as DATA(1:200) etc.
%        Type IDHELP DATA for more on this format, which also handles
%        frequency domain data. Type IDHELP FRD for more on frequency
%        response data.
%
%   MODELSTRUCTURE is a variable that defines the structure of the model.
%        Type IDHELP MODEL for an overview of models. For specific cases use
%        IDHELP PROCMOD for process models that estimate gain and
%                    dominating time constants
%        IDHELP IOBB for Input/Output Black-Box models
%                    This is for single output, discrete time models only.
%        IDHELP SSBB for State-Space Black-Box models.
%                    This covers also multi-output systems in discrete time.
%
%        IDHELP SSSTRUC for state-space models with user-defined internal
%                    structure both in discrete and continuous time.
%
%        IDHELP CTMOD for general remarks on continuous time models.
%   
%        IDHELP SSCT for continuous-time Black-box models.
%
%   MODEL is the resulting model, in formats that depend on the structure.
%        Type IDHELP EVALUATE for information on how to evaluate
%        the model.
%
%   The Toolbox supports subselection of input and output channels.
%        Type IDHELP CHANNELS for information about this.
%
%   Type IDHELP ADVICE for ideas to get started. 
%   IDHELP NOTE points to a few things to note. 


%   Copyright 1986-2003 The MathWorks, Inc.
%   $Revision: 1.19.4.1 $  $Date: 2004/04/10 23:19:00 $


 
if nargin==0,
   help idhelp
   return
elseif ~ischar(type)
   error('The argument to IDHELP must be a string.')
end

switch lower(type(1:min(3,end)))
    case 'pro'
        DisplayStr = {...
          ' PROCESS MODELS.'...
          ''...
          'Process models are continuous time models that describe the static gain,'...
          'the dominating time constant(s) and possible delays of the system',...
          'They are defined by acronyms like'...
          ' ''P1D'' for G(s) = K exp(-Td s)/(1+Tp s)',...
          ' ''P2I'' for G(s) = K/[s(1+Tp1 s)(1+Tp2 s)]',...
          '  etc. See HELP IDPROC or IDPROPS IDPROC for complete possibilities.'...
          ''...
          'Process models are estimated directly as M = PEM(Data,''P1D'')'...
      };
 
case 'iob'
   
   DisplayStr = {...
         ' Input-Output Black Box Models.'...
         ' '...
         ' These are difference equations of the kind' ...
         ' '...
         ' y(t) + a_1*y(t-1) + .... + a_na*y(t-na) ='...
         '      b_1*u(t-nk) + b_2*u(t-nk-1) + ... + b_nb*u(t-nk-nb+1)'...
         ' '...
         ' also written, using the shift operator q, as A(q)y(t) = B(q)u(t-nk)'...
         ' To estimate the parameters of this model enter'...
         ' '...
         '  MODEL = ARX(DATA,[na nb nk]) or'...
         '  MODEL = ARX(DATA,''na'',na,''nb'',nb,''nk'',nk)'...
         ' ',...
         ' To allow for general noise descriptions, this ARX model' ...
	  ' can be extended to'...
         ' ARMAX:       A(q)y(t) =  B(q)u(t-nk) + C(q)e(t)',...
         ' OutputError: y(t) = [B(q)/F(q)]u(t-nk) + e(t)',...
         ' BoxJenkins:  y(t) = [B(q)/F(q)]y(t-nk) + [C(q)/D(q)]e(t)'...
         ' or the general polynomial form'...
         ' A(q)y(t) = [B(q)/F(q)]y(t-nk) + [C(q)/D(q)]e(t)',...
         ' '...
         ' To estimate these models use'...
         ' '...
         '  MODEL = PEM(DATA,''nb'',nb,''nf'',nf,...)'...
         ' '...
         ' where nb, nf etc are the orders of the corresponding polynomials'...
         ' Those orders not specified are taken as zero. The example' ...
	  ' thus was an OutputError model.'...
         ' '...
         ' For model with several inputs, nb, nf, and nk are row vectors'...
         ' where entry k denotes the order/delay for the k:th input.'...
         ' '...
         ' The model is estimated by iterative numerical search.' ...
	 ' The algorithm can be affected by a number of choices. Type'...
	 ' IDPROPS ALGORITHM for a full list and HELP PEM for more details.'...
         ' '...
         ' See also ARMAX, OE, and BJ for shorthand commands.'...
		};
   
case 'ssb'
   DisplayStr = {...
         ' State Space Black Box Models.'...
         ' '...
         ' A linear discrete-time state space model in innovations form'...
         ' is given by'...
         ' '...
         ' x(t+Ts) = A x(t) + B u(t) + K e(t);    x(0)=x0'...
         '    y(t) = C x(t) + D u(t) + e(t)'...
         ' '...
         ' To estimate the matrices for a nx:th order model, enter'...
        ' '...
        ' MODEL = PEM(DATA,nx)',...
       ' '...
       ' Omitting nx as in MODEL = PEM(DATA) gives a ''best'' order'...
       ' estimate.'...
       ' '...
        ' More arguments can be used to affect whether or not to'...
       ' estimate D, K, and x0, as well as other algorithmic details.'...
       ' The most important ones are'...
       ' MODEL = PEM(DATA,nx,''DisturbanceModel'',''None''): Fix K = 0'...
       ' MODEL = PEM(DATA,nx,''nk'',[nk_1,nk_2,..nk_Nu]): specify'...
       '        the delays from inputs u_1, .. u_Nu to the outputs.'...
       ' '...
       ' Type HELP PEM, IDPROPS IDSS and IDPROPS ALGORITHM for full'...
       ' details.'...
       ' '...
       ' See also N4SID.'...
       };
       
    
 case 'ssc'
  DisplayStr = {...
         ' Continuous Time Black Box Models.' ...
      ' '...
      ' To estimate a continuous time model without internal structure'...
      ' there are two possibilities'...
      ' '...
      ' 1. Estimate a discrete-time model (type HELP IOBB or HELP SSBB)'...
      '    and convert to continuous time by MODELC = D2C(MODEL).'...
      ' '...
      ' 2. Estimate a state-space continuous time model in canonical' ...
       '    form by'...
      '    MODEL = PEM(DATA,nx,''Ts'',0,''SSpar'',''Can'')'...
      ' '...
             };
      case 'sss'
   
   DisplayStr = {...
         ' State Space Models with Internal Structure.'...
         ' '...
         ' A linear continuous time state space model in innovations form'...
         ' is given by'...
         ' '...
         ' d/dt x(t) = A x(t) + B u(t) + K e(t);    x(0)=x0'...
         '      y(t) = C x(t) + D u(t) + e(t)'...
         ' '...
         ' If some internal structure of the matrices is known, so that some matrix'...
         ' elements are known and some are to be estimated you may proceed as follows:'...
         ' Let Ai, Bi, Ci, Di,  Ki, and X0i denote initial guesses of the matrices,'...
         ' and let  As, Bs, Cs, Ds, Ks, and x0s be ''structure matrices''.'...
         ' These coincide with  Ai, Bi,  etc, for the known elements, but contain '...
         ' the entry NaN for those  matrix elements that are to be estimated. Then do'...
        ' '...
        '  Mi = IDSS(Ai,Bi,Ci,Di,Ki,''Ts'',0) '...
        '  SET(Mi,''As'',As,''Bs'',Bs,''Cs'',Cs,''Ds'',Ds,''Ks'',Ks,''X0s'',x0s);'...
		'  (The latter is equivalent to SETSTRUC(Mi,As,Bs,Cs,Ds,Ks,X0s);)'...
        '  MODEL = PEM(DATA,Mi)'...
       ' '...
      ' The discrete time case is analogous, just let ''Ts'' be the sampling interval.'...
      ' '...
      ' EXAMPLE 1:'...
      ' As = [NaN NaN;1 0]; Bs = [1;0], Cs = [NaN NaN]; Ds = 0; Ks =[0;0];'...
      ' creates a controller canonical form with no noise model (K = 0)'...
      ' EXAMPLE 2;'...
      '  As = [1 NaN;0 NaN], A = [1 2;0 3] means that the 1,2 and'...
      '  2,2 elements of A are to be estimated, with nominal/initial'...
      '  values 2 and 3. See also IDDEMO #6.'...
       ' '...
       ' If the internal structure is more complex so that some unknown parameters'...
       ' affect several matrix entries, you should write an mfile that defines how'...
       ' the state space matrices depend on the parameters. Then use the IDGREY'...
       ' object to define the structure. See HELP IDGREY and IDPROPS IDGREY for'...
       ' details.'...
       ' See also IDDEMO #6 for some examples of idgrey models.'...
    };
 
 case 'eva'
    DisplayStr={...
   ' To Evaluate an Estimated Model'...
 ' '...
 ' The estimated models are evaluated by'...
 ' COMPARE(DATA,MODEL): Compares the measured model output in DATA with the model'...
 '                      response.'...
 ' STEP(MODEL), IMPULSE(MODEL): Plots the step and impulse responses'...
 ' BODE(MODEL), NYQUIST(MODEL): Plots the Bode and Nyquist diagrams of the model.'...
 ' PZMAP(MODEL):       Plots zeros and poles of the model.'...
 ' RESID(MODEL,DATA):   Computes and analyses the model residuals for the DATA.'...
 ' '...
 ' In all these cases, several models can be compared by just giving more'...
 ' arguments: COMPARE(DATA,Model_1,Model_2,...,Model_n), etc'...
 ' '...
 ' To display uncertainty and confidence regions use BODE(M1,M2,''sd'',3) which'...
 ' shows confidence regions corresponding to 3 standard deviations (ca 99.9%).'...
 ' Add the argument ''fill'' to obtain a filled confidence region.'... 
 ' '...
 ' To compute model representations in different forms, use'...
 ' '...
 ' ZPKDATA(Model), TFDATA(Model), SSDATA(Model), POLYDATA(Model)'...
 ' '...
 ' If you have the Control Systems toolbox, any model from the Identification'...
 ' toolbox can be converted to any LTI-object by TF(Model), SS(Model), ZPK(Model),'...
 ' and FRD(Model). VIEW(Model) will then invoke the LTI-viewer.'...
 ' '... 
};
case 'cha'
    DisplayStr ={...
          ' Selecting input and output channels.'...
          ' '...
          ' The toolbox supports easy handling of I/O channels for multivariable'...
          ' data and systems.'...
          ' Certain channels in IDDATA data sets can be selected according to'...
          ' DATA(Samples,Outputs,Inputs), where Samples are sample numbers and'...
          ' Outputs and Inputs are channel numbers or names, like'...
          ' DATA(1:50,[2 4 1],{''speed'',''voltage''}).'...
          ' '...
          ' For IDMODELS, MODEL(Outputs,Inputs) extract submodels in a similar fashion:'...
          ' MODEL({''Speed'',''Force''},[3 2]) is the model that is obtained from'...
          ' MODEL by just looking at the response from inputs 3 and 2 to the outputs'...
          ' with names ''Speed'' and ''Force''.'...
          ' ',...
          ' IDMODELS have both measured input channels u (Nu of them) and noise source'...
          ' channels e (Ny of them = number of output channels):'...
          ' y = Gu + He'...
          ' If Nu = 0, y = He and the model is a TIME SERIES.'...
          ' '...
          ' To extract just the measured channels y = Gu use'...
          ' MODEL(:,''Measured'') or just MODEL(''m'').'...
          ' To extract the noise model y = He (which thus is a time series)'...
          ' use MODEL(:,''Noise'') or MODEL(''n'') for short.'...
          ' To convert the noise part He to measured input channels that can be'...
		  ' individually addressed, use the command NOISECNV (see HELP NOISECNV.)'};
       
case 'dat'
	DisplayStr ={...
            'The data for estimation can be inputs and outputs in the'...
            'time or frequency domain, stored as an IDDATA object.'...
            'They can also be frequency response data (values of the system''s'...
            'frequency response) stored as an FRD or IDFRD object. Below the IDDATA'...
            'object is described. See IDHELP FRD for frequency response data.'...
            ''...
			'The IDDATA object. Basic Use. See HELP IDDATA  or IDPROPS IDDATA for more details.'...
			'                   *********'...
			' DAT = IDDATA(Y,U,Ts) creates a data object with output Y, input U '...
           ' and sampling interval Ts. Default Ts=1.',...
           ' To store frequency domain data, also specify the frequencies at which'...
           ' the data are defined: DAT = IDDATA(Y,U,Ts,''Freq'',W)'...
           ''...
           ' If U = [], or not assigned, DAT defines a signal or a time series.'... 
           ' With Y = [], DAT describes just the input.'...
           ' Y is a N-by-Ny matrix with N being the number of data and Ny '...
           ' the number of output channels, and similarly for U.'...
           ' Y and U  (and W if applicable) must have the same number of rows.'...
           ' Retrieve data by DAT.y, DAT.u and DAT.Ts.'...
           ' Select portions by DAT1 = DAT(1:300) etc.'...
		   ' '...
           ' CHANNEL NAMES AND SOME OTHER PROPERTIES.'...
		   ''...
           ' DAT = IDDATA(Y,U,Ts,''OutputName'',String,....) or '...
           ' SET(DAT,''OutputName'',String,....) adds properties to'...
           ' the data object, for logistics and plotting.'...
           ' Type SET(IDDATA) for a complete list of properties. '...
           ' Some basic ones are'...
           ' OutputData, InputData: refers to Y and U above.'...
           ' OutputName: String. For multiputput, use cell arrays, e.g. {''Speeed'',''Voltage''}'...
           ' OutputUnit: String. For multioutput use cell arrays, e.g. {''mph'',''volt''}'...
           ' InputName, InputUnit, analogously.'...
           ' Tstart: Starting time for the samples.'...
           ' Properties can be set and retrieved either by SET and GET or by subfields:'...
           ' GET(DAT,''OutputName'') or DAT.OutputName'...
		   ' SET(DAT,''OutputName'',''Current'') or DAT.OutputName = {''Current''};'...
           ' Referencing is case insensitive and ''y'' is synonymous to   ''Output'' and'... 
		   ' ''u'' is synonymous to ''Input''. Autofill is used as soon as the property is '...
		   ' unique, so DAT.yna is the same as DAT.OutputName etc.'...
           ' To assign names and units to specific channels use DAT.un(3)={''Speed''}'...
		   ' or DAT.uu([3 7])={''Volt'',''m^3/s''}'};
     
       
case 'idd'
   help iddata
   return
case 'mod'
	DisplayStr ={...
			' MODEL STRUCTURES'...
			''...
			' The toolbox supports all kinds of linear models in discrete and continuous time.'...
			''...
			' If you do not have any particular insights about the system to be identified'...
			' it may be best to use black-box STATE SPACE models in discrete time.'...
			' Then just the model order has to be assigned as in MOD = PEM(DATA,5).'...
			' A default order model is obtained by PEM(DATA) or N4SID(DATA).'...
			' See IDHELP SSBB for more on black box state space models.'...
			' '...
            ' PROCESS MODELS are models that describe gain and dominating time constants'...
            ' of the system. See IDHELP PROCMOD for more on these models.'...
            ''...
			' INPUT-OUTPUT models are difference equations that relate the output sequence',...
			' to the input sequence(s) as well as to some noise signals. In the literature'...
			' these models are known under names like ARX, ARMAX, Output-Error (OE),'...
			' Box-Jenkins (BJ) etc. They handle single-output, multi-input systems and'...
			' allow the specification of different orders to numerators and denominators'...
			' or the transfer functions. See IDHELP IOBB for more on these models.'...
			' '...
			' Models with specific internal structures (some parameters known etc) are best'...
		    ' handled in state-space. See IDHELP SSSTRUC for more information about these'...
			' '...
			' When continuous time models are required, there are a few alternatives.'...
			' See IDHELP CTMOD and IDHELP SSCT for those.'};
case 'adv'
	DisplayStr ={...
			' SOME ADVICE FOR THE NOVICE'...
			''...
			' For easy use of the toolbox, it is recommended to use the'...
			' Graphical User Interface (GUI). Start it by typing IDENT.'...
			' Import the data and then apply PREPROCESS: QUICKSTART and ESTIMATE:QUICKSTART'...
			' Look at the data plots and the model characteristics and then try other'...
			' model structure.'...
			' '...
            ' There is a command ADVICE that can be applied to any data set and any estimated'...
            ' model. Use ADVICE(model) or ADVICE(data) to get ideas on what should and could'...
            ' be done further.'...
            ''...
 			' Whether working with the GUI or in command mode, the following advice can'...
			' be given:'...
			' 1) Always look carefully at the data to check that it is reasonable.'...
			' 2) Make it a rule to split the data set into an estimation part and a validation'...
			'    part. Use COMPARE (Model Output) with the validation data to check the model'...
			'    on fresh data.'...
			' 3) A simple start-up is to use a default order state-space model MOD = PEM(DATA)'...
			'    or MOD = N4SID(DATA), and then checking it with COMPARE(DATA_val,MOD)'...
			'    to get an idea of how well a linear model can reproduce the data.'...
			' 4) The default order is just a first cut, and several models with different orders'...
			'    should be tried out. If there are time delays (dead-time) in the system, use',...
			'    IMPULSE or STEP both on the data and on estimated models to see the delays'...
			'    from the different inputs. Then use the property ''nk'' to estimate models'...
			'    with these delays.'...
			' 5) For systems with many inputs and outputs and high orders, it is efficient'...
			'    to try out various orders and delays using N4SID setting the property'...
			'    ''Covariance'' to ''None'', as in MOD = N4SID(DATA,18,''cov'',''none'').'...
			'    This suppresses the uncertainty estimation, but speeds up the computations.'...
		};
		
case 'not'
	DisplayStr = {...
			'NOTE THE FOLLOWING'...
			''...
			' 1) The object orientation allows function name sharing with other toolboxes'...
            '    like the Control System Toolbox. Remember this when looking at HELP. Use'...
            '    HELP IDMODEL/BODE, HELP IDMODEL/STEP  etc to get the right information.'...
			' 2) If you specify some algorithm property, as in'...
			'     M = ARMAX(DATA,[2 2 2 1],''MaxIter'',5), this property is inherited by'...
			'     M, so continuing with M = armax(DATA,M) will still use a maximum of 5'...
			'     iterations. To change that, reset the property: M = ARMAX(DATA,M,''maxi'',20)',...
			' 3) If you have favorite choices of Algorithm properties, different from the'...
			'     defaults, it is useful to store and reuse your own algorithm property as e.g.'...
			'     m = oe(dat,[2 2 1],''lim'',0,''maxi'',40,''tol'',0.00001);'...
			'     myalg = m.alg;',...
			'     m = pem(dat,3,''alg'',myalg)'...
		};
case 'ctm'
    DisplayStr = {...
            'ESTIMATION OF CONTINUOUS TIME MODELS'...
            ''...
            ' There are a number of possibilities to estimate continuous time models'...
            ''...
            ' 1) So called PROCESS MODELS are continuous time models that describe'...
            '    static gain, dominating time constant(s) and possible delays.'...
            '    Use M = pem(data,''P1D'') to estimate a first order model with delay,'...
            '    and check IDPROPS IDPROC and IDDEMO # 14 for more options.'...
            ''...
            ' 2) You can parameterize state-space models directly in continuous time',...
            '    and use discrete time data to fit these models. See IDHELP SSSTRUC and IDHELP SSCT.'...
            ''...
            ' 3) You can store continuous time data in the frequency domain and directly'...
            '    estimate continuous time input/output and state-space models:'...
            '    datc = iddata(Y,U,''Ts'',0,''Freq'',W)',...
            '    M = oe(datc,[nb nf]) or M =pem(datc,3)',...
            '    See HELP OE and IDDEMO #8 for examples.'...
            ''...
            ' 4) You can convert any estimated discrete time model to continuous time by'...
            '    Mc = D2C(Md).'...
        };
case 'frd'
    DisplayStr ={...
            'FREQUENCY RESPONSE DATA'...
            ''...
            'Frequency response data objects store the frequency response (frequency function)'...
            'of a system. The object is called IDFRD (see also FRD in the Control Systems'...
            'Toolbox) and more details can be found in HELP IDFRD and IDPROPS IDFRD.'...
            ''...
            'An IDFRD object is created from response data as'...
            'DATF = IDFRD(Response,Freqs,Ts), where Response is the complex-valued'...
            'frequency function data, Freqs contains the corresponding frequencies'...
            'and Ts is the sampling interval (Ts = 0 means continuous time).'...
            ''...
            'An IDFRD object can also be computed from an existing model by IDFRD(Mod),'...
            'or estimated from input-output data by SPA, SPAFDR and EFTE.'...
            ''...
            'An IDFRD object can be used as estimation or validation data in any of the'...
            'Toolbox''s estimation and validation routines.',...
        };
 otherwise
	 error(sprintf([type, ' is not a valid option for IDHELP.'...
			 '\n  The usage is IDHELP OPT, where OPT is one of',...
			 '\n     DATA, MODEL, EVALUATE, ADVICE, or NOTE',...
			 '\n  for basic use of the toolbox, or',...
			 '\n     IOBB, SSBB, SSCT, SSSTRUC or CHANNEL',...
			 '\n  for info on model structures and channels.']))
	 
 end
disp(' ')
disp(char(DisplayStr))

