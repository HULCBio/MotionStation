function setMetadata(UDDobj, info)
%SETMETADATA passes a 2-D Java String array to Metadata.java.

%   This function takes an image information structure generated by IMFINFO,
%   converts it to a Java String[][] array, and passes it to Java.
%   It calls setMetadata method in the Java class defined in
%   UDDobj.jmetadata (see image.m).
%   Important: this function must have the same name as the Java 
%   method it calls!

%   Copyright 1993-2003 The MathWorks, Inc.  
%   $Revision.2.4.1.4.2 $ $Date: 2003/01/26 05:57:22 $

  if ~isstruct(info) & ~isempty(info)
    eid = sprintf('Images:%s:invalidStructure',mfilename);
    msg = sprintf('%s must be a structure generated by IMFINFO');
    error(eid,'%s',msg);
  end
    
  metadataArray = []; %initialize the metadata to double empty matrix which
                      %corresponds to a Java null
  if ~isempty(info)
    metadataArray = Info2JavaStrs(info);
  end

  setMetadata(UDDobj.jmetadata, metadataArray);  

%---------------------------------------------------------------------
function infoArray = Info2JavaStrs(varargin);
% function converts header information structure to two Java string
% arrays. INFOARRAY is a 2-D Java object array;

  import java.lang.String;

  % Convert info structure to two cell arrays
  info = varargin{1};
  [fnames,valstrcell] = struct2strcell(info);

  % create Java string arrays
  len = length(fnames);  
  infoArray = javaArray('java.lang.String',len,2);

  % populate the infoArray
  for i= 1:len
    infoArray(i,1) = String(fnames{i});
    infoArray(i,2) = String(valstrcell{i});
  end

%----------------------------------------------------------------------
function [fnamecell,valstrcell] = struct2strcell(varargin);
%STRUCT2VALSTRCELL converts a structure containing values to a cell array
%containing only strings.  Non-string values are converted to strings using
%the disp function.

  %check number of arguments
  iptgate('checknargin',1,1,nargin,mfilename);

  %check type of argument
  if ~isstruct(varargin{1})
    error(sprintf('The input to %s must be a valid structure',mfilename));
  else
    structure = varargin{1};
  end

  %get fieldnames
  fnamecell = fieldnames(structure);

    
  %put structure, fieldnames & values, into one long char array.
  chararray = evalc('disp(structure)');

  %parse char array into a cell array where each element is a string
  %contains one line of 'Fieldname: Value'
  linecell = strread(chararray,'%s','delimiter','\n');
  
  %Value is everything after the first colon.
  for k = 1 : length(linecell)
    idx = find(linecell{k}==':');
    if ~isempty(idx) % to avoid blank lines 
      dispcell{k} = linecell{k}((idx(1)+2):end);
    end
  end
  numFields = length(dispcell);
  
  %For any values that are 1 x n characters, don't accept the disp output and
  %capture the entire array.
  valcell = struct2cell(structure);
  if numFields ~= length(valcell)
    % This should never happen!
    eid='Images:imview:errorInSetMetadata';
    msg='Error in how we parse the metadata to display in info window.';
    error(eid,'%s',msg);
  end
  for idx = 1: numFields
    val = valcell{idx};
    if ischar(val) && size(val,1) == 1
      valstrcell{idx} = val;
    else
      valstrcell{idx} = dispcell{idx};
    end
  end
