/*
 *

 * 
 *
 * Copyright 1990-2003 The MathWorks, Inc.
 * $Revision: 1.6.4.3 $
 */



#define S_FUNCTION_LEVEL 2
--Builder Defines--
#include "simstruc.h"
--IncludeFixedPointDotH--
--Parameters Defines--

--ExternDeclarationOutputs--
--ExternDeclarationUpdates--
--ExternDeclarationDerivatives--

/*====================*
 * S-function methods *
 *====================*/
--MDL_CHECK_PARAMETERS--
/* Function: mdlInitializeSizes ===============================================
 * Abstract:
 *   Setup sizes of the various vectors.
 */
static void mdlInitializeSizes(SimStruct *S)
{

--ParametersDeclaration--    

--ssSetNumContStates--
--ssSetNumDiscStates--

--ssSetNumInputPortsInfo--
--ssSetInputPortInformation--
--ssSetInputPortDirectFeedThroughInfo--

--ssSetNumOutputPortsInfo--
--ssSetOutputPortInformation--

    ssSetNumSampleTimes(S, 1);
    ssSetNumRWork(S, 0);
    ssSetNumIWork(S, 0);
    ssSetNumPWork(S, 0);
    ssSetNumModes(S, 0);
    ssSetNumNonsampledZCs(S, 0);

    /* Take care when specifying exception free code - see sfuntmpl_doc.c */
    ssSetOptions(S, (SS_OPTION_EXCEPTION_FREE_CODE |
                     SS_OPTION_USE_TLC_WITH_ACCELERATOR |
		     SS_OPTION_WORKS_WITH_CODE_REUSE));
}

--MDL_SET_PORTS_DIMENSION_INFO--
/* Function: mdlInitializeSampleTimes =========================================
 * Abstract:
 *    Specifiy  the sample time.
 */
static void mdlInitializeSampleTimes(SimStruct *S)
{
--ssSetSampleTimeInfo--
    ssSetOffsetTime(S, 0, 0.0);
}
--MDL_INITIALIZE_CONDITIONS--
--MDL_START_FUNCTION--
--MDL_SET_PORTS_DATA_TYPE--
/* Function: mdlOutputs =======================================================
 *
*/
static void mdlOutputs(SimStruct *S, int_T tid)
{
--InputDataTypeDeclaration--
--OutputDataTypeDeclaration--
--mdlOutputsNumDiscStates--
--mdlOutputsNumContStates--
--mdlOutputsNumParams--
--mdlOutputsPortWidthDeclaration--  

--mdlOutputFunctionCall--
}
--Define_MDL_UPDATE--
--mdlUpdateInputDataTypeDeclaration--
--mdlUpdateOutputDataTypeDeclaration--
--mdlUpdateNumParams--

--mdlUpdateFunctionCall--
--Define_MDL_DERIVATIVES--
--mdlDerivativesInputDataTypeDeclaration--   
--mdlDerivativesOutputDataTypeDeclaration--   
--mdlDerivativesNumParams--

--mdlDerivativesFunctionCall--  

/* Function: mdlTerminate =====================================================
 * Abstract:
 *    In this function, you should perform any actions that are necessary
 *    at the termination of a simulation.  For example, if memory was
 *    allocated in mdlStart, this is the place to free it.
 */
static void mdlTerminate(SimStruct *S)
{
--mdlTerminateDeclaration--
}

#ifdef  MATLAB_MEX_FILE    /* Is this file being compiled as a MEX-file? */
#include "simulink.c"      /* MEX-file interface mechanism */
--IncludeFixedPointDotC--
#else
#include "cg_sfun.h"       /* Code generation registration function */
#endif


