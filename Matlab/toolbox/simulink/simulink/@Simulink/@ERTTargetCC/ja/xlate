% $Revision: 1.1.6.4 $
<(getDataPlacementDialog)#include file delimiter:
>(getDataPlacementDialog)#includeﾌｧｲﾙのﾃﾞﾘﾐﾀ:
<(getDataPlacementDialog)Select delimiter for all data objects that do not have\n a delimiter specified in IncludeFile property.
>(getDataPlacementDialog)IncludeFileﾌﾟﾛﾊﾟﾃｨに指定されたﾃﾞﾘﾐﾀにないすべての\nﾃﾞｰﾀｵﾌﾞｼﾞｪｸﾄに対するﾃﾞﾘﾐﾀを選択します。
<(getDataPlacementDialog)Source of initial values:
>(getDataPlacementDialog)初期値のｿｰｽ:
<(getDataPlacementDialog)Model
>(getDataPlacementDialog)ﾓﾃﾞﾙ
<(getDataPlacementDialog)Data object
>(getDataPlacementDialog)ﾃﾞｰﾀｵﾌﾞｼﾞｪｸﾄ
<(getDataPlacementDialog)Select source that determines the initialization values\n of model signals during run time.
>(getDataPlacementDialog)実行中のﾓﾃﾞﾙ信号の初期化の値を定義するｿｰｽを選択します。
<(getDataPlacementDialog)Module naming:
>(getDataPlacementDialog)ﾓｼﾞｭｰﾙのﾈｰﾐﾝｸﾞ:
<(getDataPlacementDialog)Allow you to name the module.
>(getDataPlacementDialog)ﾓｼﾞｭｰﾙの指定を可能にします。
<(getDataPlacementDialog)Not specified
>(getDataPlacementDialog)指定なし
<(getDataPlacementDialog)Same as model
>(getDataPlacementDialog)ﾓﾃﾞﾙと同じ
<(getDataPlacementDialog)User specified
>(getDataPlacementDialog)ﾕｰｻﾞ指定
<(getDataPlacementDialog)Module name:
>(getDataPlacementDialog)ﾓｼﾞｭｰﾙ名:
<(getDataPlacementDialog)Specify the name of the module that owns this model.
>(getDataPlacementDialog)このﾓﾃﾞﾙ自身のﾓｼﾞｭｰﾙの名前を指定します。
<(getDataPlacementDialog)Signal display level:
>(getDataPlacementDialog)信号の表示ﾚﾍﾞﾙ:
<(getDataPlacementDialog)Allow you to specify whether or not the code generator declares\na signal data object as global data in the generated code.
>(getDataPlacementDialog)ｺｰﾄﾞｼﾞｪﾈﾚｰﾀが、生成されたｺｰﾄﾞ内のｸﾞﾛｰﾊﾞﾙﾃﾞｰﾀとして信号の\nﾃﾞｰﾀｵﾌﾞｼﾞｪｸﾄを宣言するかどうかを指定することができます。
<(getDataPlacementDialog)Parameter tune level:
>(getDataPlacementDialog)ﾊﾟﾗﾒｰﾀの調整ﾚﾍﾞﾙ:
<(getDataPlacementDialog)Allow you to specify whether or not the code generator declares\na parameter data object as tunable global data in the generated code.
>(getDataPlacementDialog)ｺｰﾄﾞｼﾞｪﾈﾚｰﾀが、生成されたｺｰﾄﾞ内のﾁｭｰﾆﾝｸﾞ可能なｸﾞﾛｰﾊﾞﾙﾃﾞｰﾀとして\nﾊﾟﾗﾒｰﾀのﾃﾞｰﾀｵﾌﾞｼﾞｪｸﾄを宣言するかどうかを指定することができます。
<(getDataPlacementDialog)Data definition:
>(getDataPlacementDialog)ﾃﾞｰﾀ定義:
<(getDataPlacementDialog)Select .c file where variables of global scope are defined.
>(getDataPlacementDialog)ｸﾞﾛｰﾊﾞﾙｽｺｰﾌﾟの変数を宣言する.cﾌｧｲﾙを選択します。
<(getDataPlacementDialog)Auto
>(getDataPlacementDialog)Auto
<(getDataPlacementDialog)Data defined in source file
>(getDataPlacementDialog)ｿｰｽﾌｧｲﾙ内で定義されりﾃﾞｰﾀ
<(getDataPlacementDialog)Data defined in a single separate source file
>(getDataPlacementDialog)1つのｾﾊﾟﾚｰﾄｿｰｽﾌｧｲﾙ内で定義されるﾃﾞｰﾀ
<(getDataPlacementDialog)Data definition filename:
>(getDataPlacementDialog)ﾃﾞｰﾀを定義するﾌｧｲﾙ名:
<(getDataPlacementDialog)Specify name of single separate .c file that contains\n global data definitions.
>(getDataPlacementDialog)ｸﾞﾛｰﾊﾞﾙﾃﾞｰﾀの定義を含む1つのｾﾊﾟﾚｰﾄ.cﾌｧｲﾙの名前を指定\nします。
<(getDataPlacementDialog)Data declaration:
>(getDataPlacementDialog)ﾃﾞｰﾀ宣言:
<(getDataPlacementDialog)Select .h file where variables of global scope are declared\n(for example, extern real_T globalvar;).
>(getDataPlacementDialog)ｸﾞﾛｰﾊﾞﾙｽｺｰﾌﾟの変数が宣言される場合に.hﾌｧｲﾙを選択します\n(たとえば、extern real_T globalvar;)。
<(getDataPlacementDialog)Auto
>(getDataPlacementDialog)Auto
<(getDataPlacementDialog)Data declared in source file
>(getDataPlacementDialog)ｿｰｽﾌｧｲﾙ内で宣言されるﾃﾞｰﾀ
<(getDataPlacementDialog)Data declared in a single separate header file
>(getDataPlacementDialog)1つのｾﾊﾟﾚｰﾄﾍｯﾀﾞﾌｧｲﾙ内で宣言されるﾃﾞｰﾀ
<(getDataPlacementDialog)Data declaration filename:
>(getDataPlacementDialog)ﾃﾞｰﾀを宣言するﾌｧｲﾙ名:
<(getDataPlacementDialog)Specify name of single separate .c file that contains\nglobal data references.
>(getDataPlacementDialog)ｸﾞﾛｰﾊﾞﾙﾃﾞｰﾀの参照を含む1つのｾﾊﾟﾚｰﾄ.cﾌｧｲﾙの名前を指定\nします。
<(getDataPlacementDialog)Global data placement (custom storage classes only)
>(getDataPlacementDialog)ｸﾞﾛｰﾊﾞﾙﾃﾞｰﾀの配置 (ｶｽﾀﾑｽﾄﾚｰｼﾞｸﾗｽのみ)
<(getDataPlacementDialog)Global data placement (MPT data objects only)
>(getDataPlacementDialog)ｸﾞﾛｰﾊﾞﾙﾃﾞｰﾀの配置 (MPTﾃﾞｰﾀｵﾌﾞｼﾞｪｸﾄのみ)

<(getDialogSchema)Support floating point data types in the generated code.
>(getDialogSchema)生成されたｺｰﾄﾞにある浮動小数点ﾃﾞｰﾀﾀｲﾌﾟをｻﾎﾟｰﾄします。
<(getDialogSchema)floating-point numbers
>(getDialogSchema)浮動小数点数
<(getDialogSchema)Support complex data types in the generated code.
>(getDialogSchema)生成されたｺｰﾄﾞにある複素数ﾃﾞｰﾀﾀｲﾌﾟをｻﾎﾟｰﾄします。
<(getDialogSchema)complex numbers
>(getDialogSchema)複素数
<(getDialogSchema)Support non-finite values (inf, nan, -inf) in the generated code.
>(getDialogSchema)生成されたｺｰﾄﾞ内で有限でない値(inf, nan, -inf)をｻﾎﾟｰﾄします。
<(getDialogSchema)non-finite numbers
>(getDialogSchema)有限でない数
<(getDialogSchema)Support absolute time in the generated code. Blocks such as the\nDiscrete Integrator may require absolute time.
>(getDialogSchema)生成されたｺｰﾄﾞ内で絶対時間をｻﾎﾟｰﾄします。離散積分のようなﾌﾞﾛｯｸは\n絶対時間が必要な場合があります。
<(getDialogSchema)absolute time
>(getDialogSchema)絶対時間
<(getDialogSchema)Support continuous time in the generated code. This allows blocks to\nbe configured with a continuous sample time.
>(getDialogSchema)生成されたｺｰﾄﾞ内で連続時間をｻﾎﾟｰﾄします。これはﾌﾞﾛｯｸが連続な\nｻﾝﾌﾟﾙ時間で設定されることを可能にします。
<(getDialogSchema)continuous time
>(getDialogSchema)連続時間
<(getDialogSchema)Support S-functions that have not been inlined with a TLC file.\nInlined S-functions generate the most efficient code.
>(getDialogSchema)TLCﾌｧｲﾙでｲﾝﾗｲﾝ化されていないS-functionをｻﾎﾟｰﾄします。\nｲﾝﾗｲﾝ化されたS-functionは最も効率的なｺｰﾄﾞを生成します。
<(getDialogSchema)non-inlined S-functions
>(getDialogSchema)ｲﾝﾗｲﾝではないS-function
<(getDialogSchema)Life span of the application.  This value, along with a task''s timer\nstep size (resolution), will determine the size of integer counter\nused for mantaining absolute time.
>(getDialogSchema)ｱﾌﾟﾘｹｰｼｮﾝの寿命。ﾀｽｸのﾀｲﾏｰのｽﾃｯﾌﾟｻｲｽﾞ(分解能)と同様に、\nこの値は絶対時間を保持するために使われる整数ｶｳﾝﾀのｻｲｽﾞを\n定義します。
<(getDialogSchema)Application lifespan (days)
>(getDialogSchema)ｱﾌﾟﾘｹｰｼｮﾝのlifespan (日)
<(getDialogSchema)Generate a model terminate function.
>(getDialogSchema)ﾓﾃﾞﾙの終了関数を生成します。
<(getDialogSchema)Terminate function required
>(getDialogSchema)必要な終了関数
<(getDialogSchema)Single output/update function
>(getDialogSchema)1つの出力/更新関数
<(getDialogSchema)Generate a model's output and update routines into a single step function.
>(getDialogSchema)1つのｽﾃｯﾌﾟ関数内でのﾓﾃﾞﾙの出力と更新ﾙｰﾁﾝを生成します。
<(getDialogSchema)Generate reusable code
>(getDialogSchema)再利用可能なｺｰﾄﾞの生成
<(getDialogSchema)Generate reusable/reentrant code.
>(getDialogSchema)再利用可能/再入可能ｺｰﾄﾞを生成します。
<(getDialogSchema)Reusable code error diagnostic:
>(getDialogSchema)再利用可能なｺｰﾄﾞｴﾗｰの診断:
<(getDialogSchema)Specify the error diagnostic behavior for cases when\ndata defined in the model violates the requirements\nfor generation of reusable code.
>(getDialogSchema)ﾓﾃﾞﾙ内に定義されたﾃﾞｰﾀが再利用可能なｺｰﾄﾞ生成の\n必要条件に違反する場合に、ｴﾗｰの診断行動を選択\nします。
<(getDialogSchema)Pass root-level I/O as:
>(getDialogSchema)ﾙｰﾄﾚﾍﾞﾙのI/Oに渡す:
<(getDialogSchema)Select how to pass the root-level I/O data into the reusable\nfunction.
>(getDialogSchema)再利用可能な関数にﾙｰﾄﾚﾍﾞﾙのI/Oﾃﾞｰﾀを渡す方法を選択します。
<(getDialogSchema)Suppress error status in real-time model data structure
>(getDialogSchema)ﾘｱﾙﾀｲﾑのﾓﾃﾞﾙﾃﾞｰﾀ構造内のｴﾗｰｽﾃｰﾀｽを抑える
<(getDialogSchema)Remove the error status field of the real-time model data structure\nto preserve memory.
>(getDialogSchema)ﾒﾓﾘを保存するためにﾘｱﾙﾀｲﾑﾓﾃﾞﾙのﾃﾞｰﾀの構造体のｴﾗｰｽﾃｰﾀｽﾌｨｰﾙﾄﾞを削除します。
<(getDialogSchema)Create Simulink (S-Function) block
>(getDialogSchema)Simulink (S-Function)ﾌﾞﾛｯｸの作成
<(getDialogSchema)Wrap the generated code inside an S-Function block.\nThis allows you to validate the generated code in\nSimulink.
>(getDialogSchema)S-functionﾌﾞﾛｯｸの内部に生成されたｺｰﾄﾞをﾗｯﾌﾟします。\nこれはSimulink内に生成されたｺｰﾄﾞを有効にするために\n与えられます。
<(getDialogSchema)MAT-file logging
>(getDialogSchema)MAT-ﾌｧｲﾙのﾛｷﾞﾝｸﾞ
<(getDialogSchema)Generate code to log data to a MATLAB .mat file.
>(getDialogSchema)MATLABの.matﾌｧｲﾙにﾃﾞｰﾀをﾛｷﾞﾝｸﾞするためのｺｰﾄﾞを生成。
<(getDialogSchema)Interface:
>(getDialogSchema)ｲﾝﾀﾌｪｰｽ:
<(getDialogSchema)None
>(getDialogSchema)なし
<(getDialogSchema)External Mode
>(getDialogSchema)ｴｸｽﾀｰﾅﾙﾓｰﾄﾞ
<(getDialogSchema)Specify the desired data interface to generate along with the code.
>(getDialogSchema)ｺｰﾄﾞと共に生成するための所望のﾃﾞｰﾀのｲﾝﾀﾌｪｰｽを指定します。
<(getDialogSchema)Signals in C API
>(getDialogSchema)C APIの信号
<(getDialogSchema)Generate signals structure in C API.
>(getDialogSchema)C APIの信号の構造を生成します。
<(getDialogSchema)Parameters in C API
>(getDialogSchema)C APIのﾊﾟﾗﾒｰﾀ
<(getDialogSchema)Generate parameter tuning structures in C API.
>(getDialogSchema)C APIのﾊﾟﾗﾒｰﾀﾁｭｰﾆﾝｸﾞの構造を生成します。
<(getDialogSchema)GRT compatible call interface
>(getDialogSchema)GRTと互換性をもつｺｰﾙｲﾝﾀﾌｪｰｽ
<(getDialogSchema)Include a code (wrapper) interface that is compatible with the GRT\ntarget.
>(getDialogSchema)GRTﾀｰｹﾞｯﾄと互換性をもつｺｰﾄﾞ(ﾗｯﾊﾟｰ)ｲﾝﾀﾌｪｰｽを含みます。
<(getDialogSchema)MAT-file variable name modifier:
>(getDialogSchema)MAT-ﾌｧｲﾙ変数名の変更:
<(getDialogSchema)none
>(getDialogSchema)なし
<(getDialogSchema)prefix rt_ to variable name,\nappend _rt to variable name,\nor no modification.
>(getDialogSchema)変数名に接頭辞rt_を付けるか、\n変数名に_rtを追加するか、\nあるいは何も変更しません。
<(getDialogSchema)Software environment
>(getDialogSchema)ｿﾌﾄｳｪｱ環境
<(getDialogSchema)Code interface
>(getDialogSchema)ｺｰﾄﾞｲﾝﾀﾌｪｰｽ
<(getDialogSchema)Data exchange
>(getDialogSchema)ﾃﾞｰﾀ交換
<(getDialogSchema)Verification
>(getDialogSchema)*JA*Verification

<(getTemplateDialog)Source file (*.c) template:
>(getTemplateDialog)ｿｰｽﾌｧｲﾙ(*.c)のﾃﾝﾌﾟﾚｰﾄ:
<(getTemplateDialog)Specify template that organizes the generated code .c source files. 
>(getTemplateDialog)生成されたｺｰﾄﾞ.cのｿｰｽﾌｧｲﾙをまとめるﾃﾝﾌﾟﾚｰﾄを指定します。
<(getTemplateDialog)Browse
>(getTemplateDialog)参照
<(getTemplateDialog)Edit
>(getTemplateDialog)編集
<(getTemplateDialog)Header file (*.h) template:
>(getTemplateDialog)ﾍｯﾀﾞﾌｧｲﾙ(*.h)のﾃﾝﾌﾟﾚｰﾄ:
<(getTemplateDialog)Specify template that organizes the generated code .h header files. 
>(getTemplateDialog)生成されたｺｰﾄﾞ.hのﾍｯﾀﾞﾌｧｲﾙをまとめるﾃﾝﾌﾟﾚｰﾄを指定します。 
<(getTemplateDialog)Source file (*.c) template:
>(getTemplateDialog)ｿｰｽﾌｧｲﾙ(*.c)のﾃﾝﾌﾟﾚｰﾄ:
<(getTemplateDialog)Specify template that organizes the generated data .c source files. 
>(getTemplateDialog)生成されたｺｰﾄﾞ.cのｿｰｽﾌｧｲﾙをまとめるﾃﾝﾌﾟﾚｰﾄを指定します。  
<(getTemplateDialog)Header file (*.h) template:
>(getTemplateDialog)ﾍｯﾀﾞﾌｧｲﾙ(*.h)のﾃﾝﾌﾟﾚｰﾄ:
<(getTemplateDialog)Specify template that organizes the generated data .h header files. 
>(getTemplateDialog)生成されたｺｰﾄﾞ.hのﾍｯﾀﾞﾌｧｲﾙをまとめるﾃﾝﾌﾟﾚｰﾄを指定します。 
<(getTemplateDialog)Generate an example main program
>(getTemplateDialog)実例のﾒｲﾝﾌﾟﾛｸﾞﾗﾑの生成
<(getTemplateDialog)Generate an example main program demonstrating\nhow to deploy the generated code.  The program is\ngenerated into ert_main.c.
>(getTemplateDialog)生成されたｺｰﾄﾞの展開方法をﾃﾞﾓする実例の\nﾒｲﾝﾌﾟﾛｸﾞﾗﾑを生成します。ﾌﾟﾛｸﾞﾗﾑはert_main.c\nの中に生成されます。
<(getTemplateDialog)Target operating system:
>(getTemplateDialog)ﾀｰｹﾞｯﾄｵﾍﾟﾚｰﾃｨﾝｸﾞｼｽﾃﾑ:
<(getTemplateDialog)Specify the target operating system for the exmaple main ert_main.c.\nBareBoardExample is a generic example that assumes no operating system.\nVxWorksExample is tailored to the VxWorks real-time operating system.
>(getTemplateDialog)例題のmain ert_main.cに対するﾀｰｹﾞｯﾄのｵﾍﾟﾚｰﾃｨﾝｸﾞｼｽﾃﾑを指定します。\nBareBoardExampleはｵﾍﾟﾚｰﾃｨﾝｸﾞｼｽﾃﾑを想定しない一般的な例題です。\nVxWorksExampleは、VxWorksﾘｱﾙﾀｲﾑｵﾍﾟﾚｰﾃｨﾝｸﾞｼｽﾃﾑに合わせたものです。
<(getTemplateDialog)File customization template:
>(getTemplateDialog)ﾌｧｲﾙｶｽﾀﾏｲｽﾞのﾃﾝﾌﾟﾚｰﾄ:
<(getTemplateDialog)TLC callback script for customizing the generated code.
>(getTemplateDialog)生成されたｺｰﾄﾞをｶｽﾀﾏｲｽﾞするためのTLCｺｰﾙﾊﾞｯｸのｽｸﾘﾌﾟﾄです。
<(getTemplateDialog)No tooltip
>(getTemplateDialog)ﾂｰﾙﾁｯﾌﾟなし
<(getTemplateDialog)Code templates
>(getTemplateDialog)ｺｰﾄﾞﾃﾝﾌﾟﾚｰﾄ
<(getTemplateDialog)Custom templates
>(getTemplateDialog)ｶｽﾀﾑﾃﾝﾌﾟﾚｰﾄ
<(getTemplateDialog)Data templates
>(getTemplateDialog)ﾃﾞｰﾀﾃﾝﾌﾟﾚｰﾄ
<(getTemplateDialog)Templates
>(getTemplateDialog)ﾃﾝﾌﾟﾚｰﾄ
<(getDialogSchema)Support:
>(getDialogSchema)ｻﾎﾟｰﾄ:
