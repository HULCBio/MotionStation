%% $RCSfile: sfix_target_specific.tlc,v $
%% $Revision: 1.9.2.2 $ 
%% $Date: 2004/04/15 00:35:41 $
%%
%% Copyright 1994-2003 The MathWorks, Inc.
%%
%% Abstract:
%%      Determine the C Languages most common target specific items.
%%

%implements sfix_target_specific "C"



%% Function: BlockInstanceSetup ===============================================
%% Abstract:
%% 	Pre-code generation work
%%
%function BlockInstanceSetup(block, system) void
  %%
%endfunction %% BlockInstanceSetup



%% Function: Outputs ==========================================================
%% Abstract:
%%   Each input is assumed to be of Type real_T and it is assumed that
%%   the standard C Math.h library is available for use on Type real_T
%%
%function Outputs(block, system) Output
%%
%openfile myFunction 
/* Function: double2int
 *     force online conversion, 
 *     ie dont allow precompilation propagation of constants
 */
static int double2int(double r)
{
    return ((int)r);
}
%closefile myFunction
%%
%openfile myProto 
static int double2int(double r);
%closefile myProto
%%
%<SLibCacheSourceCode(myFunction)>
%%%<LibRegFileCustomCode(myFunction,"header")>
%%
%<LibCacheFunctionPrototype(myProto)>
%%
    %%
    %%  Comment generated code
    %%
    /* Determine the C Languages most common target specific items. */
{
  real_T  r1, r2, r3;

  int i1, i2, i3, i4, i5, i6, i7, i8, i9;

  short s1 = 1;
  
  /*
   * shifts right on signed integers
   */
  i1 = -28;
  i2 = ( i1 >> 2 );
  %<LibBlockOutputSignal(0,"","",0)> = ( i2 == (i1 /  4) );


  /*
   * negative operand integer division rounding
   */
   
  i1 = -7 / 4;
  i2 = -6 / 4;
  i3 = -5 / 4;
  i4 =  7 / -4;
  i5 =  6 / -4;
  i6 =  5 / -4;
  i7 = -7 / -4;
  i8 = -6 / -4;
  i9 = -5 / -4;

  /* 
   * round toward floor
   */
  r1 = ((i1 == -2) && (i2 == -2) && (i3 == -2) &&
        (i4 == -2) && (i5 == -2) && (i6 == -2) &&
        (i7 ==  1) && (i8 ==  1) && (i9 ==  1));
        
  %<LibBlockOutputSignal(1,"","",0)> = r1;
  
  /*
   * round toward zero
   */
  r2 = ((i1 == -1) && (i2 == -1) && (i3 == -1) &&
        (i4 == -1) && (i5 == -1) && (i6 == -1) &&
        (i7 ==  1) && (i8 ==  1) && (i9 ==  1));
        
  %<LibBlockOutputSignal(1,"","",1)> = r2;
  
  /*
   * undefined rounding
   */
  %<LibBlockOutputSignal(1,"","",2)> = !( r1 || r2 );

  /*
   * Byte order test (little-endian == 0, big-endian == 1)
   */
  %<LibBlockOutputSignal(2,"","",0)> =  (*((char *) &s1) == 1) ? 0 : 1;
   
  /*
   * bits per char, short, int, long
   */
  r1 = UCHAR_MAX + 1.0;
  r2 = frexp( r1, &i1 );
  %<LibBlockOutputSignal(3,"","",0)> = i1-1;
  
  r1 = USHRT_MAX + 1.0;
  r2 = frexp( r1, &i1 );
  %<LibBlockOutputSignal(3,"","",1)> = i1-1;
  
  r1 = UINT_MAX + 1.0;
  r2 = frexp( r1, &i1 );
  %<LibBlockOutputSignal(3,"","",2)> = i1-1;
  
  r1 = ULONG_MAX + 1.0;
  r2 = frexp( r1, &i1 );
  %<LibBlockOutputSignal(3,"","",3)> = i1-1;

}    
%endfunction  %% Outputs

%% [EOF] sfix_target_specific.tlc
