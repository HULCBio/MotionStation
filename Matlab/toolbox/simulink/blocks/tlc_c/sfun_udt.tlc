%% $RCSfile: sfun_udt.tlc,v $
%% Copyright 1990-2003 The MathWorks, Inc.
%%
%% Abstract:
%%      TLC-file for matlabroot/simulnk/src/sfun_utd.c
%%
%% $Revision: 1.4.2.2 $

%implements "sfun_udt" "C"

%include "sfun_udt_util.tlc"

%% Function: BlockTypeSetup ====================================================
%% Abstract:
%%   Register convert-between and is-positive TLC function names for udt "Data"
%%
%function BlockTypeSetup(block, system) void
  %assign udtId  = LibBlockOutputSignalDataTypeId(0)
  %assign udtRec = CompiledModel.DataTypes.DataType[udtId]
  %<SLibSetDataTypeConvertBetweenTLCFcnName(udtRec, "FcnDataCnvBtw")>
  %<SLibSetDataTypeIsPositiveTLCFcnName(udtRec, "FcnDataIsPos")>
  %<SLibSetDataTypeSignTLCFcnName(udtRec, "FcnDataSign")>
  %<SLibSetDataTypeConvertBetweenTLCFcnFile(udtRec, "sfun_udt_util.tlc")>
  %<SLibSetDataTypeIsPositiveTLCFcnFile(udtRec, "sfun_udt_util.tlc")>
  %<SLibSetDataTypeSignTLCFcnFile(udtRec, "sfun_udt_util.tlc")>
  %<SLibSetDataTypeName(udtRec, "Data")>

  %openfile tmpBuff
  #ifndef RESOLUTION_TYPEDEF
  
  typedef enum { LO_RES, HI_RES } Resolution;
  typedef struct { Resolution res; int8_T value; } Data;
  
  #define RESOLUTION_TYPEDEF
  #endif /* RESOLUTION_TYPEDEF */  
  %closefile tmpBuff
  
  %<LibCacheTypedefs(tmpBuff)>;

%endfunction


%% Function: Outputs ===========================================================
%%
%function Outputs(block, system) Output
  /* %<Type> Block: %<Name> */
  %assign u = LibBlockInputSignal(0, "", "", 0)
  %assign y = LibBlockOutputSignal(0, "", "", 0)
  if (%<u> > 127.0) {
    %<y>.value = 127;
    %<y>.res   = LO_RES;
  } else if (%<u> < 1.0 && %<u> > -1.0) {
    %<y>.value = (int8_T) (127.0 * %<u>);
    %<y>.res   = HI_RES;
  } else {
    %<y>.value = (int8_T) %<u>;
    %<y>.res   = LO_RES;
   }

%endfunction

%% [EOF] sfun_udt.tlc

