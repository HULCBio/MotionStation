<!-- $Revision: 1.3 $ -->
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>Merge Block Simulink demo</title>
</head>

<body bgcolor="#FFFFFF">
<table width="100%" border=0 cellspacing=0 bgcolor=ffe4b0>
<tr>
<td><b>mergedemo.mdl</b></td>
<td align=right><a href="matlab:mergedemo"><b>Open this Model</b></a></td>
</tr>
</table>
<p style="color:#990000; font-weight:bold; font-size:x-large">Simulink Merge Block Demonstration</p>

<p>This interactive demonstration introduces you to the following
Simulink concepts. </p>

<ul>
    <li>The Merge block Simulink demonstration</li>
    <li>Conditionally executed subsystems</li>
    <li>Logical Operator block</li>
    <li>Boolean signals in Simulink</li>
    <li>Creating alternately enabling subsystems using the Merge
        block</li>
    <li>Programmatically changing a block's BackgroundColor </li>
</ul>

<p>If you have not opened or have made changes to the Merge Block
Demonstration Simulink model, please <a
href="matlab:mergedemoscript('openmodel');">reinitialize the
Simulink model mergedemo.mdl.</a> <br>
</p>

<hr>

<h3><a name="DemoDescription"></a>Model description</h3>

<p>The left side of this model contains two blocks, for example
the <a
href="matlab:mergedemoscript('hiliteblock',['Repeating',char(10),'Sequence']);">Repeating
Sequence </a>block, from the Simulink Sources library.&nbsp; Each
block generates a scalar output signal of the form displayed on
the block's icon. These two signals are fed into different <a
href="matlab:mergedemoscript('hilite_subsystems');">Enabled
Subsystems</a>, which are outlined with thick lines. The enabled
(or conditionally executed) subsystems are controlled by the
signal generated by a <a
href="matlab:mergedemoscript('hiliteblock',['Discrete',char(32),'Pulse',char(10),'Generator']);">Discrete
Pulse Generator</a> block. This block's output toggles between
the values of zero and one every five seconds. When the output of
the Discrete Pulse Generator block is positive, the top enabled
subsystem is simulating. When the output of the Discrete Pulse
Generator block is zero, the bottom enabled subsystem is
simulating. To force the bottom enabled subsystem to simulate
when the Discrete Pulse Generator block's output is zero, the
output is passed through a <a
href="matlab:mergedemoscript('hiliteblock',['Logical',char(10),'Operator']);">Logical
Operator </a>block set to the NOT operator. The NOT block outputs
a value of one when its input is zero.</p>

<p>The outputs of the two enabled subsystems are fed into a <a
href="matlab:mergedemoscript('hiliteblock',['Merge']);">Merge</a>
block. The output of the Merge block is, finally, displayed on a
Simulink <a
href="matlab:mergedemoscript('hiliteblock',['Scope']);">Scope</a>.
</p>

<p>You can <a href="matlab:mergedemoscript('run');">run the
simulation</a> to see the output of the Merge block on the Scope.
Notice that the type of waveform shown on the Scope changes every
five seconds. This is due to the behavior of the Merge block.
</p>

<hr>

<h3>Conditionally executed subsystems</h3>

<p>The Merge block demonstration contains <a
href="matlab:mergedemoscript('hilite_subsystems');">two
conditionally executed subsystems</a>. A conditionally executed
subsystem is a subsystem that is only executed at particular
times during the simulation, i.e., when certain conditions are
met. In this case, the subsystems are <em>enabled</em>
subsystems, distinguished by their icons and the additional input
port on the top or bottom of the block, as shown below. </p>

<p align="center"><img src="images/mergedemofig1.gif" width="252"
height="116"></p>

<p>The signal feeding into the additional port is called the <em>control</em>
<em>signal</em>. The value of this signal provides the condition
that determines whether the subsystem is executed, or not, at any
given time step. Enabled subsystems are executed when the control
signal is strictly positive.</p>

<p>In this demonstration, you want to execute one of the enabled
subsystems when the control signal is positive, and the other
when the control signal is zero. You can do this by using the
Logical Operator block in Simulink.</p>

<hr>

<h3>Logical Operators block</h3>

<p>The <a
href="matlab:mergedemoscript('hiliteblock',['Logical',char(10),'Operator']);">Logical
Operator</a> block in Simulink gives you a method for
incorporating logical operators and boolean signals into your
Simulink diagram. You can <a
href="matlab:mergedemoscript('openoperator')">open the Logical
Operator</a> block to see the different operators that are listed
in the drop down menu. The current setting of NOT returns 1 (or
TRUE) when the input signal is non-zero, or 0 (FALSE) when the
input signal is strictly zero.</p>

<p>In this example, you can use this feature to generate a
positive value when the control signal goes to zero by <a
href="matlab:mergedemoscript('usenot');">maintaining the current
operator setting of NOT and closing the dialog</a>. </p>

<p><strong>Note:</strong> Even though you are using a Logical
Operator block, the output of the block is not a boolean in
Simulink. By default, all signals in Simulink are of the data
type double. To see this, you can display the data type of each
signal by <a href="matlab:mergedemoscript('showdatatypes');">checking
the<strong> Port data types</strong> </a>command in the Simulink
diagram's <strong>Format</strong> menu. </p>

<hr>

<h3>Boolean signals in Simulink</h3>

<p>You can force Simulink to use boolean values for the inputs
and outputs of the Logical Operator block, using the following
steps.</p>

<ol>
    <li><a href="matlab:mergedemoscript('opensimparam');">Open
        the Simulation Parameters window</a> by choosing the <strong>Simulation
        parameters...</strong> command from the <strong>Simulation</strong>
        menu.</li>
    <li><a href="matlab:mergedemoscript('gotoadvanced');">Go to
        the <strong>Advanced</strong> tab</a> in the Simulation
        Parameters dialog.</li>
    <li>From the list of optimizations at the bottom of this
        panel, <a href="matlab:mergedemoscript('selectboolean');">highlight
        the <strong>Boolean logic signals </strong>item.</a> This
        optimization tells Simulink whether it should allow a
        signal whose data type is double to be passed into and
        out of blocks that support the boolean data type, or not.
    </li>
    <li><a href="matlab:mergedemoscript('selecton');">Select the <strong>On</strong>
        radio button</a>, to turn the <strong>Boolean logic
        signals </strong>on. Now, Simulink will error out when it
        detects that any data type other than boolean is passed
        into a block expecting a logical signal.</li>
    <li><a href="matlab:mergedemoscript('pressok');">Press the <strong>OK</strong>
        button</a> on the Simulation Parameters window.</li>
</ol>

<p>If you <a href="matlab:mergedemoscript('run');">run the
simulation</a>, you'll see an error indicating that the Logical
Operator block expects a boolean input signal. While the error
dialog is open, notice that the input and output data type of the
NOT block is labeled boolean on the Simulink diagram. </p>

<p>You can use the following steps to remedy this error.</p>

<ol>
    <li><a href="matlab:mergedemoscript('addconversion');">Place
        a Data Type Conversion block</a> after the Discrete Pulse
        Generator block.</li>
    <li><a href="matlab:mergedemoscript('opendialog');">Open the
        Data Type Conversion block's Block Parameter dialog</a>.</li>
    <li><a href="matlab:mergedemoscript('changedatatype');">Choose
        &quot;boolean&quot; from the<strong> Data type</strong>
        pull down menu and press the <strong>OK</strong> button</a>.
    </li>
    <li><a href="matlab:mergedemoscript('run');">Run the
        simulation.</a> It now contains boolean data types at the
        input and output of the Logical Operator block. </li>
</ol>

<hr>

<h3>The Merge block and alternately enabling subsystems</h3>

<p>You can use the Merge block to create a single signal whose
value is equal to the output of whichever enabled subsystem is
currently executing. The following steps.</p>

<ol>
    <li><a href="matlab:mergedemoscript('openmerge');">Open the
        Merge block's Block Parameter dialog</a> by double
        clicking on the block.</li>
    <li>Specify the <strong>Number of inputs</strong> as the
        number of enabled subsystems whose outputs you want to
        merge. In this case you want to <a
        href="matlab:mergedemoscript('setnuminputs');">set the <strong>Number
        of inputs </strong>to be 2</a>. </li>
    <li><a href="matlab:mergedemoscript('initialoutput');">Leave
        the <strong>Initial output field</strong> empty</a> to
        specify that the Merge block sets its initial output to
        the initial value of one of its input signals. In this
        case, the output will be the initial value of the
        subsystem that is enabled when the simulation starts.</li>
    <li><a href="matlab:mergedemoscript('closemerge');">Close the
        Merge block's Block Parameter dialog</a>. </li>
    <li><a href="matlab:mergedemoscript('selectlines');">Connect
        the output of the two conditionally executed subsystems
        to the inputs of the Merge block</a>.</li>
</ol>

<p>As before, when you <a href="matlab:mergedemoscript('run');">run
the simulation</a>, the output of the Merge block is the value of
whatever conditionally executed subsystem is executing at any
point in time. </p>

<hr>

<h3>Interesting feature: Programmatically changing a block's
BackgroundColor</h3>

<p>When you ran the simulation, you should have noticed that the
color of the currently executing conditionally executing
subsystems changed. This does <em>not</em> happen automatically
for all conditionally executing subsystems. It was achieved using
an S-function!</p>

<p>If you<a href="matlab:mergedemoscript('opensubsystem');"> open
one of the enabled subsystems</a> by double clicking on the block
in the Simulink diagram, you'll see it contains the following.</p>

<ol>
    <li><a
        href="matlab:mergedemoscript('hiliteblock','Subsystem/Enable');">An
        Enable block</a>, which is what makes this a
        conditionally executed subsystem and adds the input port
        for the control signal</li>
    <li><a
        href="matlab:mergedemoscript('hiliteblock','Subsystem/S-Function');">An
        S-function block</a>, which runs the M-file S-function
        &quot;<a href="matlab:mergedemoscript('opensfcn');">mergefcn.m</a>&quot;</li>
</ol>

<p>At each time step, the S-function's mdlUpdate subfunction
executes. It sets the BackgroundColor property of the Subsystems
based on whether it is currently executing, or not, with the
following command.</p>

<blockquote>
    <p><a
    href="matlab:set_param('mergedemo/Subsystem','BackgroundColor','green')">set_param('mergedemo/Subsystem','BackgroundColor','green')</a></p>
</blockquote>

<p>For more information on how to write M-file S-functions, see
the documentation.</p>

<p><a href="matlab:mergedemoscript('closemodel');">Close</a> the
Merge block demonstration Simulink diagram.</p>
</body>
</html>
