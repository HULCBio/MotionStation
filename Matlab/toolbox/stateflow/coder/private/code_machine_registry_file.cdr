function code_machine_registry_file(fileNameInfo)
% CODE_MACHINE_REGISTRY_FILE(FILENAMEINFO)

%   Copyright 1995-2004 The MathWorks, Inc.
%   $Revision: 1.8.4.7 $  $Date: 2004/04/15 00:51:25 $

	global gTargetInfo gMachineInfo

	fileName = fullfile(fileNameInfo.targetDirName,fileNameInfo.machineRegistryFile);
   sf_echo_generating('Coder',fileName);
	file = fopen(fileName,'wt');
	if file<3
		construct_coder_error([],sprintf('Failed to create file: %s.',fileName),1);
		return;
	end

...#include "$fileNameInfo.machineHeaderFile$"
	if gTargetInfo.codingDebug
...#include "sfcdebug.h"
	end
	
	if gTargetInfo.codingSFunction
...#define PROCESS_MEX_SFUNCTION_CMD_LINE_CALL
...unsigned int sf_process_check_sum_call( int nlhs, mxArray * plhs[], int nrhs, const mxArray * prhs[] ) 
...{
...	extern unsigned int sf_$gMachineInfo.machineName$_process_check_sum_call( int nlhs, mxArray * plhs[], int nrhs, const mxArray * prhs[] );
			for i=1:length(fileNameInfo.linkMachines)                                                        
...	extern unsigned int sf_$fileNameInfo.linkMachines{i}$_process_check_sum_call( int nlhs, mxArray * plhs[], int nrhs, const mxArray * prhs[] );
			end                                                                                              
...                                                                                                       
...	if(sf_$gMachineInfo.machineName$_process_check_sum_call(nlhs,plhs,nrhs,prhs)) return 1;                         
			for i=1:length(fileNameInfo.linkMachines)                                                        
...	if(sf_$fileNameInfo.linkMachines{i}$_process_check_sum_call(nlhs,plhs,nrhs,prhs)) return 1;         
			end                                                                                              
...	return 0;                                                                                           
...}                                                                                                      

...unsigned int sf_process_autoinheritence_call( int nlhs, mxArray * plhs[], int nrhs, const mxArray * prhs[] ) 
...{
...	extern unsigned int sf_$gMachineInfo.machineName$_autoinheritance_info( int nlhs, mxArray * plhs[], int nrhs, const mxArray * prhs[] );
...	if(sf_$gMachineInfo.machineName$_autoinheritance_info(nlhs,plhs,nrhs,prhs)) return 1;                         
...	return 0;                                                                                           
...}                                                                                                      

...unsigned int sf_mex_unlock_call( int nlhs, mxArray * plhs[], int nrhs, const mxArray * prhs[] ) 
...{
...	char commandName[20];
...	if (nrhs<1 || !mxIsChar(prhs[0]) ) return 0;
...$sf_comment('/* Possible call to get the checksum */')$
...	mxGetString(prhs[0], commandName,sizeof(commandName)/sizeof(char));
...	commandName[(sizeof(commandName)/sizeof(char)-1)] = '\0';
...	if(strcmp(commandName,"sf_mex_unlock")) return 0;
...   while(mexIsLocked()) {
...      mexUnlock();
...   }
...   return(1);
...}


   if gTargetInfo.codingDebug
...extern unsigned int sf_debug_api( int nlhs, mxArray * plhs[], int nrhs, const mxArray * prhs[] );
	end
	if(gTargetInfo.codingSFunction)
...static unsigned int ProcessMexSfunctionCmdLineCall(int nlhs, mxArray * plhs[], int nrhs, const mxArray * prhs[])
	else
...unsigned int fsm_process_mex_cmd_line_call(int nlhs, mxArray * plhs[], int nrhs, const mxArray * prhs[])
	end
...{
		if(gTargetInfo.codingDebug)
...	if(sf_debug_api(nlhs,plhs,nrhs,prhs)) return 1;
		end
...	if(sf_process_check_sum_call(nlhs,plhs,nrhs,prhs)) return 1;
...	if(sf_mex_unlock_call(nlhs,plhs,nrhs,prhs)) return 1;
...	if(sf_process_autoinheritence_call(nlhs,plhs,nrhs,prhs)) return 1;
...	return 0;
...}
...static unsigned int sfMachineGlobalTerminatorCallable = 0;
...static unsigned int sfMachineGlobalInitializerCallable = 1;

...extern unsigned int sf_$gMachineInfo.machineName$_method_dispatcher(SimStruct *S, const char *chartName, int_T method, void *data);
		for i=1:length(fileNameInfo.linkMachines)
...extern unsigned int sf_$fileNameInfo.linkMachines{i}$_method_dispatcher(SimStruct *S, const char *chartName, int_T method, void *data);
		end		
...unsigned int sf_machine_global_method_dispatcher(SimStruct *simstructPtr, const char *chartName, int_T method, void *data)
...{
...	if(sf_$gMachineInfo.machineName$_method_dispatcher(simstructPtr,chartName,method,data)) return 1;
		for i=1:length(fileNameInfo.linkMachines)
...	if(sf_$fileNameInfo.linkMachines{i}$_method_dispatcher(simstructPtr,chartName,method,data)) return 1;
		end
...	return 0;
...}

...extern void $gMachineInfo.machineName$_terminator(void);
		for i=1:length(fileNameInfo.linkMachines)
...extern void $fileNameInfo.linkMachines{i}$_terminator(void);
		end
...void sf_machine_global_terminator(void)
...{
...	if(sfMachineGlobalTerminatorCallable) {
...		sfMachineGlobalTerminatorCallable = 0;
...		sfMachineGlobalInitializerCallable = 1;
...		$gMachineInfo.machineName$_terminator();
		for i=1:length(fileNameInfo.linkMachines)
...		$fileNameInfo.linkMachines{i}$_terminator();
		end
		
		if gTargetInfo.codingDebug
...	sf_debug_terminate();
		end

...	}
...	return;
...}
...extern void $gMachineInfo.machineName$_initializer(void);
		for i=1:length(fileNameInfo.linkMachines)
...extern void $fileNameInfo.linkMachines{i}$_initializer(void);
		end
      if(gTargetInfo.codingDebug)
...extern void $gMachineInfo.machineName$_debug_initialize(void);
         for i=1:length(fileNameInfo.linkMachines)
...extern void $fileNameInfo.linkMachines{i}$_debug_initialize(void);
         end
      end
...void sf_machine_global_initializer(void)
...{
...	if(sfMachineGlobalInitializerCallable) {
...		sfMachineGlobalInitializerCallable = 0;
...		sfMachineGlobalTerminatorCallable =1;
	   if(gTargetInfo.codingDebug)
...     $gMachineInfo.machineName$_debug_initialize();
      end        
...		$gMachineInfo.machineName$_initializer();
		for i=1:length(fileNameInfo.linkMachines)
		   if(gTargetInfo.codingDebug)
...     $fileNameInfo.linkMachines{i}$_debug_initialize();
         end        
...		$fileNameInfo.linkMachines{i}$_initializer();
		end
...	}
...	return;
...}
...
...#define PROCESS_MEX_SFUNCTION_EVERY_CALL
...
...unsigned int ProcessMexSfunctionEveryCall(int_T nlhs, mxArray *plhs[], int_T nrhs, const mxArray *prhs[]);
...
...#include "simulink.c"      $sf_comment('/* MEX-file interface mechanism */')$
...
...static void sf_machine_load_sfunction_ptrs(SimStruct *S)
...{
...    ssSetmdlInitializeSampleTimes(S,__mdlInitializeSampleTimes);
...    ssSetmdlInitializeConditions(S,__mdlInitializeConditions);
...    ssSetmdlOutputs(S,__mdlOutputs);
...    ssSetmdlTerminate(S,__mdlTerminate);
...    ssSetmdlRTW(S,__mdlRTW);
...    ssSetmdlSetWorkWidths(S,__mdlSetWorkWidths);
...
...#if defined(MDL_HASSIMULATIONCONTEXTIO)
...    ssSetmdlSimulationContextIO(S,__mdlSimulationContextIO);
...#endif
...
...#if defined(MDL_START)
...    ssSetmdlStart(S,__mdlStart);
...#endif
...    
...#if defined(RTW_GENERATED_ENABLE)
...    ssSetRTWGeneratedEnable(S,__mdlEnable);
...#endif
...
...#if defined(RTW_GENERATED_DISABLE)
...    ssSetRTWGeneratedDisable(S,__mdlDisable);
...#endif
...
...#if defined(MDL_ENABLE)
...    ssSetmdlEnable(S,__mdlEnable);
...#endif
...
...#if defined(MDL_DISABLE)
...    ssSetmdlDisable(S,__mdlDisable);
...#endif
...
...#if defined(MDL_SIM_STATUS_CHANGE)
...    ssSetmdlSimStatusChange(S,__mdlSimStatusChange);
...#endif
...
...#if defined(MDL_EXT_MODE_EXEC)
...    ssSetmdlExtModeExec(S,__mdlExtModeExec);
...#endif
...
...#if defined(MDL_UPDATE)
...    ssSetmdlUpdate(S,__mdlUpdate);
...#endif
...}
...
...unsigned int ProcessMexSfunctionEveryCall(int_T nlhs, mxArray *plhs[], int_T nrhs, const mxArray *prhs[])
...{
...   if (nlhs < 0) {
...      SimStruct *S = (SimStruct *)plhs[_LHS_SS];
...      int_T flag = (int_T)(*(real_T*)mxGetPr(prhs[_RHS_FLAG]));
...      if (flag == SS_CALL_MDL_SET_WORK_WIDTHS) {
...         sf_machine_load_sfunction_ptrs(S);
...      }
...   }
...   return 0;
...}
	end
	
	fclose(file);
	try_indenting_file(fileName);

