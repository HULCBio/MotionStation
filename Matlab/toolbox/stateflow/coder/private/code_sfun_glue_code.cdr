function file = code_sfun_glue_code(fileNameInfo,file,...
                             chart,...
                             chartUniqueName)

%   Copyright 1995-2004 The MathWorks, Inc.
%   $Revision: 1.40.4.20 $  $Date: 2004/04/15 00:51:33 $

    %%%%%%%%%%%%%%%%%%%%%%%%% Coding options
    global gTargetInfo gChartInfo gDataInfo gMachineInfo

    disableImplicitCasting = sf('get',chart,'chart.disableImplicitCasting');
    chartExecuteAtInitialization    = sf('get',chart,'chart.executeAtInitialization');
    chartFileNumber = sf('get',chart,'chart.chartFileNumber');

   [uniqueWkspDataNames,wkspData,II,JJ] = sf('Private','get_wksp_data_names_for_chart',chart);
   uniqueWskpData = wkspData(II);

   uniqueWskpDataNumbers = sf('get',uniqueWskpData,'data.number');
.../* SFunction Glue Code */

   if gChartInfo.hasTestPoint
...static void init_test_point_mapping_info(SimStruct *S);
   end

...void sf_$chartUniqueName$_get_check_sum(mxArray *plhs[])
...{
        checksumVector = sf('get',chart,'chart.checksum');
        for i=1:4
...         ((real_T *)mxGetPr((plhs[0])))[$#(i-1)$] = (real_T)($#checksumVector(i)$U);
        end
...}
...
...mxArray *sf_$chartUniqueName$_get_autoinheritance_info(void)
...{
...     const char *autoinheritanceInfoStructFieldNames[] = {"checksum","inputTypes","outputSizes","outputTypes"};
...     mxArray *mxAutoinheritanceInfo = NULL;
...     mxArray *mxChecksum = NULL;
...     mxArray *mxInputTypes = NULL;
...     mxArray *mxOutputSizes = NULL;
...     mxArray *mxOutputTypes = NULL;
...
...     mxAutoinheritanceInfo = mxCreateStructMatrix(1,1,
...                                sizeof(autoinheritanceInfoStructFieldNames)/sizeof(char *),
...                                autoinheritanceInfoStructFieldNames);
...
...     mxChecksum = mxCreateDoubleMatrix(4,1,mxREAL);
        checksumVector = sf('SyncEMLAutoinheritanceChecksum', chart);
        for i=1:4
...         ((real_T *)mxGetPr((mxChecksum)))[$#(i-1)$] = (real_T)($#checksumVector(i)$U);
        end
...
	    numInputs = length(gChartInfo.chartInputData);
...     mxInputTypes = mxCreateDoubleMatrix(1,$#numInputs$,mxREAL);
        for i=0:numInputs-1
            data = gChartInfo.chartInputData(i+1);
            dataType = sf('get', data, '.parsedInfo.dataType');
...         ((real_T *)mxGetPr((mxInputTypes)))[$#(i)$] = (real_T)($#dataType$U);
        end
...
        numOutputs = length(gChartInfo.chartOutputData);
...     mxOutputSizes = mxCreateDoubleMatrix(2,$#numOutputs$,mxREAL);
...     mxOutputTypes = mxCreateDoubleMatrix(1,$#numOutputs$,mxREAL);
        for i=0:numOutputs-1
            data = gChartInfo.chartOutputData(i+1);
            dataSize = sf('get', data, '.parsedInfo.array.size');
            while (length(dataSize)<2)
                dataSize(end+1) = 1;
            end
...         ((real_T *)mxGetPr((mxOutputSizes)))[$#(2*i)$] = (real_T)($#dataSize(1)$U);
...         ((real_T *)mxGetPr((mxOutputSizes)))[$#(2*i+1)$] = (real_T)($#dataSize(2)$U);
            dataType = sf('get', data, '.parsedInfo.dataType');
...         ((real_T *)mxGetPr((mxOutputTypes)))[$#(i)$] = (real_T)($#dataType$U);
        end
...
...     mxSetFieldByNumber(mxAutoinheritanceInfo,0,0,mxChecksum);
...     mxSetFieldByNumber(mxAutoinheritanceInfo,0,1,mxInputTypes);
...     mxSetFieldByNumber(mxAutoinheritanceInfo,0,2,mxOutputSizes);
...     mxSetFieldByNumber(mxAutoinheritanceInfo,0,3,mxOutputTypes);
...
...     return(mxAutoinheritanceInfo);
...}
...
   if(gChartInfo.codingDebug)
...static void chart_debug_initialization(SimStruct *S)
...{
      if(gTargetInfo.codingMultiInstance)
...      $gChartInfo.chartInstanceTypedef$ *chartInstance;
...      chartInstance = ((ChartInfoStruct *)(ssGetUserData(S)))->chartInstance;
      end
...   if(ssIsFirstInitCond(S)) {
...      /* do this only if simulation is starting */
         if gTargetInfo.codingSFunction
            instancePathName = 'ssGetPath(S)';
            simstructPtr = '(void *)S';
         else
            instancePathName = 'NULL';
            simstructPtr = 'NULL';
         end
         if(~chartExecuteAtInitialization)
...         if(!sim_mode_is_rtw_gen(S)) {
         end
   	      fclose(file);
   	         	      
         	%%% Note that we need to count only those transitions that are not dangling
         	%%% G68235
	      	chartTransitions = sf('find',gChartInfo.chartTransitions,'~transition.dst.id',0);
   	      chartNumber = sf('get',chart,'chart.number');
   	      debugInfo.chart = chart;
   	      debugInfo.chartStates = gChartInfo.states;
   	      debugInfo.chartFunctions = gChartInfo.functions;
   	      debugInfo.chartTransitions = chartTransitions;
   	      debugInfo.chartDataNumbers = gChartInfo.chartDataNumbers;
   	      debugInfo.chartEvents = gChartInfo.chartEvents;
   	      debugInfo.instancePathName = instancePathName;
   	      debugInfo.simStructPtr = simstructPtr;
   	      debugInfo.dataChangeEventThreshold = gChartInfo.dataChangeEventThreshold;
   	      debugInfo.stateEntryEventThreshold = gChartInfo.stateEntryEventThreshold;
   	      debugInfo.stateExitEventThreshold = gChartInfo.stateExitEventThreshold;
   	      debugInfo.fileName = fullfile(fileNameInfo.targetDirName,fileNameInfo.chartSourceFiles{chartNumber+1});
   	      debugInfo.dataList = gDataInfo.dataList;
   	      debugInfo.statesWithEntryEvent = gChartInfo.statesWithEntryEvent;  
   	      debugInfo.statesWithExitEvent = gChartInfo.statesWithExitEvent;
   	      debugInfo.dataWithChangeEvent = gChartInfo.dataWithChangeEvent;
   	      debugInfo.chartInstanceVarName = gChartInfo.chartInstanceVarName;
   	      debugInfo.machineNumberVariableName = gMachineInfo.machineNumberVariableName;
   	      sf('Cg','dump_chart_debug_init',debugInfo);
   	      file = fopen(debugInfo.fileName,'a');
         if(~chartExecuteAtInitialization)
...         }
         end
...   } else {
...      sf_debug_reset_current_state_configuration($gMachineInfo.machineNumberVariableName$,$gChartInfo.chartInstanceVarName$chartNumber,$gChartInfo.chartInstanceVarName$instanceNumber);
...   }
...}
...
   end
...
...static void sf_opaque_initialize_$chartUniqueName$(void *chartInstanceVar)
...{
    if gTargetInfo.codingMultiInstance
      if(gChartInfo.codingDebug)
...   chart_debug_initialization((($gChartInfo.chartInstanceTypedef$*) chartInstanceVar)->S);
      end
...   initialize_$chartUniqueName$(($gChartInfo.chartInstanceTypedef$*) chartInstanceVar);
   else
      if(gChartInfo.codingDebug)
...   chart_debug_initialization(chartInstance.S);
      end
...   initialize_$chartUniqueName$();
   end
...}
...
...static void sf_opaque_enable_$chartUniqueName$(void *chartInstanceVar)
...{
    if gTargetInfo.codingMultiInstance
...   enable_$chartUniqueName$(($gChartInfo.chartInstanceTypedef$*) chartInstanceVar);
   else
...   enable_$chartUniqueName$();
   end
...}
...
...static void sf_opaque_disable_$chartUniqueName$(void *chartInstanceVar)
...{
    if gTargetInfo.codingMultiInstance
...   disable_$chartUniqueName$(($gChartInfo.chartInstanceTypedef$*) chartInstanceVar);
   else
...   disable_$chartUniqueName$();
   end
...}
...

...static void sf_opaque_gateway_$chartUniqueName$(void *chartInstanceVar)
...{
    if gTargetInfo.codingMultiInstance
...   sf_$chartUniqueName$(($gChartInfo.chartInstanceTypedef$*) chartInstanceVar);
   else
...    sf_$chartUniqueName$();
   end
...}
...
...static void sf_opaque_terminate_$chartUniqueName$(void *chartInstanceVar)
...{
    if gTargetInfo.codingMultiInstance
... if(chartInstanceVar!=NULL) {
...     SimStruct *S = (($gChartInfo.chartInstanceTypedef$*) chartInstanceVar)->S;
...     sf_clear_rtw_identifier(S);
...     finalize_$chartUniqueName$(($gChartInfo.chartInstanceTypedef$*) chartInstanceVar);

        if gChartInfo.hasTestPoint
...     if(!sim_mode_is_rtw_gen(S)) {
...        ssSetModelMappingInfoPtr(S, NULL);
...     }
        end

...     free((void *)chartInstanceVar);
...     ssSetUserData(S,NULL);
... }
   else
...   finalize_$chartUniqueName$();
   end
...}
...
   if gChartInfo.chartHasContinuousTime
...static void sf_opaque_store_current_config(void *chartInstanceVar)
...{
    if gTargetInfo.codingMultiInstance
...   store_current_config(($gChartInfo.chartInstanceTypedef$*) chartInstanceVar);
   else
...    store_current_config();
   end
...}
...
...static void sf_opaque_restore_before_last_major_step(void *chartInstanceVar)
...{
    if gTargetInfo.codingMultiInstance
...   restore_before_last_major_step(($gChartInfo.chartInstanceTypedef$*) chartInstanceVar);
   else
...    restore_before_last_major_step();
   end
...}
...
...static void sf_opaque_restore_last_major_step(void *chartInstanceVar)
...{
    if gTargetInfo.codingMultiInstance
...   restore_last_major_step(($gChartInfo.chartInstanceTypedef$*) chartInstanceVar);
   else
...    restore_last_major_step();
   end
...}
...

   end
...static void mdlSetWorkWidths_$chartUniqueName$(SimStruct *S)
...{
      for i=1:length(gChartInfo.functionsToBeExported)
         expFcnName = sf('get',gChartInfo.functionsToBeExported(i),'.name');
...   ssRegMdlInfo(S, "$expFcnName$", MDL_INFO_ID_GRPFCNNAME, 0, 0, (void*) ssGetPath(S));
      end
      %%% set number of s-function parameters
      if(length(uniqueWskpData)>0)
         for i= 1:length(uniqueWskpData)
            if(i==1)
               paramNames = sprintf('"p%d"',i);
            else
               paramNames = sprintf('%s,"p%d"',paramNames,i);
            end
         end
...   /* Actual parameters from chart:
...      $sprintf('%s ',uniqueWkspDataNames{:})$
...   */
...   const char_T *rtParamNames[] = {$paramNames$};
...
...   ssSetNumRunTimeParams(S,ssGetSFcnParamsCount(S));
         for i= 1:length(uniqueWskpData)
            dataId = uniqueWskpData(i);
            dataNumber = sf('get',dataId,'data.number');
               actualDataType = sf('CoderDataType',dataId);
...   /* registration for $uniqueWkspDataNames{i}$*/
               if(strcmp(actualDataType,'fixpt'))
                   [fixPtBaseType,fixptExponent,fixptSlope,fixptBias] =...
                       sf('FixPtProps',dataId);
...     {
...         DTypeId dataTypeId =
...         sf_get_fixpt_data_type_id(S,
...                                             $gDataInfo.slDataTypes{dataNumber+1}$,
...                                             (int)$sprintf('%d',fixptExponent)$,
...                                             (double)$sprintf('%.17g',fixptSlope)$,
...                                             (double)$sprintf('%.17g',fixptBias)$);
...         ssRegDlgParamAsRunTimeParam(S, $#(i-1)$, $#(i-1)$, rtParamNames[$#(i-1)$], dataTypeId);
...      }
            else
...         ssRegDlgParamAsRunTimeParam(S, $#(i-1)$, $#(i-1)$, rtParamNames[$#(i-1)$], $gDataInfo.slDataTypes{dataNumber+1}$);
            end
         end
...
     end

... if(sim_mode_is_rtw_gen(S)) {
...     int_T chartIsInlinable =
...               (int_T)sf_is_chart_inlinable("$gMachineInfo.machineName$",$#chartFileNumber$);
...     int_T chartIsMultiInstanced =
...               (int_T)sf_is_chart_multi_instanced("$gMachineInfo.machineName$",$#chartFileNumber$);
...         ssSetStateflowIsInlinable(S,chartIsInlinable);
...     ssSetEnableFcnIsTrivial(S,1);
...     ssSetDisableFcnIsTrivial(S,1);
        portNum = 0;
...     if(chartIsInlinable) {            
            for dataNumber = gChartInfo.chartInputDataNumbers
              %%% if the chart is wholy inlinable, 
              %%% its inputs reusable for RTW optimization
...           ssSetInputPortOptimOpts(S, $#portNum$, SS_REUSABLE_AND_LOCAL);
              portNum = portNum + 1;
            end
            if(length(gChartInfo.chartInputDataNumbers)>0)
...             sf_mark_chart_expressionable_inputs(S,"$gMachineInfo.machineName$",$#chartFileNumber$,$#length(gChartInfo.chartInputDataNumbers)$);
            end
            if(length(gChartInfo.chartOutputDataNumbers)>0)
...             sf_mark_chart_reusable_outputs(S,"$gMachineInfo.machineName$",$#chartFileNumber$,$#length(gChartInfo.chartOutputDataNumbers)$);
            end
...     }
        if ~isempty(gChartInfo.chartInputEvents)          
...       ssSetInputPortOptimOpts(S, $#portNum$, SS_REUSABLE_AND_LOCAL);
        end
...     if (!sf_is_chart_instance_optimized_out("$gMachineInfo.machineName$",$#chartFileNumber$)) {
...         int dtId;
...         char *chartInstanceTypedefName =
...             sf_chart_instance_typedef_name("$gMachineInfo.machineName$",$#chartFileNumber$);
...         dtId = ssRegisterDataType(S, chartInstanceTypedefName);
...         if (dtId == INVALID_DTYPE_ID ) return;

...         /* Register the size of the udt */
...         if (!ssSetDataTypeSize(S, dtId, 8)) return;

...         if(!ssSetNumDWork(S,1)) return;
...         ssSetDWorkDataType(S, 0, dtId);
...         ssSetDWorkWidth(S, 0, 1);
...         ssSetDWorkName(S, 0, "ChartInstance"); /*optional name, less than 16 chars*/
            %% This needs to be featured off until tsfrtw('lvlTwoA15') is working.
...         sf_set_rtw_identifier(S);
...     }
            hasMachineEvents = ~isempty(gMachineInfo.machineEvents);
            hasExportedChartFunctions = sf('get', chart,'chart.exportChartFunctions');   
            hasFcnCallOutputs = ~isempty(gChartInfo.chartFcnCallOutputEvents);
            if(0 && hasFcnCallOutputs)
...           ssSetHasSubFunctions(S,1);
            else
...           ssSetHasSubFunctions(S,!(chartIsInlinable));
            end
            if ~(hasMachineEvents || hasExportedChartFunctions)
...           ssSetOptions(S,ssGetOptions(S)|SS_OPTION_WORKS_WITH_CODE_REUSE);
            end
            if (sf('get',chart,'chart.executeAtInitialization'))
...           ssSetCallsOutputInInitFcn(S,1);
            end
... }
...
    checksumVector = double((sf('get',chart,'chart.checksum')));
... ssSetChecksum0(S,($#checksumVector(1)$U));
... ssSetChecksum1(S,($#checksumVector(2)$U));
... ssSetChecksum2(S,($#checksumVector(3)$U));
... ssSetChecksum3(S,($#checksumVector(4)$U));
...
   if(sf('Feature','Sl Event Binding'))
...   ssSetExplicitFCSSCtrl(S,1);
   end
...}
...
...static void mdlRTW_$chartUniqueName$(SimStruct *S)
...{
      if(sf('Feature','RTW New Symbol Naming'))
...     sf_write_symbol_mapping(S, "$gMachineInfo.machineName$", $#chartFileNumber$);
      end
      if(sf('Private','is_eml_chart',chart))
...	   ssWriteRTWStrParam(S, "StateflowChartType", "Embedded MATLAB");
      else
...	   ssWriteRTWStrParam(S, "StateflowChartType", "Stateflow");
      end
...      
...}
...
...static void mdlStart_$chartUniqueName$(SimStruct *S)
...{
       if gTargetInfo.codingMultiInstance
... $gChartInfo.chartInstanceTypedef$ *chartInstance;
... chartInstance = ($gChartInfo.chartInstanceTypedef$ *)malloc(sizeof($gChartInfo.chartInstanceTypedef$));
... if(chartInstance==NULL) {
...     sf_mex_error_message("Could not allocate memory for chart instance.");
... }
... $gChartInfo.chartInstanceVarName$chartInfo.chartInstance = chartInstance;
       else
... $gChartInfo.chartInstanceVarName$chartInfo.chartInstance = NULL;
       end
      
... $gChartInfo.chartInstanceVarName$chartInfo.isEMLChart = $#sf('Private','is_eml_chart',chart)$;
... $gChartInfo.chartInstanceVarName$chartInfo.chartInitialized = 0;
... $gChartInfo.chartInstanceVarName$chartInfo.sFunctionGateway = sf_opaque_gateway_$chartUniqueName$;
... $gChartInfo.chartInstanceVarName$chartInfo.initializeChart = sf_opaque_initialize_$chartUniqueName$;
... $gChartInfo.chartInstanceVarName$chartInfo.terminateChart = sf_opaque_terminate_$chartUniqueName$;
... $gChartInfo.chartInstanceVarName$chartInfo.enableChart = sf_opaque_enable_$chartUniqueName$;
... $gChartInfo.chartInstanceVarName$chartInfo.disableChart = sf_opaque_disable_$chartUniqueName$;
... $gChartInfo.chartInstanceVarName$chartInfo.mdlRTW = mdlRTW_$chartUniqueName$;
... $gChartInfo.chartInstanceVarName$chartInfo.mdlStart = mdlStart_$chartUniqueName$;
... $gChartInfo.chartInstanceVarName$chartInfo.mdlSetWorkWidths = mdlSetWorkWidths_$chartUniqueName$;

       if gChartInfo.chartHasContinuousTime
... $gChartInfo.chartInstanceVarName$chartInfo.restoreLastMajorStepConfiguration = sf_opaque_restore_last_major_step;
... $gChartInfo.chartInstanceVarName$chartInfo.restoreBeforeLastMajorStepConfiguration = sf_opaque_restore_before_last_major_step;
... $gChartInfo.chartInstanceVarName$chartInfo.storeCurrentConfiguration = sf_opaque_store_current_config;
       else
... $gChartInfo.chartInstanceVarName$chartInfo.restoreLastMajorStepConfiguration = NULL;
... $gChartInfo.chartInstanceVarName$chartInfo.restoreBeforeLastMajorStepConfiguration = NULL;
... $gChartInfo.chartInstanceVarName$chartInfo.storeCurrentConfiguration = NULL;
       end
      
... $gChartInfo.chartInstanceVarName$S = S;
... ssSetUserData(S,(void *)(&($gChartInfo.chartInstanceVarName$chartInfo))); $sf_comment('/* register the chart instance with simstruct */')$

      if gChartInfo.hasTestPoint
...
...     if(!sim_mode_is_rtw_gen(S)) {
...       init_test_point_mapping_info(S);
...     }
      end
...}
...
...void $chartUniqueName$_method_dispatcher(SimStruct *S, int_T method, void *data)
...{
...  switch (method) {
...  case SS_CALL_MDL_START:
...    mdlStart_$chartUniqueName$(S);
...    break;
...  case SS_CALL_MDL_SET_WORK_WIDTHS:
...    mdlSetWorkWidths_$chartUniqueName$(S);
...    break;
...  default:
...    /* Unhandled method */
...    sf_mex_error_message("Stateflow Internal Error:\n"
...                         "Error calling $chartUniqueName$_method_dispatcher.\n"
...                         "Can't handle method %d.\n", method);
...    break;
...  }
...}
...

   if gChartInfo.hasTestPoint
      dump_capi_data_mapping_info_code(file, chart);
   end
   
   return;

function dataTypeMap = construct_capi_data_type_map(testPointData, testPointStates)

   global gDataInfo
   
   numTpData = length(testPointData);
   dataTypeMap = cell(numTpData, 1);
   
   tpDataNumbers = sf('get', testPointData, 'data.number');
   isComplex = sf('get', testPointData, 'data.isComplex');

   for i = 1:numTpData
      %%% {cName, mwName, numElements, elemMapIndex, dataSize, slDataId, isComplex, isPointer} as a string
      
      idx = tpDataNumbers(i) + 1;
      mwTypeName = gDataInfo.dataTypes{idx};
      cTypeName = mwTypeName; %%% should not matter
      slTypeName = gDataInfo.slDataTypes{idx};
      
      dataTypeEntry = sprintf('{"%s", "%s", 0, 0, sizeof(%s), %s, %d, 0}', ...
                              cTypeName, mwTypeName, mwTypeName, slTypeName, isComplex(i));
                              
      dataTypeMap{i} = dataTypeEntry;
   end

   if ~isempty(testPointStates)
      stateTpTypeEntry = '{"uint8_T", "uint8_T", 0, 0, sizeof(uint8_T), SS_UINT8, 0, 0}';
      dataTypeMap{numTpData+1} = stateTpTypeEntry;
   end

   return;
      
function fixPointMap = construct_capi_fixed_point_map(testPointData, testPointStates)

   numTpData = length(testPointData);
   fixPointMap = cell(numTpData, 1);
   
   nonFixptEntry.slope    = 1.0;
   nonFixptEntry.bias     = 0.0;
   nonFixptEntry.exponent = 0;
   nonFixptEntry.scaling  = 'rtwCAPI_FIX_RESERVED';
   nonFixptEntry.signed = 0;
   
   for i = 1:numTpData
      actualDataType = sf('CoderDataType', testPointData(i));
      if strcmp(actualDataType,'fixpt')
         [baseType, exponent, slope, bias, nBits, isSigned] = sf('FixPtProps', testPointData(i));
         
         fixPointEntry.slope    = slope;
         fixPointEntry.bias     = bias;
         fixPointEntry.exponent = exponent;
         fixPointEntry.scaling  = 'rtwCAPI_FIX_UNIFORM_SCALING';
         fixPointEntry.signed   = isSigned;
      else
         fixPointEntry = nonFixptEntry;
      end
      fixPointMap{i} = fixPointEntry;
   end
   
   if ~isempty(testPointStates)
      fixPointMap{numTpData+1} = nonFixptEntry;
   end

   return;
   
function dimensionMap = construct_capi_dimension_map(testPointData, testPointStates)

   global gDataInfo

   numTpData = length(testPointData);
   dimensionMap = cell(numTpData, 1);
   
   tpDataNumbers = sf('get', testPointData, 'data.number');
   
   for i = 1:numTpData
      %%% dataOrientation, dimArrIdx, numDims, dims   as a structure

      idx = tpDataNumbers(i) + 1;
      dataSize = gDataInfo.dataSizeArrays{idx};
      
      dimensionEntry.numDims = 2; %%% scalar, vector, or matrix, all unified to have 2 dimensions
      dimensionEntry.dimArrIdx = 0; %%% initialize to 0 first
      
      if isempty(dataSize) || prod(dataSize) == 1
         dimensionEntry.orient = 'rtwCAPI_SCALAR';
         dimensionEntry.dims   = [1 1];
      elseif length(dataSize) == 1
         dimensionEntry.orient = 'rtwCAPI_VECTOR';
         dimensionEntry.dims   = [dataSize 1];
      elseif length(dataSize) == 2
         dimensionEntry.orient = 'rtwCAPI_MATRIX_COL_MAJOR';
         dimensionEntry.dims   = dataSize;
      else
         dimensionEntry = [];
         error('Testpoint data can only be scalar, vector, or matrix.');
      end

      dimensionMap{i} = dimensionEntry;
   end
   
   if ~isempty(testPointStates)
      stateTpDimEntry.numDims = 2;
      stateTpDimEntry.dimArrIdx = 0;
      stateTpDimEntry.orient = 'rtwCAPI_SCALAR';
      stateTpDimEntry.dims   = [1 1];
      dimensionMap{numTpData+1} = stateTpDimEntry;
   end

   return;
   
function [uniqMap, mapping] = uniquify_capi_string_map(map)

   [uniqMap, tmp, mapping] = unique(map);
   return;
   
function [uniqMap, mapping, valueMap] = uniquify_capi_fixpt_map(map, valueArrayName)

   numEntries = length(map);
   
   %%% construct value map for fixpt slope, bias first
   values = zeros(2*numEntries, 1);
   for i = 1:numEntries
      values(2*i - 1) = map{i}.slope;
      values(2*i)     = map{i}.bias;
   end
   [valueMap, tmp, valueMapping] = unique(values);
   
   nonFixptItemStr = '{NULL, NULL, rtwCAPI_FIX_RESERVED, 0, 0}';
   strMap = cell(numEntries, 1);
   for i = 1:numEntries
      slopeIdx = valueMapping(2*i - 1);
      biasIdx  = valueMapping(2*i);
                    
      if strcmp(map{i}.scaling, 'rtwCAPI_FIX_RESERVED')
         strMap{i} = nonFixptItemStr;
      else
         strMap{i} = sprintf('{&%s[%d], &%s[%d], %s, %d, %d}', ...
                             valueArrayName, slopeIdx-1, valueArrayName, biasIdx-1, ...
                             map{i}.scaling, map{i}.exponent, map{i}.signed);
      end
   end
   
   [uniqMap, tmp, mapping] = unique(strMap);
   return;

function [uniqMap, mapping] = uniquify_capi_dimension_map(map)

   numEntries = length(map);
   strMap = cell(numEntries, 1);
   for i = 1:numEntries
      strMap{i} = sprintf('%s|%d|[%d,%d]', map{i}.orient, map{i}.numDims, map{i}.dims(1), map{i}.dims(2));
   end
   
   [tmp, uniqSampleIdx, mapping] = unique(strMap);
   uniqMap = map(uniqSampleIdx);

   idx = 0;
   for i = 1:length(uniqMap)
      uniqMap{i}.dimArrIdx = idx;
      idx = idx + uniqMap{i}.numDims;
   end

   return;
   
function dump_capi_string_map(file, map)

   numEntries = length(map);

   strBuf = '';
   for i = 1:numEntries
      strBuf = sprintf('%s%s,\n', strBuf, map{i});
   end

   if ~isempty(strBuf)
      strBuf = strBuf(1:end-2); %%% remove trailing ",\n"
...   $strBuf$
   end

   return;

function dump_capi_data_type_map_struct(file, map)

...
...static const rtwCAPI_DataTypeMap dataTypeMap[] = {
...   /* cName, mwName, numElements, elemMapIndex, dataSize, slDataId, isComplex, isPointer */
   dump_capi_string_map(file, map);
...};

   return;
   
function dump_capi_fixed_point_value_array(file, fixPtValueMap, fixPtValArrName)

   numEntries = length(fixPtValueMap);
...
...static real_T $fixPtValArrName$[$#numEntries$] = {
   strMap = cell(numEntries, 1);
   for i = 1:numEntries
      strMap{i} = sprintf('%g', fixPtValueMap(i));
   end
   dump_capi_string_map(file, strMap);
...};

   return;

function dump_capi_fixed_point_map_struct(file, map)

...
...static const rtwCAPI_FixPtMap fixedPointMap[] = {
...   /* *fracSlope, *bias, scaleType, exponent, isSigned */
   dump_capi_string_map(file, map);
...};

   return;

function dump_capi_dimension_map_struct(file, map)

...
...static const rtwCAPI_DimensionMap dimensionMap[] = {
...   /* dataOrientation, dimArrayIndex, numDims*/
   numEntries = length(map);
   strMap = cell(numEntries, 1);
   for i = 1:numEntries
      strMap{i} = sprintf('{%s, %d, %d}', map{i}.orient, map{i}.dimArrIdx, map{i}.numDims);
   end
   dump_capi_string_map(file, strMap);
...};

   return;

function dump_capi_dimension_array(file, map)

...
...static const uint_T dimensionArray[] = {
   numEntries = length(map);
   strMap = cell(numEntries, 1);
   for i = 1:numEntries
      %%% Assumption here is all sizes have 2 dimensions for simplicity. otherwise, we must write a loop.
      strMap{i} = sprintf('%d, %d', map{i}.dims(1), map{i}.dims(2));
   end
   dump_capi_string_map(file, strMap);
...};

   return;

% A dummy sample time map to satisfy !NULL assertion in floating scope code
function dump_capi_sample_time_map_struct(file)

...
...static real_T sfCAPIsampleTimeZero = 0.0;
...static const rtwCAPI_SampleTimeMap sampleTimeMap[] = {
...   /* *period, *offset, taskId, contextTid, mode */
...   {&sfCAPIsampleTimeZero, &sfCAPIsampleTimeZero, 0, 0, 0}
...};

   return;
   
function dump_capi_test_point_signals_struct(file, ...
                                             chart, ...
                                             testPointData, ...
                                             testPointStates, ...
                                             dataTypeMapping, ...
                                             fixPointMapping, ...
                                             dimensionMapping)

...
...static const rtwCAPI_Signals testPointSignals[] = {
...   /* addrMapIndex, sysNum, SFRelativePath, dataName, portNumber, dataTypeIndex, dimIndex, fixPtIdx, sTimeIndex */
   numTpData = length(testPointData);
   numTpStates = length(testPointStates);
   strMap = cell(numTpData+numTpStates, 1);
   
   for i = 1:numTpData
      sfRelativePath = sf('FullNameOf', testPointData(i), chart, '.');
      dataName = sf('get', testPointData(i), 'data.name');
      strMap{i} = sprintf('{%d, 0,"StateflowChart/%s", "%s", 0, %d, %d, %d, 0}', ...
                          i-1, sfRelativePath, dataName, ...
                          dataTypeMapping(i)-1, dimensionMapping(i)-1, fixPointMapping(i)-1);
   end

   idx = numTpData + 1;
   for i = 1:numTpStates
      sfRelativePath = sf('FullNameOf', testPointStates(i), chart, '.');
      stateName = sf('get', testPointStates(i), 'state.name');
      strMap{idx} = sprintf('{%d, 0, "StateflowChart/%s", "%s", 0, %d, %d, %d, 0}', ...
                            idx-1, sfRelativePath, stateName, ...
                            dataTypeMapping(numTpData+1)-1, dimensionMapping(numTpData+1)-1, fixPointMapping(numTpData+1)-1);
      idx = idx + 1;
   end

   dump_capi_string_map(file, strMap);
...};

   return;

function dump_capi_data_mapping_static_info_struct(file, testPointData, testPointStates)

   numTestPoints = length(testPointData) + length(testPointStates);
   
...
...static rtwCAPI_ModelMappingStaticInfo testPointMappingStaticInfo = {
...   /* block signal monitoring */
...   {
...      testPointSignals,  /* Block signals Array  */
...      $#numTestPoints$   /* Num Block IO signals */
...   },
...
...   /* parameter tuning */
...   {
...      NULL,   /* Block parameters Array    */
...      0,      /* Num block parameters      */
...      NULL,   /* Variable parameters Array */
...      0       /* Num variable parameters   */
...   },
...
...   /* block states */
...   {
...      NULL,   /* Block States array        */
...      0       /* Num Block States          */
...   },
...
...   /* Static maps */
...   {
...      dataTypeMap,    /* Data Type Map            */
...      dimensionMap,   /* Data Dimension Map       */
...      fixedPointMap,  /* Fixed Point Map          */
...      NULL,           /* Structure Element map    */
...      sampleTimeMap,  /* Sample Times Map         */
...      dimensionArray  /* Dimension Array          */     
...   },
...
...   /* Target type */
...   "float"
...};

   return;

function dump_capi_init_data_mapping_info_fcn(file, chart)

   global gTargetInfo gChartInfo
   tpInfoAccessFcns = sf('Cg', 'get_testpoint_accessfcn_names', chart);
   
...
...static void init_test_point_mapping_info(SimStruct *S) {
...   rtwCAPI_ModelMappingInfo *testPointMappingInfo;
...   void **testPointAddrMap;
   if gTargetInfo.codingMultiInstance
...   $gChartInfo.chartInstanceTypedef$ *chartInstance;
...
...   chartInstance = ((ChartInfoStruct *)(ssGetUserData(S)))->chartInstance;
...   $tpInfoAccessFcns.initAddrMapFcn$(chartInstance);
...   testPointMappingInfo = $tpInfoAccessFcns.mappingInfoAccessFcn$(chartInstance);
...   testPointAddrMap = $tpInfoAccessFcns.addrMapAccessFcn$(chartInstance);
   else
...
...   $tpInfoAccessFcns.initAddrMapFcn$();
...   testPointMappingInfo = $tpInfoAccessFcns.mappingInfoAccessFcn$();
...   testPointAddrMap = $tpInfoAccessFcns.addrMapAccessFcn$();
   end
...
...   rtwCAPI_SetStaticMap(*testPointMappingInfo, &testPointMappingStaticInfo);
...   rtwCAPI_SetPath(*testPointMappingInfo, "");
...   rtwCAPI_SetFullPath(*testPointMappingInfo, NULL);
...   rtwCAPI_SetDataAddressMap(*testPointMappingInfo, testPointAddrMap);
...   rtwCAPI_SetChildMMIArray(*testPointMappingInfo, NULL);
...   rtwCAPI_SetChildMMIArrayLen(*testPointMappingInfo, 0);
...
...   ssSetModelMappingInfoPtr(S, testPointMappingInfo);
...}

   return;

function dump_capi_data_mapping_info_code(file, chart)
   
   global gChartInfo
   
   if ~gChartInfo.hasTestPoint
      return;
   end

   testPointData = gChartInfo.testPoints.data;
   testPointStates = gChartInfo.testPoints.state;
   
   dataTypeMap = construct_capi_data_type_map(testPointData, testPointStates);
   fixPointMap = construct_capi_fixed_point_map(testPointData, testPointStates);
   dimensionMap = construct_capi_dimension_map(testPointData, testPointStates);
   
   fixPtValArrName = 'fixPtSlopeBiasVals';
   [dataTypeMap, dataTypeUniqMapping] = uniquify_capi_string_map(dataTypeMap);
   [fixPointMap, fixPointUniqMapping, fixPtValueMap] = uniquify_capi_fixpt_map(fixPointMap, fixPtValArrName);
   [dimensionMap, dimensionUniqMapping] = uniquify_capi_dimension_map(dimensionMap);
   
   dump_capi_data_type_map_struct(file, dataTypeMap);
   dump_capi_fixed_point_value_array(file, fixPtValueMap, fixPtValArrName);
   dump_capi_fixed_point_map_struct(file, fixPointMap);
   dump_capi_dimension_map_struct(file, dimensionMap);
   dump_capi_dimension_array(file, dimensionMap);
   dump_capi_sample_time_map_struct(file);
   dump_capi_test_point_signals_struct(file, chart, testPointData, testPointStates, ...
                                       dataTypeUniqMapping, ...
                                       fixPointUniqMapping, ...
                                       dimensionUniqMapping);
   dump_capi_data_mapping_static_info_struct(file, testPointData, testPointStates);
   dump_capi_init_data_mapping_info_fcn(file, chart);
   
   return;
   
