function code_chart_header_file_new(fileNameInfo,...
										  chart)


%   Copyright 1995-2004 The MathWorks, Inc.
%   $Revision: 1.1.6.7 $  $Date: 2004/04/15 00:51:09 $


	chartNumber = sf('get',chart,'chart.number');

    fileName = fullfile(fileNameInfo.targetDirName,fileNameInfo.chartHeaderFiles{chartNumber+1});
    sf_echo_generating('Coder',fileName);

	file = fopen(fileName,'wt');
	if file<3
		construct_coder_error([],sprintf('Failed to create file: %s.',fileName),1);
		return;
	end
...$get_boiler_plate_comment('chart',chart)$
...%implements "chartHeader" "C"
...%function CacheOutputs(block,system,typeDefHFile,hFile,cFile) void

   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   %% Types
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
...%openfile typedefsBuf
    types = sf('Cg','get_types',chart);
   if(~isempty(types)) 
      chartInstanceTypdefGuard = ['_' upper(sf('get',chart,'chart.rtwInfo.chartInstanceTypedef')) '_'];
    for type = types
         codeStr = sf('Cg','get_type_def',type,0);
...   $codeStr$
    end
   end
...%closefile typedefsBuf
...   %if !WHITE_SPACE(typedefsBuf)
...      %openfile tempBuf
...#ifndef $chartInstanceTypdefGuard$
...#define $chartInstanceTypdefGuard$
...      %<typedefsBuf>\
... #endif /* $chartInstanceTypdefGuard$ */
...      %closefile tempBuf
...%<SLibSetModelFileAttribute(typeDefHFile,"Typedefs",tempBuf)>
...   %endif
...

   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   %%%% function Decls
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
...%openfile externFcnsBuf
    funcs = sf('Cg','get_unshared_functions',chart);
    for func = funcs
         codeStr = sf('Cg','get_fcn_decl',func,0);
...   $strip_trailing_new_lines(codeStr)$
    end
...%closefile externFcnsBuf
...%<SLibSetModelFileAttribute(hFile,"ExternFcns",externFcnsBuf)>


   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   %%%% shared function Decls
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   modelName = sf('get',get_relevant_machine,'machine.name');
   if(~rtw_gen_shared_utils(modelName))
...   %openfile externFcnsBuf
       funcs = sf('Cg','get_shared_functions',chart);
       for func = funcs
            codeStr = sf('Cg','get_fcn_decl',func,0);
            fcnName = sf('Cg','get_symbol_name', func);
            fcnName = fcnName(1:end-1);
...         %if %<!SFLibLookupUtilityFunctionDecl("$fcnName$")>
...            $strip_trailing_new_lines(codeStr)$
...            %<SFLibInsertUtilityFunctionDecl("$fcnName$")>
...         %endif
       end
...   %closefile externFcnsBuf
...   %<SLibSetModelFileAttribute(hFile,"ExternFcns",externFcnsBuf)>
   end

...
...%endfunction %% CacheOutputs
	fclose(file);
	try_indenting_file(fileName);

