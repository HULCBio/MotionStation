function code_chart_debug_initialization(file...
													 ,chartFileNumber...
													 ,chart...
													 ,instancePathName...
													 ,simStructPtr)

%   Copyright 1995-2003 The MathWorks, Inc.
%   $Revision: 1.29.2.6 $  $Date: 2004/04/15 00:51:07 $


	global gMachineInfo gChartInfo	gDataInfo

	%%% Note that we need to count only those transitions that are not dangling
	%%% G68235
	chartTransitions = sf('find',gChartInfo.chartTransitions,'~transition.dst.id',0);
	
	transitionCount = length(chartTransitions);
	stateCount = length(sf('find',sf('get',chart,'chart.states'),'state.isNoteBox',0));
...	{
...	unsigned int chartAlreadyPresent;
...	chartAlreadyPresent = sf_debug_initialize_chart($gMachineInfo.machineNumberVariableName$,
...                                                   $#chartFileNumber$,
...                                                   $#stateCount$,
...                                                   $#transitionCount$,
...                                                   $#length(gChartInfo.chartDataNumbers)$,
...                                                   $#length(gChartInfo.chartEvents)$,
...                                                   $#length(gChartInfo.dataWithChangeEvent)$,
...                                                   $#length(gChartInfo.statesWithEntryEvent)$,
...                                                   $#length(gChartInfo.statesWithExitEvent)$,
...                                                   &($gChartInfo.chartInstanceVarName$chartNumber),
...                                                   &($gChartInfo.chartInstanceVarName$instanceNumber),
...                                                   $instancePathName$,
...                                                   $simStructPtr$);
...	if(chartAlreadyPresent==0) {
...	/* this is the first instance */

		index = 0;
		for data = gChartInfo.dataWithChangeEvent
...	_SFD_DATA_CHANGE_EVENT_COUNT($#index$,$#sf('get',data,'data.number')$);
			index = index+1;
		end
		index = 0;
		for state = gChartInfo.statesWithEntryEvent
...	_SFD_STATE_ENTRY_EVENT_COUNT($#index$,$#sf('get',state,'state.number')$);
			index = index+1;
		end
		index = 0;
		for state = gChartInfo.statesWithExitEvent
...	_SFD_STATE_EXIT_EVENT_COUNT($#index$,$#sf('get',state,'state.number')$);
			index = index+1;
		end
	 disableImplicitCasting = sf('get',chart,'chart.disableImplicitCasting');



... sf_debug_set_chart_disable_implicit_casting($gMachineInfo.machineNumberVariableName$,$gChartInfo.chartInstanceVarName$chartNumber,$#disableImplicitCasting$);
... sf_debug_set_chart_event_thresholds($gMachineInfo.machineNumberVariableName$,
...                                     $gChartInfo.chartInstanceVarName$chartNumber,
...                                     $#gChartInfo.dataChangeEventThreshold$,
...                                     $#gChartInfo.stateEntryEventThreshold$,
...                                     $#gChartInfo.stateExitEventThreshold$);
... 

	for dataNumber = gChartInfo.chartDataNumbers
		data = gDataInfo.dataList(dataNumber+1);

		isChartInputData = is_chart_input_data(data);
		isChartOutputData	= is_chart_output_data(data);
		dataSizeArray = gDataInfo.dataSizeArrays{dataNumber+1};
		
		if(length(dataSizeArray)==0)
			numDims = 0;
			dimArray = 'NULL';
		else
...		{
...			unsigned int dimVector[$#length(dataSizeArray)$];
			for i=0:length(dataSizeArray)-1
...			dimVector[$#i$]= $#dataSizeArray(i+1)$;
			end
			numDims = length(dataSizeArray);
			dimArray = '&(dimVector[0])';
		end
		coderDataType = sf('CoderDataType',data);
		if(strcmp(coderDataType,'fixpt'))
			[fixPtBaseType,fixptExponent,fixptSlope,fixptBias,nBits,isSigned] =...
				sf('FixPtProps',data);
			isFixedPoint = '1';
			biasStr = sprintf('%.17g',fixptBias);
			slopeStr = sprintf('%.17g',fixptSlope);
			exponentStr = sprintf('%d',fixptExponent);
		else
			isFixedPoint = '0';
			biasStr = '0.0';
			slopeStr = '1.0';
			exponentStr = '0';
		end				

		isComplex = sf('get',data,'data.isComplex');
				
		dataName = sf('get',data,'data.name');
		isTemporaryData = ~isempty(sf('find',data,'data.scope','TEMPORARY_DATA'));
		isFcnInputData = ~isempty(sf('find',data,'data.scope','FUNCTION_INPUT_DATA'));
		isFcnOutputData = ~isempty(sf('find',data,'data.scope','FUNCTION_OUTPUT_DATA'));
		if isTemporaryData | isFcnInputData | isFcnOutputData
		    dataName = '';
		end

        v1 = dataNumber;
        v2 = sf('get',data,'data.scope');
        v3 = isChartInputData;
        v4 = isChartOutputData;
        v5 = gDataInfo.sfDataTypes{dataNumber+1};
        v6 = numDims;
        v7 = dimArray;
        v8 = isFixedPoint;
        v9 = biasStr;
        v10 = slopeStr;
        v11 = exponentStr;
		v12 = dataName;
		v13 = isComplex;

...	_SFD_SET_DATA_PROPS($#v1$,$#v2$,$#v3$,$#v4$,$v5$,$#v6$,$v7$,$v8$,$v9$,$v10$,$v11$,"$v12$",$#v13$);
		if(length(dataSizeArray)>0)
...		}
		end
	end
	for event = gChartInfo.chartEvents
		[eventNumber,eventScope] = sf('get',event,'event.number','event.scope');
...	_SFD_EVENT_SCOPE($#eventNumber$,$#eventScope$);
	end


	for state = [gChartInfo.states,gChartInfo.functions]
		[stateNumber,decomposition,type] = sf('get',state,'state.number','state.decomposition','state.type');
...	_SFD_STATE_INFO($#stateNumber$,$#decomposition$,$#type$);
	end

	subStates = sf('SubstatesOf',chart);
...	_SFD_CH_SUBSTATE_COUNT($#length(subStates)$);
...	_SFD_CH_SUBSTATE_DECOMP($#sf('get',chart,'chart.decomposition')$);
	for subStateIndex=1:length(subStates)
		subStateNumber = sf('get',subStates(subStateIndex),'state.number');
...	_SFD_CH_SUBSTATE_INDEX($#(subStateIndex-1)$,$#subStateNumber$);
	end
	states = sf('SubstatesIn',chart);
	for state = states
		subStates = sf('SubstatesOf',state);
		stateNumber = sf('get',state,'state.number');
...	_SFD_ST_SUBSTATE_COUNT($#stateNumber$,$#length(subStates)$);
		for subStateIndex=1:length(subStates)
			subStateNumber = sf('get',subStates(subStateIndex),'state.number');
...	_SFD_ST_SUBSTATE_INDEX($#stateNumber$,$#(subStateIndex-1)$,$#subStateNumber$);
		end
	end
...	
...	}

	if(sf('MatlabVersion')>=600)
	    %
	    % Initialize the chart coverage:
	    %
		
		 subStates = sf('SubstatesOf',chart);
	    chartHasDurSwitch = (sf('get',chart,'chart.coverageInfo.switchCount.during')>0);
... _SFD_CV_INIT_CHART($#length(subStates)$,$#chartHasDurSwitch$,0,0);

	    %
	    % Initialize the coverage tool for each state.
	    %
		for state = [gChartInfo.states,gChartInfo.functions]
			[stateNumber,histSwtch,durSwtch,exitSwtch,onDecCnt,startDecMap,endDecMap] = ...
				sf('get',state...
				,'state.number'...
				,'state.coverageInfo.switchCount.history'...
				,'state.coverageInfo.switchCount.during'...
				,'state.coverageInfo.switchCount.exit'...
				,'state.coverageInfo.decisionCount'...
				,'state.coverageInfo.map.start.decision'...
				,'state.coverageInfo.map.end.decision'...
				);
	        substateCount = length(sf('SubstatesOf',state));
			if (onDecCnt>0)
				startMpVar = '&(sStartDecMap[0])';
				endMpVar   = '&(sEndDecMap[0])';
			else
				startMpVar = 'NULL';
				endMpVar   = 'NULL';
			end
...	{
			if (onDecCnt>0)
...		static unsigned int sStartDecMap[] = $init_string_from_vector(startDecMap,'%d')$;
...		static unsigned int sEndDecMap[] = $init_string_from_vector(endDecMap,'%d')$;
			end
...	    _SFD_CV_INIT_STATE($#stateNumber$,$#substateCount$,$#(durSwtch>0)$,$#(exitSwtch>0)$,$#(histSwtch>0)$,$#onDecCnt$,$startMpVar$,$endMpVar$);
...	}
	    end
...

	    %
	    % Initialize the coverage tool for each transition.
	    %
    	for trans = chartTransitions
    		[transNumber,startGuardMap,endGuardMap,postfixPredicateTree] = ...
    		sf('get',trans...
    		,'transition.number'...
    		,'transition.coverageInfo.map.start.guard'...
    		,'transition.coverageInfo.map.end.guard'...
			,'transition.coverageInfo.postFixPredicateTree'...
    		);
    
    		if(length(startGuardMap))
...	{
...		static unsigned int sStartGuardMap[] = $init_string_from_vector(startGuardMap,'%d')$;
...		static unsigned int sEndGuardMap[] = $init_string_from_vector(endGuardMap,'%d')$;
...		static int          sPostFixPredicateTree[] = $init_string_from_vector(postfixPredicateTree,'%d')$;
    			startGuardMapVar = '&(sStartGuardMap[0])';
    			endGuardMapVar   = '&(sEndGuardMap[0])';
				postfixPredicateTreeVar = '&(sPostFixPredicateTree[0])';
    		else
    			startGuardMapVar = 'NULL';
    			endGuardMapVar = 'NULL';
				postfixPredicateTreeVar = 'NULL';
    		end
	    	postfixPredicateTreeLength = length(postfixPredicateTree);
...     _SFD_CV_INIT_TRANS($#transNumber$,$#length(startGuardMap)$,$startGuardMapVar$,$endGuardMapVar$,$#postfixPredicateTreeLength$,$postfixPredicateTreeVar$);
...
    		if(length(startGuardMap))
...	}
			end
    	end

	    %
	    % Initialize the coverage tool for each EML scirpt.
	    %
	    emlFcns = sf('Private','eml_fcns_in',chart);
	    if ~isempty(emlFcns)
...
... /* Initialization of EML Model Coverage */
	    for emlFcnId = emlFcns(:)'
	        stateNumber = sf('get',emlFcnId,'state.number');
	        fcnCovInfo = sf('get',emlFcnId,'state.eml.cvMapInfo');
            
        if ~isempty(fcnCovInfo)
	        fcnCnt = length(fcnCovInfo.fcnInfo);
	        ifCnt = length(fcnCovInfo.ifInfo);
	        forCnt = length(fcnCovInfo.forInfo);
	        whileCnt = length(fcnCovInfo.whileInfo);
	        switchCnt = length(fcnCovInfo.switchInfo);
	        condCnt = fcnCovInfo.condCnt;
	        mcdcCnt = length(fcnCovInfo.mcdcInfo);
... _SFD_CV_INIT_EML($#stateNumber$,$#fcnCnt$,$#ifCnt$,$#switchCnt$,$#forCnt$,$#whileCnt$,$#condCnt$,$#mcdcCnt$);
            for i=1:fcnCnt
                fcnName = fcnCovInfo.fcnInfo(i).name;
                charStartIdx = fcnCovInfo.fcnInfo(i).charStartIdx;
                charExprEndIdx = fcnCovInfo.fcnInfo(i).charExprEndIdx;
                charEndIdx = fcnCovInfo.fcnInfo(i).charEndIdx;
... _SFD_CV_INIT_EML_FCN($#stateNumber$,$#i-1$,"$fcnName$",$#charStartIdx$,$#charExprEndIdx$,$#charEndIdx$);
            end
            for i=1:ifCnt
                charStartIdx = fcnCovInfo.ifInfo(i).charStartIdx;
                charExprEndIdx = fcnCovInfo.ifInfo(i).charExprEndIdx;
                charElseStartIdx = fcnCovInfo.ifInfo(i).charElseStartIdx;
                charEndIdx = fcnCovInfo.ifInfo(i).charEndIdx;
... _SFD_CV_INIT_EML_IF($#stateNumber$,$#i-1$,$#charStartIdx$,$#charExprEndIdx$,$#charElseStartIdx$,$#charEndIdx$);
            end

            for i=1:forCnt
                charStartIdx = fcnCovInfo.forInfo(i).charStartIdx;
                charExprEndIdx = fcnCovInfo.forInfo(i).charExprEndIdx;
                charEndIdx = fcnCovInfo.forInfo(i).charEndIdx;
... _SFD_CV_INIT_EML_FOR($#stateNumber$,$#i-1$,$#charStartIdx$,$#charExprEndIdx$,$#charEndIdx$);
            end

            for i=1:whileCnt
                charStartIdx = fcnCovInfo.whileInfo(i).charStartIdx;
                charExprEndIdx = fcnCovInfo.whileInfo(i).charExprEndIdx;
                charEndIdx = fcnCovInfo.whileInfo(i).charEndIdx;
... _SFD_CV_INIT_EML_WHILE($#stateNumber$,$#i-1$,$#charStartIdx$,$#charExprEndIdx$,$#charEndIdx$);
            end

            for i=1:length(fcnCovInfo.switchInfo)
                charStartIdx = fcnCovInfo.switchInfo(i).charStartIdx;
                charExprEndIdx = fcnCovInfo.switchInfo(i).charExprEndIdx;
                charEndIdx = fcnCovInfo.switchInfo(i).charEndIdx;
                caseCnt = length(fcnCovInfo.switchInfo(i).cases);
                caseStart = [fcnCovInfo.switchInfo(i).cases.charStartIdx];
                caseExprEnd = [fcnCovInfo.switchInfo(i).cases.charExprEndIdx];
...	{
...		static unsigned int caseStart[] = $init_string_from_vector(caseStart,'%d')$;
...		static unsigned int caseExprEnd[] = $init_string_from_vector(caseExprEnd,'%d')$;
...     _SFD_CV_INIT_EML_SWITCH($#stateNumber$,$#i-1$,$#charStartIdx$,$#charExprEndIdx$,$#charEndIdx$,$#caseCnt$,&(caseStart[0]),&(caseExprEnd[0]));
...	}
            end

            for i=1:length(fcnCovInfo.mcdcInfo)
                charStart = fcnCovInfo.mcdcInfo(i).charStartIdx;
                charEnd = fcnCovInfo.mcdcInfo(i).charEndIdx;
                condCnt = length(fcnCovInfo.mcdcInfo(i).condition);
                firstCondIdx = fcnCovInfo.mcdcInfo(i).condition(1).condIdx;
                pfxLength = length(fcnCovInfo.mcdcInfo(i).postFixExpr);
                condStart = [fcnCovInfo.mcdcInfo(i).condition.charStartIdx];
                condEnd = [fcnCovInfo.mcdcInfo(i).condition.charEndIdx];
                postFixExpr = fcnCovInfo.mcdcInfo(i).postFixExpr;
...	{
...		static unsigned int condStart[] = $init_string_from_vector(condStart,'%d')$;
...		static unsigned int condEnd[] = $init_string_from_vector(condEnd,'%d')$;
...		static int          pfixExpr[] = $init_string_from_vector(postFixExpr,'%d')$;
...     _SFD_CV_INIT_EML_MCDC($#stateNumber$,$#i-1$,$#charStart$,$#charEnd$,$#condCnt$,$#firstCondIdx$,&(condStart[0]),&(condEnd[0]),$#pfxLength$,&(pfixExpr[0]));
...	}

            end
        end
        end
        end
	end

	for state = [gChartInfo.states,gChartInfo.functions]
		[stateNumber,entryWeight,duringWeight,exitWeight,...
		startEntryMap,startDuringMap,startExitMap,...
		endEntryMap,endDuringMap,endExitMap] = ...
			sf('get',state...
			,'state.number'...
			,'state.coverageInfo.index.entry'...
			,'state.coverageInfo.index.during'...
			,'state.coverageInfo.index.exit'...
			,'state.coverageInfo.map.start.entry'...
			,'state.coverageInfo.map.start.during'...
			,'state.coverageInfo.map.start.exit'...
			,'state.coverageInfo.map.end.entry'...
			,'state.coverageInfo.map.end.during'...
			,'state.coverageInfo.map.end.exit'...
			);
...	_SFD_STATE_COV_WTS($#stateNumber$,$#entryWeight$,$#duringWeight$,$#exitWeight$);
...	if(chartAlreadyPresent==0)
...	{
		if(length(startEntryMap))
...		static unsigned int sStartEntryMap[] = $init_string_from_vector(startEntryMap,'%d')$;
...		static unsigned int sEndEntryMap[] = $init_string_from_vector(endEntryMap,'%d')$;
			startEntryMapVar = '&(sStartEntryMap[0])';
			endEntryMapVar   = '&(sEndEntryMap[0])';
		else
			startEntryMapVar = 'NULL';
			endEntryMapVar = 'NULL';
		end
		if(length(startDuringMap))
...		static unsigned int sStartDuringMap[] = $init_string_from_vector(startDuringMap,'%d')$;
...		static unsigned int sEndDuringMap[] = $init_string_from_vector(endDuringMap,'%d')$;
			startDuringMapVar = '&(sStartDuringMap[0])';
			endDuringMapVar   = '&(sEndDuringMap[0])';
		else
			startDuringMapVar = 'NULL';
			endDuringMapVar = 'NULL';
		end
		if(length(startExitMap))
...		static unsigned int sStartExitMap[] = $init_string_from_vector(startExitMap,'%d')$;
...		static unsigned int sEndExitMap[] = $init_string_from_vector(endExitMap,'%d')$;
			startExitMapVar = '&(sStartExitMap[0])';
			endExitMapVar   = '&(sEndExitMap[0])';
		else
			startExitMapVar = 'NULL';
			endExitMapVar = 'NULL';
		end
...	
...		_SFD_STATE_COV_MAPS($#stateNumber$,
...		$#length(startEntryMap)$,$startEntryMapVar$,$endEntryMapVar$,
...		$#length(startDuringMap)$,$startDuringMapVar$,$endDuringMapVar$,
...		$#length(startExitMap)$,$startExitMapVar$,$endExitMapVar$);
...	}
	end
	for trans = chartTransitions
		[transNumber,triggerWeight,guardWeight,conditionActionWeight,transitionActionWeight...
		startTriggerMap,startGuardMap,startConditionActionMap,startTransitionActionMap...
		endTriggerMap,endGuardMap,endConditionActionMap,endTransitionActionMap] = ...
		sf('get',trans...
		,'transition.number'...
		,'transition.coverageInfo.index.trigger'...
		,'transition.coverageInfo.index.guard'...
		,'transition.coverageInfo.index.conditionAction'...
		,'transition.coverageInfo.index.transitionAction'...
		,'transition.coverageInfo.map.start.trigger'...
		,'transition.coverageInfo.map.start.guard'...
		,'transition.coverageInfo.map.start.conditionAction'...
		,'transition.coverageInfo.map.start.transitionAction'...
		,'transition.coverageInfo.map.end.trigger'...
		,'transition.coverageInfo.map.end.guard'...
		,'transition.coverageInfo.map.end.conditionAction'...
		,'transition.coverageInfo.map.end.transitionAction'...
		);
...	_SFD_TRANS_COV_WTS($#transNumber$,$#triggerWeight$,$#guardWeight$,$#conditionActionWeight$,$#transitionActionWeight$);
...	if(chartAlreadyPresent==0)
...	{
		if(length(startTriggerMap))
...		static unsigned int sStartTriggerMap[] = $init_string_from_vector(startTriggerMap,'%d')$;
...		static unsigned int sEndTriggerMap[] = $init_string_from_vector(endTriggerMap,'%d')$;
			startTriggerMapVar = '&(sStartTriggerMap[0])';
			endTriggerMapVar   = '&(sEndTriggerMap[0])';
		else
			startTriggerMapVar = 'NULL';
			endTriggerMapVar = 'NULL';
		end
		if(length(startGuardMap))
...		static unsigned int sStartGuardMap[] = $init_string_from_vector(startGuardMap,'%d')$;
...		static unsigned int sEndGuardMap[] = $init_string_from_vector(endGuardMap,'%d')$;
			startGuardMapVar = '&(sStartGuardMap[0])';
			endGuardMapVar   = '&(sEndGuardMap[0])';
		else
			startGuardMapVar = 'NULL';
			endGuardMapVar = 'NULL';
		end
		if(length(startConditionActionMap))
...		static unsigned int sStartConditionActionMap[] = $init_string_from_vector(startConditionActionMap,'%d')$;
...		static unsigned int sEndConditionActionMap[] = $init_string_from_vector(endConditionActionMap,'%d')$;
			startConditionActionMapVar = '&(sStartConditionActionMap[0])';
			endConditionActionMapVar   = '&(sEndConditionActionMap[0])';
		else
			startConditionActionMapVar = 'NULL';
			endConditionActionMapVar = 'NULL';
		end
		if(length(startTransitionActionMap))
...		static unsigned int sStartTransitionActionMap[] = $init_string_from_vector(startTransitionActionMap,'%d')$;
...		static unsigned int sEndTransitionActionMap[] = $init_string_from_vector(endTransitionActionMap,'%d')$;
			startTransitionActionMapVar = '&(sStartTransitionActionMap[0])';
			endTransitionActionMapVar   = '&(sEndTransitionActionMap[0])';
		else
			startTransitionActionMapVar = 'NULL';
			endTransitionActionMapVar = 'NULL';
		end

...		_SFD_TRANS_COV_MAPS($#transNumber$,
...		$#length(startTriggerMap)$,$startTriggerMapVar$,$endTriggerMapVar$,
...		$#length(startGuardMap)$,$startGuardMapVar$,$endGuardMapVar$,
...		$#length(startConditionActionMap)$,$startConditionActionMapVar$,$endConditionActionMapVar$,
...		$#length(startTransitionActionMap)$,$startTransitionActionMapVar$,$endTransitionActionMapVar$);
...
...	}
	end

	for dataNumber = gChartInfo.chartDataNumbers
		data = gDataInfo.dataList(dataNumber+1);
		dataSizeArray = gDataInfo.dataSizeArrays{dataNumber+1};
		isTemporaryData = sf('IsTemporaryData',data);
		dataScope = sf('get',data,'data.scope');
		isFunctionIO = (dataScope==8) |(dataScope==9);

		isChartInputData = is_chart_input_data(data);
		isChartOutputData	= is_chart_output_data(data);
		
		if(length(dataSizeArray)==2 &...
		   (isChartInputData | isChartOutputData))
		   dataSizeArray = dataSizeArray(1)*dataSizeArray(2);
		end
      if(isTemporaryData || isFunctionIO)
...	_SFD_SET_DATA_VALUE_PTR($#dataNumber$,(void *)(NULL));	
      end	
	end
   x = sf('Cg','get_cg_fcn_data',chart);
   str = sf('Cg','get_fcn_body',x.chartDebugDataInitializer);
...$str$
...}



function str = init_string_from_vector(vect,formatStr)

	if(length(vect)==0)
		construct_coder_error([],'Internal error. init_string_from_vector cannot be called with empty vector');
	end

	str = ['{',sprintf(formatStr,vect(1))];
	for i=2:length(vect)
		str = [str,',',sprintf(formatStr,vect(i))];
	end
	str = [str,'}'];