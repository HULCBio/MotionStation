function code_unix_make_file(fileNameInfo)
% CODE_UNIX_MAKE_FILE(FILENAMEINFO)

%   Copyright 1995-2004 The MathWorks, Inc.
%   $Revision: 1.8.2.9 $  $Date: 2004/04/15 00:51:34 $
	
	global gMachineInfo gTargetInfo
	code_machine_objlist_file(fileNameInfo);

	fileName = fullfile(fileNameInfo.targetDirName,fileNameInfo.unixMakeFile);
   sf_echo_generating('Coder',fileName);
	file = fopen(fileName,'wt');
	if file<3
		construct_coder_error([],sprintf('Failed to create file: %s.',fileName),1);
	end

	DOLLAR = '$';
...#--------------------------- Tool Specifications -------------------------
...#
...# Modify the following macros to reflect the tools you wish to use for
...# compiling and linking your code.
...#
	if(length(fileNameInfo.userMakefiles))
		for i=1:length(fileNameInfo.userMakefiles)
...include $fileNameInfo.userMakefiles{i}
		end
	end
	if(gTargetInfo.codingMakeDebug)
...CC = $matlabroot$/bin/mex -g
	else
...CC = $matlabroot$/bin/mex
	end
...LD = $DOLLAR$(CC)
... 
...MACHINE     = $gMachineInfo.machineName$
...TARGET      = $gMachineInfo.targetName$
	if length(gMachineInfo.charts)
...CHART_SRCS 	= \
		for chart=gMachineInfo.charts(1:end-1)
			chartNumber = sf('get',chart,'chart.number');
...		$fileNameInfo.chartSourceFiles{chartNumber+1}$\
		end
			chartNumber = sf('get',gMachineInfo.charts(end),'chart.number');
...		$fileNameInfo.chartSourceFiles{chartNumber+1}$
	else
...CHART_SRCS =
	end
...MACHINE_SRC	= $fileNameInfo.machineSourceFile$
	if(~gTargetInfo.codingLibrary & gTargetInfo.codingSFunction)
...MACHINE_REG = $fileNameInfo.machineRegistryFile$
	else
...MACHINE_REG = 
	end
	if ~gTargetInfo.codingLibrary & gTargetInfo.codingMEX
...MEX_WRAPPER = $fileNameInfo.mexWrapperFile$
	else
...MEX_WRAPPER =
	end

   	userAbsSources = {};
   	userSources    = {};
   	for i=1:length(fileNameInfo.userAbsSources)
   		[pathStr, nameStr, extStr] = fileparts(fileNameInfo.userAbsSources{i});
   		extStr = lower(extStr);
   		if(strcmp(extStr, '.c') || strcmp(extStr,'.cpp'))
   			userAbsSources{end+1} = fileNameInfo.userAbsSources{i};
   			userSources{end+1}    = fileNameInfo.userSources{i};
   		else
   			error(['Unrecognized file extension: ' extStr]);
   		end
   	end

...MAKEFILE    = $fileNameInfo.unixMakeFile$

...MATLAB_ROOT	= $fullfile(sf('Root'),'..','..','..')$
...BUILDARGS   = 
	

...#------------------------------ Include/Lib Path ------------------------------
... 
	userIncludeDirString = '';
	if(length(fileNameInfo.userIncludeDirs))
		for i = 1:length(fileNameInfo.userIncludeDirs)
			userIncludeDirString	= [userIncludeDirString,'-I',fileNameInfo.userIncludeDirs{i},' '];
		end
	end
...USER_INCLUDES = $userIncludeDirString$
...MATLAB_INCLUDES = -I$DOLLAR$(MATLAB_ROOT)/simulink/include \
...						-I$DOLLAR$(MATLAB_ROOT)/extern/include \
...						-I$fileNameInfo.sfcMexLibInclude$ \
...						-I$fileNameInfo.sfcDebugLibInclude$
...
if (~isempty(fileNameInfo.dspLibInclude))
...DSP_INCLUDES    = -I$fileNameInfo.dspLibInclude$
else
...DSP_INCLUDES    =
end 
...
...INCLUDE_PATH = $userIncludeDirString$ $DOLLAR$(MATLAB_INCLUDES) $DOLLAR$(DSP_INCLUDES) $DOLLAR$(COMPILER_INCLUDES)
... 

...#----------------- Compiler and Linker Options --------------------------------
... 
...# Optimization Options
...OPT_OPTS = -O
... 
...# General User Options
...OPTS =
... 
...CC_OPTS = $DOLLAR$(OPT_OPTS) $DOLLAR$(OPTS)
...CPP_REQ_DEFINES = -DMATLAB_MEX_FILE
... 
...# Uncomment this line to move warning level to W4
...# cflags = $DOLLAR$(cflags:W3=W4)
...CFLAGS = $DOLLAR$(CC_OPTS) $DOLLAR$(CPP_REQ_DEFINES) $DOLLAR$(INCLUDE_PATH)
... 
...LDFLAGS = 
... 

...#----------------------------- Source Files -----------------------------------
... 
...REQ_SRCS  = $DOLLAR$(MACHINE_SRC) $DOLLAR$(MACHINE_REG) $DOLLAR$(MEX_WRAPPER) $DOLLAR$(CHART_SRCS)
...
	if(length(userAbsSources))
...USER_ABS_OBJS 	= \
		for i=1:length(userAbsSources)
			[pathStr, nameStr, extStr] = fileparts(userAbsSources{i});
			objStr = [nameStr '.o'];
...		$objStr$ \
		end
	else
...USER_ABS_OBJS =
	end
...

...OBJS = $DOLLAR$(REQ_SRCS:.c=.o) $DOLLAR$(USER_ABS_OBJS)
...OBJLIST_FILE = $fileNameInfo.machineObjListFile$
	stateflowLibraryString = fileNameInfo.sfcMexLibFile;
	stateflowLibraryString = [stateflowLibraryString,' ',fileNameInfo.sfcDebugLibFile];
   if (~isempty(fileNameInfo.dspLibFile))
	stateflowLibraryString = [stateflowLibraryString,' ',fileNameInfo.dspLibFile];
   end
...SFCLIB = $stateflowLibraryString$

	if(length(fileNameInfo.userLibraries))
...USER_LIBS = \
		for i=1:length(fileNameInfo.userLibraries)-1
...	$fileNameInfo.userLibraries{i}$ \
		end
...	$fileNameInfo.userLibraries{end}$
	else
...USER_LIBS =
	end
	numLinkMachines = length(fileNameInfo.linkLibFullPaths);
	if(numLinkMachines)
...LINK_MACHINE_LIBS = \
		for i = 1:numLinkMachines-1
...	$fileNameInfo.linkLibFullPaths{i}$ \
		end
...	$fileNameInfo.linkLibFullPaths{end}$
	else
...LINK_MACHINE_LIBS =
	end

	arch = lower(computer);
...FIXEDPOINTLIB = -L$matlabroot$/bin/$arch$ -lfixedpoint
...UTLIB = -lut

... 
...#--------------------------------- Rules --------------------------------------
... 
	if gTargetInfo.codingLibrary
...SF_ARCH := $DOLLAR$(shell arch)
...DO_RANLIB = ranlib $DOLLAR$(MACHINE)_$DOLLAR$(TARGET).a
...ifeq ($DOLLAR$(SF_ARCH),sgi)
...	DO_RANLIB =
...endif
... 
...ifeq ($DOLLAR$(SF_ARCH),sgi64)
...	DO_RANLIB =
...endif
... 
...$DOLLAR$(MACHINE)_$DOLLAR$(TARGET).a : $DOLLAR$(MAKEFILE) $DOLLAR$(OBJS) $DOLLAR$(SFCLIB) $DOLLAR$(USER_LIBS)
...	@echo ### Linking ...
...	ar ruv $DOLLAR$(MACHINE)_$DOLLAR$(TARGET).a $DOLLAR$(OBJS)
...	$DOLLAR$(DO_RANLIB)
	else
		if(gTargetInfo.codingMEX & ~isempty(sf('get',gMachineInfo.target,'target.mexFileName')))
...MEX_FILE_NAME = $sf('get',gMachineInfo.target,'target.mexFileName')$.$mexext$
		else
...MEX_FILE_NAME = $DOLLAR$(MACHINE)_$DOLLAR$(TARGET).$mexext$
		end
... 
... $DOLLAR$(MEX_FILE_NAME): $DOLLAR$(MAKEFILE) $DOLLAR$(OBJS) $DOLLAR$(SFCLIB) $DOLLAR$(USER_LIBS) $DOLLAR$(MEXLIB)
...	@echo ### Linking ...
...	$DOLLAR$(CC) -silent -output $DOLLAR$(MEX_FILE_NAME) $DOLLAR$(OBJS) $DOLLAR$(USER_LIBS) $DOLLAR$(LINK_MACHINE_LIBS) $DOLLAR$(SFCLIB) $DOLLAR$(FIXEDPOINTLIB) $DOLLAR$(UTLIB)
...
	end
...%.o :	%.c
...	$DOLLAR$(CC) -c $DOLLAR$(CFLAGS) $DOLLAR$<
...
		for i=1:length(fileNameInfo.userAbsSources)
			objFileName = fileNameInfo.userAbsSources{i};
			objFileName = code_unix_change_ext(objFileName, 'o');
...$objFileName$ :	$fileNameInfo.userSources{i}$
...	$DOLLAR$(CC) -c $DOLLAR$(CFLAGS) $fileNameInfo.userSources{i}$
		end

	fclose(file);

function result = code_unix_change_ext(filename, ext)

[path_str, name_str, ext_str] = fileparts(filename);

result = [name_str '.' ext];
