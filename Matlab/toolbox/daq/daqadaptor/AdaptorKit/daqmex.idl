// 
// daqmex.idl : IDL source for daqmex.dll MATLAB data acquisition engine.
// Users should never modify this file or daqmex.h
//
cpp_quote("//Copyright 1998-2003 The MathWorks, Inc.")
cpp_quote("// built from  daqmex.idl $Revision: 1.3.4.3 $  $Date: 2003/08/29 04:44:09 $")

// This file will be processed by the MIDL tool to
// produce the type library (daqmex.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";


typedef  struct tagBUFFER {
	long Size; // in bytes
	long ValidPoints; //in raw points (MATLAB samples is ValidPoints/channels) 
	[ref,size_is(Size)] unsigned char *ptr;
	DWORD dwAdaptorData;  //Reserved by the engine for use by the adaptor
	unsigned long Flags;  // flag values are defined in 
	unsigned long Reserved;  //Reserved for future use by the engine
	hyper StartPoint; // count of points since start
	double StartTime;   // time of the start of the buffer from daqenginetime
	double EndTime;     // time of the end of the buffer from daqenginetime 
} BUFFER_ST;

/* Nestable property structures and conststants these are shortcuts to channel data */

typedef [v1_enum] enum tagNESTABLEPROPTYPES {NPAICHANNEL,NPAOCHANNEL,NPDIGITALLINE} NESTABLEPROPTYPES;

cpp_quote("#if 0")  // midl must marshal somthing
// the actual tagNESTABLEPROP structure for .h files folows 
typedef struct tagNESTABLEPROP
{
    long StructSize;  // total size of the entire structure including any extra data
    long Index;       // channel (line) index as seen from matlab
    NESTABLEPROPTYPES Type;  // type 
    long HwChan;
    BSTR Name;
	[size_is(StructSize-20)] BYTE extra[];
} NESTABLEPROP;

cpp_quote("#endif")
// this is the base NESTABLEPROP structure note the abbsence of the extra info
cpp_quote("typedef struct tagNESTABLEPROP")
cpp_quote("{")
cpp_quote("    long StructSize;")
cpp_quote("    long Index;")
cpp_quote("    NESTABLEPROPTYPES Type;")
cpp_quote("    long HwChan;")
cpp_quote("    BSTR Name;")
cpp_quote("} NESTABLEPROP;")

cpp_quote("#ifdef __cplusplus")
cpp_quote("typedef const VARIANT &VARIANTREF;")
cpp_quote("#else")
typedef const VARIANT *VARIANTREF;
cpp_quote("#endif")


// Base class for all properties Channel properites it does not have an independent value
// because of that there is no value member
	[
		uuid(8BEEFABE-E54A-11d3-A551-00902757EA8D),
		helpstring("IPropRoot Interface"),
		pointer_default(unique)
	]
	interface IPropRoot : IUnknown
	{
		[propget, helpstring("property Name")] HRESULT Name([out, retval] BSTR *pVal);
		[propput, helpstring("property Name")] HRESULT Name([in, string] LPCOLESTR newVal);
		[helpstring("method GetType")] HRESULT GetType([out] long *Type);
		[propget, helpstring("property User")] HRESULT User([out, retval] long *pVal);
		[propput, helpstring("property User")] HRESULT User([in] long newVal);
		[propget, helpstring("property IsHidden")] HRESULT IsHidden([out, retval] BOOL *pVal);
		[propput, helpstring("property IsHidden")] HRESULT IsHidden([in] BOOL newVal);
		[propget, helpstring("property IsReadOnly")] HRESULT IsReadOnly([out, retval] BOOL *pVal);
		[propput, helpstring("property IsReadOnly")] HRESULT IsReadOnly([in] BOOL newVal);
		[propget, helpstring("property IsReadonlyRunning")] HRESULT IsReadonlyRunning([out, retval] BOOL *pVal);
		[propput, helpstring("property IsReadonlyRunning")] HRESULT IsReadonlyRunning([in] BOOL newVal);
		[helpstring("method GetRange")] HRESULT GetRange([out] VARIANT *min,[out] VARIANT *max);
		[helpstring("method SetRange")] HRESULT SetRange([in] VARIANT *min,[in] VARIANT *max);
		[helpstring("method _GetObject"), hidden, restricted, local] long _GetObject();
		[propget, helpstring("property DefaultValue")] HRESULT DefaultValue([out, retval] VARIANT *pVal);
		[propput, helpstring("property DefaultValue")] HRESULT DefaultValue([in] VARIANTREF newVal);
		[helpstring("method IsValidValue")] HRESULT IsValidValue([in] VARIANTREF value);		
	}

// basic Enum property 
	[
		uuid(F3F93B7F-93C7-11d3-A526-00902757EA8D),
		helpstring("IDaqEnum Interface"),
		pointer_default(unique)
	]
	interface IDaqEnum : IPropRoot
	{
		[helpstring("method AddEnumValue")] HRESULT AddEnumValues([in] VARIANTREF values);
		[helpstring("method ClearEnumValues")] HRESULT ClearEnumValues();	
		[helpstring("method RemoveEnumValue")] HRESULT RemoveEnumValue([in] VARIANTREF values);		
		[helpstring("method EnumValues not yet implemented")] HRESULT EnumValues([out] IEnumVARIANT**  EnumVARIANT);
	};
	
// special functions for Mapped enums 
	[
		uuid(F3F93B80-93C7-11d3-A526-00902757EA8D),
		helpstring("IDaqMapedEnum Interface"),
		pointer_default(unique)
	]
	interface IDaqMappedEnum : IDaqEnum  // must implement IDaqEnum too
	{
		[helpstring("method AddMappedEnumValue")] HRESULT AddMappedEnumValue(long Value,[in,string] LPCOLESTR StringValue);
		[helpstring("method FindString")] HRESULT FindString([in] long Value,[out] BSTR *StringValue);
		[helpstring("method FindValue")] HRESULT FindValue([in,string] LPCOLESTR StringValue,[out] long *value);
	};

// this interface may be fazed out in the future
// use qI for IPropValue on any property with a value
	[
		uuid(0BFA2913-D48E-11D1-90BE-00600841F9FF),
		helpstring("IProp Interface"),
		pointer_default(unique)
	]
	interface IProp : IDaqMappedEnum
	{
		[propget, helpstring("property Value")] HRESULT Value([out, retval] VARIANT *pVal);
		[propput, helpstring("property Value")] HRESULT Value([in] VARIANTREF newVal);
	};

// This interface defines the basic property value
	[
		uuid(2A27FFA5-5CEF-11d4-A591-00902757EA8D),
		helpstring("IPropValue Interface"),
		pointer_default(unique)
	]
	interface IPropValue : IUnknown
	{
		[propget, helpstring("property Value")] HRESULT Value([out, retval] VARIANT *pVal);
		[propput, helpstring("property Value")] HRESULT Value([in] VARIANTREF newVal);
	};

// Basic container for properties makes a structure
	[
		uuid(E79D1B45-DF5F-11D1-90C1-00600841F9FF),
		helpstring("IPropContainer Interface"),
		pointer_default(unique)
	]
	interface IPropContainer : IUnknown
	{
		[propget, helpstring("property MemberValue")] HRESULT MemberValue([in,string]LPCOLESTR MemberName, [out, retval] VARIANT *pVal);
		[propput, helpstring("property MemberValue")] HRESULT MemberValue([in,string]LPCOLESTR MemberName, [in] VARIANTREF newVal);
		[helpstring("method GetMemberInterface")] HRESULT GetMemberInterface([in,string,unique]LPCOLESTR MemberName,[in] REFIID RequesedIID,
											[out,retval, iid_is(RequesedIID)] void **Interface);
		[helpstring("method CreateProperty")] HRESULT CreateProperty([in,string] LPCOLESTR Name,[in] VARIANT *InitialValue,
									     [in] REFIID RequesedIID, [out, iid_is(RequesedIID)] void **NewProp);
		[helpstring("method EnumMembers not currently implemented")] HRESULT EnumMembers([out] IEnumUnknown**  ppIEnumUnk);
	};

// A channel list will hold multiple channels each one is represented as a container.
	[
		uuid(8BEEFAC1-E54A-11d3-A551-00902757EA8D),
		helpstring("IChannelList Interface"),
		pointer_default(unique)
	]
	interface IChannelList:IPropContainer 
	{
		[helpstring("method GetChannelContainer")] HRESULT GetChannelContainer(long index,[in] REFIID riid,[out, iid_is(riid)] void** Cont);
		[helpstring("method GetChannelStructLocal"),local] HRESULT GetChannelStructLocal(long index , [out,ref] NESTABLEPROP** Channel);
		[helpstring("method GetChannelStruct")] HRESULT GetChannelStruct(long index , [out] NESTABLEPROP** Channel);
		[helpstring("method GetNumberOfChannels")] HRESULT GetNumberOfChannels([out] long *Number);
		[helpstring("method CreateChannel")] HRESULT CreateChannel(long HwChannel,[out]IPropContainer** Cont);
		[helpstring("method DeleteChannel")] HRESULT DeleteChannel(long index);
		[helpstring("method DeleteAllChannels")] HRESULT DeleteAllChannels();
	}
// an individual channel  
	[
		uuid(8BEEFAC0-E54A-11d3-A551-00902757EA8D),
		helpstring("IChannel Interface"),
		pointer_default(unique)
	]
	interface IChannel:IPropContainer 
	{
		[propget, helpstring("property PropValue")] HRESULT PropValue([in] REFIID riid,[in,iid_is(riid)] IPropRoot* Member, [out, retval] VARIANT *pVal);
		[propput, helpstring("property PropValue")] HRESULT PropValue([in] REFIID riid,[in,iid_is(riid)] IPropRoot* Member, [in] VARIANTREF newVal);
		[helpstring("method Units to  Binary")] HRESULT UnitsToBinary([in] double UnitsVal, [out] VARIANT *pVal);
		[helpstring("method Binary to Units")] HRESULT BinaryToUnits([in] VARIANTREF BinaryVal,[out] double *UnitsVal);
	}
// Interface to the engine
	[
		uuid(8BEEFABF-E54A-11d3-A551-00902757EA8D),
		helpstring("IDaqEngine Interface"),
		pointer_default(unique)
	]
	interface IDaqEngine : IUnknown
	{
		[helpstring("method GetTime")] HRESULT GetTime([out] double *Time);		
		[helpstring("method WarningMessage")] HRESULT WarningMessage([in] BSTR Message);
		[helpstring("method DaqEvent")] HRESULT DaqEvent(DWORD event , double time , hyper sample, [in,unique] BSTR Message);
		[helpstring("method GetBufferingConfig")] HRESULT GetBufferingConfig([out] long *BufferSizeSamples,[out] long *NumBuffers);
		[local,helpstring("method PutBuffer")] HRESULT PutBuffer([in,unique] BUFFER_ST *Buffer);
		[local,helpstring("method GetBuffer")] HRESULT GetBuffer(long Timeout, [out,unique] BUFFER_ST **Buffer);
	//	[helpstring("method GetProperty")] HRESULT GetProperty([in] BSTR Name,[out] IProp** Prop); // this needs to go
		[helpstring("method PutInputData")] HRESULT PutInputData([in] long Timeout,[in] BUFFER_ST *Buffer);
		[helpstring("method GetOutputData")] HRESULT GetOutputData([in] long Timeout,[out] BUFFER_ST *Buffer);
	};
	
	// Base adaptor interface Implement this interface to give the engine info about the adaptor
	[	
		uuid(69CA3484-95F5-11d3-A527-00902757EA8D),
		helpstring("ImwAdaptor Interface"),
		pointer_default(unique)
	]
	interface ImwAdaptor : IUnknown
	{
		[helpstring("method AdaptorInfo")] HRESULT AdaptorInfo([in]IPropContainer* Container);
		[helpstring("method OpenDevice")] HRESULT OpenDevice([in] REFIID DevIID,
														[in] long nParams,
														[in,size_is(nParams)] VARIANT *Param, 
														[in] REFIID EngineIID,
														[in, iid_is(EngineIID)] IUnknown *pEngine,
														[out, iid_is(DevIID)] void **ppIDevice);
		[helpstring("method TranslateError")] HRESULT TranslateError(HRESULT eCode, [out] BSTR *retVal);
	};

// Basic device functionality all devices must have the folowing functions
	[
		uuid(42680178-65FA-11d3-A51B-00902757EA8D),
		helpstring("IDevice Interface"),
		pointer_default(unique)
	]
	interface ImwDevice : IUnknown
	{
		[local,helpstring("method AllocBufferData")] HRESULT AllocBufferData([in,out]BUFFER_ST* pBuffer);
		[local,helpstring("method FreeBufferData")] HRESULT FreeBufferData([in,out]BUFFER_ST* pBuffer);
		[helpstring("method SetChannelProperty")] HRESULT SetChannelProperty([in]long user, [in]NESTABLEPROP *pChan, [in,out]VARIANT *NewValue);
		[helpstring("method SetProperty")] HRESULT SetProperty([in] long user, [in,out]VARIANT* NewValue);
		[helpstring("method Start")] HRESULT Start();
		[helpstring("method Stop")] HRESULT Stop();
		[helpstring("method GetStatus")] HRESULT GetStatus([out]hyper *samplesProcessed, [out]BOOL *running);
		[helpstring("method ChildChange")] HRESULT ChildChange([in]DWORD typeofchange,[in,out]NESTABLEPROP *pChan);
	};
	
// Implement ImwInput interface allong with ImwDevice for all Analog input devices	
	[	
		uuid(42680175-65FA-11d3-A51B-00902757EA8D),
		helpstring("ImwInput Interface"),
		pointer_default(unique)
	]
	interface ImwInput : IUnknown
	{
		[helpstring("method GetSingleValues")] HRESULT GetSingleValues([out]VARIANT* Values);
		[local,helpstring("method PeekData")] HRESULT PeekData([in,out] BUFFER_ST* pBuffer);	
		[helpstring("method Trigger")] HRESULT Trigger();
	}
	
// Implement ImwOutput interface allong with ImwDevice for all Analog output devices	
	[	
		uuid(42680176-65FA-11d3-A51B-00902757EA8D),
		helpstring("ImwOutput Interface"),
		pointer_default(unique)
	]
	interface ImwOutput : IUnknown
	{
		[helpstring("method PutSingleValues")] HRESULT PutSingleValues([in]VARIANT* Values);
		[helpstring("method Trigger")] HRESULT Trigger();
	}

// Implement ImwDIO for all DIO devices
	[	
		uuid(42680177-65FA-11d3-A51B-00902757EA8D),
		helpstring("Matlab DIO Adaptor Interface"),
		pointer_default(unique)
	]
	interface ImwDIO : IUnknown
	{
		[helpstring("method ReadValues")] HRESULT ReadValues([in] long NumberOfPorts,[in,size_is(NumberOfPorts)] long *PortList,[out,size_is(NumberOfPorts)] unsigned long* Data);
		[helpstring("method WriteValues")] HRESULT WriteValues([in]long NumberOfPorts,[in,size_is(NumberOfPorts)] long *PortList,[in,size_is(NumberOfPorts)] unsigned long* Data, [in,size_is(NumberOfPorts)] unsigned long *Mask );
		[helpstring("method SetPortDirection")] HRESULT SetPortDirection([in]long Port,[in] unsigned long DirectionValues);
	}

[
	uuid(5DA5A732-D462-11D1-90BE-00600841F9FF),
	version(2.1),
	helpstring("MATLAB Daq Toolbox 2.1 Type Library")
]
library DAQMEXLib
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");
	interface ImwAdaptor;
	interface ImwDevice;
	interface ImwInput;
	interface ImwOutput;
	interface ImwDIO;


	[
		uuid(0BFA2914-D48E-11D1-90BE-00600841F9FF),
		helpstring("Prop Class")
	]
	coclass Prop
	{
		[default] interface IProp;
	};
	
	[
		uuid(E79D1B43-DF5F-11D1-90C1-00600841F9FF),
		helpstring("DaqEngine Class")
	]
	coclass DaqEngine
	{
		[default] interface IDaqEngine;
		interface IChannelList;
		interface IPropContainer;
	};
	
	[
		uuid(E79D1B46-DF5F-11D1-90C1-00600841F9FF),
		helpstring("PropContainer Class")
	]
	coclass PropContainer
	{
		[default] interface IPropContainer;
//		interface IChannel;
		interface IProp;
	};


	[
		uuid(61D9F511-B6E9-11D3-A538-00902757EA8D),
		helpstring("DaqMappedEnum Class")
	]
	coclass DaqMappedEnum
	{
		[default] interface IDaqMappedEnum;
		interface IPropValue;
	};
};
	
