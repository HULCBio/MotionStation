%    Copyright (C) 1994, 1996 Aladdin Enterprises.  All rights reserved.
% 
% This file is part of GNU Ghostscript.
% 
% GNU Ghostscript is distributed in the hope that it will be useful, but
% WITHOUT ANY WARRANTY.  No author or distributor accepts responsibility
% to anyone for the consequences of using it or for whether it serves any
% particular purpose or works at all, unless he says so in writing.  Refer
% to the GNU General Public License for full details.
% 
% Everyone is granted permission to copy, modify and redistribute GNU
% Ghostscript, but only under the conditions described in the GNU General
% Public License.  A copy of this license is supposed to have been given
% to you along with GNU Ghostscript so you can know your rights and
% responsibilities.  It should be in a file named COPYING.  Among other
% things, the copyright notice and this notice must be preserved on all
% copies.
% 
% Aladdin Enterprises supports the work of the GNU Project, but is not
% affiliated with the Free Software Foundation or the GNU Project.  GNU
% Ghostscript, as distributed by Aladdin Enterprises, does not require any
% GNU software to build or run it.

% $Id: gs_ccfnt.ps $
% Find and register all the precompiled font operators in systemdict.

/registerfont			% <fontname> <fontdict> registerfont <font>
 { DEBUG { (Registering ) print 1 index = } if
   dup begin
     Encoding type /nametype eq
      { Encoding .findencoding /Encoding exch def
      }
     if
     dup /PrefEnc known
      { PrefEnc type /nametype eq
	 { PrefEnc .findencoding /PrefEnc exch def
	 }
	if
      }
     if
     dup /FDepVector known
      { /FDepVector [ FDepVector
	 { .FontDirectory 1 index .knownget
	    { exch pop }
	    { ccfonts 1 index .knownget
	       { registerfont
	       }
	       { Fontmap 1 index known
		  { findfont }
		  { pop NullFont }
		 ifelse
	       }
	      ifelse
	    }
	   ifelse
	 }
	forall ] readonly def
      }
     if
   end
   % Use the value of definefont appropriate at run-time, not bind-time
   /definefont load exec
 } bind odef
% Bind recursive call (bind descends into oparrays: feature!)
/registerfont dup load bind def

/.loadinitialfonts {
   //.loadinitialfonts exec
   /ccfonts mark
     0 1 null .getccfont 1 sub { .getccfont dup /FontName get exch } for
   .dicttomark def
   ccfonts
    { .FontDirectory 2 index known { pop pop } { registerfont pop } ifelse }
   forall
  currentdict /ccfonts .undef
} bind def

currentdict /registerfont .undef


% If we're in a Level 2 system but running in Level 1 mode,
% register the fonts explicitly as resources.
% This is a bit of a hack, but doing better is too much work.

/level2dict where
 { pop /findresource where
    {		% Level 2 system, Level 2 mode
      pop
    }
    {		% Level 2 system, Level 1 mode
      /Font /Category level2dict /findresource get exec begin
      .FontDirectory
       { dup .gcheck { Instances } { LocalInstances } ifelse
	 3 1 roll [exch 0 -1] .growput
       }
      forall end
    }
   ifelse
 }
if
