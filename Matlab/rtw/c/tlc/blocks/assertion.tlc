%% 
%% $Revision: 1.1.6.2 $
%%
%% Copyright 1994-2003 The MathWorks, Inc.
%%
%% Abstract:
%%      Assertion block target file. 
%%

%implements Assertion "C"

%% Function: BlockInstanceSetup ==============================================
%% Abstract:
%%   Set expression folding compliance
%%
%function BlockInstanceSetup(block, system) void
  %<LibBlockSetIsExpressionCompliant(block)>
  %<LibAddToCommonIncludes("rtlibsrc.h")> 
%endfunction

%% Function: FixptOutputs ======================================================
%% Abstract:
%%      Output code for fixpt mode
%function FixptOutputs(block, system) Output
  %%
  %% Get input data type
  %%
  %assign dType       = FixPt_GetInputDataType(0)
  %assign compareExpr = ""
  %%
  %% Roll around signal width
  %%
  %assign rollVars = ["u0"]
  %%
  %roll sigIdx = RollRegions, lcv = RollThreshold, block, "Roller", rollVars
    %%
    %assign u = LibBlockInputSignal(0, "", lcv, sigIdx)
    %%
    %if dType.Bias != 0.0
      %assign id = LibBlockInputSignalDataTypeId(0)
      %assign uGround = SLibGetGroundValueFromId(id)
      %%
      %assign compareComp = "%<u> != %<uGround>"
      %%
    %else
      %assign compareComp = "%<u>"
    %endif
    %if lcv != ""
      utAssert(%<compareComp>);
    %else
      %if compareExpr != ""
	%assign compareExpr = "%<compareExpr> && %<compareComp>"	  
      %else
	%assign compareExpr = "%<compareComp>"
      %endif
    %endif
  %endroll
  %if compareExpr != ""
    utAssert(%<compareExpr>);
  %endif
%endfunction

%% Function: Outputs ===========================================================
%% Abstract:
%%      If our input has become non-zero, then request a stop.
%%
%function Outputs(block, system) Output
  %if Accelerator
    /* Call into Simulink for Assertion call back */
    %<SLibCallBlockInSimulink(system, block, "SS_CALL_MDL_OUTPUTS")>
  %else
    %if ParamSettings.Enabled == "no"
      /* Assertion disabled */
    %elseif block.InFixptMode
      %<FixptOutputs(block,system)>
    %else
      %assign dType = LibBlockInputSignalAliasedThruDataTypeId(0)
      %assign compType = ""
      %switch dType
	%case (tSS_DOUBLE)
	%case (tSS_SINGLE)
	  %assign compType = "float"
	  %break
	%case (tSS_INT8)
	%case (tSS_UINT8)
	%case (tSS_INT16)	  
	%case (tSS_UINT16)
	%case (tSS_INT32)
	%case (tSS_UINT32)
	  %assign compType = "int"
	  %break
	%case (tSS_BOOLEAN)
	  %assign compType = "bool"
	  %break
	  %%START_ASSERT
	%default
	  %assign dtName = LibGetDataTypeNameFromId(dType)
	  %assign errTxt = "Invalid data type %<dtName>."
	  %<LibBlockReportError(block, errTxt)>
	  %%END_ASSERT
      %endswitch
      %assign compareExpr = ""
      %assign rollVars = ["u0"]
      %roll sigIdx = RollRegions, lcv = RollThreshold, block, "Roller", rollVars
	%assign u = LibBlockInputSignal(0, "", lcv, sigIdx)
	%if (compType == "float")
	  %assign compareComp = "%<u> != 0.0"
	%elseif (compType == "int")
	  %assign compareComp = "%<u> != 0"
	%elseif (compType == "bool")
	  %assign compareComp = "%<u>"
	%endif
	%if lcv != ""
	  utAssert(%<compareComp>);
	%else
	  %if compareExpr != ""
	    %assign compareExpr = "%<compareExpr> && %<compareComp>"	  
	  %else
	    %assign compareExpr = "%<compareComp>"
	  %endif
	%endif
      %endroll
      %if compareExpr != ""
	utAssert(%<compareExpr>);
      %endif
    %endif
  %endif
  
%endfunction

%% [EOF] assertion.tlc
