%% $Revision: 1.1.6.2 $
%% 
%%
%% Copyright 1994-2003 The MathWorks, Inc.
%%
%% Abstract: Elementary Math block target file

%implements ElementaryMath "C"

%% Function: BlockInstanceSetup ==============================================
%% Abstract:
%%   Set expression folding compliance
%%
%function BlockInstanceSetup(block, system) void
  %<LibBlockSetIsExpressionCompliant(block)>
%endfunction


%% Function: Outputs ==========================================================
%% Abstract:
%%	The elementary math block implements the following math functions:
%%      sin cos tan asin acos atan sinh cosh tanh exp log log10 floor ceil sqrt
%%      reciprocal atan2 pow hypot.
%%
%function Outputs(block, system) Output
  %assign rollVars = ["U", "Y"]
  %roll sigIdx = RollRegions, lcv = RollThreshold, block, "Roller", rollVars
    %assign u = LibBlockInputSignal(0, "", lcv, sigIdx)
    %if NumDataInputPorts==2
      %assign u2 = LibBlockInputSignal(1, "", lcv, sigIdx)
    %endif
    %assign y = LibBlockOutputSignal(0, "", lcv, sigIdx)
    %assign elmathOperator = ParamSettings.Operator
    %%
    %% Cases we are OK for by default:      
    %%    sin, cos, tan, atan, sinh, cosh, tanh, exp
    %% Special cases:
    %%    atan2, hypot, reciprocal, asin, acos, log, log10, sqrt, pow
    %%
    %if NumDataInputPorts==2
      %switch elmathOperator
        %case "atan2"
          if ((%<u> == 0.0) || (%<u2> == 0.0)) {
	    %<y> = 0.0;
          } else {
            %<y> = %<elmathOperator>(%<u>,%<u2>);
          }
 	  %break
	%case "pow"
	  if ((%<u> < 0.0) && (%<u2> != floor(%<u2>))) {
            %<y> = -%<elmathOperator>(-%<u>, %<u2>);
	  } else {
            %<y> = %<elmathOperator>(%<u>, %<u2>);
          }
          %break
        %default
          %<y> = %<elmathOperator>(%<u>,%<u2>);
      %endswitch
    %else
      %switch elmathOperator
        %case "asin"
          if (%<u> > 1.0) {
            %<y> = %<elmathOperator>(1.0);
          } else if (%<u> < -1.0) {
            %<y> = %<elmathOperator>(-1.0);
          } else {
            %<y> = %<elmathOperator>(%<u>);
          }
          %break
        %case "acos"
          if (%<u> > 1.0) {
            %<y> = %<elmathOperator>(1.0);
          } else if (%<u> < -1.0) {
            %<y> = %<elmathOperator>(-1.0);
          } else {
            %<y> = %<elmathOperator>(%<u>);
          }
          %break
        %case "log" 
        %case "log10" 
          if (%<u> <= 0.0) {
            %<y> = %<LibRealNonFinite(-inf)>;
          } else {
            %<y> = %<elmathOperator>(%<u>);
          }
          %break
	%case "sqrt"
	  if (%<u> < 0.0) {
            %<y> = -%<elmathOperator>(-%<u>);
	  } else {
            %<y> = %<elmathOperator>(%<u>);
          }
	  %break
        %case "reciprocal"
          %<y> = 1.0/(%<u>);
          %break
        %default
          %<y> = %<elmathOperator>(%<u>);
      %endswitch
    %endif
  %endroll

%endfunction

%% [EOF] elmath.tlc
