%% 
%% $Revision: 1.1.6.6 $
%% 
%%
%% Copyright 1994-2003 The MathWorks, Inc.
%%
%% Abstract:
%%      Monitors which TLC functions are accessed.
%%

%if EXISTS("_FCNIOLIB_") == 0
%assign _FCNIOLIB_ = 1

%%
%% (1) Global Library Functions (Lib functions)
%%

%% ==========================================================================
%% Record for monitoring data structure access
%%
%%   B:        Block I/O
%%   U:        External Inputs
%%   Y:        External Outputs
%%   XC:       Continuous State
%%   DWork:    Data type work
%%   PrevZC:   Previous Zero Crossings
%%   NSZC:     Nonsampled Zero Crossings
%%   P:        Parameters
%%
%assign BlockFcnAccessed = BlockFcnAccessedRef \
  { B 0; U 0; Y 0; XC 0; dXC 0; Xdis 0; BoolGND 0; RealGND 0;\
  SInt8GND 0; SInt16GND 0; SInt32GND 0;\
  UInt8GND 0; UInt16GND 0; UInt32GND 0;\
  DWork 0; PrevZC 0; P 0; NSZC 0 }

%% Function: LibResetBlockFcnAccessed =======================================
%% Abstract:
%%      Resets the block function access record.
%%
%function LibResetBlockFcnAccessed() void
  
  %assign ::BlockFcnAccessed.B       = 0
  %assign ::BlockFcnAccessed.U       = 0
  %assign ::BlockFcnAccessed.Y       = 0
  %assign ::BlockFcnAccessed.XC      = 0
  %assign ::BlockFcnAccessed.dXC     = 0
  %assign ::BlockFcnAccessed.Xdis    = 0
  %assign ::BlockFcnAccessed.BoolGND = 0
  %assign ::BlockFcnAccessed.RealGND = 0
  %assign ::BlockFcnAccessed.DWork   = 0
  %assign ::BlockFcnAccessed.PrevZC  = 0
  %assign ::BlockFcnAccessed.NSZC    = 0
  %assign ::BlockFcnAccessed.P       = 0
  
%endfunction


%% Function: LibDeclareAccessedBlockVars ====================================
%%
%% Abstract:
%%      Declares the SimStruct data structures that have been accessed.  For
%%      example,
%%
%%      %<LibDeclareAccessedBlockVars(["B", "XC"])>
%%
%%      Produces:
%%
%%      BlockIO *B = ssGetBlockIO(S); 
%%      States  *X = ssGetX(S);
%%
%%      If these data structures have been accessed since the last call
%%      to LibResetBlockFcnAccessed.
%%
%% Synopsis:
%%      LibDeclareAccessedBlockVars(list) Output
%%        list = list containing the variables of interest.  The list may
%%               also be specified as "All" (All accessed variables) or
%%               "AllButStatics" (All accessed variables except for P)
%%
%function LibDeclareAccessedBlockVars(varList) Output
  %if varList[0] == "All"
    %assign varList = ...
      ["B", "U", "Y", "XC", "dXC","Xdis","DWork", "PrevZC", "P", "NSZC"]
  %endif
  %foreach idx = SIZE(varList, 1)
    %assign var = varList[idx]
    %switch var
      %case "B"
	%if BlockFcnAccessed.B
	  %if CodeFormat == "S-Function"
	    %if !Accelerator
	      %<tBlockIOType> *%<tBlockIO> = (%<tBlockIOType> *) ...
                %<RTMGet("LocalBlockIO")>;
	    %else
	      %<tBlockIOType> *%<tBlockIO> = (%<tBlockIOType> *) ...
                %<RTMuGet("BlockIO")>;
	    %endif
	  %else
	    %<tBlockIOType> *%<tBlockIO> = (%<tBlockIOType> *) ...
              %<RTMGet("BlockIO")>;
	  %endif
	%endif
	%break
      %case "U"
	%if BlockFcnAccessed.U
	  %if CodeFormat == "RealTimeMalloc" || Accelerator
	    %<tInputType> *%<tInput> = (%<tInputType> *) %<RTMGet("U")>;
	  %elseif CodeFormat == "S-Function"
	    %<tInputType> *%<tInput> = ...
	      (%<tInputType> *) %<RTMGetIdxed("InputPortSignalPtrs", 0)>;
	  %endif
	%endif
	%break
      %case "Y"
	%if BlockFcnAccessed.Y
	  %if CodeFormat == "RealTimeMalloc"
	    %<tOutputType> *%<tOutput> = (%<tOutputType> *) %<RTMGet("Y")>;
	  %elseif CodeFormat == "S-Function"
	    %<tOutputType> *%<tOutput> = ...
	      (%<tOutputType> *) %<RTMGetIdxed("OutputPortSignal", 0)>;
	  %endif
	%endif
	%break
      %case "XC"
	%if BlockFcnAccessed.XC
	  %<tContStateType> *%<tContState> = ...
	    (%<tContStateType>*) %<RTMGet("ContStates")>;
	%endif
	%break
      %case "dXC"
	%if BlockFcnAccessed.dXC
	  %<tXdotType> *%<tXdot> = ...
	    (%<tXdotType>*) %<RTMGet("dX")>;
	%endif
	%break
      %case "Xdis"
	%if BlockFcnAccessed.Xdis
	  %<tXdisType> *%<tXdis> = ...
	    (%<tXdisType>*) %<RTMGet("ContStateDisabled")>;
	%endif
	%break
      %case "DWork"
	%if BlockFcnAccessed.DWork
	  %if CodeFormat == "RealTimeMalloc" || Accelerator
	    %<tDWorkType> *%<tDWork> = (%<tDWorkType> *) ...
	      %<RTMGet("RootDWork")>;
	  %endif
	%endif
	%break
      %case "PrevZC"
	%if BlockFcnAccessed.PrevZC
	  %if CodeFormat == "S-Function"
	    %<tPrevZCStateType> *%<tPrevZCState> = (%<tPrevZCStateType> *) ...
              %<RTMuGet("PrevZCSigState")>;
	  %else
	    %<tPrevZCStateType> *%<tPrevZCState> = (%<tPrevZCStateType> *) ...
	      %<RTMGet("PrevZCSigState")>;
	  %endif
	%endif
	%break
      %case "P"
	%if BlockFcnAccessed.P
	  %if CodeFormat == "S-Function" && !Accelerator
	    %<tParametersType> *%<tParameters> = (%<tParametersType> *) ...
	      %<RTMGet("LocalDefaultParam")>;
	  %else
	    %<tParametersType> *%<tParameters> = (%<tParametersType> *) ...
	      %<RTMGet("DefaultParam")>;
	  %endif
	%endif
	%break
      %case "NSZC"
	%if BlockFcnAccessed.NSZC
	  %<tNonsampledZCType> *%<tNonsampledZC> = (%<tNonsampledZCType> *) ...
	    %<RTMGet("NonsampledZCs")>;
	%endif
	%break
      %default
	%% START_ASSERT
        %assign errTxt = "Unknown variable: %<var>"
	%<LibReportFatalError(errTxt)>
	%% END_ASSERT
    %endswitch
  %endforeach
%endfunction %% LibDeclareAccessedBlockVars


%% Function: LibDeclareAllAccessedSimStructVars =============================
%%
%% Abstract:
%%      Declare any variables which have been accessed since the last call
%%      to this function (or reset directly by LibResetBlockFcnAccessed),
%%      and then reset the function access record.
%%  
%function LibDeclareAllAccessedSimStructVars() void
  %openfile tmpBuffer
  %if CodeFormat == "S-Function" || CodeFormat == "RealTimeMalloc"
    %assign list = ["All"]
    %<LibDeclareAccessedBlockVars(list)>\
    %<LibResetBlockFcnAccessed()>\
  %elseif EXISTS("_RSIM_FULL_") 
    %if ::BlockFcn == "Derivative"
      %assign list = ["dXC","NSZC","Xdis"]
    %else
      %assign list = ["NSZC","Xdis"]
    %endif
    %<LibDeclareAccessedBlockVars(list)>\
    %<LibResetBlockFcnAccessed()>\
  %elseif ::BlockFcn == "Derivative"
    %assign list = ["dXC"]
    %<LibDeclareAccessedBlockVars(list)>\
    %<LibResetBlockFcnAccessed()>\
  %endif
  %closefile tmpBuffer
  %if !WHITE_SPACE(tmpBuffer)
    %return "/* simstruct variables */\n" + tmpBuffer + "\n"
  %else
    %return ""
  %endif
%endfunction


%% Function: LibDeclareSelectAccessedSimStructVars =========================
%%
%% Abstract:
%%      Declare variables in list which have been accessed since the last
%%      call to this function (or reset directly by
%%      LibResetBlockFcnAccessed), and then reset the function access
%%      record.
%%
%% Synopsis:
%%      LibDeclareAccessedBlockVars(list) Output
%%        list = list containing the variables of interest.  The list may
%%               also be specified as "All" (All accessed variables) or
%%               "AllButStatics" (All accessed variables except for P)
%%  
%function LibDeclareSelectAccessedSimStructVars(list) Output
  %exit assert: should not be here; this function is obsolete
  %if LibDeclareAccessedBlockVars(list)
    
  %endif
  %<LibResetBlockFcnAccessed()>\
%endfunction

%%
%% (2) Local Library Functions (Fcn Functions)
%%


%%
%% End of library code
%%

%endif %% _FCNIOLIB_

%% [EOF] fcniolib.tlc
