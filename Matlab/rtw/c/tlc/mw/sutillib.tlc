%% 
%% $Revision: 1.1.6.5 $
%% 
%%
%% Copyright 1994-2004 The MathWorks, Inc.
%%
%% Abstract:
%%      This TLC library file contains system utility functions.
%%

%if EXISTS("_SUTILLIB_") == 0
%assign _SUTILLIB_ = 1

%% Function: SLibSetNeedAbsoluteTime(tid) ===================
%%
%function SLibSetNeedAbsoluteTime(tid)
  %if CodeFormat == "Embedded-C"
    %assert TYPE(tid) == "Number" && tid >= 0
    %assign CompiledModel.SampleTime[tid].NeedAbsoluteTime = "yes"
  %endif
  %return ""
%endfunction

%% Function: SLibNeedAbsoluteTime ==============================================
%% Abstract:
%%   Return true if any of SampleTime need absolute time.
%%
%function SLibNeedAbsoluteTime() 
  %assign needAbsoluteT = TLC_FALSE
  %with CompiledModel
    %foreach tid = NumSampleTimes
      %if SampleTime[tid].NeedAbsoluteTime == "yes"
	%assign needAbsoluteT = TLC_TRUE
	%break
      %endif
    %endforeach
  %endwith
  %return(needAbsoluteT)
%endfunction

%% Function: SLibNeedAbsoluteTimeForTID ==============================================
%% Abstract:
%%   Return true if TID need absolute time, if tid passed in is "",
%%  Return true if any of SampleTime need absolute time.
%%
%function SLibNeedAbsoluteTimeForTID(tid) 
   %if ISEQUAL(tid, "")
     %return(SLibNeedAbsoluteTime())
   %else
     %return(CompiledModel.SampleTime[tid].NeedAbsoluteTime == "yes")
   %endif
%endfunction

%% Function: SLibClockTickIsUnit32Pair ==============================================
%% Abtract: 
%%   Return true if the data type id of ClockTickDataTypeId is
%% tSS_TIMER_UINT32_PAIR 
%function SLibClockTickIsUnit32Pair(tid)
  %assert TYPE(tid) == "Number" && tid >= 0
  
  %return (CompiledModel.SampleTime[tid].ClockTickDataTypeId == ...
    tSS_TIMER_UINT32_PAIR)
%endfunction

%% Function: SLibGetReimAndIdx =================================================
%% Abstract:
%%   Split the input argument sigIdx into reim and idx.
%%
%function SLibGetReimAndIdx(sigIdx) void
  %%
  %assign idxType = TYPE(sigIdx)
  %%
  %if idxType == "String"
    %%
    %assign idNum = IDNUM(sigIdx)
    %%
  %elseif idxType == "Number"
    %%
    %assign idNum = ["", %<sigIdx>]
    %%
  %else
    %assign errTxt = "The last input argument '%<sigIdx>' is of type " ...
      "'%<idxType>', expecting an argument of type \"Number\" or " ...
      "\"String\". "
    %<LibReportError(errTxt)>
    %%
    %assign idNum = "error"
  %endif
  %%
  %return idNum
  %%
%endfunction %% SLibGetReimAndIdx


%endif %% _SUTILLIB_

%% [EOF] sutillib.tlc
