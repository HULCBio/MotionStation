%%
%% $Revision: 1.1.6.14 $
%%
%%
%% Copyright 1994-2004 The MathWorks, Inc.
%%
%% Abstract:
%%      Library to initialize the fields of the root rtModel records object
%%

%if EXISTS("_RTMDLDEFS_") == 0
%assign _RTMDLDEFS_ = 1
%% Function: SLibInitRTMdlRecs =================================================
%% Abstract:
%%   Create and initialize the fields of the root rtModel record.
%%   This function is responsible for creating two basic types of records:
%%    - records that help in the creation of data fields in the rtModel.
%%    - records that help perform simple inline operations on certain rtModel
%%      fields
%%
%function SLibInitRTMdlRecs() void
  %%
  %% Create an empty root record
  %%
  %assign created = RTMCreateRTModelRecShell()

  %if !created
    %return
  %endif

  %%
  %% Initialize field values that help readability
  %%
  %assign NO_PARENT        = ""

  %assign CONST_QUALIFIER  = "CONST"
  %assign NO_QUALIFIER     = ""

  %assign NO_GET_FCN       = ""
  %assign NO_SET_FCN       = ""
  %assign NO_IS_FCN        = ""

  %% These values are used to determine if a special access
  %% macro needs the rtModel passed in.  For model reference
  %% with global timing engine, some macros do not use
  %% the rtModel.  The value of 1 means that only the RTW
  %% model reference target does not need the rtModel arg.
  %assign HAS_RTM_ARG = 2
  %assign NO_RTM_ARG_FOR_RTWMR = 1
  %assign NO_RTM_ARG_FOR_MR = 0
  
  %assign ERT_MACRO_NONE            = [0, 0, 0, 0]
  %assign ERT_MACRO_PUB_SET_PUB_GET = [1, 1, 0, 0]
  %assign ERT_MACRO_NO_SET_PUB_GET  = [0, 1, 0, 0]
  %assign ERT_MACRO_PRV_IS          = [0, 0, 2, 0]
  %assign ERT_MACRO_PUB_IS          = [0, 0, 1, 0]
  %assign ERT_MACRO_PRV_OTHER       = [0, 0, 0, 2]
  %assign ERT_MACRO_PUB_OTHER       = [0, 0, 0, 1]
  %assign ERT_MACRO_PRV_SET_PUB_GET = [2, 1, 0, 0]
  %assign ERT_MACRO_PRV_SET_PRV_GET = [2, 2, 0, 0]
  %assign ERT_MACRO_NO_SET_PRV_GET  = [0, 2, 0, 0]
  %assign ERT_MACRO_PRV_SET_PRV_IS  = [2, 0, 2, 0]
  %assign FORCE_NO_MACRO            = [-1, -1, -1, -1]  

  %if (CompiledModel.Solver == "ode14x")
    %assign solverODE14X = TLC_TRUE
  %else
    %assign solverODE14X = TLC_FALSE
    %assign solverOrder = IDNUM(CompiledModel.Solver)[1]
    %% ode5 requires 6 outputs
    %if (solverOrder == 5)
     %assign solverOrder = solverOrder + 1
    %endif
  %endif

  %%===========================================================================
  %% Register the data records of the rtModel
  %%============================================================================

  %%
  %% Initialize records belonging at the root level
  %%
  %<RTMAddRecPntr(...
    "Path", ...
    "path", ...
    NO_PARENT, ...
    "CHAR", ...
    CONST_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMVanillaIsReqFcn()")>

  %<RTMAddRecPntr(...
    "ModelName",  ...
    "modelName",  ...
    NO_PARENT, ...
    "CHAR", ...
    CONST_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMVanillaIsReqFcn()")>

  %<RTMAddRecPntr(...
    "SFunctions", ...
    "childSfunctions", ...
    NO_PARENT, ...
    "SIMSTRUCT_PTR", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMChildSfunctionIsReqFcn()")>

  %if IsModelReferenceForASimstructBasedTarget()

    %<RTMAddRecPntr(...
      "MdlRefSfcnS", ...
      tMdlRefSfcnS, ...
      NO_PARENT, ...
      "SIMSTRUCT", ...
      NO_QUALIFIER, ...
      ERT_MACRO_NONE, ...
      "RTMAlwaysReqIsReqFcn()")>

  %endif

  %if IsModelReferenceTarget()
    %if !IsSimstructBasedTarget()
      %<RTMAddRecPntrPntr(...
	"ErrorStatusFlag", ...
	"errorStatus", ...
	NO_PARENT, ...
	"CHAR", ...
	CONST_QUALIFIER, ...
	ERT_MACRO_NONE, ...
	"RTMErrorStatusIsReqFcn()")>
    %endif
  %else
    %<RTMAddRecPntr(...
      "ErrorStatusFlag", ...
      "errorStatus", ...
      NO_PARENT, ...
      "CHAR", ...
      CONST_QUALIFIER, ...
      ERT_MACRO_NONE, ...
      "RTMErrorStatusIsReqFcn()")>
  %endif

  %<RTMAddRecSclr(...
    "SimMode", ...
    "simMode", ...
    NO_PARENT, ...
    "SS_SIMMODE", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMChildSfunctionIsReqFcn()")> 

  %if GenerateGRTWrapper
    %<RTMAddRecPntr(...
      "RTWLogInfo", ...
      "rtwLogInfo", ...
      NO_PARENT, ...
      "RTW_LOG_INFO", ...
      NO_QUALIFIER, ...
      ERT_MACRO_NO_SET_PUB_GET, ...
      "RTMLogInfoIsReqFcn()")>
  %else
    %<RTMAddRecPntr(...
    "RTWLogInfo", ...
    "rtwLogInfo", ...
    NO_PARENT, ...
    "RTW_LOG_INFO", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMLogInfoIsReqFcn()")>
  %endif

  %<RTMAddRecPntr(...
    "RTWExtModeInfo", ...
    "extModeInfo", ...
    NO_PARENT, ...
    "EXT_MODE_INFO", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMExtModeInfoIsReqFcn()")>

  %<RTMAddRecSclr(...
    "RTWRTModelMethodsInfo", ...
    "modelMethodsInfo", ...
    NO_PARENT, ...
    "MODEL_METHODS_INFO", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMMdlMthIsReqFcn()")>

  %% Currently only ERT places RTWSolverInfo instance into RTModel
  %% Additionally, if there are non-inlined s-functions, a pointer
  %% to the solver info is created so the s-function can access the solver info
  %if CodeFormat == "Embedded-C"
    %if IsModelReferenceRTWTarget()
      %<RTMAddRecPntr(...
        "RTWSolverInfo", ...
        "solverInfo", ...
        NO_PARENT, ...
        "SOLVER_INFO", ...
        NO_QUALIFIER, ...
        ERT_MACRO_NONE, ...
        "RTMContTimeErtOnlyIsReqFcn() || RTMChildSfunctionIsReqFcn() || GenerateGRTWrapper")>
    %else
      %<RTMAddRecSclr(...
        "RTWSolverInfo", ...
        "solverInfo", ...
        NO_PARENT, ...
        "SOLVER_INFO", ...
        NO_QUALIFIER, ...
        ERT_MACRO_NONE, ...
        "RTMContTimeErtOnlyIsReqFcn() || RTMChildSfunctionIsReqFcn() || GenerateGRTWrapper")>
    %endif
    %<RTMAddRecPntr(...
      "RTWSolverInfoPtr", ...
      "solverInfoPtr", ...
      NO_PARENT, ...
      "SOLVER_INFO", ...
      NO_QUALIFIER, ...
      ERT_MACRO_NONE, ...
      "RTMChildSfunctionIsReqFcn()")>
  %else
  %% All other formats place pointer to RTWSolverInfo into RTModel
  %<RTMAddRecPntr(...
    "RTWSolverInfo", ...
    "solverInfo", ...
    NO_PARENT, ...
    "SOLVER_INFO", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMVanillaIsReqFcn()")>
  %endif

  %<RTMAddRecPntr(...
    "RTWSfcnInfo", ...
    "sfcnInfo", ...
    NO_PARENT, ...
    "VOID", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMChildSfunctionIsReqFcn()")> 
  
  %if CodeFormat == "Embedded-C"
  %<RTMAddRecSclr(...
    "NonInlinedSFcns", ...
    "NonInlinedSFcns", ...
    NO_PARENT, ...
    "NONINLINED_SFCS", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMNonInlinedSFcnsIsReqFcn()")>
  %endif

  %%
  %% Initialize records belonging in "Sizes"
  %%
  %<RTMAddRecArry(...
    "Checksums", ...
    "checksums", ...
    "Sizes", ...
    "UINT32", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    [4], ...
    "RTMExtModeInfoIsReqFcn()")>

  %<RTMAddRecSclr(...
    "Options", ...
    "options", ...
    "Sizes", ...
    "UINT32", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMChildSfunctionIsReqFcn()")>

  %<RTMAddRecSclr(...
    "NumContStates", ...
    "numContStates", ...
    "Sizes", ...
    "INT", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMContStateErtNoMdlRefIsReqFcn() || RTMChildSfunctionIsReqFcn()")>

  %<RTMAddRecSclr(...
    "NumU",...
    "numU",...
    "Sizes", ...
    "INT", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMChildSfunctionIsReqFcn()")>

  %<RTMAddRecSclr(...
    "NumY", ...
    "numY", ...
    "Sizes", ...
    "INT", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMChildSfunctionIsReqFcn()")>

  %<RTMAddRecSclr(...
    "NumSampleTimes", ...
    "numSampTimes", ...
    "Sizes", ...
    "INT", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMNumSampleTimesReqFcn()")>

  %<RTMAddRecSclr(...
    "NumBlocks", ...
    "numBlocks", ...
    "Sizes", ...
    "INT", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMChildSfunctionIsReqFcn()")>

  %<RTMAddRecSclr(...
    "NumBlockIO", ...
    "numBlockIO", ...
    "Sizes", ...
    "INT", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMChildSfunctionIsReqFcn()")>

  %<RTMAddRecSclr(...
    "NumBlockParams", ...
    "numBlockPrms", ...
    "Sizes", ...
    "INT", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMChildSfunctionIsReqFcn()")>

  %<RTMAddRecSclr(...
    "NumDWork", ...
    "numDwork", ...
    "Sizes", ...
    "INT", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMChildSfunctionIsReqFcn()")>

  %<RTMAddRecSclr(...
    "NumSFcnParams", ...
    "numSFcnPrms", ...
    "Sizes", ...
    "INT", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMChildSfunctionIsReqFcn()")>

  %<RTMAddRecSclr(...
    "NumSFunctions", ...
    "numSFcns", ...
    "Sizes", ...
    "INT", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMChildSfunctionIsReqFcn()")>

  %<RTMAddRecSclr(...
    "NumInputPorts", ...
    "numIports", ...
    "Sizes", ...
    "INT", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMChildSfunctionIsReqFcn()")>

  %<RTMAddRecSclr(...
    "NumOutputPorts", ...
    "numOports", ...
    "Sizes", ...
    "INT", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMChildSfunctionIsReqFcn()")>

  %<RTMAddRecSclr(...
    "NumNonSampledZCs", ...
    "numNonSampZCs", ...
    "Sizes", ...
    "INT", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMChildSfunctionIsReqFcn()")>

  %<RTMAddRecSclr(...
    "DirectFeedThrough", ...
    "sysDirFeedThru", ...
    "Sizes", ...
    "INT", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMChildSfunctionIsReqFcn()")>

  %<RTMAddRecSclr(...
    "RTWGeneratedSFcn", ...
    "rtwGenSfcn", ...
    "Sizes", ...
    "INT", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMChildSfunctionIsReqFcn()")>

  %%
  %% Initialize records belonging to "Timing"
  %%
    
  %<RTMAddRecSclr(...
    "StepSize", ...
    "stepSize", ...
    "Timing", ...
    "TIME", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NO_SET_PUB_GET, ...
    "RTMStepSizeIsReqFcn() || RTMChildSfunctionIsReqFcn()")>

  %foreach idx = CompiledModel.NumSampleTimes
    %with CompiledModel
      %assign dtId  = SampleTime[idx].ClockTickDataTypeId
      %assign dType = DataTypes.DataType[dtId].DTName
    %endwith
    %% clockTick0 must be UINT32 because it may be used by
    %% MatFileLogging.
    %if (idx == 0 && MatFileLogging) || ...
      dType == "timer_uint32_pair"
      %assign dType = "UINT32"
    %endif
    
    %if !::ModelReferenceTargetWithGlobalTiming

      %if idx == 0 && IsModelReferenceRTWTarget() && LibIsContinuous(0)
	%<RTMAddRecPntr(...
	  "TaskTimePointer%<idx>", ...
	  "taskTime%<idx>", ...
	  "Timing", ...
	  "TIME", ...
	  NO_QUALIFIER, ...
	  ERT_MACRO_NONE, ...
	  "RTMTaskTimeIsReqFcnForTID(%<idx>)")>
      %else
        %<RTMAddRecSclr(...
          "TaskTime%<idx>", ...
          "taskTime%<idx>", ...
          "Timing", ...
          "TIME", ...
          NO_QUALIFIER, ...
          FORCE_NO_MACRO, ...
          "RTMTaskTimeIsReqFcnForTID(%<idx>)")>
      %endif
    
      %<RTMAddRecSclr(...
	"ClockTick%<idx>", ...
	"clockTick%<idx>", ...
	"Timing", ...
	"%<dType>", ...
	NO_QUALIFIER, ...
	FORCE_NO_MACRO, ...
	"RTMClockTickForTIDIsReqFcn(%<idx>)")>

      %<RTMAddRecSclr(...
        "ClockTickH%<idx>", ...
        "clockTickH%<idx>", ...
        "Timing", ...
        "UINT32", ...
        NO_QUALIFIER, ...
        FORCE_NO_MACRO, ...
        "RTMLongClockTickForTIDIsReqFcn(%<idx>)")>

    %endif
      
    %<RTMAddRecSclr(...
      "StepSize%<idx>", ...
      "stepSize%<idx>", ...
      "Timing", ...
      "TIME", ...
      NO_QUALIFIER, ...
      FORCE_NO_MACRO, ...
      "RTMStepSizeForTIDIsReqFcn(%<idx>)")>

    %if !::ModelReferenceTargetWithGlobalTiming

      %<RTMAddRecSclr(...
	"TimerBufSemaphoreIsTaken%<idx>", ...
	"timeBufSemaphoreIsTaken%<idx>", ...
	"Timing", ...
	"BOOLEAN", ...
	NO_QUALIFIER, ...
	FORCE_NO_MACRO, ...
	"RTMTimerBufSemaphoreForTIDIsReqFcn(%<idx>)")>
      
      %if idx == 0
	%<RTMAddRecSclr(...
	  "BufClockTick0", ...
	  "bufClockTick0", ...
	  "Timing", ...
	  "%<dType>", ...
	  NO_QUALIFIER, ...
	  FORCE_NO_MACRO, ...
	  "RTMBufClockTick0IsReqFcn()")>

	%<RTMAddRecSclr(...
	  "BufClockTick0H", ...
	  "bufClockTick0H", ...
	  "Timing", ...
	  "UINT32", ...
	  NO_QUALIFIER, ...
	  FORCE_NO_MACRO, ...
	  "RTMBufLongClockTick0IsReqFcn()")>
	
	%<RTMAddRecSclr(...
	  "BufContT", ...
	  "BufContT", ...
	  "Timing", ...
	  "DOUBLE", ...
	  NO_QUALIFIER, ...
	  FORCE_NO_MACRO, ...
	  "RTMBufContTIsReqFcn()")>
	
	%<RTMAddRecArry(...
	  "DoubleBufClockTick0", ...
	  "doubleBufClockTick0", ...
	  "Timing", ...
	  "%<dType>", ...
	  NO_QUALIFIER, ...
	  FORCE_NO_MACRO, ...
	  [2], ...
	  "RTMDoubleBufClockTick0IsReqFcn()")>

	%<RTMAddRecArry(...
	  "DoubleBufClockTick0H", ...
	  "doubleBufClockTick0H", ...
	  "Timing", ...
	  "%<dType>", ...
	  NO_QUALIFIER, ...
	  FORCE_NO_MACRO, ...
	  [2], ...
	  "RTMDoubleBufLongClockTick0IsReqFcn()")>
	
	%<RTMAddRecSclr(...
	  "DoubleBufContT", ...
	  "DoubleBufContT", ...
	  "Timing", ...
	  "DOUBLE", ...
	  NO_QUALIFIER, ...
	  FORCE_NO_MACRO, ...
	  "RTMDoubleBufContTIsReqFcn()")>

	%<RTMAddRecSclr(...
	  "ActiveBufForClockTick0", ...
	  "activBufForClockTick0", ...
	  "Timing", ...
	  "BOOLEAN", ...
	  NO_QUALIFIER, ...
	  FORCE_NO_MACRO, ...
	  "RTMDoubleBufClockTick0IsReqFcn()")>
      %endif
    %endif
  %endforeach
    
      
  %<RTMAddRecSclr(...
    "FirstInitCondFlag", ...
    "firstInitCondFlag", ...
    "Timing", ...
    "BOOLEAN", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMFirstInitCondFlagIsReqFcn()")>

  %<RTMAddRecSclr(...
    "TaskCounters", ...
    "TaskCounters", ...
    "Timing", ...
    "TASK_COUNTERS", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMTaskCountersIsReqFcn()")>
  
  %<RTMAddRecSclr(...
    "PerTaskSampleHits", ...
    "RateInteraction", ...
    "Timing", ...
    "RATE_INTERACTION", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMERTPerTaskSampleHitsIsReqFcn()")>

  %<RTMAddRecSclr(...
    "StartTime", ...
    "tStart", ...
    "Timing", ...
    "TIME", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMChildSfunctionIsReqFcn()")>

  %<RTMAddRecSclr(...
    "FinalTime", ...
    "tFinal", ...
    "Timing", ...
    "TIME", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NO_SET_PUB_GET, ...
    "RTMTFinalIsReqFcn()")>

  %<RTMAddRecSclr(...
    "_TimeOfLastOutput", ...
    "timeOfLastOutput", ...
    "Timing", ...
    "TIME", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMChildSfunctionIsReqFcn()")>

  %<RTMAddRecPntr(...
    "TimingData", ...
    "timingData", ...
    "Timing", ...
    "VOID", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMVanillaIsReqFcn() || GenerateGRTWrapper")>

  %<RTMAddRecPntr(...
    "VarNextHitTimesListPtr", ...
    "varNextHitTimesList", ...
    "Timing", ...
    "REAL", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMVanillaIsReqFcn()")>

  %if IsModelReferenceRTWTarget()
    %<RTMAddRecPntr(...
      "SimTimeStepPtr", ...
      "simTimeStep", ...
      "Timing", ...
      "SIM_TIME_STEP", ...
      NO_QUALIFIER, ...
      ERT_MACRO_NONE, ...
      "RTMContTimeErtIsReqFcn()")>
  %else
    %<RTMAddRecSclr(...
      "SimTimeStep", ...
      "simTimeStep", ...
      "Timing", ...
      "SIM_TIME_STEP", ...
      NO_QUALIFIER, ...
      ERT_MACRO_NONE, ...
      "RTMContTimeErtIsReqFcn() || GenerateGRTWrapper")>
  %endif
  
  %if IsModelReferenceTarget()
    %if !IsSimstructBasedTarget()
      %% For model reference RTW target it is a boolean_T *
      %<RTMAddRecPntr(...
	"StopRequestedFlag", ...
	"stopRequestedFlag", ...
	"Timing", ...
	"BOOLEAN", ...
	NO_QUALIFIER, ...
	ERT_MACRO_NONE, ...
	"RTMMdlStopReqIsReqFcn()")>
    %endif
  %else
    %% For standalone model, it is boolean_T
    %<RTMAddRecSclr(...
      "StopRequestedFlag", ...
      "stopRequestedFlag", ...
      "Timing", ...
      "BOOLEAN", ...
      NO_QUALIFIER, ...
      ERT_MACRO_NONE, ...
      "RTMMdlStopReqIsReqFcn()")>
  %endif

  %<RTMAddRecPntr(...
    "SampleTimePtr", ...
    "sampleTimes", ...
    "Timing", ...
    "TIME", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMVanillaIsReqFcn() || RTMChildSfunctionIsReqFcn()")>
  
  %<RTMAddRecPntr(...
    "OffsetTimePtr", ...
    "offsetTimes", ...
    "Timing", ...
    "TIME", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMVanillaIsReqFcn() || RTMChildSfunctionIsReqFcn()")>
  
  %<RTMAddRecPntr(...
    "SampleTimeTaskIDPtr", ...
    "sampleTimeTaskIDPtr", ...
    "Timing", ...
    "INT", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMVanillaIsReqFcn() || RTMChildSfunctionIsReqFcn()")>
  %if GenerateGRTWrapper
    %<RTMAddRecPntr(...
      "SampleHitPtr", ...
      "sampleHits", ...
      "Timing", ...
      "INT", ...
      NO_QUALIFIER, ...
      ERT_MACRO_NO_SET_PUB_GET, ...
      "TLC_TRUE")>  
  %else
    %<RTMAddRecPntr(...
      "SampleHitPtr", ...
      "sampleHits", ...
      "Timing", ...
      "INT", ...
      NO_QUALIFIER, ...
      ERT_MACRO_NONE, ...
      "RTMChildSfunctionIsReqFcn()")>  
  %endif
  
  %<RTMAddRecPntr(...
    "PerTaskSampleHitsPtr", ...
    "perTaskSampleHits", ...
    "Timing", ...
    "INT", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMChildSfunctionIsReqFcn()")>
    
  %<RTMAddRecPntr(...
    "TimePtr", ...
    "t", ...
    "Timing", ...
    "TIME", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMTimePtrIsReqFcn()")>
  %if CodeFormat == "Embedded-C"
    %with CompiledModel
      %<RTMAddRecArry(...
      "SampleTimeArray", ...
      "sampleTimesArray", ...
      "Timing", ...
      "TIME", ...
      NO_QUALIFIER, ...
      ERT_MACRO_NONE, ...
      ["%<NumSynchronousSampleTimes>"], ...
      "RTMVanillaIsReqFcn() || RTMChildSfunctionIsReqFcn()")>
    
    %<RTMAddRecArry(...
      "OffsetTimeArray", ...
      "offsetTimesArray", ...
      "Timing", ...
      "TIME", ...
      NO_QUALIFIER, ...
      ERT_MACRO_NONE, ...
      ["%<NumSynchronousSampleTimes>"], ...
      "RTMVanillaIsReqFcn() || RTMChildSfunctionIsReqFcn()")>
    
    %<RTMAddRecArry(...
      "SampleTimeTaskIDArray", ...
      "sampleTimeTaskIDArray", ...
      "Timing", ...
      "INT", ...
      NO_QUALIFIER, ...
      ERT_MACRO_NONE, ...
      ["%<NumSynchronousSampleTimes>"], ...
      "RTMVanillaIsReqFcn() || RTMChildSfunctionIsReqFcn()")>
    
    %<RTMAddRecArry(...
      "SampleHitArray", ...
      "sampleHitArray", ...
      "Timing", ...
      "INT", ...
      NO_QUALIFIER, ...
      ERT_MACRO_NO_SET_PUB_GET, ...
      ["%<NumSynchronousSampleTimes>"], ...
      "GenerateGRTWrapper || RTMChildSfunctionIsReqFcn()")>  
    
    %<RTMAddRecArry(...
      "PerTaskSampleHitsArray", ...
      "perTaskSampleHitsArray", ...
      "Timing", ...
      "INT", ...
      NO_QUALIFIER, ...
      ERT_MACRO_NONE, ...
      ["%<NumSynchronousSampleTimes * NumSynchronousSampleTimes>"], ...
      "RTMChildSfunctionIsReqFcn()")>
    
    %<RTMAddRecArry(...
      "TaskTimeArray", ...
      "tArray", ...
      "Timing", ...
      "TIME", ...
      NO_QUALIFIER, ...
      ERT_MACRO_NONE, ...
      ["%<NumSynchronousSampleTimes>"], ...
      "RTMTimePtrIsReqFcn()")>
    %endwith
  %endif

  %%
  %% Initialize records belonging in "ModelData"
  %%
  %<RTMAddRecPntr(...
    "BlockIO", ...
    "blockIO", ...
    "ModelData", ...
    "VOID", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMVanillaIsReqFcn()")>

  %<RTMAddRecPntr(...
    "ConstBlockIO", ...
    "constBlockIO", ...
    "ModelData", ...
    "VOID", ...
    CONST_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMVanillaIsReqFcn()")>

  %<RTMAddRecPntr(...
    "DefaultParam", ...
    "defaultParam", ...
    "ModelData", ...
    "REAL", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMVanillaIsReqFcn()")>

  %<RTMAddRecPntr(...
    "PrevZCSigState", ...
    "prevZCSigState", ...
    "ModelData", ...
    "ZC_SIG_STATE", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMVanillaIsReqFcn()")>

  %<RTMAddRecPntr(...
    "ContStates", ...
    "contStates", ...
    "ModelData", ...
    "REAL", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMContStateErtNoMdlRefIsReqFcn()")>

  %<RTMAddRecPntr(...
    "DiscStates", ...
    "discStates", ...
    "ModelData", ...
    "REAL", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMVanillaIsReqFcn()")>

  %<RTMAddRecPntr(...
    "dX", ...
    "derivs", ...
    "ModelData", ...
    "REAL", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMContStateErtNoMdlRefIsReqFcn()")>

  %<RTMAddRecPntr(...
    "NonsampledZCs", ...
    "nonsampledZCs", ...
    "ModelData", ...
    "REAL", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMVanillaIsReqFcn()")>

  %<RTMAddRecPntr(...
    "U", ...
    "inputs", ...
    "ModelData", ...
    "VOID", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMVanillaIsReqFcn()")>

  %<RTMAddRecPntr(...
    "Y", ...
    "outputs", ...
    "ModelData", ...
    "VOID", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMVanillaIsReqFcn()")>

  %<RTMAddRecPntr(...
    "ContStateDisabled", ...
    "contStateDisabled", ...
    "ModelData", ...
    "BOOLEAN", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMContStateErtNoMdlRefIsReqFcn()")>

  %<RTMAddRecSclr(...
    "ZCCacheNeedsReset", ...
    "zCCacheNeedsReset", ...
    "ModelData", ...
    "BOOLEAN", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMContStateErtNoMdlRefIsReqFcn() || RTMChildSfunctionIsReqFcn()")>

  %<RTMAddRecSclr(...
    "DerivCacheNeedsReset", ...
    "derivCacheNeedsReset", ...
    "ModelData", ...
    "BOOLEAN", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMContStateErtNoMdlRefIsReqFcn() || RTMChildSfunctionIsReqFcn()")>

  %<RTMAddRecSclr(...
    "BlkStateChangeFlag", ...
    "blkStateChange", ...
    "ModelData", ...
    "BOOLEAN", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMContStateErtNoMdlRefIsReqFcn() || RTMChildSfunctionIsReqFcn()")>

  %if solverODE14X

    %% special memory requirement for ODE14x

    %<RTMAddRecArry(...
      "OdeX0", ...
      "odeX0", ...
      "ModelData", ...
      "REAL", ...
      NO_QUALIFIER, ...
      ERT_MACRO_NONE, ...
      ["%<CompiledModel.NumContStates>"], ...
      "RTMContainerErtIsReqFcn()")>

    %<RTMAddRecArry(...
      "OdeF0", ...
      "odeF0", ...
      "ModelData", ...
      "REAL", ...
      NO_QUALIFIER, ...
      ERT_MACRO_NONE, ...
      ["%<CompiledModel.NumContStates>"], ...
      "RTMContainerErtIsReqFcn()")>

    %<RTMAddRecArry(...
      "OdeX1START", ...
      "odeX1START", ...
      "ModelData", ...
      "REAL", ...
      NO_QUALIFIER, ...
      ERT_MACRO_NONE, ...
      ["%<CompiledModel.NumContStates>"], ...
      "RTMContainerErtIsReqFcn()")>

    %<RTMAddRecArry(...
      "OdeF1", ...
      "odeF1", ...
      "ModelData", ...
      "REAL", ...
      NO_QUALIFIER, ...
      ERT_MACRO_NONE, ...
      ["%<CompiledModel.NumContStates>"], ...
      "RTMContainerErtIsReqFcn()")>

    %<RTMAddRecArry(...
      "OdeDELTA", ...
      "odeDELTA", ...
      "ModelData", ...
      "REAL", ...
      NO_QUALIFIER, ...
      ERT_MACRO_NONE, ...
      ["%<CompiledModel.NumContStates>"], ...
      "RTMContainerErtIsReqFcn()")>

    %<RTMAddRecArry(...
      "OdeE", ...
      "odeE", ...
      "ModelData", ...
      "REAL", ...
      NO_QUALIFIER, ...
      ERT_MACRO_NONE, ...
      ["4*%<CompiledModel.NumContStates>"], ...
      "RTMContainerErtIsReqFcn()")>

    %<RTMAddRecArry(...
      "OdeFAC", ...
      "odeFAC", ...
      "ModelData", ...
      "REAL", ...
      NO_QUALIFIER, ...
      ERT_MACRO_NONE, ...
      ["%<CompiledModel.NumContStates>"], ...
      "RTMContainerErtIsReqFcn()")>

    %<RTMAddRecArry(...
      "OdeDFDX", ...
      "odeDFDX", ...
      "ModelData", ...
      "REAL", ...
      NO_QUALIFIER, ...
      ERT_MACRO_NONE, ...
      ["%<CompiledModel.NumContStates>*%<CompiledModel.NumContStates>"], ...
      "RTMContainerErtIsReqFcn()")>

    %<RTMAddRecArry(...
      "OdeW", ...
      "odeW", ...
      "ModelData", ...
      "REAL", ...
      NO_QUALIFIER, ...
      ERT_MACRO_NONE, ...
      ["%<CompiledModel.NumContStates>*%<CompiledModel.NumContStates>"], ...
      "RTMContainerErtIsReqFcn()")>

     %<RTMAddRecArry(...
      "OdePIVOTS", ...
      "odePIVOTS", ...
      "ModelData", ...
      "INT", ...
      NO_QUALIFIER, ...
      ERT_MACRO_NONE, ...
      ["%<CompiledModel.NumContStates>"], ...
      "RTMContainerErtIsReqFcn()")>

  %else

    %<RTMAddRecArry(...
      "OdeY", ...
      "odeY", ...
      "ModelData", ...
      "REAL", ...
      NO_QUALIFIER, ...
      ERT_MACRO_NONE, ...
      ["%<CompiledModel.NumContStates>"], ...
      "RTMSolverYIsReqFcn()")>

    %<RTMAddRecArry(...
      "OdeF", ...
      "odeF", ...
      "ModelData", ...
      "REAL", ...
      NO_QUALIFIER, ...
      ERT_MACRO_NONE, ...
      ["%<solverOrder>", "%<CompiledModel.NumContStates>"], ...
      "RTMContainerErtIsReqFcn()")>

  %endif

  %<RTMAddRecSclr(...
    "IntgData", ...
    "intgData", ...
    "ModelData", ...
    "INTG", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMContainerErtIsReqFcn()")>

  %%
  %% Initialize records belonging in "Work"
  %%
  %<RTMAddRecPntr(...
    "RootDWork", ...
    "dwork", ...
    "Work", ...
    "DWORK", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMVanillaIsReqFcn()")>

  %%
  %% Initialize records belonging in "SpecialInfo"
  %%
  %<RTMAddRecPntr(...
    "ModelMappingInfo", ...
    "mappingInfo", ...
    "SpecialInfo", ...
    "VOID", ...
    CONST_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMMappingInfoIsReqFcn()")>

  %<RTMAddRecPntr(...
    "ReservedForXPC", ...
    "xpcData", ...
    "SpecialInfo", ...
    "VOID", ...
    NO_QUALIFIER, ...
    ERT_MACRO_NONE, ...
    "RTMVanillaIsReqFcn()")>

  %%
  %% Initialize records belonging in DataMapInfo
  %%
  %<RTMAddRecSclr(...
    "DataMapInfo", ...
    "DataMapInfo", ...
    "", ...
    "DATA_MAP_INFO", ...
    NO_QUALIFIER, ...
    ERT_MACRO_PUB_SET_PUB_GET, ...
    "RTMDataMapInfoIsReqFcn()")>

  %%
  %% Initialize dummy records for backwards compat
  %%
  %<RTMAddRecDummy("MdlInfoPtr")>
  %<RTMAddRecDummy("RootSS")>
  %<RTMAddRecDummy("Version")>

  %%===========================================================================
  %% Register the fields that help setup simple inline accesses to data
  %% fields in the rtModel
  %%============================================================================

  %%
  %% The first set of records that help setup inline accesses to rtModel fields
  %% are geared towards simple indexing operations. For instance, in the days
  %% of the SimStruct, we would have done ssGetSampleTime(S, 4) to get the
  %% fourth sample time. To support the same functionality, we set up a
  %% rtModel rrcord of type "IndexedAccess" that helps perform the same
  %% function. The record is given information on the data field of the
  %% rtModel that it is supposed to index. Then we we see the library
  %% call "RTMSetIdxed("SampleTime", "4")", we will automatically generated
  %% "rtM->SampleTime.sampleTimes[4]"
  %%
  %<RTMAddRecIdxedAccs(...
    "SFunction", ...
    "SFunctions")>

  %<RTMAddRecIdxedAccs(...
    "VarNextHitTime", ...
    "VarNextHitTimesListPtr")>

  %<RTMAddRecIdxedAccs(...
    "SampleTime", ...
    "SampleTimePtr")>

  %<RTMAddRecIdxedAccs(...
    "OffsetTime", ...
    "OffsetTimePtr")>

  %<RTMAddRecIdxedAccs(...
    "SampleTimeTaskID", ...
    "SampleTimeTaskIDPtr")>

  %<RTMAddRecIdxedAccs(...
    "DWork", ...
    "RootDWork")>

  %<RTMAddRecIdxedAccs(...
    "ChecksumVal", ...
    "Checksums")>

  %%
  %% The second set of records helps create accesses to the rtModel
  %% through special macros. For instance, in the TLC code, we would
  %% see %<RTMIsSampleHit(sti,tid)>. In the generated code, this
  %% appears as "rtmIsSampleHit(rtM, sti, tid)". The records listed
  %% below help capture the generation of such accesses and their
  %% associated macros.
  %%
  %% Each record contains the following information
  %% - Name by which users will request the access in TLC code
  %%   E.g. A record with the name "SampleHit"
  %% - The TLC function that will be called to generate the
  %%   body of the macro "rtmGet%<recName>(rtM)".
  %% - The TLC function that will be called to generate the
  %%   body of the macro "rtmSet%<recName>(rtM,sVal)".
  %% - The TLC function that will be called to generate the
  %%   body of the macro "rtmIs%<recName>(rtM)".
  %% - The additional args besides rtM that are used by the
  %%   macro "rtmIs%<recName>". E.g. rtmIsSampleHit takes two
  %%   additional args - sti, tid.
  %% - Where the macros should be generated for ERT. ERT allows
  %%   macros to be generated in the public/private header file.
  %% 

  %assign NO_ARG_FOR_SET  = TLC_FALSE
  %assign ARG_FOR_SET     = TLC_TRUE
  %assign NO_OTHER_FCN    = ""

  %<RTMAddRecSpecialAccs(...
    "T", ...
    "RTMSpecAccsGetT", ...
    "RTMSpecAccsSetT", ...
    NO_IS_FCN, ...
    NO_OTHER_FCN, ...
    ARG_FOR_SET, ...
    0, ...
    [], ...
    NO_RTM_ARG_FOR_RTWMR, ...
    ERT_MACRO_NO_SET_PUB_GET)>

  %<RTMAddRecSpecialAccs(...
    "TimeOfLastOutput", ...
    "RTMSpecAccsGetTimeOfLastOutput", ...
    "RTMSpecAccsSetTimeOfLastOutput", ...
    NO_IS_FCN, ...
    NO_OTHER_FCN, ...
    ARG_FOR_SET, ...
    0, ...
    [], ...
    HAS_RTM_ARG, ...
    ERT_MACRO_NO_SET_PUB_GET)>

  %<RTMAddRecSpecialAccs(...
    "TStart", ...
    "RTMSpecAccsGetTStart", ...
    "RTMSpecAccsSetTStart", ...
    NO_IS_FCN, ...
    NO_OTHER_FCN, ...
    ARG_FOR_SET, ...
    0, ...
    [], ...
    HAS_RTM_ARG, ...
    ERT_MACRO_NO_SET_PUB_GET)>
 
  %if GenerateGRTWrapper 
     %<RTMAddRecSpecialAccs(...
    "TFinal", ...
    "RTMSpecAccsGetTFinal", ...
    "RTMSpecAccsSetTFinal", ...
    NO_IS_FCN, ...
    NO_OTHER_FCN, ...
    ARG_FOR_SET, ...
    0, ...
    [], ...
    HAS_RTM_ARG, ...
    ERT_MACRO_PUB_SET_PUB_GET)>

    %<RTMAddRecSpecialAccs(...
    "TPtr", ...
    "RTMSpecAccsGetTPtr", ...
    "RTMSpecAccsSetTPtr", ...
    NO_IS_FCN, ...
    NO_OTHER_FCN, ...
    ARG_FOR_SET, ...
    0, ...
    [], ...
    NO_RTM_ARG_FOR_RTWMR, ...
    ERT_MACRO_PRV_SET_PUB_GET)>
  %else
    %<RTMAddRecSpecialAccs(...
    "TFinal", ...
    "RTMSpecAccsGetTFinal", ...
    "RTMSpecAccsSetTFinal", ...
    NO_IS_FCN, ...
    NO_OTHER_FCN, ...
    ARG_FOR_SET, ...
    0, ...
    [], ...
    HAS_RTM_ARG, ...
    ERT_MACRO_PRV_SET_PUB_GET)>

    %<RTMAddRecSpecialAccs(...
      "TPtr", ...
      "RTMSpecAccsGetTPtr", ...
      "RTMSpecAccsSetTPtr", ...
      NO_IS_FCN, ...
      NO_OTHER_FCN, ...
      ARG_FOR_SET, ...
      0, ...
      [], ...
      HAS_RTM_ARG, ...
      ERT_MACRO_PRV_SET_PRV_GET)>
  %endif
  
  %if IsModelReferenceTarget()
    %if !IsSimstructBasedTarget()
      %<RTMAddRecSpecialAccs(...
	"StopRequested", ...
	"RTMSpecAccsGetStopRequestedValStoredAsPtr", ...
	"RTMSpecAccsSetStopRequestedValStoredAsPtr", ...
	NO_IS_FCN, ...
	NO_OTHER_FCN, ...
	ARG_FOR_SET, ...
	0, ...
	[], ...
        HAS_RTM_ARG, ...
	ERT_MACRO_PUB_SET_PUB_GET)>

      %<RTMAddRecSpecialAccs(...
	"StopRequestedPtr", ...
	"RTMSpecAccsGetStopRequestedPtrStoredAsPtr", ...
	"RTMSpecAccsSetStopRequestedPtrStoredAsPtr", ...
	NO_IS_FCN, ...
	NO_OTHER_FCN, ...
	ARG_FOR_SET, ...
	0, ...
	[], ...
        HAS_RTM_ARG, ...
	ERT_MACRO_PUB_SET_PUB_GET)>
        
      %if LibIsContinuous(0) && !::ModelReferenceTargetWithGlobalTiming
        %<RTMAddRecSpecialAccs(...
          "TaskTime0", ...
          "RTMSpecAccsGetTaskTime0", ...
          "RTMSpecAccsSetTaskTime0", ...
          NO_IS_FCN, ...
          NO_OTHER_FCN, ...
          ARG_FOR_SET, ...
          0, ...
          [], ...
          HAS_RTM_ARG, ...
          ERT_MACRO_PUB_SET_PUB_GET)>
      %endif
    %endif
  %else
    %<RTMAddRecSpecialAccs(...
      "StopRequested", ...
      "RTMSpecAccsGetStopRequested", ...
      "RTMSpecAccsSetStopRequested", ...
      NO_IS_FCN, ...
      NO_OTHER_FCN, ...
      ARG_FOR_SET, ...
      0, ...
      [], ...
      HAS_RTM_ARG, ...
      ERT_MACRO_PUB_SET_PUB_GET)>

    %<RTMAddRecSpecialAccs(...
      "StopRequestedPtr", ...
      "RTMSpecAccsGetStopRequestedPtr", ...
      NO_SET_FCN, ...
      NO_IS_FCN, ...
      NO_OTHER_FCN, ...
      ARG_FOR_SET, ...
      0, ...
      [], ...
      HAS_RTM_ARG, ...
      ERT_MACRO_PUB_SET_PUB_GET)>

  %endif

  %if IsModelReferenceTarget()
    %if !IsSimstructBasedTarget()
      %<RTMAddRecSpecialAccs(...
	"ErrorStatus", ...
	"RTMSpecAccsGetErrorStatusPointer", ...
	"RTMSpecAccsSetErrorStatusPointer", ...
	NO_IS_FCN, ...
	NO_OTHER_FCN, ...
	ARG_FOR_SET, ...
	0, ...
	[], ...
        HAS_RTM_ARG, ...
	ERT_MACRO_PUB_SET_PUB_GET)>

      %<RTMAddRecSpecialAccs(...
	"ErrorStatusPointer", ...
	"RTMSpecAccsGetErrorStatusPointerPointer", ...
	"RTMSpecAccsSetErrorStatusPointerPointer", ...
	NO_IS_FCN, ...
	NO_OTHER_FCN, ...
	ARG_FOR_SET, ...
	0, ...
	[], ...
        HAS_RTM_ARG, ...
	ERT_MACRO_PUB_SET_PUB_GET)>
      
      %<RTMAddRecSpecialAccs(...
	"SimTimeStep", ...
	"RTMSpecAccsGetSimTimeStepPointer", ...
        NO_SET_FCN, ...
	NO_IS_FCN, ...
	NO_OTHER_FCN, ...
	ARG_FOR_SET, ...
	0, ...
	[], ...
        HAS_RTM_ARG, ...
	ERT_MACRO_PUB_SET_PUB_GET)>
      
      %<RTMAddRecSpecialAccs(...
	"SimTimeStepPointer", ...
	"RTMSpecAccsGetSimTimeStepPointerPointer", ...
	"RTMSpecAccsSetSimTimeStepPointerPointer", ...
	NO_IS_FCN, ...
	NO_OTHER_FCN, ...
	ARG_FOR_SET, ...
	0, ...
	[], ...
        HAS_RTM_ARG, ...
	ERT_MACRO_PUB_SET_PUB_GET)>
    %endif
  %else
    %<RTMAddRecSpecialAccs(...
      "ErrorStatus", ...
      "RTMSpecAccsGetErrorStatus", ...
      "RTMSpecAccsSetErrorStatus", ...
      NO_IS_FCN, ...
      NO_OTHER_FCN, ...
      ARG_FOR_SET, ...
      0, ...
      [], ...
      HAS_RTM_ARG, ...
      ERT_MACRO_PUB_SET_PUB_GET)>

    %<RTMAddRecSpecialAccs(...
      "ErrorStatusPointer", ...
      "RTMSpecAccsGetErrorStatusPointerPointer", ...
      NO_SET_FCN, ...
      NO_IS_FCN, ...
      NO_OTHER_FCN, ...
      ARG_FOR_SET, ...
      0, ...
      [], ...
      HAS_RTM_ARG, ...
      ERT_MACRO_PUB_SET_PUB_GET)>
  %endif

  %<RTMAddRecSpecialAccs(...
    "MajorTimeStep", ...
    NO_GET_FCN, ...
    NO_SET_FCN, ...
    "RTMSpecAccsIsMajorTimeStep", ...
    NO_OTHER_FCN, ...
    NO_ARG_FOR_SET, ...
    0, ...
    [], ...
    HAS_RTM_ARG, ...
    ERT_MACRO_PRV_IS)>

  %<RTMAddRecSpecialAccs(...
    "MinorTimeStep", ...
    NO_GET_FCN, ...
    NO_SET_FCN, ...
    "RTMSpecAccsIsMinorTimeStep", ...
    NO_OTHER_FCN, ...
    NO_ARG_FOR_SET, ...
    0, ...
    [], ...
    HAS_RTM_ARG, ...
    ERT_MACRO_PRV_IS)>

  %<RTMAddRecSpecialAccs(...
    "FirstInitCond", ...
    NO_GET_FCN, ...
    "RTMSpecAccsSetFirstInitCond", ...
    "RTMSpecAccsIsFirstInitCond", ...
    NO_OTHER_FCN, ...
    ARG_FOR_SET, ...
    0, ...
    [], ...
    HAS_RTM_ARG, ...
    ERT_MACRO_PRV_SET_PRV_IS)>

  %<RTMAddRecSpecialAccs(...
    "SampleHitInTask", ...
    NO_GET_FCN, ...
    "RTMSpecAccsSetSampleHitInTask", ...
    NO_IS_FCN, ...
    NO_OTHER_FCN, ...
    ARG_FOR_SET, ...
    2, ...
    ["tIdxj", "tIdxi"], ...
    HAS_RTM_ARG, ...
    ERT_MACRO_NONE)>

  %<RTMAddRecSpecialAccs(...
    "ContinuousTask", ...
    NO_GET_FCN, ...
    NO_SET_FCN, ...
    "RTMSpecAccsIsContinuousTask", ...
    NO_OTHER_FCN, ...
    NO_ARG_FOR_SET, ...
    1, ...
    ["tid"], ...
    HAS_RTM_ARG, ...
    ERT_MACRO_NONE)>

  %<RTMAddRecSpecialAccs(...
    "TaskTime", ...
    "RTMSpecAccsGetTaskTime", ...
    "RTMSpecAccsSetTaskTime", ...
    NO_IS_FCN, ...
    NO_OTHER_FCN, ...
    ARG_FOR_SET, ...
    1, ...
    ["sti"], ...
    NO_RTM_ARG_FOR_RTWMR, ...
    ERT_MACRO_NO_SET_PUB_GET)>

  %if GenerateGRTWrapper && ExtMode
  %<RTMAddRecSpecialAccs(...
    "SampleHit", ...
    NO_GET_FCN, ...
    NO_SET_FCN, ...
    "RTMSpecAccsIsSampleHit", ...
    NO_OTHER_FCN, ...
    NO_ARG_FOR_SET, ...
    2, ...
    ["sti", "tid"], ...
    HAS_RTM_ARG, ...
    ERT_MACRO_PUB_IS)>
  %else
  %<RTMAddRecSpecialAccs(...
    "SampleHit", ...
    NO_GET_FCN, ...
    NO_SET_FCN, ...
    "RTMSpecAccsIsSampleHit", ...
    NO_OTHER_FCN, ...
    NO_ARG_FOR_SET, ...
    2, ...
    ["sti", "tid"], ...
    NO_RTM_ARG_FOR_RTWMR, ...
    ERT_MACRO_PRV_IS)>
  %endif

  %<RTMAddRecSpecialAccs(...
    "SpecialSampleHit", ...
    NO_GET_FCN, ...
    NO_SET_FCN, ...
    "RTMSpecAccsIsSpecialSampleHit", ...
    NO_OTHER_FCN, ...
    NO_ARG_FOR_SET, ...
    3, ...
    ["sti", "prom_sti", "tid"], ...
    NO_RTM_ARG_FOR_RTWMR, ...
    ERT_MACRO_PRV_IS)>

  %<RTMAddRecSpecialAccs(...
    "UpdateSubrateTaskTime", ...
    NO_GET_FCN, ...
    NO_SET_FCN, ...
    NO_IS_FCN, ...
    "RTMSpecAccsUpdateSubrateTaskTime", ...
    NO_ARG_FOR_SET, ...
    1, ...
    ["tid"], ...
    HAS_RTM_ARG, ...
    ERT_MACRO_PRV_OTHER)>

  %<RTMAddRecSpecialAccs(...
    "UpdateRealAbsoluteTime", ...
    NO_GET_FCN, ...
    NO_SET_FCN, ...
    NO_IS_FCN, ...
    "RTMSpecAccsUpdateRealAbsoluteTime", ...
    NO_ARG_FOR_SET, ...
    0, ...
    [], ...
    HAS_RTM_ARG, ...
    ERT_MACRO_PRV_OTHER)>

  %<RTMAddRecSpecialAccs(...
    "UpdateIntegerAbsoluteTime", ...
    NO_GET_FCN, ...
    NO_SET_FCN, ...
    NO_IS_FCN, ...
    "RTMSpecAccsUpdateIntegerAbsoluteTime", ...
    NO_ARG_FOR_SET, ...
    0, ...
    [], ...
    HAS_RTM_ARG, ...
    ERT_MACRO_PRV_OTHER)>

   %<RTMAddRecSpecialAccs(...
    "StepTask", ...
    NO_GET_FCN, ...
    NO_SET_FCN, ...
    NO_IS_FCN, ...
    "RTMSpecAccsTaskRunsThisBaseStep", ...
    NO_ARG_FOR_SET, ...
    1, ...
    ["idx"], ...
    HAS_RTM_ARG, ...
    ERT_MACRO_PUB_OTHER)>

  %if ::ModelReferenceTargetWithGlobalTiming
    %foreach idx = CompiledModel.NumSampleTimes
      %<RTMAddRecSpecialAccs(...
	"ClockTick%<idx>", ...
	"RTMSpecAccsGetClockTick", ...
	NO_SET_FCN, ...
	NO_IS_FCN, ...
	NO_OTHER_FCN, ...
	NO_ARG_FOR_SET, ...
	0, ...
	[], ...
        NO_RTM_ARG_FOR_MR, ...
	ERT_MACRO_NO_SET_PUB_GET)>
      
      %<RTMAddRecSpecialAccs(...
        "ClockTickH%<idx>", ...
	"RTMSpecAccsGetClockTickH", ...
	NO_SET_FCN, ...
	NO_IS_FCN, ...
	NO_OTHER_FCN, ...
	NO_ARG_FOR_SET, ...
	0, ...
	[], ...
        NO_RTM_ARG_FOR_MR, ...
	ERT_MACRO_NO_SET_PUB_GET)>
    %endforeach
  %endif

%endfunction %% LibInitRTMdlRecs


%% Function: SLibGetRTMSubStructCommentStr =====================================
%% Abstract:
%%   Generate a comment for the given rtModel substructure.
%%
%function SLibGetRTMSubStructCommentStr(ssName) void
  %openfile tmpBuff
  %switch ssName
    %case "Sizes"
      * The following substructure contains sizes information
      * for many of the model attributes such as inputs, outputs,
      * dwork, sample times, etc.
      %break
    %case "ModelData"
      * The following substructure contains information regarding
      * the data used in the model.
      %break
    %case "Timing"
      * The following substructure contains information regarding
      * the timing information for the model.
      %break
    %case "Work"
      * The following substructure contains information regarding
      * the work vectors in the model.
      %break
    %case "SpecialInfo"
      * The following substructure contains special information
      * related to other components that are dependent on RTW.
      %break
    %default
      %break
  %endswitch
  %closefile tmpBuff
  %openfile cmntBuff
  %if !WHITE_SPACE(tmpBuff)
    /*
     * %<ssName>:
     %<tmpBuff> \
     */
   %endif
   %closefile cmntBuff
  %return cmntBuff
%endfunction


%% Function: RTMGetLoggingObject ===============================================
%% Abstract:
%%   Return the logging object according to the code format
%%
%function RTMGetLoggingObject() void
  %assign retVal = ""
  %if GenRTModel
    %assign retVal = "%<RTMGetModelSS()>->rtwLogInfo"
  %else
    %assign retVal = "ssGetRTWLogInfo(%<RTMGetModelSS()>)"
  %endif
  %return retVal
%endfunction %% RTMGetLoggingObject


%% Function: RTMGetSolverInfo ==================================================
%% Abstract:
%%   Return the logging object according to the code format
%%
%function RTMGetSolverInfo() void
  %assign retVal = ""
  %if CodeFormat == "Embedded-C" 
    %assign retVal = "&%<RTMGet("RTWSolverInfo")>"
  %else
    %assign retVal = "%<RTMGet("RTWSolverInfo")>"
  %endif
  %return retVal
%endfunction %% RTMGetSolverInfo


%endif %% _RTMDLDEFS_

%% [EOF] rtmdldefs.ttlc
