%% ============================================================================
%% File name: formatprivate.tlc
%% $Revision: 1.1.6.4 $

%if EXISTS("_FORMATPRIVATE_") == 0
  
  %assign rootIdx    = NumSystems-1
  %assign rootSystem = System[rootIdx]

  %assign privFile = SLibAddModelFile("SystemHeader","Simulink", "%<Name>_private")
  
  %%
  %% Create the banners for the model_private.h and model_types.h files
  %%
  %openfile bannerBuf
  /*
  * %<Name>_private.h
  *
  %<SLibCommonHeaderInfo()>\
  */
  %closefile bannerBuf
  %<SLibSetModelFileAttribute(privFile, "Banner", bannerBuf)>
  
  
  %% Includes
  %openfile tmpBuf
  
  %<LibDumpIncludesCache()>\
  %closefile tmpBuf
  %<SLibSetModelFileAttribute(privFile,  "Includes", tmpBuf)>
  
  %% Defines
  %<SLibSetModelFileAttribute(privFile, "Defines", LibDumpCommonDefines(rootIdx))>
  %openfile tmpBuf
  %<LibDumpDefinesCache()>\
  %closefile tmpBuf
  %<SLibSetModelFileAttribute(privFile, "Defines", tmpBuf)>

  %% Typedefs
  %openfile tmpBuf
  %<LibDumpTypedefsCache()>\
  %closefile tmpBuf
  %<SLibSetModelFileAttribute(privFile, "Typedefs", tmpBuf)>
  
  %openfile rtwTypedefsBuffer
  %<LibDeclareCompoundDataTypes()>\
  %closefile rtwTypedefsBuffer
  %<SLibSetModelFileAttribute(privFile, "Typedefs", rtwTypedefsBuffer)>
  
  %if CodeFormat != "Embedded-C"
    %% Block I/O structure
    %<SLibSetModelFileAttribute(privFile, "Typedefs", ...
      LibDumpSystemTypeDefs(rootSystem))>
  %endif
  
  %% ============================================================================
  %% Tunable Parameters
  %%
  %openfile tunableParametersBuffer
  %if !SLibPrmBufferIsEmpty("SfcnTunable", "Decl")
    
    /*
    * Tunable Parameters
    *
    * Note: Tunable parameters with Auto storage class are treated as s-function
    * parameters in the Real-Time Workshop S-Function Target.  The generated 
    * s-function will declare them as parameters and verify correct data 
    * types/sizes are maintained.  The parameters are propagated to nested
    * non-inlined s-functions
    *
    */
    %% S-Function target must guard against redefinition of constant signals
    %if CodeFormat == "S-Function"
      #if !defined(RTW_GENERATED_SFCN_TUNABLE_PRMS_%<Name>)
      %<SLibGetPrmBuffer("SfcnTunable", "Decl")>\
      #endif /* RTW_GENERATED_SFCN_TUNABLE_PRMS_%<Name> */
    %else 
      %<SLibGetPrmBuffer("SfcnTunable", "Decl")>\
    %endif
  %endif
  %closefile tunableParametersBuffer

  %<SLibSetModelFileAttribute(privFile, "Typedefs", tunableParametersBuffer)>


  %% Constant block parameters (Macro declaration)
  %if !SLibPrmBufferIsEmpty("Const", "MacroDecl")
    %assign cpDefs = SLibGetPrmBuffer("Const", "MacroDecl")
    %% S-Function target must guard against redefinition of constant parameters
    %if CodeFormat == "S-Function"
      %assign tmpDefs = cpDefs
      %openfile cpDefs
      #if !defined(RTW_GNERATED_SFCN_NOT_PRIVATE_%<Name>)
      %<tmpDefs>\
      #endif /* RTW_GNERATED_SFCN_NOT_PRIVATE_%<Name> */
      %closefile cpDefs
      %undef tmpDefs
    %endif
    %<SLibSetModelFileAttribute(privFile, "ExternData", cpDefs)>
  %endif
  
  %% ============================================================================
  %% Imported Extern Signals
  %%
  %openfile importedExternSignalsBuffer
  %if !SLibImportedExternSignalsIsEmpty()
    
    /* Imported (extern) block signals */
    %<SLibDumpImportedExternSignalsDefinition()>\
  %endif
  %closefile importedExternSignalsBuffer
  
  %<SLibSetModelFileAttribute(privFile, "ExternData", importedExternSignalsBuffer)>

  %% ============================================================================
  %% Imported Extern Pointer Signals
  %%
  %openfile importedExternPointerSignalsBuffer
  %if !SLibImportedExternPointerSignalsIsEmpty()
    
    /* Imported (extern) pointer block signals */
    %<SLibDumpImportedExternPointerSignalsDefinition()>\
  %endif
  %closefile importedExternPointerSignalsBuffer
  %<SLibSetModelFileAttribute(privFile, "ExternData", importedExternPointerSignalsBuffer)>

  %if CodeFormat != "S-Function" || Accelerator
  %% ===========================================================================
  %% Imported Extern DWork
  %%
  %openfile importedExternDWorkBuffer
  %if !SLibImportedExternDWorkIsEmpty()
    
    /* Imported (extern) states */
    %<SLibDumpImportedExternDWorkDefinition()>\
  %endif
  %closefile importedExternDWorkBuffer
  
  
  %% ===========================================================================
  %% Imported Extern Pointer DWork
  %%
  %openfile importedExternPointerDWorkBuffer
  %if !SLibImportedExternPointerDWorkIsEmpty()
    
    /* Imported (extern) pointer states */
    %<SLibDumpImportedExternPointerDWorkDefinition()>\
  %endif
  %closefile importedExternPointerDWorkBuffer
%endif

%% Extern data
%if CodeFormat != "S-Function" || Accelerator
  %<SLibSetModelFileAttribute(privFile, "ExternData", importedExternDWorkBuffer)>
  %<SLibSetModelFileAttribute(privFile, "ExternData", importedExternPointerDWorkBuffer)>
%endif

%% ============================================================================
%% Imported extern parameters
%%
%openfile importedExternParametersBuffer
%if !SLibPrmBufferIsEmpty("ImportedExtern", "Decl")

  /* Imported (extern) block parameters */
  %<SLibGetPrmBuffer("ImportedExtern", "Decl")>\
%endif
%closefile importedExternParametersBuffer


%% ============================================================================
%% Imported extern pointer parameters
%%
%openfile importedExternPointerParametersBuffer
%if !SLibPrmBufferIsEmpty("ImportedExternPointer", "Decl")

  /* Imported (extern) pointer block parameters */
  %<SLibGetPrmBuffer("ImportedExternPointer", "Decl")>\
%endif
%closefile importedExternPointerParametersBuffer

%<SLibSetModelFileAttribute(privFile, "ExternData", importedExternParametersBuffer)>
%<SLibSetModelFileAttribute(privFile, "ExternData", importedExternPointerParametersBuffer)>


%openfile tmpBuf
%<LibDumpExternsCache()>\
%closefile tmpBuf
%<SLibSetModelFileAttribute(privFile, "ExternData", tmpBuf)>

%% Extern functions
%openfile sysPrototypesBuf
%<LibDumpSystemPrototype(rootSystem)>\
%closefile sysPrototypesBuf
%openfile tmpBuf
%<LibDumpFunctionPrototypesCache()>\
%closefile tmpBuf
%<SLibSetModelFileAttribute(privFile, "ExternFcns", tmpBuf)>
%<SLibSetModelFileAttribute(privFile, "ExternFcns", sysPrototypesBuf)>

%openfile ertPrivateExternsBuffer
%if (CodeFormat == "Embedded-C") && (NumContStates > 0) && !IsModelReferenceTarget()
  /* private model entry point functions */
  %%  
  extern void \
  %<Name>_derivatives(%<SLibModelFcnArgs("Derivative",TLC_FALSE,"")>);
%endif
%closefile ertPrivateExternsBuffer
%<SLibSetModelFileAttribute(privFile, "ExternData", ertPrivateExternsBuffer)>


%% ============================================================================
%% Single/Multitasking error checks
%%
%openfile rtwCompilerErrorsBuffer
%switch CodeFormat
  %case "RealTime"
  %case "RealTimeMalloc"
    %% Check for illegal multitasking transition
    %<LibCheckForValidMTaskDefine()>\
    %break
  %case "S-Function"
    %if !Accelerator
      %if SolverType == "FixedStep"
	%if (FixedStepOpts.SolverMode == "SingleTasking") && (NumSynchronousSampleTimes > 1)
	  %% Building s-function as SingleTasking so check that
	  %% MultiTasking mode is not later used.
	  %<LibCheckForValidMTaskDefine()>\
	%endif
      %endif
    %endif
    %break
  %default
    %break
%endswitch
%closefile rtwCompilerErrorsBuffer

%% Compiler errors
%if !WHITE_SPACE(rtwCompilerErrorsBuffer)
  %<SLibSetModelFileAttribute(privFile, "CompilerErrors", rtwCompilerErrorsBuffer)>
%endif

%endif %% _FORMATPRIVATE_
