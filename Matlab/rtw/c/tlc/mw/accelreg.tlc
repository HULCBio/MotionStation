%% ============================================================================
%% $RCSfile: accelreg.tlc,v $
%% $Revision: 1.16.4.5 $
%% $Date: 2004/04/14 23:47:35 $
%%
%% Abstract:
%%   This system file creates model_sf_reg.h for the Accelerator target.
%%
%% Copyright 1994-2004 The MathWorks, Inc.
%%
%selectfile NULL_FILE

%if EXISTS("_ACCELREG_") == 0
%assign _ACCELREG_ = 1

%realformat "CONCISE"

%assign opFile = SLibAddModelFile("SystemBody","Simulink", Name)

%%
%% Non-finites
%%
%openfile nonfiniteInit
%<LibGenMathFcnCall("initnonfinite", FcnGetDataTypeIdFromName("double"), ...
                    "sizeof(real_T)", "")>;
%closefile nonfiniteInit
%openfile tmpBuffer
%if SLibRealNonFinitesRequired()
  %<nonfiniteInit>\
%endif
%<LibDumpNonFiniteAssignmentCache()>
%closefile tmpBuffer

%openfile nonFinitesBuffer
%if !WHITE_SPACE(tmpBuffer)
  
  /* non-finites */
  %<tmpBuffer>\
%endif
%closefile nonFinitesBuffer


%% ==========================================================================
%% Dump buffers to output
%%

%openfile tmpBuf
#define CodeFormat S-Function
#define AccDefine1 Accelerator_S-Function
%closefile tmpBuf
%<SLibSetModelFileAttribute(opFile, "Defines", tmpBuf)>

%openfile tmpBuf
#include <stdio.h>
%closefile tmpBuf
%<SLibSetModelFileAttribute(opFile, "Includes", tmpBuf)>

%openfile fcnsBuf
%% ============================================================================
%% MdlInitializeSizes
%%
/* Function to initialize sizes */
static void mdlInitializeSizes(SimStruct *%<RTMGetModelSS()>)
{

  /* checksum */
  %<RTMSetIdxed("ChecksumVal", 0, ModelChecksum[0])>;
  %<RTMSetIdxed("ChecksumVal", 1, ModelChecksum[1])>;
  %<RTMSetIdxed("ChecksumVal", 2, ModelChecksum[2])>;
  %<RTMSetIdxed("ChecksumVal", 3, ModelChecksum[3])>;
  
  /* options */
  %<RTMSet("Options", "SS_OPTION_EXCEPTION_FREE_CODE")>;

  %if ! LibDWorkStructIsEmpty()
    /* Accelerator check memory map size match for DWork */
      if (ssGetSizeofDWork(S) != sizeof(%<::CompiledModel.tDWorkType>)) {
	ssSetErrorStatus(S,"Unexpected error: Internal DWork sizes do "
	"not match for accelerator mex file.");
      }
  %endif

  %if !LibBlockIOStructIsEmpty()
    /* Accelerator check memory map size match for BlockIO */
    if (ssGetSizeofGlobalBlockIO(S) != sizeof(%<::CompiledModel.tBlockIOType>)) {
      ssSetErrorStatus(S,"Unexpected error: Internal BlockIO sizes do "
      "not match for accelerator mex file.");
    }
  %endif
  
  %%
  %% Parameters
  %%
  %if !LibParametersStructIsEmpty()
    
    /* model parameters */
    _ssSetDefaultParam(%<RTMGetModelSS()>, ...
      (real_T *) &%<tDefaultParameters>);
  %endif
  %%
  %% Invariant Block Outputs
  %%
  %if !LibConstBlockIOStructIsEmpty()
    
    /* constant block I/O */
    _ssSetConstBlockIO(%<RTMGetModelSS()>, &%<tInvariantSignals>);
  %endif

  %<nonFinitesBuffer>\

}

%% ============================================================================
%% MdlInitializeSampleTimes
%%
/* Empty mdlInitializeSampleTimes function (never called) */
static void mdlInitializeSampleTimes(SimStruct *%<RTMGetModelSS()>) { }

%% ============================================================================
%% MdlTerminate
%%
/* Empty mdlTerminate function (never called) */
static void mdlTerminate(SimStruct *S) { }

/* MATLAB MEX Glue */
#include "simulink.c"
%closefile fcnsBuf

%<SLibSetModelFileAttribute(opFile, "Functions", fcnsBuf)>

%selectfile NULL_FILE

%endif %% _ACCELREG_

%% [EOF] accelreg.tlc

