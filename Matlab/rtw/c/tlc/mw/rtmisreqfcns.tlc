%% 
%% $Revision: 1.1.6.12 $
%% 
%%
%% Copyright 1994-2004 The MathWorks, Inc.
%%
%% Abstract:
%%   Library that holds the functions which determine if certain
%%   rtModel fields are required for a given model
%%

%if EXISTS("_RTMISREQFCNS_") == 0
%assign _RTMISREQFCNS_ = 1

%% Function: RTMAlwaysReqIsReqFcn ==============================================
%% Abstract:
%%   This "isRequired" function is used for rtModel fields that are always 
%%   required.
%%
%function RTMAlwaysReqIsReqFcn() void
  %return TLC_TRUE
%endfunction %% RTMAlwaysReqIsReqFcn


%% Function: RTMVanillaIsReqFcn ================================================
%% Abstract:
%%   This function is called for various rtModel fields to figure out
%%   if they are required.
%%
%function RTMVanillaIsReqFcn() void
  %if CodeFormat != "Embedded-C" || GenerateGRTWrapper 
    %return TLC_TRUE
  %else
    %return TLC_FALSE
  %endif
%endfunction %% RTMVanillaIsReqFcn


%% Function: RTMContTimeErtIsReqFcn ============================================
%% Abstract:
%%   Returns true if
%%    - non-ERT target
%% OR
%%    - ERT and there is a continuous TID and not modelref sim target
%%
%function RTMContTimeErtIsReqFcn() void
  %if CodeFormat != "Embedded-C" || GenerateGRTWrapper
    %return TLC_TRUE
  %else
    %if LibIsContinuous(0) && !IsModelReferenceForASimstructBasedTarget()
      %return TLC_TRUE
    %else
      %return TLC_FALSE
    %endif
  %endif
%endfunction %% RTMContTimeErtIsReqFcn

%% Function: RTMContStateErtNoMdlRefIsReqFcn ========================================
%% Abstract:
%%   Returns true if
%%    - non-ERT target
%% OR
%%    - ERT with continuous states and not a modelref target.
%%
%function RTMContStateErtNoMdlRefIsReqFcn() void
  %if CodeFormat != "Embedded-C" || GenerateGRTWrapper
    %return TLC_TRUE
  %else
    %if NumContStates > 0 && !IsModelReferenceTarget()
      %return TLC_TRUE
    %else
      %return TLC_FALSE
    %endif
  %endif
%endfunction %% RTMContStateErtNoMdlRefIsReqFcn


%% Function: RTMChildSfunctionIsReqFcn =========================================
%% Abstract:
%%   This "isRequired" function is used for the 'ChildSfunction' field
%%
%function RTMChildSfunctionIsReqFcn() void
  %if CodeFormat != "Embedded-C" || GenerateGRTWrapper 
    %return TLC_TRUE
  %else
    %if CompiledModel.NumChildSFunctions > 0
      %return TLC_TRUE
    %else
      %return TLC_FALSE
    %endif
  %endif
%endfunction %% RTMChildSfunctionIsReqFcn

%% Function: RTMNonInlinedSFcnsIsReqFcn =========================================
%% Abstract:
%%   This "isRequired" function is used for the 'NonInlinedSFcns' field
%%
%function RTMNonInlinedSFcnsIsReqFcn() void 
  %if CompiledModel.NumChildSFunctions > 0
    %return TLC_TRUE
  %else
    %return TLC_FALSE
  %endif
%endfunction %% RTMNonInlinedSFcnsIsReqFcn


%% Function: RTMSolverYIsReqFcn ================================================
%% Abstract:
%%   This "isRequired" function is used for the 'Y' field (ERT Continuous)
%%
%function RTMSolverYIsReqFcn() void
  %if CodeFormat != "Embedded-C"
    %% return false for now
    %return TLC_FALSE
  %else
    %if (NumContStates > 0) && (CompiledModel.solverOrder > 1) && !IsModelReferenceTarget()
      %return TLC_TRUE
    %else
      %return TLC_FALSE
    %endif
  %endif
%endfunction %% RTMSolverYIsReqFcn


%% Function: RTMContainerErtIsReqFcn ===========================================
%% Abstract:
%%   This function is called for various rtModel fields to figure out
%%   if they are required.  This function is for objects that we want to store
%%   in the RT_Model.  For now, this is integration data, but in the future may
%%   be Block I/O, Parameters, etc.  This currently is ERT-only fields, as
%%   ERT and GRT unify, the {RTMContainerErtIsReqFcn, RTMContainerGrtIsReqFcn}
%%   functions will collapse into one.
%%
%function RTMContainerErtIsReqFcn() void
  %if CodeFormat != "Embedded-C"
    %return TLC_FALSE
  %else
    %if NumContStates > 0 && !IsModelReferenceTarget()
      %return TLC_TRUE
    %else
      %return TLC_FALSE
    %endif
  %endif
%endfunction %% RTMContainerErtIsReqFcn

%% Function: RTMContTimeErtOnlyIsReqFcn ========================================
%% Abstract:
%%   This can only be used for Embedded-C code formats.  It returns true if
%% there is a continuous tid unless it's a modelref sim target.
%%
%function RTMContTimeErtOnlyIsReqFcn() void
  %assert CodeFormat == "Embedded-C"
  %if LibIsContinuous(0) && !IsModelReferenceForASimstructBasedTarget()
    %return TLC_TRUE
  %else
    %return TLC_FALSE
  %endif
%endfunction %% RTMContTimeErtOnlyIsReqFcn

%% Function: RTMErrorStatusIsReqFcn ============================================
%% Abstract:
%%   This "isRequired" function is used for the error status field
%%
%function RTMErrorStatusIsReqFcn() void
  %return (CompiledModel.SuppressErrorStatus==1) ? TLC_FALSE : TLC_TRUE
%endfunction %% RTMErrorStatusIsReqFcn


%% Function: RTMMdlMthIsReqFcn =================================================
%% Abstract:
%%   This function is called for various rtModel model method fields to figure 
%%   out if they are required.
%%
%function RTMMdlMthIsReqFcn() void
  %if UsingMalloc
    %return TLC_TRUE
  %else
    %return TLC_FALSE
  %endif
%endfunction %% RTMMdlMthIsReqFcn


%% Function: RTMMdlStopReqIsReqFcn =============================================
%% Abstract:
%%   This function is called to determine if the stopRequested field is needed
%%
%function RTMMdlStopReqIsReqFcn() void
  %if IsModelReferenceForASimstructBasedTarget()
    %return TLC_FALSE
  %endif
  %assign retVal = TLC_FALSE %% assume
  %if CodeFormat == "Embedded-C" && !GenerateGRTWrapper
    %if (ExtMode || MatFileLogging || ForceAbsoluteTime || RTMStopReqAccessed())
      %assign retVal = TLC_TRUE
    %endif
  %else
    %assign retVal = TLC_TRUE
  %endif
  %return retVal
%endfunction %% RTMMdlStopReqIsReqFcn

%% Function: RTMNumSampleTimesReqFcn ===========================
%%
%%
%function RTMNumSampleTimesReqFcn() void
  %return RTMContStateErtNoMdlRefIsReqFcn() || ...
    RTMChildSfunctionIsReqFcn() || ...
    (GenerateGRTWrapper && ExtMode)
%endfunction  %% RTMNumSampleTimesReqFcn
    
%% Function: RTMStepSizeIsReqFcn ===============================================
%% Abstract:
%%   Is the StepSize field required?
%% 
%function RTMStepSizeIsReqFcn() void
  %assign retVal = TLC_FALSE %% assume
  %if CodeFormat != "Embedded-C" || GenerateGRTWrapper
    %assign retVal = TLC_TRUE
  %endif
  %return retVal
%endfunction %% RTMStepSizeIsReqFcn


%% Function: RTMStepSizeForTIDIsReqFcn ==================================
%% Abstract:
%%   Is the StepSize%<tid> field required?
%% 
%function RTMStepSizeForTIDIsReqFcn(tid) void
  %if IsModelReferenceForASimstructBasedTarget() && LibIsContinuous(tid)
    %return TLC_FALSE
  %endif
  %if CodeFormat != "Embedded-C"
    %return TLC_FALSE
  %else
    %return ISFIELD(SampleTime[tid], "needFloatTime") ...
      && !PurelyIntegerCode
  %endif
%endfunction %% RTMStepSizeForTIDIsReqFcn


%% Function: RTMClockTickForTIDIsReqFcn ==================================
%% Abstract:
%%   Is the ClockTick%<tid> field required in the rtModel?
%% 
%function RTMClockTickForTIDIsReqFcn(tid) void
  %if ::ModelReferenceTargetWithGlobalTiming
    %return TLC_FALSE
  %endif
  %if IsModelReferenceForASimstructBasedTarget() && LibIsContinuous(tid)
    %return TLC_FALSE
  %endif
  
  %return ClockTickForTIDIsReqFcn(tid)
%endfunction %% RTMClockTickIsReqFcn

%% Function: ClockTickForTIDIsReqFcn ==================================
%% Abstract:
%%   Is the ClockTick%<tid> field required?
%% 
%function ClockTickForTIDIsReqFcn(tid) void
  %assign retVal = TLC_FALSE %% assume
  
  %if ((CodeFormat == "Embedded-C") && (SLibNeedAbsoluteTimeForTID(tid))) || ...
     ((tid < NumSynchronousSampleTimes) && ...
       CompiledModel.ModelBlocksReqClockTicks[tid])
    %assign retVal = TLC_TRUE
  %endif

  %return retVal
%endfunction %% ClockTickIsReqFcn

%% Function: RTMLongClockTickForTIDIsReqFcn ====================================
%% Abstract:
%%   Is the ClockTickH%<tid> field required in the rtModel?
%% 
%function RTMLongClockTickForTIDIsReqFcn(tid) void
  %if ::ModelReferenceTargetWithGlobalTiming
    %return TLC_FALSE
  %endif
  
  %return LongClockTickForTIDIsReqFcn(tid)
%endfunction %% RTMLongClockTickIsReqFcn

%% Function: LongClockTickForTIDIsReqFcn ====================================
%% Abstract:
%%   Is the ClockTickH%<tid> field required?
%% 
%function LongClockTickForTIDIsReqFcn(tid)
  %assign retVal = TLC_FALSE %% assume
  
  %if ((CodeFormat == "Embedded-C") && (SLibNeedAbsoluteTimeForTID(tid))...
    && SLibClockTickIsUnit32Pair(tid)) || ...
    ((tid < NumSynchronousSampleTimes) && ...
      CompiledModel.ModelBlocksReqLongClockTicks[tid])
    %assign retVal = TLC_TRUE
  %endif

  %return retVal
%endfunction %% LongClockTickIsReqFcn

%% Function: RTMTimerBufSemaphoreForTIDIsReqFcn =======================
%% Abstract:
%%   Return true if Embedded-C and this tid is 
%%     1. asynchronous tid, and
%%     2. need absolute time, and 
%%     3. dose not manage own timer, need use 
%%        timer of fundermental rate, and
%%     4. has lower  priority than fundermental rate.
%function RTMTimerBufSemaphoreForTIDIsReqFcn(tid) 
  %assign retVal = TLC_FALSE %% assume
  
  %if CodeFormat == "Embedded-C" && ...
    SampleTime[tid].Asynchronous == "yes" && ...
    SLibNeedAbsoluteTimeForTID(tid) && ...
    CompiledModel.SampleTime[tid].TimeSource == "BaseRate" && ...
    SLibComparePriority(tid, 0) == 2
    %assert SampleTime[tid].ClockTickDataTypeId == SampleTime[0].ClockTickDataTypeId 
    %assign retVal = TLC_TRUE
  %endif
  
  %return retVal
%endfunction %% RTMTimerBufSemaphoreForTIDIsReqFcn


%% Function: RTMBufClockTick0IsReqFcn  ============================
%% Return true if need buffer ClockTick0.
%% Need buffer ClockTick0 if 
%%   1. There is any tid requires TimerBufSemaphoreForTID and,
%%   2. ClockTickDataTypeId of this tid is the same as ClockTick0
%%
%function RTMBufClockTick0IsReqFcn()
  %assign retVal = TLC_FALSE %% assume
  
  %if (CodeFormat == "Embedded-C") 
    %foreach tid = NumSampleTimes
      %if RTMTimerBufSemaphoreForTIDIsReqFcn(tid) 
	%assign retVal = ...
	  CompiledModel.SampleTime[tid].ClockTickDataTypeId == ...
	  CompiledModel.SampleTime[0].ClockTickDataTypeId
	%break
      %endif
    %endforeach
  %endif
  
  %return retVal 
    
%endfunction %%RTMBufClockTick0IsReqFcn


%% Function: RTMBufContTIsReqFcn  ============================
%% Return true if need buffer rtm.Timing.t[0]
%% Need buffer ClockTick0 if 
%%   1. There is any tid requires TimerBufSemaphoreForTID and,
%%   2. ClockTickDataTypeId of this tid is tSS_DOUBLE
%%
%function RTMBufContTIsReqFcn()
  %assign retVal = TLC_FALSE %% assume
  
  %if (CodeFormat == "Embedded-C") 
    %foreach tid = NumSampleTimes
      %if RTMTimerBufSemaphoreForTIDIsReqFcn(tid) && ...
	CompiledModel.SampleTime[tid].ClockTickDataTypeId == tSS_DOUBLE
	%assert LibIsContinuous(0) 
	%assign retVal = TLC_TRUE
	%break
      %endif
    %endforeach
  %endif
  
  %return retVal 
    
%endfunction %%RTMBufClockTick0IsReqFcn()

%% Function: RTMBufLongClockTick0IsReqFcn  ============================
%%   Return true if the tid is 
%%     1. RTMBufClockTick0IsReqFcn(tid) return true, and 
%%     2. RTMLongClockTickForTIDIsReqFcn(0)
%%
%function RTMBufLongClockTick0IsReqFcn()

  %return RTMBufClockTick0IsReqFcn() && ...
    RTMLongClockTickForTIDIsReqFcn(0)
    
%endfunction %%RTMBufLongClockTick0IsReqFcn

%% Function: RTMDoubleBufClockTick0IsReqFcn ===================================
%%   Return true if need double buffer ClockTick0. 
%%   Need double buffer ClockTic0 if:
%%     1. there is an asynchronous tid, and
%%     2. this tid need absolute time, and 
%%     3. This tid dose not manage own timer, need use 
%%        timer of fundermental rate, and
%%     4. This tid has higher priority than fundermental rate.
%%     5. ClockTickDataTypeId of this tid is the same as ClockTick0
%%
%function RTMDoubleBufClockTick0IsReqFcn()
  %assign retVal = TLC_FALSE %% assume
  %if (CodeFormat == "Embedded-C") 
    %foreach tid = CompiledModel.NumSampleTimes
      %if CompiledModel.SampleTime[tid].Asynchronous == "yes" && ...
	SLibNeedAbsoluteTimeForTID(tid) && ...
	CompiledModel.SampleTime[tid].TimeSource == "BaseRate" && ...
	SLibComparePriority(tid, 0) == 1 && ...
	CompiledModel.SampleTime[tid].ClockTickDataTypeId == ...
	CompiledModel.SampleTime[0].ClockTickDataTypeId
	%assign retVal = TLC_TRUE
	%break
      %endif
    %endforeach 
  %endif
  %return retVal 
    
%endfunction %%RTMDoubleBufClockTick0IsReqFcn

%% Function: RTMDoubleBufContTIsReqFcn ===================================
%%   Return true if need double buffer timing.T[0]
%%   Need double buffer ClockTic0 if:
%%     1. there is an asynchronous tid, and
%%     2. this tid need absolute time, and 
%%     3. This tid dose not manage own timer, need use 
%%        timer of fundermental rate, and
%%     4. This tid has higher priority than fundermental rate.
%%     5. ClockTickDataTypeId of this tid is tSS_DOUBLE
%%
%function RTMDoubleBufContTIsReqFcn()
  %assign retVal = TLC_FALSE %% assume
  %if (CodeFormat == "Embedded-C") 
    %foreach tid = CompiledModel.NumSampleTimes
      %if CompiledModel.SampleTime[tid].Asynchronous == "yes" && ...
	SLibNeedAbsoluteTimeForTID(tid) && ...
	CompiledModel.SampleTime[tid].TimeSource == "BaseRate" && ...
	SLibComparePriority(tid, 0) == 1 && ...
	CompiledModel.SampleTime[tid].ClockTickDataTypeId == tSS_DOUBLE
	%assert LibIsContinuous(0) 
	%assign retVal = TLC_TRUE
	%break
      %endif
    %endforeach 
  %endif
  %return retVal 
    
%endfunction %%RTMDoubleBufContTIsReqFcn

%% Function:RTMDoubleBufLongClockTick0IsReqFcn ======================================
%%   Return true if the tid is 
%%     1. RTMDoubleBufClockTick0() return true, and,
%%     2. RTMLongClockTickForTIDIsReqFcn(0)
%%
%function RTMDoubleBufLongClockTick0IsReqFcn()
  
  %return RTMDoubleBufClockTick0IsReqFcn() && ...
    RTMLongClockTickForTIDIsReqFcn(0)
    
%endfunction %%RTMBufLongClockTickForTIDIsReqFcn


%% Function: RTMTaskTimeIsReqFcnForTID() ===============================
%% Abstract:
%%   Is the TaskTimeForTID# field required?
%% 
%function RTMTaskTimeIsReqFcnForTID(tid) void
  %assert !::ModelReferenceTargetWithGlobalTiming
  %if IsModelReferenceForASimstructBasedTarget() && LibIsContinuous(tid)
    %return TLC_FALSE
  %endif
  %assign retVal = TLC_FALSE %% assume
  %if (CodeFormat == "Embedded-C")
    %if ISFIELD(SampleTime[tid], "needFloatTime") 
      %if IsModelReferenceTarget() && LibIsContinuous(tid)
	%assign retVal = TLC_TRUE
      %else
	%assign retVal = !RTMTimePtrIsReqFcn()
      %endif
    %endif
  %endif
  
  %return retVal
%endfunction %% RTMTaskTimeIsReqFcnForTID


%% Function: RTMTFinalIsReqFcn ==============================================
%% Abstract:
%%   Is the TFinal field required?
%% 
%function RTMTFinalIsReqFcn() void
  %if IsModelReferenceTarget()
    %return TLC_FALSE
  %endif
  %assign retVal = TLC_FALSE %% assume

  %if (CodeFormat == "Embedded-C") && !GenerateGRTWrapper
    %if (MatFileLogging || (ExtMode && !PurelyIntegerCode) || ForceAbsoluteTime) && ...
      (!ISINF(StopTime) || !PurelyIntegerCode) 	
      %assign retVal = TLC_TRUE
    %endif
  %else
    %assign retVal = TLC_TRUE
  %endif

  %return retVal
%endfunction %% RTMTFinalIsReqFcn


%% Function: RTMFirstInitCondFlagIsReqFcn ======================================
%% Abstract:
%%   Is the FirstInitCondFlag field required?
%% 
%function RTMFirstInitCondFlagIsReqFcn() void
  %if IsModelReferenceForASimstructBasedTarget()
    %return TLC_FALSE
  %endif
  %assign retVal = TLC_FALSE %% assume

  %if (CodeFormat == "Embedded-C") 
    %if ::UseGlobalTimingForModelReference
      %if IsModelReferenceTarget()
        %assign retVal = TLC_FALSE
      %elseif (!SLibNeedAbsoluteTime() || ...
        HasModelReferenceBlocks()) && ...
        SLibGetIsFirstInitCondAccessed()
        %assign retVal = TLC_TRUE
      %endif
    %elseif !SLibNeedAbsoluteTime() && ...
      SLibGetIsFirstInitCondAccessed()
      %assign retVal = TLC_TRUE
    %endif
  %endif

  %return retVal
%endfunction %% RTMFirstInitCondFlagIsReqFcn


%% Function: RTMTaskCountersIsReqFcn ===========================================
%% Abstract:
%%   Are some of the multirate ERT timing fields required?
%% 
%function RTMTaskCountersIsReqFcn() void
  %if ::ModelReferenceTargetWithGlobalTiming
    %return TLC_FALSE
  %endif
  %assign retVal = TLC_FALSE %% assume

  %if (CodeFormat == "Embedded-C") && ...
    !RootSystemIsSingleRate
    %assign retVal = TLC_TRUE
  %endif

  %return retVal
%endfunction %% RTMERTMultiRateIsReqFcn
  
%% Function: RTMERTPerTaskSampleHitsIsReqFcn ===================================
%% Abstract:
%%   Is the perTaskSampleHits field needed in the rtModel
%% 
%function RTMERTPerTaskSampleHitsIsReqFcn() void
  %if ::ModelReferenceTargetWithGlobalTiming
    %return TLC_FALSE
  %endif

  %return ERTPerTaskSampleHitsIsReqFcn()
%endfunction %% RTMERTPerTaskSampleHitsIsReqFcn

%% Function: ERTPerTaskSampleHitsIsReqFcn ===================================
%% Abstract:
%%   Is the perTaskSampleHits field needed for ERT
%% 
%function ERTPerTaskSampleHitsIsReqFcn() void
  %assign retVal = TLC_FALSE %% assume

  %if (CodeFormat == "Embedded-C") && ...
    !RootSystemIsSingleRate && !SLibSingleTasking() && ...
    RequireMultiRateSampleHits
    %assign retVal = TLC_TRUE
  %endif

  %return retVal
%endfunction %% ERTPerTaskSampleHitsIsReqFcn

%% Function: RTMTimePtrIsReqFcn ==================================
%%
%%
%function RTMTimePtrIsReqFcn()
  %return !::ModelReferenceTargetWithGlobalTiming && ...
    ( RTMContTimeErtIsReqFcn() || ...
      RTMChildSfunctionIsReqFcn() || ...
      GenerateGRTWrapper )
%endfunction %% RTMTimePtrIsReqFcn


%% Function: RTMLogInfoIsReqFcn ================================================
%% Abstract:
%%   Is the loginfo field required?
%% 
%function RTMLogInfoIsReqFcn() void
  %if IsModelReferenceForASimstructBasedTarget()
    %return TLC_FALSE
  %endif
  %assign retVal = TLC_FALSE %% assume

  %if (CodeFormat == "Embedded-C")
    %if MatFileLogging
      %assign retVal = TLC_TRUE
    %endif
  %else
    %assign retVal = TLC_TRUE
  %endif

  %return retVal
%endfunction %% RTMLogInfoIsReqFcn


%% Function: RTMExtModeInfoIsReqFcn ============================================
%% Abstract:
%%   Is the ext mode field required?
%% 
%function RTMExtModeInfoIsReqFcn() void
  %if IsModelReferenceForASimstructBasedTarget()
    %return TLC_FALSE
  %endif
  %assign retVal = TLC_FALSE %% assume

  %if (CodeFormat == "Embedded-C" && !GenerateGRTWrapper) 
    %if ExtMode == 1
      %assign retVal = TLC_TRUE
    %endif
  %else
    %assign retVal = TLC_TRUE
  %endif

  %return retVal
%endfunction %% RTMExtModeInfoIsReqFcn

%% Function: RTMMappingInfoIsReqFcn ============================================
%% Abstract:
%%   Is the mapping info field required?
%% 
%function RTMMappingInfoIsReqFcn() void
  %if IsModelReferenceForASimstructBasedTarget()
    %return TLC_FALSE
  %endif
  %assign retVal = TLC_FALSE %% assume

  %if (CodeFormat == "Embedded-C") && !GenerateGRTWrapper
    %if ParameterTuning == 1 || BlockIOSignals == 1 || ExtMode == 1
      %assign retVal = TLC_TRUE
    %endif
  %else
    %assign retVal = TLC_TRUE
  %endif

  %return retVal
%endfunction %% RTMMappingInfoIsReqFcn

%% Function: RTMDataMapInfoIsReqFcn ===========================================
%% Abstract:
%%   Is the Data Map Info substruct required? This substruct is required when 
%%   generating CAPI for Signal monitoring and Parameter tuning
%% 
%function RTMDataMapInfoIsReqFcn() void
  %return RTWCAPI
%endfunction

%endif %% _RTMISREQFCNS_


%% [EOF] rtmisreqfcns.ttlc
