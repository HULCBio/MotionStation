%% 
%% $Revision: 1.1.6.3 $
%% 
%%
%% Copyright 1994-2003 The MathWorks, Inc.
%%
%% Abstract:
%%   This TLC library file contains all obsolete TLC functions required for
%%   backwards compatability.
%%

%if EXISTS("_OBSOLETELIB_") == 0
%assign _OBSOLETELIB_ = 1


%% Function: LibIndexStruct ====================================================
%% Abstract:
%%   Determine how to index a 1-D array.
%%
%function LibIndexStruct(widthAndOffset, ucv, lcv, idx) void
  %return SLibGet1DArrayIndexer(widthAndOffset, ucv, lcv, idx)
%endfunction



%% Function: LibBlockGetRollThreshold ==========================================
%% Abstract:
%%   Obsoleted function to get the appropriate roll threshold for the block.  
%%
%function LibBlockGetRollThreshold(block, rollThreshold) void
  %return rollThreshold
%endfunction


%% Function: LibIndexMatrix ====================================================
%% Abstract:
%%   Determine how to index a 2-D array.
%%
%function LibIndexMatrix(nRows, rucv, rlcv, ridx, nCols, cucv, clcv, cidx) void

  %openfile msg
  
    The LibIndexMatrix function that shipped with R12 has been replaced
    by SLibGet2DArrayIndexer. These functions are not identical.
    LibIndexMatrix incorrectly handled rlcv and clcv by adding the 
    signal index to them. In addition, there was no roller support for
    2-D arrays. As of Oct 14, 2000 was no 2-D roller available, thus 
    you must specify rlcv="", clcv="" when using SLiBGet2DArrayIndexer.
    You need to replace your calls of LibIndexMatrix to use
    SLibGet2DArrayIndexer and make the appropriate function argument changes.
  %closefile msg

  %setcommandswitch "-v1"
  %<LibReportError(msg)>
%endfunction



%% Function: LibBaseAddrOfMdlStruct ===========================================
%% Abstract:
%%	Determine the base address for a structure or array declared.
%%
%function LibBaseAddrOfMdlStruct(name) void
  %assign warnTxt = "LibBaseAddrofMdlStruct is obsolete. Replace with " ...
    "explicit definition (e.g. &name)."
    %<LibReportWarning(warnTxt)>;
  %return "&%<name>"
%endfunction


%% Function: LibRenameParameter ================================================
%%
%% Abstract:
%%      This call should be made from inside the block's BlockInstanceSetup
%%      function.  This function
%%
%%      1) renames the parameter to the name specified
%%      2) creates a new reference to the parameter by that name
%%
%% Synopsis:
%%      LibRenameParameter(block, param, newName)
%%
%%      block   = reference to the block
%%      param   = reference to the block parameter
%%      newName = new name for the parameter
%%
%function LibRenameParameter(block, param, newName) void

  %if ShowObsoleteWarnings
    %assign warnTxt = "This function is now obsolete.  Specifying parameter names is " ...
      "now supported via the mdlRTW() function of C-MEX S-Functions."
    %<LibBlockReportWarning(block, warnTxt)>
  %endif

  %% rename the specified parameter
  %assign param.Name = newName

  %% create a reference in the parent scope for future reference
  %assign %<newName> = param
  %assign block = block + %<newName>

%endfunction %% LibRenameParameter


%% Function: LibDefineRWork ====================================================
%%
%% Abstract:
%%      This call should be made from inside the block's BlockInstanceSetup
%%      function, and adds the specifed rwork definition to the block.
%%      The function creates and maintains an internal record for the rwork
%%      definition, removing the Simulink definition if necessary.
%%
%%      LibDefineRWork(block, "PrevT", 1)
%%      LibDefineRWork(block, "PrevU", 3)
%%
%%      Internally this creates a block record
%%
%%      NumRWorkDefines 2
%%      RWorkDefine {
%%        Name       "PrevT"
%%        Width      1
%%        StartIndex 0
%%      }
%%      RWorkDefine {
%%        Name       "PrevU"
%%        Width      3
%%        StartIndex 1
%%      }
%%      PrevT     RWorkDefine[0]
%%      PrevU     RWorkDefine[1]
%%
%%      Note that PrevT and PrevU are references to RWorkDefine[0]
%%      and RWorkDefine[1], respectively, and are added by the system
%%      file which executes the block's "BlockInstanceSetup" function.
%%
%% Synopsis:
%%      LibDefineRWork(block, name, width)
%%
%%      block = reference to the block
%%      name  = what you want to call the rwork
%%      width = the width of this rwork
%%
%function LibDefineRWork(block, name, width) void

  %if ShowObsoleteWarnings
    %assign warnTxt = "This function is now obsolete.  Specifying RWork names is now " ...
      "supported via the mdlRTW() function of C-MEX S-Functions."
    %<LibBlockReportWarning(block, warnTxt)>
  %endif

  %if block.UserDefinedRWork == 0
    %% remove Simulink definition from block, if necessary
    %if (block.NumRWorkDefines > 0)
      %foreach rwIdx = NumRWorkDefines
        %undef RWorkDefine
      %endforeach
    %endif
    %assign block.NumRWorkDefines = 0
    %assign block.UserDefinedRWork = 1
  %endif

  %% Get StartIndex

  %if block.NumRWorkDefines > 0
    %assign lastDefine = block.RWorkDefine[block.NumRWorkDefines-1]
    %assign startIndex = lastDefine.StartIndex + lastDefine.Width
  %else
    %assign startIndex = 0
  %endif
  
  %% create the new RWork record and attach it to the block

  %assign tmpVar = RWorkDefine { Name name; Width width; StartIndex startIndex }
  %assign block = block + RWorkDefine

  %% promote Name into parent scope

  %assign %<tmpVar.Name> = block.RWorkDefine[block.NumRWorkDefines]
  %assign block = block + %<tmpVar.Name>

  %% increment NumRWorkDefines

  %assign block.NumRWorkDefines = block.NumRWorkDefines + 1

%endfunction %% LibDefineRWork


%% Function: LibDefineIWork ====================================================
%%
%% Abstract:
%%      This call should be made from inside the block's BlockInstanceSetup
%%      function, and adds the specifed IWork to the block. The function
%%      creates and maintains an internal record for the IWork definition.
%%      For example, a block may have IWork records for system enable.
%%
%%      LibDefineIWork(block, "SystemEnable", 1)
%%      LibDefineIWork(block, "IcNeedsLoading", 1)
%%
%%      Internally this creates a block record
%%
%%      NumIWorkDefines 2
%%      IWorkDefine {
%%        Name         "SystemEnable"
%%        Width        1
%%        StartIndex   0
%%      }
%%      IWorkDefine {
%%        Name         "IcNeedsLoading"
%%        Width        1
%%        StartIndex   1
%%      }
%%      SystemEnable    IWorkDefine[0]
%%      ICNeeedsLoading IWorkDefine[1]
%%
%%      Note that SystemEnable and IcNeedsLoading are references to
%%      IWorkDefine[0] and IWorkDefine[1], respectively, and are added
%%      by the system file which executes the block's "BlockInstanceSetup"
%%      function.
%%
%% Synopsis:
%%      LibDefineIWork(block, name, width)
%%
%%      block = reference to the block
%%      name  = what you want to call the iwork
%%      width = the width of the iwork
%%
%function LibDefineIWork(block, name, width) void

  %if ShowObsoleteWarnings
    %assign warnTxt = "This function is now obsolete.  Specifying IWork names is now " ...
      "supported via the mdlRTW() function of C-MEX S-Functions."
    %<LibBlockReportWarning(block, warnTxt)>
  %endif

  %if block.UserDefinedIWork == 0
    %% remove Simulink definition from block, if necessary
    %if (block.NumIWorkDefines > 0)
      %foreach iwIdx = NumIWorkDefines
        %undef IWorkDefine
      %endforeach
    %endif
    %assign block.NumIWorkDefines = 0
    %assign block.UserDefinedIWork = 1
  %endif

  %% Get StartIndex

  %if block.NumIWorkDefines > 0
    %assign lastDefine = block.IWorkDefine[block.NumIWorkDefines-1]
    %assign startIndex = lastDefine.StartIndex + lastDefine.Width
  %else
    %assign startIndex = 0
  %endif
  
  %% create the IWork record and attach it to the block

  %assign tmpVar = IWorkDefine { Name name; Width width; StartIndex startIndex }
  %assign block = block + IWorkDefine

  %% promote Name into parent scope

  %assign %<tmpVar.Name> = block.IWorkDefine[block.NumIWorkDefines]
  %assign block = block + %<tmpVar.Name>

  %% increment NumIWorkDefines

  %assign block.NumIWorkDefines = block.NumIWorkDefines + 1

%endfunction %% LibDefineIWork


%% Function: LibDefinePWork ====================================================
%%
%% Abstract:
%%      This call should be made from inside the block's BlockInstanceSetup
%%      function, and adds the specifed PWork to the block. The function
%%      creates and maintains an internal record for the PWork definition.
%%      For example, a block may have a PWork record for data logging.
%%
%%      LibDefinePWork(block, "LoggedData", 3)
%%
%%      Internally this creates a block record
%%
%%      NumPWorkDefines 1
%%      PWorkDefine {
%%        Name         "LoggedData"
%%        Width        3
%%        StartIndex   0
%%      }
%%      LoggedData     PWorkDefine[0]
%%
%%      Note that LoggedData is a reference to PWorkDefine[0] which is added
%%      by the system file which executes the block's "BlockInstanceSetup"
%%      function.
%%
%% Synopsis:
%%      LibDefinePWork(block, name, width)
%%
%%      block = reference to the block
%%      name  = what you want to call the pwork
%%      width = the width of the pwork
%%
%function LibDefinePWork(block, name, width) void

  %if ShowObsoleteWarnings
    %assign warnTxt = "This function is now obsolete.  Specifying PWork names is now " ...
      "supported via the mdlRTW() function of C-MEX S-Functions."
    %<LibBlockReportWarning(block, warnTxt)>
  %endif

  %if block.UserDefinedPWork == 0
    %% remove Simulink definition from block, if necessary
    %if (block.NumPWorkDefines > 0)
      %foreach pwIdx = NumPWorkDefines
        %undef PWorkDefine
      %endforeach
    %endif
    %assign block.NumPWorkDefines = 0
    %assign block.UserDefinedPWork = 1
  %endif

  %% Get StartIndex

  %if block.NumPWorkDefines > 0
    %assign lastDefine = block.PWorkDefine[block.NumPWorkDefines-1]
    %assign startIndex = lastDefine.StartIndex + lastDefine.Width
  %else
    %assign startIndex = 0
  %endif
  
  %% create the PWork record and attach it to the block

  %assign tmpVar = PWorkDefine { Name name; Width width; StartIndex startIndex }
  %assign block = block + PWorkDefine

  %% promote Name into parent scope

  %assign %<tmpVar.Name> = block.PWorkDefine[block.NumPWorkDefines]
  %assign block = block + %<tmpVar.Name>

  %% increment NumPWorkDefines

  %assign block.NumPWorkDefines = block.NumPWorkDefines + 1

%endfunction %% LibDefinePWork


%% Function: LibDiscreteState ==================================================
%%
%function LibDiscreteState(ucv, lcv, idx) void

  %if ShowObsoleteWarnings
    %assign warnTxt = "The function LibDiscreteState has been renamed to " ...
      "LibBlockDiscreteState.  Please update the target file."
    %<LibBlockReportWarning([], warnTxt)>
  %endif

  %return LibBlockDiscreteState(ucv,lcv,idx)

%endfunction %% LibDiscreteState


%% Function: LibContinuousState ================================================
%%
%function LibContinuousState(ucv, lcv, idx) void

  %if ShowObsoleteWarnings
    %assign warnTxt = "The function LibContinuousState has been renamed to " ...
      "LibBlockContinuousState.  Please update the target file."
    %<LibBlockReportWarning([], warnTxt)>
  %endif

  %return LibBlockContinuousState(ucv,lcv,idx)

%endfunction %% LibContinuousState


%% Function: LibPrevZCState ====================================================
%%
%function LibPrevZCState(ucv, lcv, pzcIdx) void

  %if ShowObsoleteWarnings
    %assign warnTxt = "The function LibPrevZCState has been renamed to " ...
      "LibBlockPrevZCState.  Please update the target file."
    %<LibBlockReportWarning([], warnTxt)>
  %endif

  %return LibBlockPrevZCState(ucv,lcv,pzcIdx)

%endfunction %% LibPrevZCState


%% Function: LibDataOutputPortWidth  ===========================================
%%
%% Abstract:
%%      Return the width of the blocks output port.
%%
%% Synopsis:
%%      LibDataOutputPortWidth(portNum)
%%      portNum = port number (starting from 0)
%%
%function LibDataOutputPortWidth(portNum) void

  %if ShowObsoleteWarnings
    %assign warnTxt = "The function LibDataOutputPortWidth has been " ...
      "renamed to LibBlockOutputSignalWidth.  Please update the target " ...
      "file."
    %<LibBlockReportWarning([], warnTxt)>
  %endif

  %return LibBlockOutputSignalWidth(portNum)

%endfunction %% LibDataOutputPortWidth


%% Function: LibMaxDataOutputPortWidth =========================================
%%
%% Abstract:
%%      Return the maximum width of all the output ports.
%%
%% Synopsis:
%%      LibMaxDataOutputPortWidth()
%%
%function LibMaxDataOutputPortWidth() void

  %if ShowObsoleteWarnings
    %assign warnTxt = "The function LibMaxDataOutputPortWidth is obsolete.  " ...
      "Please update the target file."
    %<LibBlockReportWarning([], warnTxt)>
  %endif

  %assign maxWidth = -1
  %foreach portIdx = NumDataOutputPorts
    %assign width = LibDataOutputPortWidth(portIdx)
    %if width > maxWidth
      %assign maxWidth = width
    %endif
  %endforeach
  %return maxWidth

%endfunction %% LibDataOutputPortWidth


%% Function: LibDataInputPortWidth =============================================
%%
%% Abstract:
%%      Return the width of an input port.
%%
%% Synopsis:
%%      LibDataInputPortWidth(portNum)
%%      portNum = Input port number (starting from 0)
%%
%function LibDataInputPortWidth(portNum) void

  %if ShowObsoleteWarnings
    %assign warnTxt = "The function LibDataInputPortWidth has been " ...
      "renamed to LibBlockInputSignalWidth.  Please update the target " ...
      "file."
    %<LibBlockReportWarning([], warnTxt)>
  %endif

  %return LibBlockInputSignalWidth(portNum)

%endfunction %% LibDataInputPortWidth


%% Function: LibMaxDataInputPortWidth ==========================================
%%
%% Abstract:
%%      Return the maximum width of all the input ports.
%%
%% Synopsis:
%%      LibMaxDataInputPortWidth()
%%
%function LibMaxDataInputPortWidth() void

  %if ShowObsoleteWarnings
    %assign warnTxt = "The function LibMaxDataInputPortWidth is obsolete.  " ...
      "Please update the target file."
    %<LibBlockReportWarning([], warnTxt)>
  %endif

  %assign maxWidth = -1
  %foreach portIdx = NumDataInputPorts
    %assign width = LibDataInputPortWidth(portIdx)
    %if width > maxWidth
      %assign maxWidth = width
    %endif
  %endforeach
  %return maxWidth

%endfunction %% LibMaxDataInputPortWidth



%% Function: LibMaxBlockIOWidth ================================================
%%
%% Abstract:
%%      If the block has output ports return the maximum width of the output
%%      ports, otherwise, return the maximum width of its input ports.
%%
%% Synopsis:
%%      LibMaxBlockIOWidth()
%%
%%
%function LibMaxBlockIOWidth() void

  %if ShowObsoleteWarnings
    %assign warnTxt = "The function LibMaxBlockIOWidth is obsolete.  Please " ...
      "update the target file."
    %<LibBlockReportWarning([], warnTxt)>
  %endif

  %if NumDataOutputPorts > 0
    %return LibMaxDataOutputPortWidth()
  %else
    %return LibMaxDataInputPortWidth()
  %endif
%endfunction %% LibMaxBlockIOWidth


%% Function: LibBlockInportLocation ============================================
%%
%% Abstract:
%%	Returns the appropriate identifier giving the signal source
%%      for an inport block.
%%
%% 	See LibBlockInputSignal for types of strings which can be returned.
%%
%% Synopsis:
%%      String LibBlockInportLocation(ucv, lcv, sigIdx)
%%
%%      ucv    = user control variable string
%%      lcv    = loop control variable string
%%      sigIdx = string or integer offset into block signal
%%
%function LibBlockInportLocation(ucv, lcv, sigIdx) void
  %if ShowObsoleteWarnings
    %assign warnTxt = "The function LibBlockInportLocation is obsolete.  " ...
      "Please update the target file to use the new function " ...
      "LibBlockSrcSignalLocation instead."
    %<LibBlockReportWarning([], warnTxt)>
  %endif
  %return LibBlockSrcSignalLocation("inport", ucv, lcv, sigIdx)
%endfunction %% LibBlockInportLocation


%% Function: LibBlockControlPortLocation =======================================
%%
%% Abstract:
%%	Returns the appropriate identifier giving the signal source
%%      for an enable or trigger port block.
%%
%% 	See LibBlockInputSignal for types of strings which can be returned.
%%
%% Synopsis:
%%      String LibBlockControlPortLocation(porttype, ucv, lcv, sigIdx)
%%
%%      portType = "enable" or "trigger"
%%      ucv      = user control variable string
%%      lcv      = loop control variable string
%%      sigIdx   = string or integer offset into block signal
%%
%function LibBlockControlPortLocation(portType, ucv, lcv, sigIdx) void
  %if ShowObsoleteWarnings
    %assign warnTxt = "The function LibBlockControlPortLocation is " ...
      "obsolete. Please update the target file to use the new function " ...
      "LibBlockSrcSignalLocation instead."
    %<LibBlockReportWarning([], warnTxt)>
  %endif
  %return LibBlockSrcSignalLocation(portType, ucv, lcv, sigIdx)
%endfunction %% LibBlockControlPortLocation


%% Function: LibBlockOutportLocation ===========================================
%%
%% Abstract:
%%      Returns the appropriate identifier for an outport block (this
%%	will be a location in the system output vector, Y) which expands
%%	to:
%%
%%        Y.block[ucv]      - ucv specified
%%        y0[lcv]           - lcv specified and signal is wide
%%        Y.block           - lcv specified and signal is scalar
%%        Y.block[sigIdx]   - otherwise
%%
%%      Note 1:  The index is appropriately replaced with ucv or lcv
%%               when specified (ucv has higher precedence than lcv).
%%
%%      Note 2:  The width of the output port is determined by the width of
%%               the input port.
%%
%% Synopsis:
%%      String LibBlockOutportLocation(ucv, lcv, sigIdx)
%%
%%      ucv    = user control variable
%%      lcv    = loop control variable
%%      sigIdx = offset into block signal
%%
%function LibBlockOutportLocation(ucv, lcv, sigIdx) void
  %if ShowObsoleteWarnings
    %assign warnTxt = "The function LibBlockOutportLocation is " ...
      "obsolete. Please update the target file to use the new function " ...
      "LibBlockDstSignalLocation instead."
    %<LibBlockReportWarning([], warnTxt)>
  %endif
  %return LibBlockDstSignalLocation("outportblk", ucv, lcv, sigIdx)
%endfunction %% LibBlockOutportLocation


%% Function: LibMapSignalSource ================================================
%% Abstract:
%%      This function is obsolete. Update to use FcnMapDataTypedSignalSource.
%%
%function LibMapSignalSource(mapSource, mapIndex, ucv, lcv) void

  %assign errTxt = "The function LibMapSignalSource is obsolete. Please " ...
    "update the target file to use FcnMapDataTypedSignalSource."
  %<LibBlockReportError([], errTxt)>

%endfunction %% LibMapSignalSource


%% Function: LibControlPortInputSignal =========================================
%%
%% Abstract:
%%      Returns the appropriate control port input signal depending on the
%%      source of input signal (i.e., Ui, Xi, Bi, or Gi).
%%
%% Synopsis:
%%      LibControlPortInputSignal(portIdx, sigIdx)
%%
%%      portIdx = control port number, starting from 0
%%      sigIdx  = offset into the signal, i.e.,current index of foreach
%%
%function LibControlPortInputSignal(portIdx, sigIdx) void
  %if ShowObsoleteWarnings
    %assign warnTxt = "The function LibControlPortInputSignal is " ...
      "obsolete. Please update the target file to use the new function " ...
      "LibBlockInputSignal instead."
    %<LibBlockReportWarning([], warnTxt)>
  %endif
  %assign ip = ControlInputPort[portIdx]
  %return FcnMapDataTypedSignalSource(ip, "", "", sigIdx, "")
%endfunction %% LibControlPortInputSignal


%% Function: LibExternalResetSignal ============================================
%%
%% Abstract:
%%      Returns the appropriate reset signal into the reset port
%%      depending on the source of input signal (i.e., Ui, Xi, Bi, or Gi).
%%
%% Synopsis:
%%      LibExternalResetSignal(portIdx, sigIdx)
%%
%%      portIdx = Reset port number, starting from 0
%%      sigIdx  = offset into the signal, i.e.,current index of foreach
%%
%function LibExternalResetSignal(portIdx, sigIdx) void
  %if ShowObsoleteWarnings
    %assign warnTxt = "The function LibExternalResetSignal is " ...
      "obsolete. Please update the target file to use the new function " ...
      "LibBlockInputSignal instead."
    %<LibBlockReportWarning([], warnTxt)>
  %endif
  %return LibBlockInputSignal(portIdx, "", "", sigIdx)
%endfunction %% LibExternalResetSignal


%% Function: LibSourceSignalBlock ==============================================
%% Abstract:
%%      This function returns a reference to the block that outputs the
%%      specified signal.  The actual return value is
%%
%%       block - if the source block is non-virtual
%%       0     - if the source block is virtual block, or cannot be determined
%%               because the signalSrc is being written into by multiple blocks
%%
%% Synopsis:
%%      %<LibSourceSignalBlock(signalSrc)>
%%
%%      signalSrc = Signal source specified in the RTW file.  For example,
%%                  B0, X0, U0, or G.
%%
%function LibSourceSignalBlock(signalSrc) void

  %if ShowObsoleteWarnings
    %assign warnTxt = "The function LibSourceSignalBlock is " ...
      "obsolete. Please update the target file to use the new function " ...
      "LibBlockSrcSignalBlock instead."
    %<LibBlockReportWarning([], warnTxt)>
  %endif
  
  %createrecord portObj { SignalSrc [%<signalSrc>]; SignalOffset [0]; Width 1 }

  %assign sigRec = SLibGetSourceRecord(portObj, 0)
  
  %if ISEMPTY(sigRec) || !ISFIELD(sigRec,"SigSrc")
    %return 0
  %else
    %return System[sigRec.SigSrc[0]].Block[sigRec.SigSrc[2]]
  %endif
  
%endfunction


%% Function: LibOpenTIDScope ==================================================
%%
%% Abstract:
%%      Return the appropriate TID scope given that tid is
%%
%%      Discrete:   if(ssIsSampleHit(S, %<tid>, tid)) {
%%      Continuous: if(ssIsContinuousTask(S, tid)) {
%%
%% Synopsis:
%%      %<LibOpenTIDScope(tid)>
%%      tid = TID of block
%%
%% See Also:
%%      LibTIDScope

%function LibOpenTIDScope(tid) void
  %if ShowObsoleteWarnings
    %assign warnTxt = "The function LibOpenTIDScope is " ...
      "obsolete. Please update the target file to use the new function " ...
      "LibIsSampleHit."
    %<LibBlockReportWarning([], warnTxt)>
  %endif

  %assign period = CompiledModel.SampleTime[tid].PeriodAndOffset[0]
  %assign offset = CompiledModel.SampleTime[tid].PeriodAndOffset[1]
  %if period == 0.0 && offset == 0.0
    %return "if (%<RTMIsContinuousTask()>) {"
  %else
    %return "if (%<RTMIsSampleHit(tid)>) {"
  %endif
%endfunction


%% Function: LibTIDScope ======================================================
%%
%% Abstract:
%%      Return the appropriate TID scope given that tid is
%%
%%      Discrete:   ssIsSampleHit(S, %<tid>, tid)
%%      Continuous: ssIsContinuousTask(S, tid)
%%
%% Synopsis:
%%      %<LibTIDScope(tid)>
%%      tid = TID of block
%%
%% See Also:
%%      LibOpenTIDScope

%function LibTIDScope(tid) void
  %if ShowObsoleteWarnings
    %assign warnTxt = "The function LibTIDScope is " ...
      "obsolete. Please update the target file to use the new function " ...
      "LibIsSampleHit."
    %<LibBlockReportWarning([], warnTxt)>
  %endif

  %assign period = CompiledModel.SampleTime[tid].PeriodAndOffset[0]
  %assign offset = CompiledModel.SampleTime[tid].PeriodAndOffset[1]
  %if period == 0.0 && offset == 0.0
    %return "%<RTMIsContinuousTask()>"
  %else
    %return "%<RTMIsSampleHit(tid)>"
  %endif
%endfunction

%function LibGetFormattedValue(rec, nv) void
  %if ShowObsoleteWarnings
    %assign warnTxt = "The function LibGetFormattedValue is obsolete.  " ...
      "Please update the target file to use the new function " ...
      "SLibGetCastedValue."
    %<LibBlockReportWarning([], warnTxt)>
  %endif
  %return SLibGetCastedValue(rec, nv)
%endfunction

%function LibSpecialTIDScope(tid, sti) void
  %if ShowObsoleteWarnings
    %assign warnTxt = "The function LibSpecialTIDScope is obsolete.  " ...
      "Please update the target file to use the new function " ...
      "LibIsSpecialSampleHit."
    %<LibBlockReportWarning([], warnTxt)>
  %endif
  %return LibIsSpecialSampleHit(sti,tid)
%endfunction

  
%% Function: LibSystemFcnIsInlined(system,fcn) =================================
%% Description:
%%      Function that returns 1 (True) if the function for the system has been
%%      Inlined.
%%
%function LibSystemFcnIsInlined(system, fcn) void
  %if ShowObsoleteWarnings
    %assign sysIdx  = system.CallSites[0][2]
    %assign blkIdx  = system.CallSites[0][3]
    %assign ssBlock = CompiledModel.System[sysIdx].Block[blkIdx]

    %assign warnTxt = "The function LibSystemFcnIsInlined is obsolete.  " ...
      "Please update the target file to use the new function " ...
      "LibSystemIsInlined."
    %<LibReportWarning(ssBlock, warnTxt)>
  %endif
  %return LibSystemIsInlined(system)
%endfunction %% LibSystemFcnIsInlined


%% Function: LibIsFcnInlineable(system,fcn) void ===============================
%% Description:
%%      Function that returns 1 (True) if the function for the system meets the
%%      criteria for being automatically or manually inlined.
%%
%function LibIsFcnInlineable(system,fcn) void
  %if ShowObsoleteWarnings
    %assign sysIdx  = system.CallSites[0][2]
    %assign blkIdx  = system.CallSites[0][3]
    %assign ssBlock = CompiledModel.System[sysIdx].Block[blkIdx]

    %assign warnTxt = "The function LibIsFcnInlineable is obsolete.  " ...
      "Please update the target file to use the new function " ...
      "LibSystemIsInlined."
    %<LibReportWarning(ssBlock, warnTxt)>
  %endif
  %return LibSystemIsInlined(system)
%endfunction %% LibIsFcnInlineable


%% Function: LibIsFcnManuallyInlined(system,fcn) void ==========================
%% Description:
%%      Returns one of the following values:
%%
%%      1  : The system has been explicitly inlined by the user and
%%           the TLC global variable FunctionInlineMode is set to
%%           "Manual" or "Either".
%%      0  : The system has been explicitly un-inlined by the user and
%%           the TLC global variable FunctionInlineMode is set to
%%           "Manual" or "Either".
%%      -1 : If FunctionInlineMode is set to "Manual" or "Either" and the
%%           the didn't specify whether or not to inline the subsystem (in which
%%           case it will most likely be inlined if it is "small"). If
%%           FunctionInlineMode is "None" or "Automatic", then -1 is returned.
%%
%function LibIsFcnManuallyInlined(system,fcn) void
  %if ShowObsoleteWarnings
    %assign sysIdx  = system.CallSites[0][2]
    %assign blkIdx  = system.CallSites[0][3]
    %assign ssBlock = CompiledModel.System[sysIdx].Block[blkIdx]

    %assign warnTxt = "The function LibIsFcnManuallyInlined is obsolete.  " ...
      "Please update the target file to use the new function " ...
      "LibSystemIsInlined."
    %<LibReportWarning(ssBlock, warnTxt)>
  %endif
  %return LibSystemIsInlined(system)
%endfunction %% LibIsFcnManuallyInlined

%% Function: FcnCacheSubsystemPrototype =======================================
%%
%% Purpose:
%%	Cache a subsystem prototype for outputting to the header file.
%%
%% Syntax:
%%	FcnCacheSubsystemPrototype(fcn)
%%
%% Arguments:
%%      fcn: Function record
%%
%% Returns:
%%	Nothing
%%
%% Description:
%%      FcnCacheSubsystemPrototype simply calls LibCacheSubystemPrototype
%%      and is included here for backwards compatability.  A warning will
%%      inform the user of the new function.
%%
%function FcnCacheSubsystemPrototype(fcn) void
  %if ShowObsoleteWarnings
    %assign warnTxt = "The function FcnCacheSubsystemPrototype is obsolete." ...
      "Please update the target file to use the new function " ...
      "LibCacheSubystemPrototype."
    %<LibBlockReportWarning([], warnTxt)>
  %endif
  %<LibCacheSubsystemPrototype(fcn)>
%endfunction


%% Function: LibIsOutputUpdateFcnForced(system) ================================
%%
%% Purpose:
%%	Determine if the OutputUpdateFcn can be inlined.
%%
%% Syntax:
%%	LibIsOutputUpdateFcnForced(system)
%%
%% Arguments:
%%	system: Reference to a system
%%
%% Returns:
%%	1 if the OutputUpdateFcn for the system must have three arguments
%%        and cannot be inlined
%%      0 otherwise
%%
%% Description:
%%      LibIsOutputUpdateFcnForced returns a one if the OutputUpdateFcn for the
%%      system must have three arguments and cannot be inlined.
%%
%function LibIsOutputUpdateFcnForced(system) void
  %if ShowObsoleteWarnings
    %assign warnTxt = "The function LibIsOutputUpdateFcnForced is obsolete." ...
      "Please update the target file to use the new function " ...
      "LibSystemIsForceNonInline."
    %<LibBlockReportWarning([], warnTxt)>
  %endif
  %return (system.ForceNonInline == "on")
%endfunction


%% Function: LibIsEqual =======================================================
%%
%% Abstract:
%%      This function is obsolete, us the built-in TLC function ISEQUAL
%%
%% Purpose:
%%	Compare two expressions (not necessarily of the same type) for
%%      equality.
%%
%% Syntax:
%%      LibIsEqual(expr1, expr2)
%%
%% Arguments:
%%	expr1: First expression
%%      expr2: Second expression
%%
%% Returns:
%%	1 if expr1 equals expr2
%%      0 otherwise
%%
%% Description:
%%      LibIsEqual returns 1 if expr1 equals expr2 and 0 otherwise.  LibIsEqual
%%      differs from the simple equality "==" since it does type checking.
%%      Different type expressions generally return 0.  For example, "0" does
%%      not equal 0.  However, "Number" can be compared to "Real" and "String"
%%      can be compared to "Identifier".
%%
%%      Valid comparisons:
%%
%%      expr1 Type           expr2 Type
%%      ----------           ----------
%%      expr2 Type
%%      Number               Real
%%      Real                 Number
%%      Identifier           String
%%      String               Identifier
%%
%%      Comparing any other types will return false, independent of the values
%%      of the expressions.
%%
%function LibIsEqual(expr1, expr2) void
  %if ShowObsoleteWarnings
    %assign warnTxt = "The function LibIsEqual is obsolete." ...
      "Please update the target file to use the built-in TLC command ISEQUAL."
    %<LibBlockReportWarning([], warnTxt)>
  %endif

  %if  ( TYPE(expr1) == TYPE(expr2) ) ...
    || ( TYPE(expr1) == "Number" && TYPE(expr2) == "Real" ) ...
    || ( TYPE(expr1) == "Real" && TYPE(expr2) == "Number" ) ...
    || ( TYPE(expr1) == "Identifier" && TYPE(expr2) == "String" ) ...
    || ( TYPE(expr1) == "String" && TYPE(expr2) == "Identifier" )
    %if expr1 == expr2
      %return 1
    %else
      %return 0
    %endif
  %else
    %return 0
  %endif
%endfunction


%% Function: LibIsEmpty ========================================================
%%
%% Abstract:
%%      This function is obsolete, us the built-in TLC function ISEMPTY
%%
%% Purpose:
%%	Determine if an input is empty.
%%
%% Syntax:
%%      LibIsEmpty(input)
%%
%% Arguments:
%%	input: Input expression to be tested
%%
%% Returns:
%%      1 for "" (empty string)
%%      1 for [], [[],[]], etc. (empty vectors)
%%      1 for [[[],[]];[[],[]]], etc. (empty matrices)
%%      0 otherwise
%%
%% Description:
%%	LibIsEmpty determines if an input is empty or null.
%%
%function LibIsEmpty(input) void
  %if ShowObsoleteWarnings
    %assign warnTxt = "The function LibIsEqual is obsolete." ...
      "Please update the target file to use the built-in TLC command ISEMPTY."
    %<LibBlockReportWarning([], warnTxt)>
  %endif

  %switch TYPE(input)
    %case "String"
    %return input == ""
  %case "Unsigned"
  %case "Number"
  %case "Real32"
  %case "Real"
  %case "Gaussian"
  %case "UnsignedGaussian"
  %case "Complex32"
  %case "Complex"
    %return SIZE(input, 1) == 0
  %case "Vector"
    %foreach colIdx = SIZE(input, 1)
      %if !LibIsEmpty(input[colIdx])
        %return 0
      %endif
    %endforeach
    %return 1
  %case "Matrix"
    %foreach rowIdx = SIZE(input, 0)
      %foreach colIdx = SIZE(input, 1)
        %if !LibIsEmpty(input[rowIdx][colIdx])
          %return 0
        %endif
      %endforeach
    %endforeach
    %return 1
  %default
    %<LibReportFatalError("Invalid type: %<TYPE(input)>")>
  %endswitch
%endfunction

%% Function: LibIsFinite ======================================================
%%
%% Abstract:
%%	Obsolete, use ISFINITE.
%%
%% Purpose:
%%	Determine if a number is finite.
%%
%% Syntax:
%%      LibIsFinite(value)
%%
%% Arguments:
%%      value: Any number including Inf, MinusInf, and NaN
%%
%% Returns:
%%	1 if the number is not Inf, MinusInf, or NaN
%%      0 otherwise
%%
%% Description:
%%      LibIsFinite returns one if the number is finite and zero otherwise.
%%
%function LibIsFinite(value) void
  %if ShowObsoleteWarnings
    %assign warnTxt = "The function LibIsFinite is obsolete." ...
      "Please update the target file to use the built-in TLC command ISFINITE."
    %<LibBlockReportWarning([], warnTxt)>
  %endif

  %if ISINF(value) || ISNAN(value)
    %return 0
  %else
    %return 1
  %endif
%endfunction

%% Function: SLibGetDataTypeSizeFromId =========================================
%% Abstract:
%%   This routine is not reliable for some targets and should not be used.
%%   Return the size of data type in bytes corresponding to a data type ID or
%%   aliased data type ID.  We assume sizeof(real_T) = 8 bytes (unless 
%%   superceded to be 4 in the case of dSPACE DSP32 targets: C30 & C40 targets).
%%   This is determined based on the existence of TLC variable  'DSP32'; the 
%%   result of which is stored in 'SizeOfDouble'.  The size of unaliased non
%%   built-in data types is also assumed to be 8 bytes.
%%
%function SLibGetDataTypeSizeFromId(id) void
  %if ShowObsoleteWarnings
    %assign warnTxt = "The function SLibGetDataTypeSizeFromId is obsolete." ...
      "Please update the target file to use the sizeof C utility to determine " ...
      "the size of a type type."
    %<LibBlockReportWarning([], warnTxt)>
  %endif
  %if !LibIsBuiltInDataType(id)
    %assign origId = id
    %assign id = LibGetDataTypeStorageIdFromId(origId)
    %if id < 0
      %assign id = origId
    %endif
  %endif
  %switch LibGetDataTypeIdAliasedThruToFromId(id)
    %case tSS_DOUBLE
      %return SizeOfDouble
    %case tSS_SINGLE
      %return 4
    %case tSS_UINT8
      %return 1
    %case tSS_UINT16
      %return 2
    %case tSS_UINT32
      %return 4
    %case tSS_BOOLEAN
      %return 1
    %case tSS_INT8
      %return 1
    %case tSS_INT16
      %return 2
    %case tSS_INT32
      %return 4
    %default
      %return 8
  %endswitch
%endfunction


%endif %% _OBSOLETELIB_

%% [EOF] obsoletelib.tlc
