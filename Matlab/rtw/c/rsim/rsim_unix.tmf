# Copyright 1994-2004 The MathWorks, Inc.
#
# File    : rsim_unix.tmf   $Revision: 1.41.4.15 $
#
# Abstract:
#	Real-Time Workshop template makefile for building a UNIX-based
#	"rapid simulation" executable from the generated C code.
#
# 	This makefile attempts to conform to the guidelines specified in the
# 	IEEE Std 1003.2-1992 (POSIX) standard. It is designed to be used
#       with GNU Make which is located in matlabroot/rtw/bin.
#
# 	Note that this template is automatically customized by the Real-Time
#	Workshop build procedure to create "<model>.mk"
#
#       The following defines can be used to modify the behavior of the
#	build:
#	  OPT_OPTS       - Optimization options. Default is -O. To enable
#                          debugging specify as OPT_OPTS=-g.
#                          Because of optimization problems in IBM_RS,
#                          default is no-optimization.
#	  CPP_OPTS       - C++ compiler options.
#	  OPTS           - User specific compile options.
#	  USER_SRCS      - Additional user sources, such as files needed by
#			   S-functions.
#	  USER_INCLUDES  - Additional include paths
#			   (i.e. USER_INCLUDES="-Iwhere-ever -Iwhere-ever2")
#
#       This template makefile is designed to be used with a system target
#       file that contains 'rtwgensettings.BuildDirSuffix' see rsim.tlc



#------------------------ Macros read by make_rtw ------------------------------
#
# The following macros are read by the Real-Time Workshop build procedure:
#
#  MAKECMD         - This is the command used to invoke the make utility
#  HOST            - What platform this template makefile is targeted for
#                    (i.e. PC or UNIX)
#  BUILD           - Invoke make from the Real-Time Workshop build procedure
#                    (yes/no)?
#  SYS_TARGET_FILE - Name of system target file.

MAKECMD         = make
HOST            = UNIX
BUILD           = yes
SYS_TARGET_FILE = rsim.tlc
BUILD_SUCCESS	= *** Created

#---------------------- Tokens expanded by make_rtw ----------------------------
#
# The following tokens, when wrapped with "|>" and "<|" are expanded by the
# Real-Time Workshop build procedure.
#
#  MODEL_NAME          - Name of the Simulink block diagram
#  MODEL_MODULES       - Any additional generated source modules
#  MAKEFILE_NAME       - Name of makefile created from template makefile <model>.mk
#  MATLAB_ROOT         - Path to were MATLAB is installed.
#  S_FUNCTIONS         - List of S-functions.
#  S_FUNCTIONS_LIB     - List of S-functions libraries to link.
#  HASCPPSFUNCTION     - Are we compiling any C++ S-Function as .obj(1/0)
#  COMPUTER            - Computer type. See the MATLAB computer command.
#  BUILDARGS           - Options passed in at the command line.
#  EXT_MODE            - yes (1) or no (0): Build for external mode
#  TMW_EXTMODE_TESTING - yes (1) or no (0): Build ext_test.c for external mode
#                        testing.
#  EXTMODE_TRANSPORT   - Name of transport mechanism (e.g. tcpip, serial) for extmode
#  EXTMODE_STATIC      - yes (1) or no (0): Use static instead of dynamic mem alloc.
#  EXTMODE_STATIC_SIZE - Size of static memory allocation buffer.


MODEL           = |>MODEL_NAME<|
MODULES         = |>MODEL_MODULES<|
MAKEFILE        = |>MAKEFILE_NAME<|
MATLAB_ROOT     = |>MATLAB_ROOT<|
MATLAB_ROOTQ    = \"|>MATLAB_ROOT<|\"	
S_FUNCTIONS     = |>S_FUNCTIONS<|
S_FUNCTIONS_LIB = |>S_FUNCTIONS_LIB<|
HASCPPSFUNCTION = |>HASCPPSFUNCTION<|
COMPUTER        = |>COMPUTER<|
BUILDARGS       = |>BUILDARGS<|

EXT_MODE            = |>EXT_MODE<|
TMW_EXTMODE_TESTING = |>TMW_EXTMODE_TESTING<|
EXTMODE_TRANSPORT   = |>EXTMODE_TRANSPORT<|
EXTMODE_STATIC      = |>EXTMODE_STATIC_ALLOC<|
EXTMODE_STATIC_SIZE = |>EXTMODE_STATIC_ALLOC_SIZE<|

SOLVER              = |>SOLVER<|
SOLVER_TYPE         = |>SOLVER_TYPE<|
NUMST               = |>NUMST<|
TID01EQ             = |>TID01EQ<|
NCSTATES            = |>NCSTATES<|
MULTITASKING        = |>MULTITASKING<|

RSIM_SOLVER_SELECTION = |>RSIM_SOLVER_SELECTION<|

MODELREFS               = |>MODELREFS<|
SHARED_SRC              = |>SHARED_SRC<|
SHARED_SRC_DIR          = |>SHARED_SRC_DIR<|
SHARED_BIN_DIR          = |>SHARED_BIN_DIR<|
SHARED_LIB              = |>SHARED_LIB<|

#--------------------------- Model and reference models -----------------------
MODELLIB                  = |>MODELLIB<|
MODELREF_LINK_LIBS        = |>MODELREF_LINK_LIBS<|
MODELREF_INC_PATH         = |>START_MDLREFINC_EXPAND_INCLUDES<|-I|>MODELREF_INC_PATH<| |>END_MDLREFINC_EXPAND_INCLUDES<|
RELATIVE_PATH_TO_ANCHOR   = |>RELATIVE_PATH_TO_ANCHOR<|
# ..\..\..\..\..\..\.. or .. or even . if you want it
# NONE: standalone, SIM: modelref sim, RTW: modelref rtw
MODELREF_TARGET_TYPE       = |>MODELREF_TARGET_TYPE<|

#--------------------------- Solver ---------------------------------------------
RSIM_WITH_SL_SOLVER = 0

ifeq ($(RSIM_SOLVER_SELECTION),1)
  ifeq ($(SOLVER_TYPE), VariableStep)
    RSIM_WITH_SL_SOLVER = 1
  endif
endif

ifeq ($(RSIM_SOLVER_SELECTION),2)
  RSIM_WITH_SL_SOLVER = 1
endif

#--------------------------- Tool Specifications -------------------------------

include $(MATLAB_ROOT)/rtw/c/tools/unixtools.mk

#----------------------------- External mode -----------------------------------
# Uncomment -DVERBOSE to have information printed to stdout
# To add a new transport layer, see the comments in
#   <matlabroot>/toolbox/simulink/simulink/extmode_transports.m
ifeq ($(EXT_MODE),1)
  EXT_CC_OPTS = -DEXT_MODE -D$(COMPUTER) #-DVERBOSE
  EXT_LIB     =
  EXT_SRC     =
  ifeq ($(EXTMODE_TRANSPORT),0) #tcpip
    EXT_SRC = ext_svr.c updown.c ext_work.c ext_svr_tcpip_transport.c
  endif
  ifeq ($(EXTMODE_TRANSPORT),1) #serial_win32
    err:
	@echo
	@echo "### ERROR: External mode serial transport only available on win32"
	@echo
  endif
  ifeq ($(TMW_EXTMODE_TESTING),1)
    EXT_SRC     += ext_test.c
    EXT_CC_OPTS += -DTMW_EXTMODE_TESTING
  endif
  ifeq ($(EXTMODE_STATIC),1)
    EXT_SRC     += mem_mgr.c
    EXT_CC_OPTS += -DEXTMODE_STATIC -DEXTMODE_STATIC_SIZE=$(EXTMODE_STATIC_SIZE)
  endif
  ifeq ($(COMPUTER),SOL2)
    EXT_LIB = -lsocket -lnsl
  endif
endif

#------------------------------ Include Path -----------------------------------

MATLAB_INCLUDES = \
	-I$(MATLAB_ROOT)/simulink/include \
	-I$(MATLAB_ROOT)/extern/include \
	-I$(MATLAB_ROOT)/rtw/c/src \
	-I$(MATLAB_ROOT)/rtw/c/rsim \
	-I$(MATLAB_ROOT)/rtw/c/src/ext_mode/common

# Additional includes

ADD_INCLUDES = \
|>START_EXPAND_INCLUDES<|	-I|>EXPAND_DIR_NAME<| \
|>END_EXPAND_INCLUDES<|


SHARED_INCLUDES =
ifneq ($(SHARED_SRC_DIR),)
SHARED_INCLUDES = -I$(SHARED_SRC_DIR) 
endif

INCLUDES = -I. -I$(RELATIVE_PATH_TO_ANCHOR)  $(MATLAB_INCLUDES) $(ADD_INCLUDES) $(USER_INCLUDES) \
	$(INSTRUMENT_INCLUDES) 	$(MODELREF_INC_PATH) $(SHARED_INCLUDES)

#-------------------------------- C Flags --------------------------------------

# Optimization Options
ifndef OPT_OPTS
OPT_OPTS = $(DEFAULT_OPT_OPTS)
endif

# General User Options
OPTS =

# Compiler options, etc:
CC_OPTS = $(OPT_OPTS) $(OPTS) $(ANSI_OPTS) $(EXT_CC_OPTS)

CPP_REQ_DEFINES = -DMODEL=$(MODEL) -DHAVESTDIO -DUNIX

ifeq ($(RSIM_WITH_SL_SOLVER),1)
  CPP_REQ_DEFINES += -DIMPORT=extern -DIMPORT_VAR=extern -DNRT \
                     -DRSIM_WITH_SL_SOLVER -DMATLAB_ROOT="$(MATLAB_ROOT)"\
	             -DMATLAB_ROOTQ=$(MATLAB_ROOTQ)
else
  CPP_REQ_DEFINES += -DRT -DNUMST=$(NUMST) -DTID01EQ=$(TID01EQ) \
                     -DNCSTATES=$(NCSTATES) -DMT=$(MULTITASKING)
endif

CFLAGS = $(CC_OPTS) $(CPP_REQ_DEFINES) $(INCLUDES)
CPPFLAGS = $(CPP_OPTS) $(CC_OPTS) $(CPP_REQ_DEFINES) $(INCLUDES)

#----------------------------- Source Files ------------------------------------
USER_SRCS =
SRC_DEP =
ifeq ($(MODELREF_TARGET_TYPE), NONE)
    PRODUCT            = $(RELATIVE_PATH_TO_ANCHOR)/$(MODEL)
    BIN_SETTING        = $(LD) $(LDFLAGS) -o $(PRODUCT) $(SYSLIBS)
    BUILD_PRODUCT_TYPE = "executable"
    REQ_SRCS = $(MODEL).c $(MODULES) $(EXT_SRC) \
       rsim_main.c rsim_sup.c rsim_mat.c 
    ifneq ($(RSIM_WITH_SL_SOLVER),1)
      REQ_SRCS += rt_sim.c $(SOLVER)
    endif
else
   # Model reference rtw target
   PRODUCT            = $(MODELLIB)
   BUILD_PRODUCT_TYPE = "library"
   REQ_SRCS = $(MODULES)
endif

USER_OBJS       = $(addsuffix .o, $(basename $(USER_SRCS)))
LOCAL_USER_OBJS = $(notdir $(USER_OBJS))

SRCS = $(REQ_SRCS) $(S_FUNCTIONS)

OBJS      = $(addsuffix .o, $(basename $(SRCS))) $(USER_OBJS)
LINK_OBJS = $(addsuffix .o, $(basename $(SRCS))) $(LOCAL_USER_OBJS)

SHARED_SRC := $(wildcard $(SHARED_SRC))
SHARED_OBJS = $(addsuffix .o, $(basename $(SHARED_SRC)))

#--------------------------- Link flags & libraries ----------------------------

ifneq ($(findstring .cpp,$(suffix $(SRCS), $(USER_SRCS))),)
LD = $(CPP)
endif

LDFLAGS =
SYSLIBS = $(EXT_LIB) -lm

LIBS =
|>START_PRECOMP_LIBRARIES<|
ifeq ($(OPT_OPTS),$(DEFAULT_OPT_OPTS))
LIBS += |>EXPAND_LIBRARY_LOCATION<|/|>EXPAND_LIBRARY_NAME<|_std.a
else
LIBS += |>EXPAND_LIBRARY_NAME<|.a
endif
|>END_PRECOMP_LIBRARIES<| |>START_EXPAND_LIBRARIES<|
LIBS += |>EXPAND_LIBRARY_NAME<|.a |>END_EXPAND_LIBRARIES<|
LIBS += $(S_FUNCTIONS_LIB) $(INSTRUMENT_LIBS)

BINDIR = $(MATLAB_ROOT)/bin/$(ARCH)

ifeq ($(COMPUTER),ALPHA)
  MATLIBS = -L$(BINDIR) -rpath $(BINDIR)
  ifeq ($(RSIM_WITH_SL_SOLVER),1)
    MATLIBS += -lmwrsim_engine
  endif
  MATLIBS += -lmat -lmx -lut
endif

ifeq ($(COMPUTER),GLNX86)
  MATLIBS = -Wl,-rpath,$(BINDIR),-L$(BINDIR)
  ifeq ($(RSIM_WITH_SL_SOLVER),1)
    MATLIBS += -Wl,-lmwrsim_engine
  endif
  MATLIBS += -Wl,-lmat,-lmx,-lut
endif

ifeq ($(COMPUTER),HPUX)
  MATLIBS = -L$(BINDIR) -Wl,+b,$(BINDIR)
  ifeq ($(RSIM_WITH_SL_SOLVER),1)
    # need to use aCC to link
    LD := aCC
    MATLIBS += -lmwrsim_engine
  endif
  MATLIBS += -lmat -lmx -lut
endif

ifeq ($(COMPUTER),HP700)
  MATLIBS = -L$(BINDIR) -Wl,+b,$(BINDIR)
  ifeq ($(RSIM_WITH_SL_SOLVER),1)
    # need to use aCC to link
    LD := aCC
    MATLIBS += -lmwrsim_engine
  endif
  MATLIBS += -lmat -lmx -lut
endif

ifeq ($(COMPUTER),IBM_RS)
  MATLIBS = -L$(BINDIR)
  ifeq ($(RSIM_WITH_SL_SOLVER),1)
    MATLIBS += -lmwrsim_engine
  endif
  MATLIBS += -lmat -lmx -lut
endif

ifeq ($(COMPUTER),SGI)
  MATLIBS = -L$(BINDIR) -rpath $(BINDIR)
  ifeq ($(RSIM_WITH_SL_SOLVER),1)
    MATLIBS += -lmwrsim_engine
  endif
  MATLIBS += -lmat -lmx -lut
endif

ifeq ($(COMPUTER),SGI64)
  MATLIBS = -L$(BINDIR) -rpath $(BINDIR)
  ifeq ($(RSIM_WITH_SL_SOLVER),1)
    MATLIBS += -lmwrsim_engine
  endif
  MATLIBS += -lmat -lmx -lut
endif

ifeq ($(COMPUTER),SOL2)
  MATLIBS = -L$(BINDIR) -R$(BINDIR)
  ifeq ($(RSIM_WITH_SL_SOLVER),1)
    MATLIBS += -lmwrsim_engine
  endif
  MATLIBS += -lmat -lmx -lut
endif

ifeq ($(COMPUTER),MAC)
 LDFLAGS = -Wl -flat_namespace -undefined suppress -bind_at_load
 MATLIBS = -L$(BINDIR) -L$(MATLAB_ROOT)/sys/os/mac
  ifeq ($(RSIM_WITH_SL_SOLVER),1)
    MATLIBS += -lmwrsim_engine
  endif
  MATLIBS += -lmat -lmx -lut -ldl
endif


#--------------------------------- Rules ---------------------------------------

ifeq ($(MODELREF_TARGET_TYPE),NONE)
$(PRODUCT) : $(OBJS)  $(SHARED_LIB) $(LIBS)  $(MODELREF_LINK_LIBS)
	$(BIN_SETTING) $(LINK_OBJS) $(MODELREF_LINK_LIBS) $(LIBS) $(MATLIBS) $(SHARED_LIB)
	@echo "$(BUILD_SUCCESS) $(BUILD_PRODUCT_TYPE): $@"
else
$(PRODUCT) : $(OBJS) $(SHARED_LIB) $(LIBS) 
	@rm -f $(MODELLIB)
	ar ruvs $(MODELLIB) $(LINK_OBJS)
	@echo "### $(MODELLIB) Created"
	@echo "$(BUILD_SUCCESS) $(BUILD_PRODUCT_TYPE): $@"	
endif


ifeq ($(RSIM_WITH_SL_SOLVER),1)
	@echo "### Note : The executable $(MODEL) will check out a Simulink license when run"
ifeq ($(COMPUTER),SOL2)
	@echo "### Note : Add $(MATLAB_ROOT)/bin/sol2 to the LD_LIBRARY_PATH environmental variable to run executable $(MODEL) in seperate shell"
endif
endif

ifeq ($(COMPUTER),MAC)
	@echo "### Note : Add $(MATLAB_ROOT)/bin/mac and $(MATLAB_ROOT)/sys/os/mac to the DYLD_LIBRARY_PATH environmental variable to run executable $(MODEL) in seperate shell"
endif
	@echo "$(BUILD_SUCCESS) executable: $(MODEL)"

%.o : %.c
	$(CC) -c -o $(@F) $(CFLAGS) $(GCC_WALL_FLAG) $<

%.o : %.cpp
	$(CPP) -c $(CPPFLAGS)$(GCC_WALL_FLAG)  $<

%.o : $(RELATIVE_PATH_TO_ANCHOR)/%.c
	$(CC) -c -o $(@F) $(CFLAGS) $(GCC_WALL_FLAG) $<

%.o : $(RELATIVE_PATH_TO_ANCHOR)/%.cpp
	$(CPP) -c $(CPPFLAGS) $(GCC_WALL_FLAG) $<

%.o : $(MATLAB_ROOT)/rtw/c/rsim/%.c
	$(CC) -c $(CFLAGS) $(GCC_WALL_FLAG_MAX) $<

%.o : $(MATLAB_ROOT)/rtw/c/src/%.c
	$(CC) -c $(CFLAGS) $(GCC_WALL_FLAG_MAX) $<

%.o : $(MATLAB_ROOT)/rtw/c/src/ext_mode/common/%.c
	$(CC) -c $(CFLAGS) $(GCC_WALL_FLAG_MAX) $<

%.o : $(MATLAB_ROOT)/rtw/c/src/ext_mode/tcpip/%.c
	$(CC) -c $(CFLAGS) $(GCC_WALL_FLAG_MAX) $<

%.o : $(MATLAB_ROOT)/rtw/c/src/ext_mode/custom/%.c
	$(CC) -c $(CFLAGS) $(GCC_WALL_FLAG_MAX) $<

|>START_EXPAND_RULES<|%.o : |>EXPAND_DIR_NAME<|/%.c
	$(CC) -c $(CFLAGS) $(GCC_WALL_FLAG_MAX) $<

|>END_EXPAND_RULES<|


|>START_EXPAND_RULES<|%.o : |>EXPAND_DIR_NAME<|/%.cpp
	$(CPP) -c $(CPPFLAGS) $<
|>END_EXPAND_RULES<|

%.o : $(MATLAB_ROOT)/simulink/src/%.c
	$(CC) -c $(CFLAGS) $(GCC_WALL_FLAG_MAX) $<

%.o : $(MATLAB_ROOT)/simulink/src/%.cpp
	@$(GCC_TEST_CMD) $< $(GCC_TEST_OUT)
	$(CPP) -c $(CPPFLAGS) $<

# Libraries:

|>START_EXPAND_LIBRARIES<|MODULES_|>EXPAND_LIBRARY_NAME<| = \
|>START_EXPAND_MODULES<|    |>EXPAND_MODULE_NAME<|.o \
|>END_EXPAND_MODULES<|

|>EXPAND_LIBRARY_NAME<|.a : $(MAKEFILE) rtw_proj.tmw \
				$(MODULES_|>EXPAND_LIBRARY_NAME<|)
	@echo "### Creating $@ "
	ar rs $@ $(MODULES_|>EXPAND_LIBRARY_NAME<|)
	@echo "### $@ Created"

|>END_EXPAND_LIBRARIES<|

|>START_PRECOMP_LIBRARIES<|MODULES_|>EXPAND_LIBRARY_NAME<| = \
|>START_EXPAND_MODULES<|    |>EXPAND_MODULE_NAME<|.o \
|>END_EXPAND_MODULES<|

|>EXPAND_LIBRARY_NAME<|.a : $(MAKEFILE) rtw_proj.tmw \
				$(MODULES_|>EXPAND_LIBRARY_NAME<|)
	@echo "### Creating $@ "
	ar rs $@ $(MODULES_|>EXPAND_LIBRARY_NAME<|)
	@echo "### $@ Created"

|>END_PRECOMP_LIBRARIES<|

#----------------------------- Dependencies ------------------------------------

$(OBJS) : $(MAKEFILE) rtw_proj.tmw

$(SHARED_OBJS) : $(SHARED_BIN_DIR)/%.o : $(SHARED_SRC_DIR)/%.c
	$(CC) -c -o $(SHARED_BIN_DIR)/$(@F) $(CFLAGS) $(GCC_WALL_FLAG_MAX) $<

$(SHARED_LIB) : $(SHARED_OBJS)
	@echo "### Creating $@ "
	ar ruvs $@ $(SHARED_OBJS)
	@echo "### $@ Created"

#--------- Miscellaneous rules to purge and clean ------------------------------

purge : clean
	@echo "### Deleting the generated source code for $(MODEL)"
	\rm -f $(MODEL).c $(MODEL).h $(MODEL)_types.h $(MODEL)_data.c \
		 $(MODEL)_private.h $(MODEL).rtw $(MODULES) rtw_proj.tmw $(MAKEFILE)

clean :
	@echo "### Deleting the objects and $(PROGRAM)"
	\rm -f $(LINK_OBJS) $(PROGRAM)

# EOF: rsim_unix.tmf
