function varargout = sfdbfig(command,varargin)
%   M-file containing GUI logic for the Stateflow debugger

%   Vladimir Kolesnikov
%   Copyright 1995-2003 The MathWorks, Inc.
%   $Revision: 1.21.2.2 $  $Date: 2004/04/15 00:59:58 $

switch(command)
case 'init'
    varargout{1} = sfdbfig_init(varargin);
case 'get_view_options'
    varargout{1} = get_view_options(varargin{1});
otherwise,
    error('why');
end

function viewOptions = get_view_options(fig)
    %%% VGR, VYK 5/5/98:
    %%% viewOptions MUST reflect machine.debug.gui.view structure.
    %%% any change to this must be properly coordinated with machine.h
    %%%
    data = get(fig,'userdata');
    viewOptions = [data.gui.panes data.gui.isMinimal];

function gui_resize(fig, arg)

    flipPane = 0;
    mouseMotion = 0;

    if nargin > 1
        if iscell(arg)
            fcn = arg{1};
            if strcmp(fcn, 'flip_pane')
                flipPane = 1;
                paneNum = arg{2};
            elseif strcmp(fcn, 'mouse_motion')
                mouseMotion = 1;
            end
        end
    end

    data = get( fig, 'UserData' );
    guiData = data.gui;
    h = guiData.handles;
    % clear the possibly visible frame
    if data.gui.lastMouseOver ~= 0 & ~mouseMotion,
        data.gui.lastMouseOver = 0;
        safe_set(fig,'UserData',data);
        clear_frame( h.frame );
        button_down(fig);
        data = get( fig, 'UserData' );
        drawnow;
    end

    % check if the position of the window has changed insignificantly
    posChange = guiData.oldPos - get( fig, 'Position' );
    if isempty( find( abs(posChange) > 0.4 ) ) & ~flipPane & ~mouseMotion
        return;
    end

    if data.gui.inResize == 0,
        data.gui.inResize = 1;
        safe_set(fig,'UserData',data);

        %%%set( fig, 'UserData', data );
    else
        return;
    end



    scrSize = guiData.charScrSize;
    pix2charRatio = guiData.pix2charRatio;
    defWindowWidth = 100;
    defWindowHeight = 30;
    %minWindowWidth = length(' Stop Simulation ')*4+5;
    minWindowWidth = 92;
    minWindowHeight = 20;
    buttonHW = [15 1.5];
    helpClosePresent = guiData.helpClosePresent;
    helpCloseHeight = 2.5;
    currentPos = get( fig, 'Position' );

    paneHeights = [ 5.2 4.2 5.0 4.5 ];
   panes = guiData.panes;

    defWindowHeight = paneHeights * panes' + helpCloseHeight + panes(4)*5;

   if ~guiData.isInitialized  % first time running
        maxPos = [ 0 0 0 0 ];
        if guiData.isMinimal
            maxPos = [ 0 0 defWindowWidth defWindowHeight ];
            defWindowHeight = paneHeights(2);
        defWindowWidth = minWindowWidth;
        end
        %panes = [ 1 1 1 1 ];
        currentPos = [ scrSize(3:4)/3, defWindowWidth, defWindowHeight ];
        data.gui.panes = panes;
        % now set the corresponding CData images for the expand buttons
        % assume that they are all set to down arrows as of now
        if panes(1) == 0
            % set it to up
            set( h.control.PB_FLIP_STATUS, 'CDATA', guiData.upArrowBtnImage );
        else
            set( data.gui.handles.menu.STATUS_VIEW_MENU, 'Checked', 'on' );
        end
        if panes(3) == 1
            % set it to up
            set( h.control.PB_FLIP_OPTIONS, 'CDATA', guiData.upArrowBtnImage );
            set( data.gui.handles.menu.OPTIONS_VIEW_MENU, 'Checked', 'on' );
        end
        if panes(4) == 1
            % set it to up
            set( h.control.PB_FLIP_DISPLAY, 'CDATA', guiData.upArrowBtnImage );
            set( data.gui.handles.menu.DISPLAY_VIEW_MENU, 'Checked', 'on' );
        end

        data = get( fig, 'UserData' );
        data.gui.maxPos = maxPos;
        data.gui.panes = panes;
        data.gui.oldDisplaySize = 10;
        set( fig, 'Position', currentPos);
        safe_set(fig,'UserData',data);
        if guiData.isMinimal
            data = get( fig, 'UserData' );
            data.gui.isMinimal = 0;
            safe_set(fig,'UserData',data);
            gui_minimize(fig);
        end
        data = get( fig, 'UserData' );
        data.gui.isInitialized = 1;  % isInitialized should be set after the call to the gui_minimize
        safe_set(fig,'UserData',data);
    end

    if guiData.isMinimal
        panes = [0 1 0 0]; % this change does not get saved to the userdata this is only
                                 % for the time of execution of the resize function
    end

   % now determine the figure's new position if the resize
   % is called by flip_pane
   if flipPane
      scrSize = guiData.charScrSize;
      switch paneNum,
        case 1,
         % we just killed the status view
         if panes(1) == 0
            height = currentPos(4) - paneHeights(1);
            set( fig, 'Position', [currentPos(1:3), height ]);
         end
         % we just opened the status view
         if panes(1) == 1
            height = currentPos(4) + paneHeights(1);
            if( height + currentPos(2) ) > scrSize(4) - 3
               currentPos(2) = scrSize(4) - 3 - height;
            end
            set( fig, 'Position', [currentPos(1:3), height ]);
         end
      case 3,
         % we just killed the options view
         if panes(3) == 0
            %update the figure size only if pane 4 is closed
            if panes( 4 ) == 0
                height = sum( paneHeights( 1:4 ) * panes( 1:4 )' ) + helpCloseHeight*helpClosePresent;
                newPos = [currentPos(1), currentPos(2) + currentPos(4) - height,...
                   currentPos(3), height];
                set( fig, 'Position', newPos );
            end
         end
         % we just opened the options view
         if panes(3) == 1
            height = max( currentPos(4), min(currentPos(4) + paneHeights(3), ...
               sum( paneHeights( 1:4 ) * panes( 1:4 )' ) + helpCloseHeight*helpClosePresent ) );
            newPos = [currentPos(1), currentPos(2) + currentPos(4) - height,...
                   currentPos(3), height];
            set( fig, 'Position', newPos );
         end
      case 4,
         %we just killed the display view
         if panes(4) == 0
                height = paneHeights( 1:3 ) * panes( 1:3 )' + helpCloseHeight*helpClosePresent;
            newPos = [currentPos(1), currentPos(2) - height + currentPos(4),...
                  currentPos(3), height];
            data = get( fig, 'UserData' );
                data.gui.oldDisplaySize = currentPos(4) - paneHeights(1:3)*panes(1:3)' - helpCloseHeight*helpClosePresent;
            set( fig, 'Position', newPos);
                safe_set(fig,'UserData',data);
                %%%set(fig,'UserData', data);
         end
         % we just opened the display view
         if panes(4) == 1
            height = guiData.oldDisplaySize+paneHeights( 1:3 ) * panes( 1:3 )' + helpCloseHeight*helpClosePresent;
            newPos = [currentPos(1), currentPos(2) + currentPos(4) - height,...
                   currentPos(3), height];
            set( fig, 'Position', newPos );
         end
      end
    end % if flipPane

    currentPos = get( fig, 'Position' );




    if mouseMotion
        data = get( fig, 'UserData' );
        %newPos = get( fig, 'Position');
        if guiData.tooLarge | guiData.tooShort
            %snap the window to the minimum window size
            height = paneHeights( 1:4 ) * panes( 1:4 )' + helpCloseHeight*helpClosePresent;
        newPos = [currentPos(1), currentPos(2) + currentPos(4) - height,...
              currentPos(3), height];
            currentPos = newPos;
            data.gui.tooLarge = 0;
            data.gui.tooShort = 0;
        end
        if guiData.tooNarrow
            newPos = [ currentPos(1:2), minWindowWidth, currentPos(4) ];
            data.gui.tooNarrow = 0;
        end

        set( fig, 'Position', newPos);
        safe_set(fig,'UserData',data);
        %%%set(fig, 'UserData', data );
        currentPos = get( fig, 'Position' );
        set( h.DTXT_TOO_LARGE, 'Visible', 'off' );

    end

    tooNarrow = currentPos( 3 ) < minWindowWidth;
    tooShort = currentPos(4)+0.4 < paneHeights * panes' + helpCloseHeight*helpClosePresent;
    if tooNarrow | tooShort
        set( h.DTXT_TOO_SMALL, 'Visible', 'on' );
        data = get( fig, 'UserData' );
        data.gui.inResize = 0;
        data.gui.tooNarrow = tooNarrow;
        data.gui.tooShort = tooShort;
        safe_set(fig,'UserData',data);
        %%%set( fig, 'UserData', data );
        return;
    else
        set( h.DTXT_TOO_SMALL, 'Visible', 'off' );
        data = get( fig, 'UserData' );
        data.gui.tooShort = 0;
        data.gui.tooNarrow = 0;
        safe_set(fig,'UserData',data);
        %%%set( fig, 'UserData', data );
    end



    figHeight = currentPos(4);
    figWidth = currentPos(3);

    % now the list of open panes is known, set the objects in the debugger window.

    % pane 1  ( Status View )
    if panes(1) == 1
        hs = h.status;
        offset = 20;

        set( hs.Frame4, 'Position', [0.2, figHeight-5.3, figWidth - 0.4, 5.1] );
        set( hs.DTXT_DEBUGGER_STATUS, 'Position', [1, figHeight-1.5, figWidth - 20, 1.2] );


        set( hs.STXT_STOPPED, 'Position', [1, figHeight-1.5, offset, 1.2] );
        set( hs.STXT_EXECUTING, 'Position', [1, figHeight-1.5-1.2*1, offset, 1.2] );
        set( hs.STXT_CURRENT_EVENT, 'Position', [1, figHeight-1.5-1.2*2, offset, 1.2] );
        set( hs.STXT_SIMULATION_TIME, 'Position', [1, figHeight-1.5-1.2*3, offset, 1.2] );

        widthLeft = figWidth - offset - 1-2;

        stoppedPos = [1+offset, figHeight-1.5, widthLeft, 1.2];
        executingPos = [1+offset, figHeight-1.5-1.2*1, widthLeft, 1.2];
        eventPos = [1+offset, figHeight-1.5-1.2*2, widthLeft, 1.2];
        set( hs.DTXT_STOPPED, 'Position', stoppedPos );
        set( hs.DTXT_EXECUTING, 'Position', executingPos );
        set( hs.DTXT_CURRENT_EVENT, 'Position', eventPos );
        set( hs.DTXT_SIMULATION_TIME, 'Position', [1+offset, figHeight-1.5-1.2*3, 40, 1.2] );

        data.gui.motionCatchers.DTXT_STOPPED.id = hs.DTXT_STOPPED;
        data.gui.motionCatchers.DTXT_STOPPED.position = stoppedPos;
        data.gui.motionCatchers.DTXT_EXECUTING.id = hs.DTXT_EXECUTING;
        data.gui.motionCatchers.DTXT_EXECUTING.position = executingPos;
        data.gui.motionCatchers.DTXT_CURRENT_EVENT.id = hs.DTXT_CURRENT_EVENT;
        data.gui.motionCatchers.DTXT_CURRENT_EVENT.position = eventPos;

        safe_set(fig,'UserData',data);
        %%%set( fig, 'UserData', data );


        set( hs.STXT_CODE_COVERAGE, 'Position', [figWidth/2, figHeight-1.5-1.2*3, offset, 1.2] );
        set( hs.DTXT_CODE_COVERAGE, 'Position', [figWidth/2+ offset, figHeight-1.5-1.2*3, 10, 1.2] );

        % this button position is defined in pixels
        set( hs.PB_KILL_STATUS, 'Position', ...
            [figWidth*pix2charRatio(1) - 15, figHeight*pix2charRatio(2) - 15, 12, 12] );
        figHeight = figHeight - paneHeights(1);

    end

    % pane 2  ( Control View )
    if panes(2) == 1
        breakTextW = 14; breakTextX = 1;
        chartCBW = 15;      chartCBX = breakTextW + breakTextX + 2;
        evtCBW = 20;        evtCBX = chartCBW + chartCBX + 2;
        stateCBW = 15;      stateCBX = evtCBW + evtCBX + 2;
        barX = stateCBX+stateCBW + 1;
        disableCBW = 14;
        disableCBX = barX+2;
        stopBtnW = buttonHW(1)+1.0;
        stopBtnX = disableCBX+disableCBW-stopBtnW;

        hc = h.control;

        set( hc.Frame3, 'Position', [0.2, figHeight-4.1, figWidth - 0.4, 3.9] );

        set( hc.STXT_BREAK_ON_EVERY, 'Position', [breakTextX, figHeight-1.7, breakTextW, 1.2] );
        set( hc.CB_CHART_ENTRY, 'Position', [chartCBX, figHeight-1.7, chartCBW, 1.2] );
        set( hc.CB_EVENT_BROADCAST, 'Position', [evtCBX, figHeight-1.7, evtCBW, 1.2] );
        set( hc.CB_STATE_ENTRY, 'Position', [stateCBX, figHeight-1.7, stateCBW, 1.2] );

        set( hc.PB_GO, 'Position', [1 + 0*2, figHeight-1.7-1.8, buttonHW] );
        set( hc.PB_STEP, 'Position', [1 + 1*2+buttonHW(1), figHeight-1.7-1.8, buttonHW] );
        set( hc.PB_BREAK, 'Position', [1+ 2*2+buttonHW(1)*2, figHeight-1.7-1.8, buttonHW] );

        set( hc.PB_STOP_DEBUGGING, 'Position', [stopBtnX, figHeight-1.7-1.8, stopBtnW, buttonHW(2)] );

        % draw the bar and the disable all checkbox

        set( hc.STXT_BREAKPOINTS_BAR, 'Position', [barX, figHeight-1.7, 0.3, 1.2] );
        %set( hc.STXT_BREAKPOINTS, 'Position', [barX+1, figHeight-1.7-1.8, disableCBW, 1.2] );
        set( hc.CB_DISABLE_BREAKPOINTS, 'Position', [barX+2, figHeight-1.7, disableCBW, 1.2] );


        % this button position is defined in pixels
        set( hc.PB_FLIP_STATUS, 'Position', ...
            [figWidth*pix2charRatio(1) - 15, figHeight*pix2charRatio(2) - 15, 12, 12] );
        set( hc.PB_FLIP_OPTIONS, 'Position', ...
            [figWidth*pix2charRatio(1) - 15, (figHeight-4.1)*pix2charRatio(2)+15, 12, 12] );
        set( hc.PB_FLIP_DISPLAY, 'Position', ...
            [figWidth*pix2charRatio(1) - 15, (figHeight-4.1)*pix2charRatio(2)+2, 12, 12] );



        figHeight = figHeight - paneHeights(2);

    end

    % pane 3  ( Options View )
    if panes(3) == 1,
        ho = h.options;
        errorFrameW = (figWidth -0.8) * 0.6; errorFrameX = 0.4;
        animationFrameW = (figWidth -0.8) * 0.4-3.8; animationFrameX = errorFrameW + errorFrameX + 0.1;
        set( ho.Frame2, 'Position', [0.2, figHeight-4.9, figWidth - 0.4, 4.9] );
        set( h.options.ERROR_CHECKING_OPTIONS_FRAME, ...
            'Position', [errorFrameX, figHeight-4.8, errorFrameW , 4.7] );
        set( h.options.ANIMATION_OPTIONS_FRAME, ...
            'Position', [animationFrameX, figHeight-4.8, animationFrameW , 4.7] );

        set( ho.STXT_ERRORCHECKINGOPTIONS, 'Position', [errorFrameX + 0.7, figHeight-1.5, errorFrameW - 1, 1.2] );
        set( ho.CB_CHECK_FOR_STATE_INCONSISTENCIES,...
             'Position', [errorFrameX + 0.7, figHeight-1.5-1.5, errorFrameW/2 - 0.7, 1.2] );
        set( ho.CB_RANGE_CHECKS_FOR_DATA,...
             'Position', [errorFrameX + errorFrameW/2, figHeight-1.5-1.5, errorFrameW/2 - 0.7, 1.2] );
        set( ho.CB_CHECK_FOR_CONFLICTING_TRANSITIONS,...
             'Position', [errorFrameX + 0.7, figHeight-1.5-1.5*2, errorFrameW/2 - 0.7, 1.2] );
        set( ho.CB_DETECT_CYCLES,...
             'Position', [errorFrameX + errorFrameW/2, figHeight-1.5-1.5*2, errorFrameW/2 - 0.7, 1.2] );

        set( ho.STXT_ANIMATION, 'Position', [animationFrameX + 0.7, figHeight-1.5, animationFrameW/2 - 0.7, 1.2] );
        set( ho.STXT_DELAY, ...
             'Position', [animationFrameX + animationFrameW/2, figHeight-1.5, animationFrameW/2 - 0.7, 1.2] );
        set( ho.RB_ANIMATION_ENABLED,...
             'Position', [animationFrameX + 0.7, figHeight-1.5-1.5, animationFrameW/2 - 0.7, 1.2] );
        set( ho.POP_DELAY,...
             'Position', [animationFrameX + animationFrameW/2, figHeight-1.5-1.5, animationFrameW/2 - 4.7, 1.2] );
        set( ho.RB_ANIMATION_DISABLED,...
             'Position', [animationFrameX + 0.7, figHeight-1.5-1.5*2, animationFrameW/2 - 0.7, 1.2] );

    % this button position is defined in pixels
        set( ho.PB_KILL_OPTIONS, 'Position', ...
            [figWidth*pix2charRatio(1) - 15, figHeight*pix2charRatio(2) - 15, 12, 12] );

        figHeight = figHeight - paneHeights(3);

    end

    if helpClosePresent,
        bottomX = 1.8;
        set( h.help_close.PB_CLOSE, 'Position', [figWidth - buttonHW(1) - 0.5, 0.4, buttonHW] );
        set( h.help_close.PB_HELP, 'Position', [figWidth - buttonHW(1)*2 - 1.5 - 0.5, 0.4, buttonHW] );
    else
        bottomX = 0;
    end
    % pane 4  ( Display View )
    if panes(4) == 1,
        hd = h.display;
        % draw the thing using all what's left, except for the space for help and close buttons
        buttonW = (figWidth - 0.5) / 5.3;

        set( hd.Frame1, 'Position', [0.2, bottomX + 0.2, figWidth - 0.4, figHeight-bottomX] );

        % set the positions of the buttons
        for i = 1:5
            buttonPos(i, :) = [1 + buttonW*(i-1), figHeight - 1.65, buttonW, buttonHW(2)];
        end

        btnOffset = [0, 0, -2, 0];
        dnBtnOffset = [buttonW-2, 0, 2-buttonW, 0];
        topBtnOffset = [buttonW-2, buttonHW(2)-2/pix2charRatio(2), 2-buttonW, buttonHW(2)];
        txtOffset = [0.5, buttonPos(1,4) * 0.1, -2.5, -buttonPos(1,4)*0.3];
        rightEdgeOffset = [1.6, 0, 0, 0];
        leftEdgeOffset = [0, 0, 0, 0];

      breakpointsIndex = 1;
      browseDataIndex = 2;
      activeStatesIndex = 3;
      coverageIndex = 4;
      callstackIndex = 5;

      if(0)
        set( hd.PB_CALL_STACK_DN_ARROW, 'Position', buttonPos(callstackIndex,:)  + dnBtnOffset);
      end
        set( hd.PB_COVERAGE_DN_ARROW, 'Position',  buttonPos(coverageIndex,:) + dnBtnOffset);
        set( hd.PB_CHART_DATA_DN_ARROW, 'Position', buttonPos(browseDataIndex,:) + dnBtnOffset );
        set( hd.PB_ACTIVE_STATES_DN_ARROW, 'Position', buttonPos(activeStatesIndex,:)  + dnBtnOffset);
        set( hd.PB_BREAKPOINTS_DN_ARROW, 'Position', buttonPos(breakpointsIndex,:)  + dnBtnOffset);

      if(0)
        set( hd.DTXT_CALL_STACK_DOWN, 'Position', ...
         [buttonPos(callstackIndex,1:3)+dnBtnOffset(1:3),2/pix2charRatio(2)] );
        set( hd.DTXT_CALL_STACK_RIGHT, 'Position', ...
            [buttonPos(callstackIndex,1:2)+dnBtnOffset(1:2)+rightEdgeOffset(1:2),6/pix2charRatio(1), buttonHW(2)] );
        set( hd.DTXT_CALL_STACK_LEFT,  'Position', ...
            [buttonPos(callstackIndex,1:2)+dnBtnOffset(1:2)+leftEdgeOffset(1:2),3/pix2charRatio(2), buttonHW(2)]);
        set( hd.DTXT_CALL_STACK_TOP, 'Position',...
         [buttonPos(callstackIndex,1:3)+topBtnOffset(1:3),4/pix2charRatio(2) ]);
      end

        set( hd.DTXT_COVERAGE_DOWN, 'Position', ...
         [buttonPos(coverageIndex,1:3)+dnBtnOffset(1:3),2/pix2charRatio(2)] );
        set( hd.DTXT_COVERAGE_RIGHT, 'Position', ...
            [buttonPos(coverageIndex,1:2)+dnBtnOffset(1:2)+rightEdgeOffset(1:2),6/pix2charRatio(1), buttonHW(2)] );
        set( hd.DTXT_COVERAGE_LEFT, 'Position', ...
            [buttonPos(coverageIndex,1:2)+dnBtnOffset(1:2)+leftEdgeOffset(1:2),3/pix2charRatio(2), buttonHW(2)]);
        set( hd.DTXT_COVERAGE_TOP, 'Position',...
         [buttonPos(coverageIndex,1:3)+topBtnOffset(1:3),4/pix2charRatio(2) ]);

        set( hd.DTXT_CHART_DATA_DOWN, 'Position', ...
         [buttonPos(browseDataIndex,1:3)+dnBtnOffset(1:3),2/pix2charRatio(2)] );
        set( hd.DTXT_CHART_DATA_RIGHT, 'Position', ...
            [buttonPos(browseDataIndex,1:2)+dnBtnOffset(1:2)+rightEdgeOffset(1:2),6/pix2charRatio(1), buttonHW(2)] );
        set( hd.DTXT_CHART_DATA_LEFT, 'Position', ...
            [buttonPos(browseDataIndex,1:2)+dnBtnOffset(1:2)+leftEdgeOffset(1:2),3/pix2charRatio(2), buttonHW(2)]);
        set( hd.DTXT_CHART_DATA_TOP, 'Position',...
         [buttonPos(browseDataIndex,1:3)+topBtnOffset(1:3),4/pix2charRatio(2) ]);

        set( hd.DTXT_ACTIVE_STATES_DOWN, 'Position', ...
         [buttonPos(activeStatesIndex,1:3)+dnBtnOffset(1:3),2/pix2charRatio(2)] );
        set( hd.DTXT_ACTIVE_STATES_RIGHT, 'Position', ...
            [buttonPos(activeStatesIndex,1:2)+dnBtnOffset(1:2)+rightEdgeOffset(1:2),6/pix2charRatio(1), buttonHW(2)] );
        set( hd.DTXT_ACTIVE_STATES_LEFT, 'Position', ...
            [buttonPos(activeStatesIndex,1:2)+dnBtnOffset(1:2)+leftEdgeOffset(1:2),3/pix2charRatio(2), buttonHW(2)]);
        set( hd.DTXT_ACTIVE_STATES_TOP, 'Position',...
         [buttonPos(activeStatesIndex,1:3)+topBtnOffset(1:3),4/pix2charRatio(2) ]);

        set( hd.DTXT_BREAKPOINTS_DOWN, 'Position', ...
         [buttonPos(breakpointsIndex,1:3)+dnBtnOffset(1:3),2/pix2charRatio(2)] );
        set( hd.DTXT_BREAKPOINTS_RIGHT, 'Position', ...
            [buttonPos(breakpointsIndex,1:2)+dnBtnOffset(1:2)+rightEdgeOffset(1:2),6/pix2charRatio(1), buttonHW(2)] );
        set( hd.DTXT_BREAKPOINTS_LEFT, 'Position', ...
            [buttonPos(breakpointsIndex,1:2)+dnBtnOffset(1:2)+leftEdgeOffset(1:2),3/pix2charRatio(2), buttonHW(2)]);
        set( hd.DTXT_BREAKPOINTS_TOP, 'Position',...
         [buttonPos(breakpointsIndex,1:3)+topBtnOffset(1:3),4/pix2charRatio(2) ]);

        set( hd.DTXT_CALL_STACK, 'Position', buttonPos(callstackIndex,:) + txtOffset);
        set( hd.DTXT_COVERAGE, 'Position',  buttonPos(coverageIndex,:) + txtOffset);
        set( hd.DTXT_CHART_DATA, 'Position', buttonPos(browseDataIndex,:) + txtOffset );
        set( hd.DTXT_ACTIVE_STATES, 'Position', buttonPos(activeStatesIndex,:) + txtOffset );
        set( hd.DTXT_BREAKPOINTS, 'Position', buttonPos(breakpointsIndex,:) + [txtOffset(1:2),0,txtOffset(4)] );

        data = get( fig, 'UserData' );
        data.gui.motionCatchers.CALL_STACK.id = hd.DTXT_CALL_STACK;
        data.gui.motionCatchers.CALL_STACK.position = buttonPos(callstackIndex,:);
        data.gui.motionCatchers.COVERAGE.id = hd.DTXT_COVERAGE;
        data.gui.motionCatchers.COVERAGE.position = buttonPos(coverageIndex,:);
        data.gui.motionCatchers.CHART_DATA.id = hd.DTXT_CHART_DATA;
        data.gui.motionCatchers.CHART_DATA.position = buttonPos(browseDataIndex,:);
        data.gui.motionCatchers.ACTIVE_STATES.id = hd.DTXT_ACTIVE_STATES;
        data.gui.motionCatchers.ACTIVE_STATES.position = buttonPos(activeStatesIndex,:);
        data.gui.motionCatchers.BREAKPOINTS.id = hd.DTXT_BREAKPOINTS;
        data.gui.motionCatchers.BREAKPOINTS.position = buttonPos(breakpointsIndex,:);
        safe_set(fig,'UserData',data);
        %%%set( fig, 'UserData', data );

        set( hd.LB_OUTPUT, 'Position', [0.4, bottomX+2.0, figWidth-0.8, figHeight-bottomX-1.5-2.0-0.2] );

        set( hd.STXT_MATLAB_COMMAND, 'Position', [1, bottomX + 0.4, 25, 1.2] );
        set( hd.ETXT_MATLAB_COMMAND, 'Position', [26, bottomX + 0.4, figWidth - 0.4 - 26, 1.5] );

    % this button position is defined in pixels
        set( hd.PB_KILL_DISPLAY, 'Position', ...
            [figWidth*pix2charRatio(1) - 15, figHeight*pix2charRatio(2) - 12, 12, 12] );
    else
        height = paneHeights( 1:4 ) * panes( 1:4 )' + helpCloseHeight*helpClosePresent;
        if height < currentPos(4) - 1
        % the only case when the window may become too large
            % the window is too large
            set( h.DTXT_TOO_LARGE, 'Position', [ 0, figHeight - helpCloseHeight - 1, figWidth, 1.2],...
                'Visible', 'on' );
            data = get( fig, 'UserData' );
            data.gui.tooLarge = 1;
            safe_set(fig,'UserData',data);
            %%%set( fig, 'UserData', data );
        end
    end



    % don't forget to uncheck inResize field in the UserData for reentry.
    data = get( fig, 'UserData' );
    data.gui.inResize = 0;
    data.gui.oldPos = currentPos;
    safe_set(fig,'UserData',data);
    %%%set( fig, 'UserData', data );

function flip_pane(obj, evd, paneNum)
    fig = ancestor(obj, 'figure');
    data = get( fig, 'UserData' );
    panes = data.gui.panes;
    if data.gui.isMinimal
        panes = [0 1 0 0];
        data.gui.isMinimal = 0;
        set( data.gui.handles.menu.STATUS_VIEW_MENU, 'Checked', 'off', 'Enable', 'on' );
        set( data.gui.handles.menu.OPTIONS_VIEW_MENU, 'Checked', 'off', 'Enable', 'on' );
        set( data.gui.handles.menu.DISPLAY_VIEW_MENU, 'Checked', 'off', 'Enable', 'on' );
        if paneNum > 0
            data.gui.helpClosePresent = 1;
        end
        set( data.gui.handles.menu.MIN_VIEW_MENU, 'Label', 'Minimal View' );
        set( fig, 'Resize', 'on' );
    end
    panes(paneNum) = ~panes(paneNum);
    data.gui.panes = panes;
    far = [ -1000 -1000 1 1 ];
    src = data.gui.upArrowBtnImage;



    switch paneNum,
    case 1
        h = data.gui.handles.control.PB_FLIP_STATUS;
        if panes(1)
            src = data.gui.dnArrowBtnImage;
            set( data.gui.handles.menu.STATUS_VIEW_MENU, 'Checked', 'on' )
        else
            set( data.gui.handles.menu.STATUS_VIEW_MENU, 'Checked', 'off' );
            for i = data.gui.handles.status.ids
                set( i, 'Position', far );
            end
        end
    case 3
        h = data.gui.handles.control.PB_FLIP_OPTIONS;
        if panes( 3 ) == 0
            set( data.gui.handles.menu.OPTIONS_VIEW_MENU, 'Checked', 'off' );
            src = data.gui.dnArrowBtnImage;
            for i = data.gui.handles.options.ids
                set( i, 'Visible', 'off', 'Position', far );
            end
        else
            set( data.gui.handles.menu.OPTIONS_VIEW_MENU, 'Checked', 'on' );
            for i = data.gui.handles.options.ids
                set( i, 'Visible', 'on' );
            end
        end
    case 4
        h = data.gui.handles.control.PB_FLIP_DISPLAY;
        if panes( 4 ) == 0
            set( data.gui.handles.menu.DISPLAY_VIEW_MENU, 'Checked', 'off' );
            src = data.gui.dnArrowBtnImage;
            for i = data.gui.handles.display.ids
                set( i, 'Visible', 'off', 'Position', far );
            end
        else
            set( data.gui.handles.menu.DISPLAY_VIEW_MENU, 'Checked', 'on' );
            for i = data.gui.handles.display.ids
                set( i, 'Visible', 'on' );
            end

        end
    otherwise
        error( ['incorrect pane number passed: ' paneNum] );
    end

    % flip the arrow on the button
    set( h, 'CData', data.gui.rtArrowBtnImage );
    drawnow;

    safe_set(fig,'UserData',data);
    %%%set( fig, 'UserData', data );
    gui_resize(fig, {'flip_pane', paneNum});
    data = get( fig, 'UserData' );
    if data.gui.tooLarge == 1  | data.gui.tooShort | data.gui.tooNarrow
        gui_resize(fig, {'mouse_motion'});
    end


    % flip the arrow on the button
    set( h, 'CData', src );

    %report the new pane config to sfdebug
    sfdebug('gui','view_change');


function gui_minimize(obj, evd)
    fig = ancestor(obj, 'figure');
    data = get( fig, 'UserData' );
    handles = data.gui.handles;
    panes = data.gui.panes;
    data.gui.isMinimal = ~data.gui.isMinimal;
    allObjects = [];
    far = [ -1000, -1000, 1 1];
    if panes(1)
        allObjects = [allObjects, data.gui.handles.status.ids ];
    end
    if panes(3)
        allObjects = [allObjects, data.gui.handles.options.ids ];
    end
    if panes(4)
        allObjects = [allObjects, data.gui.handles.display.ids ];
    end
    allObjects = [allObjects, data.gui.handles.help_close.PB_HELP, ...
                data.gui.handles.help_close.PB_CLOSE, ...
                handles.control.PB_FLIP_STATUS,...
                handles.control.PB_FLIP_OPTIONS,...
                handles.control.PB_FLIP_DISPLAY];
    menus = [handles.menu.STATUS_VIEW_MENU, handles.menu.OPTIONS_VIEW_MENU, ...
                handles.menu.DISPLAY_VIEW_MENU];
    if ~data.gui.isMinimal
        % restore the previous state
        vis = 'on';
        data.gui.helpClosePresent = 1;
        set( handles.menu.MIN_VIEW_MENU, 'Label', 'Minimal View' );
        if ~isunix
            set( fig, 'Resize', 'on' );
        end

    else
        vis = 'off';
        if data.gui.isInitialized,  %if not initialized, the maxPos is set in another place.
            data.gui.maxPos = get( fig, 'Position' );
        end
        data.gui.helpClosePresent = 0;
        data.gui.tooLarge = 1;
        data.gui.tooNarrow = 1;
        set( handles.menu.MIN_VIEW_MENU, 'Label', 'Restore View' );
        if ~isunix
            set( fig, 'Resize', 'off' );
        end
        for i = allObjects,
            %set( i, 'Visible', vis, 'Position', far );
            set( i, 'Position', far );
        end
    end


    for i = menus
        set( i, 'Enable', vis );
    end

    safe_set(fig,'UserData',data);
    %%%set( fig, 'UserData', data );
    if ~data.gui.isMinimal
        currentPos = get( fig, 'Position' );
        height = data.gui.maxPos(4);
        newPos = [currentPos(1), currentPos(2) + currentPos(4) - height,...
                   data.gui.maxPos(3), height];
        set( fig, 'Position', newPos );
    else
        gui_resize(fig, {'mouse_motion'});
    end

    %report the new pane config to sfdebug
    sfdebug('gui','view_change');


function mouse_motion(fig, evd)
sfdebug('gui','update_status');
linkColor = [0 0 0.5];
linkHiColor = [ 0 0 1 ];
data = get( fig, 'UserData' );
if data.gui.tooLarge == 1  | data.gui.tooShort | data.gui.tooNarrow
    % call the function twice because during the first call the figure only
    % gets resized, but not redrawn.
    gui_resize(fig, {'mouse_motion'});
    return;
end

if data.gui.inDisplaySelection
    % process the display selection and return.
    cp = get( fig, 'CurrentPoint' );

    i = 0;
    curSel = 0;
    while i < length( data.gui.displayChoiceCoords(:,1) )
        i = i + 1;
        rect = data.gui.displayChoiceCoords(i,:);
        backgrOffset = [ -2 0 2 0 ];
        if in_rectHW( cp, rect )
            curSel = i;
            if ~strcmp( ...
                get( data.gui.handles.display.DTXT_SELECTION_FOREGROUND, 'String' ), ...
                get( data.gui.handles.display.DTXT_SELECTION(i), 'String' ) ) | ...
                ~strcmp( get( data.gui.handles.display.DTXT_SELECTION_FOREGROUND, 'Visible' ), 'on' )

                set( data.gui.handles.display.DTXT_SELECTION_BACKGROUND, ...
                    'Position', rect+backgrOffset, 'Visible','on' );
                str = get( data.gui.displayChoiceTexts(i), 'String' );
                set( data.gui.handles.display.DTXT_SELECTION_FOREGROUND, ...
                    'Position', rect,'String',str, 'Visible','on' );
                break;
            end
        end
    end
    if ~curSel
        set( data.gui.handles.display.DTXT_SELECTION_BACKGROUND, 'Visible', 'off' );
        set( data.gui.handles.display.DTXT_SELECTION_FOREGROUND, 'Visible', 'off');
    end
    data.gui.currentDisplaySelection = curSel;
    safe_set(fig,'UserData',data);
    %%%set( fig, 'UserData', data );
    return;
end

% Now see if we are over something good.
mc = data.gui.motionCatchers;
if isstruct(mc)
    fn = fieldnames( mc );
else
    fn = {};
end
overMC = 0;
i = 0;
cp = get( fig, 'CurrentPoint' );
rect = [-1 -1 0 0];
while i < length( fn );
    i = i + 1;
    mcStruc = getfield( mc, fn{i} );
    mcId = mcStruc.id;
    rect = mcStruc.position;
    if in_rectHW( cp, rect ) & ~strcmp( get( mcId, 'Enable' ), 'off' )
        overMC = 1;
        fieldName = fn{i};
        break;
    end
end
currentTxt = 0;
handles = data.gui.handles;
if overMC
    % alright, we are over somehting of interest. process this event
    currentTxt = mcId;

    if strcmp( get( currentTxt, 'Visible' ), 'off' )
        currentTxt = 0;
    end
    switch fieldName
    case {'DTXT_STOPPED', 'DTXT_EXECUTING','DTXT_CURRENT_EVENT'}
        if is_link( currentTxt ) & strcmp( get( data.gui.handles.status.DTXT_STOPPED, 'Visible' ), 'on' )
            % change the foreground color of the thing to linkHiColor
            set( currentTxt, 'ForegroundColor', linkHiColor );
        end
    otherwise
        if currentTxt ~= 0
        %set( currentTxt, 'Visible', 'off' );
        draw_frame( rect, handles.frame, data.gui.pix2charRatio);
        end
    end

    % draw the frame around the text object

    if data.gui.lastMouseOver ~= 0 & data.gui.lastMouseOver ~= currentTxt
        %set( data.gui.lastMouseOver, 'Visible', 'On' );
        clear_frame( handles.frame );
    end
    if is_link(data.gui.lastMouseOver ) & data.gui.lastMouseOver ~= currentTxt
        set( data.gui.lastMouseOver, 'ForegroundColor', linkColor );
    end
    data.gui.lastMouseOver = currentTxt;
else
    set( data.gui.lastMouseOver, 'Visible', 'On' );
    if is_link(data.gui.lastMouseOver )
        set( data.gui.lastMouseOver, 'ForegroundColor', linkColor );
    end
    clear_frame( handles.frame );
    data.gui.lastMouseOver = 0;
end

safe_set(fig,'UserData',data);
%%%set( fig, 'UserData', data );


function res = is_link( id )
    res = 0;
    if id == 0 return; end
    str = get( id, 'String' );
    if ~isempty( find( str == '#'+0 ) )
        res = 1;
    end


function draw_frame( rect, h, pix2charRatio )

    w = 1/pix2charRatio(1);
    ht = 1 /pix2charRatio(2);
    set( h.DTXT_LEFT, 'Position', [rect(1)-w, rect(2), w, rect(4)] );
    set( h.DTXT_UP, 'Position', [rect(1)-w, rect(2)+rect(4)+ht, rect(3)+2*w,ht] );
    set( h.DTXT_RIGHT, 'Position', [rect(1)+rect(3)+w, rect(2), w, rect(4)] );
    set( h.DTXT_DOWN, 'Position', [rect(1)-w, rect(2)-ht, rect(3)+3*w, ht] );


function clear_frame( h )

    far = [-1000, -1000, 0.1 , 0.1];
    set( h.DTXT_LEFT, 'Position', far );
    set( h.DTXT_UP, 'Position', far );
    set( h.DTXT_RIGHT, 'Position', far );
    set( h.DTXT_DOWN, 'Position', far );


function res = in_rectHW( point, rect )
    if point(1) > rect(1) & point(1) < rect(1) + rect(3) & ...
            point(2) > rect(2) & point(2) < rect(2) + rect(4)
        res = 1;
    else
        res = 0;
    end


function key_down(fig, evd)
    % see if there is any pull-down menu we have to clear
    clear_display_selection(fig);
    sfdebug('gui','key_press');

function clear_display_selection(fig)
    data = get( fig, 'UserData' );
   % restore old enable properties
   far = [ -1000, -1000, 1, 1 ];
   set( data.gui.allEnableOn, 'Enable', 'on' );
   data.gui.enableOn = [];
   handles = data.gui.handles;
   % hide/destroy all the pushdown objects
   toHide = [handles.display.DTXT_SELECTION, handles.display.DTXT_SELECTION_BACKGROUND, ...
         handles.display.DTXT_SELECTION_FOREGROUND, handles.display.PB_SELECTION ];
   set( toHide, 'Visible', 'off', 'Position', far );
   data.gui.inDisplaySelection = 0;

    safe_set(fig,'UserData',data);
    %%%set( fig, 'UserData', data );


function button_down(obj, evd)
    fig = ancestor(obj, 'figure');
    % do nothing unless we are in the displaySelection mode.
    data = get( fig, 'UserData' );

    if data.gui.inDisplaySelection & data.gui.currentDisplaySelection ~= 0
        % we are selecting something
        obj = data.gui.lastMouseOver;
        if obj
            num = data.gui.display.currentView;
            choices = data.gui.display.choices{num};
         if(0)
            set( obj, 'String', choices{data.gui.currentDisplaySelection*2-1}, ...
                'Callback', choices{data.gui.currentDisplaySelection*2} );
         end
         if(1)
            set( obj,'Callback', choices{data.gui.currentDisplaySelection*2} );
         end
        end
    end
    inDisplaySelection = 0;
    if data.gui.inDisplaySelection
        inDisplaySelection = data.gui.inDisplaySelection;
        data.gui.inDisplaySelection = 0;
        clear_display_selection(fig);
    end

    if (data.gui.currentDisplaySelection ~= 0 | ~inDisplaySelection) & data.gui.lastMouseOver
        % eval the corresponding callback

        cb = get( data.gui.lastMouseOver, 'Callback' );

        if(~isempty(cb))
            if(strcmp(cb,'HYPERLINK'))
                sfdebug('sf','hyperlink',get(data.gui.lastMouseOver,'String'),data.machineId);
            else
                eval( cb );
                if data.gui.oldDisplayView
                    set( data.gui.oldDisplayView, 'FontWeight','normal', 'ForegroundColor', [0 0 0] );
                end
                data.gui.oldDisplayView = data.gui.lastMouseOver;
                set( data.gui.lastMouseOver, 'FontWeight','bold', 'ForegroundColor', [0 0.5 0.5] );
                safe_set(fig,'UserData',data);
                %%%set( fig, 'UserData', data );
            end
        end
    end
    mouse_motion(fig);
    mouse_motion(fig);

function display_choices(obj, evd, button)
    fig = ancestor(obj, 'figure');
    destroy_create_selection_objects( fig ); %a workaround for the HG bug
    obj = gcbo;
    pos = get( obj, 'Position' );
    x = pos(1);
    y = pos(2)-0.1;
    choice = {};
    data = get( fig, 'UserData' );
    choice = data.gui.display.choices{ button };
    rightChoice = choice( 1:2:length(choice) );
    display_selection( fig, x, y, rightChoice, button );

function res = display_selection( fig, x, y, choice, button )
    data = get( fig, 'UserData' );
    extent = 0;

    for i = 1:length(choice)
        set( data.gui.handles.display.DTXT_SELECTION(i), 'String',choice{i} )
        ext = get( data.gui.handles.display.DTXT_SELECTION(i), 'Extent' );
        extent = max( extent, ext(3) );
    end

    for i = 1:length(choice)
        pos(i,:) = [ x+2-extent/2, y - 0.5 - i * 1.3,  extent + 2, 1.25 ];
        set( data.gui.handles.display.DTXT_SELECTION(i), 'Position', pos(i,:), 'Visible', 'on' );
    end

    set( data.gui.handles.display.PB_SELECTION, ...
        'Position', [x-0.3-extent/2, y - length(choice)*1.3 - 1, extent+4.6, length(choice)*1.3 + 1], ...
        'Visible', 'on' );

    data.gui.inDisplaySelection = 1;
    data.gui.displayChoiceTexts = data.gui.handles.display.DTXT_SELECTION( 1:length(choice) );
    data.gui.displayChoiceCoords = pos;

    data.gui.allEnableOn = findobj( fig, 'Enable', 'on', 'Type', 'uicontrol' );
    %data.gui.allEnableOff = findobj( fig, 'Enable', 'off', 'Type', 'uicontrol' );
    %all = [data.gui.allEnableOn', data.gui.allEnableOff']';
    set( data.gui.allEnableOn, 'Enable', 'inactive' );
    data.gui.display.currentView = button;
    safe_set(fig,'UserData',data);
    %%%set( fig, 'UserData', data ); %, 'Resize', 'off' );


function fig = sfdbfig_init(varargin)

viewOptions = varargin{1};

crossButtonImageName = 'cross';
dnArrowImageName = 'dnarrow';
dnLongArrowImageName = 'dnlongarrow';

a = findobj( 0, 'Tag', tag_l );
if length( a ) > 1
    warning( 'More than one debugger window open' );
end
zero = [ -1000 -1000 1 1];
% create all the objects.
% the routine is called only once
% no objects are deleted while the debugger is active.
% positions of the objects are set to 0.  it will be initialized by the
%   resize function.

% get the size of the screen in character units
curUnits = get( 0, 'Units' );
set( 0, 'Units', 'characters' );
charScrSize = get(0, 'ScreenSize' );
set( 0, 'Units', 'pixels' );
pixScrSize = get(0, 'ScreenSize' );
set( 0, 'Units', curUnits );
pix2charRatio = [pixScrSize(3)/charScrSize(3), pixScrSize(4)/charScrSize(4)];
fontSize = get( 0, 'defaultuicontrolfontsize' );
fontName = get( 0, 'defaultuicontrolfontname' );
backgroundColor = get( 0, 'defaultuicontrolbackgroundcolor' );
selectionBackgroundColor = [ 0 0 0.6 ];
selectionForegroundColor = [ 1 1 1 ];
dnArrowBtnImage = sf_get_icon_data( dnArrowImageName );
maxSelections = 5;
%dnLongArrowBtnImage = sf_get_icon_data( dnLongArrowImageName );
far = [ -1000, -1000, 1 1 ];
a = figure('Units','characters', ...
    'BackingStore','on', ...
    'CloseRequestFcn',{@sf_debug_callback,'close'}, ...
    'WindowButtonDownFcn',@button_down, ...
    'ResizeFcn', @gui_resize, ...
    'WindowButtonMotionFcn', @mouse_motion, ...
    'KeyPressFcn', @key_down, ...
    'Color',backgroundColor, ...
    'IntegerHandle','off', ...
    'MenuBar','none', ...
    'ToolBar', 'none', ...
    'Name','Stateflow Debugger', ...
   'NumberTitle','off', ...
   'HandleVisibility', 'off', ...
   'Visible','off', ...
    'Tag',tag_l);
    %'Position',zero, ...

fig = a;
dnLongArrowBtnImage = dnArrowImage(2, 1.5, pix2charRatio);


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% STATUS WINDOW Objects
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
handles.status.Frame4 = uicontrol('Parent',a, ...
    'Units','characters', ...
    'BackgroundColor',backgroundColor, ...
    'Position',zero, ...
    'Style','frame', ...
    'Enable', 'inactive', ...
    'Visible', 'on', ...
    'Tag','Frame4');

handles.status.DTXT_DEBUGGER_STATUS = uicontrol('Parent',a, ...
    'Units','characters', ...
    'BackgroundColor',backgroundColor, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'FontWeight','bold', ...
    'HorizontalAlignment','left', ...
    'Position',zero, ...
    'Style','text', ...
    'Tag','DTXT_DEBUGGER_STATUS');
handles.status.DTXT_SIMULATION_TIME = uicontrol('Parent',a, ...
    'Units','characters', ...
    'BackgroundColor',backgroundColor, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'HorizontalAlignment','left', ...
    'Position',zero, ...
    'String','', ...
    'Style','text', ...
    'Tag','DTXT_SIMULATION_TIME');
handles.status.DTXT_STOPPED = uicontrol('Parent',a, ...
    'Units','characters', ...
    'BackgroundColor',backgroundColor, ...
    'Callback','HYPERLINK', ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'HorizontalAlignment','left', ...
    'Position',zero, ...
    'String','', ...
    'Style','text', ...
    'Enable','inactive',...
    'Tag','DTXT_STOPPED');
handles.status.DTXT_EXECUTING = uicontrol('Parent',a, ...
    'Units','characters', ...
    'BackgroundColor',backgroundColor, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'Callback', 'HYPERLINK', ...
    'HorizontalAlignment','left', ...
    'Position',zero, ...
    'String','', ...
    'Style','text', ...
    'Enable','inactive',...
    'Tag','DTXT_EXECUTING');
handles.status.STXT_SIMULATION_TIME = uicontrol('Parent',a, ...
    'Units','characters', ...
    'BackgroundColor',backgroundColor, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'FontWeight','bold', ...
    'HorizontalAlignment','left', ...
    'Position',zero, ...
    'String','Simulink Time:', ...
    'Style','text', ...
    'Tag','STXT_SIMULATION_TIME');
handles.status.STXT_CURRENT_EVENT = uicontrol('Parent',a, ...
    'Units','characters', ...
    'BackgroundColor',backgroundColor, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'FontWeight','bold', ...
    'HorizontalAlignment','left', ...
    'Position',zero, ...
    'String','Current Event:', ...
    'Style','text', ...
    'Tag','STXT_CURRENT_EVENT');
handles.status.DTXT_CURRENT_EVENT = uicontrol('Parent',a, ...
    'Units','characters', ...
    'BackgroundColor',backgroundColor, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'HorizontalAlignment','left', ...
    'Callback', 'HYPERLINK', ...
    'Position',zero, ...
    'String','', ...
    'Style','text', ...
    'Enable','inactive',...
    'Tag','DTXT_CURRENT_EVENT');
handles.status.STXT_CODE_COVERAGE = uicontrol('Parent',a, ...
    'Units','characters', ...
    'BackgroundColor',backgroundColor, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'FontWeight','bold', ...
    'HorizontalAlignment','left', ...
    'Position',zero, ...
    'String','Coverage:', ...
    'Style','text', ...
    'Tag','STXT_CODE_COVERAGE');
handles.status.DTXT_CODE_COVERAGE = uicontrol('Parent',a, ...
    'Units','characters', ...
    'BackgroundColor',backgroundColor, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'HorizontalAlignment','left', ...
    'Position',zero, ...
    'String','', ...
    'Style','text', ...
    'Tag','DTXT_CODE_COVERAGE');
handles.status.STXT_EXECUTING = uicontrol('Parent',a, ...
    'Units','characters', ...
    'BackgroundColor',backgroundColor, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'FontWeight','bold', ...
    'HorizontalAlignment','left', ...
    'Position',zero, ...
    'String','Executing:', ...
    'Style','text', ...
    'Tag','STXT_EXECUTING');
handles.status.STXT_STOPPED = uicontrol('Parent',a, ...
    'Units','characters', ...
    'BackgroundColor',backgroundColor, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'FontWeight','bold', ...
    'HorizontalAlignment','left', ...
    'Position',zero, ...
    'String','Stopped:', ...
    'Style','text', ...
    'Tag','STXT_STOPPED');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% CONTROL WINDOW Objects
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
handles.control.Frame3 = uicontrol('Parent',a, ...
    'Units','characters', ...
    'BackgroundColor',backgroundColor, ...
    'Position',zero, ...
    'Style','frame', ...
    'Enable', 'inactive', ...
    'Tag','Frame3');
handles.control.PB_BREAK = uicontrol('Parent',a, ...
    'Units','characters', ...
    'Callback',{@sf_debug_callback, 'break'}, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'Position',zero, ...
    'String','Break', ...
    'Tag','PB_BREAK');
handles.control.PB_GO = uicontrol('Parent',a, ...
    'Units','characters', ...
    'Callback',{@sf_debug_callback, 'go'}, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'Position',zero, ...
    'String','Go', ...
    'Tag','PB_GO');
handles.control.CB_CHART_ENTRY = uicontrol('Parent',a, ...
    'Units','characters', ...
    'BackgroundColor',backgroundColor, ...
    'Callback',{@sf_debug_callback, 'chart_entry'}, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'HorizontalAlignment','left', ...
    'Position',zero, ...
    'String','Chart Entry', ...
    'Style','checkbox', ...
    'Tag','CB_CHART_ENTRY');
handles.control.PB_STEP = uicontrol('Parent',a, ...
    'Units','characters', ...
    'Callback',{@sf_debug_callback, 'step'}, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'Position',zero, ...
    'String','Step', ...
    'Tag','PB_STEP');
handles.control.PB_STOP_DEBUGGING = uicontrol('Parent',a, ...
    'Units','characters', ...
    'Callback',{@sf_debug_callback, 'stop_debugging'}, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'Position',zero, ...
    'String','Stop Simulation', ...
    'Tag','PB_STOP_DEBUGGING');
handles.control.STXT_BREAK_ON_EVERY = uicontrol('Parent',a, ...
    'Units','characters', ...
    'BackgroundColor',backgroundColor, ...
    'Enable','inactive', ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'FontWeight','bold', ...
    'HorizontalAlignment','left', ...
    'Position',zero, ...
    'String','Breakpoints:', ...
    'Style','text', ...
    'Tag','STXT_BREAK_ON_EVERY');

% Disable all breakpoints checkbox and surroundings
handles.control.CB_DISABLE_BREAKPOINTS = uicontrol('Parent',a, ...
    'Units','characters', ...
    'BackgroundColor',backgroundColor, ...
    'Callback',{@sf_debug_callback, 'disable_all_breakpoints'}, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'HorizontalAlignment','left', ...
    'Position',zero, ...
    'String','Disable all', ...
    'Style','checkbox', ...
    'Tag','CB_DISABLE_BREAKPOINTS');
handles.control.STXT_BREAKPOINTS = uicontrol('Parent',a, ...
    'Units','characters', ...
    'BackgroundColor',backgroundColor, ...
    'Enable','inactive', ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'HorizontalAlignment','left', ...
    'Position',zero, ...
    'String','breakpoints', ...
    'Style','text', ...
    'Tag','STXT_BREAKPOINTS');
handles.control.STXT_BREAKPOINTS_BAR = uicontrol('Parent',a, ...
    'Units','characters', ...
    'BackgroundColor','black', ...
    'Enable','inactive', ...
    'Position',zero, ...
    'Style','text', ...
    'Tag','STXT_BREAKPOINTS_BAR');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% OPTIONS WINDOW Objects
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
handles.options.Frame2 = uicontrol('Parent',a, ...
    'Units','characters', ...
    'BackgroundColor',backgroundColor, ...
    'Position',zero, ...
    'Style','frame', ...
    'Enable', 'inactive', ...
    'Tag','Frame2');

handles.options.ERROR_CHECKING_OPTIONS_FRAME= uicontrol('Parent',a, ...
    'Units','characters', ...
    'BackgroundColor',backgroundColor, ...
    'Position',zero, ...
    'Style','frame', ...
    'Enable', 'inactive', ...
    'Visible', 'on', ...
    'Tag','ERROR_CHECKING_OPTIONS_FRAME');
handles.options.ANIMATION_OPTIONS_FRAME = uicontrol('Parent',a, ...
    'Units','characters', ...
    'BackgroundColor',backgroundColor, ...
    'Position',zero, ...
    'Style','frame', ...
    'Enable', 'inactive', ...
    'Visible', 'on', ...
    'Tag','ANIMATION_OPTIONS_FRAME');
handles.control.CB_EVENT_BROADCAST = uicontrol('Parent',a, ...
    'Units','characters', ...
    'BackgroundColor',backgroundColor, ...
    'Callback',{@sf_debug_callback, 'event_broadcast'}, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'HorizontalAlignment','left', ...
    'Position',zero, ...
    'String','Event Broadcast', ...
    'Style','checkbox', ...
    'Tag','CB_EVENT_BROADCAST');
handles.control.CB_STATE_ENTRY = uicontrol('Parent',a, ...
    'Units','characters', ...
    'BackgroundColor',backgroundColor, ...
    'Callback',{@sf_debug_callback, 'state_entry'}, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'HorizontalAlignment','left', ...
    'Position',zero, ...
    'String','State Entry', ...
    'Style','checkbox', ...
    'Tag','CB_STATE_ENTRY');
handles.options.STXT_DELAY = uicontrol('Parent',a, ...
    'Units','characters', ...
    'BackgroundColor',backgroundColor, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'FontWeight','bold', ...
    'HorizontalAlignment','left', ...
    'Position',zero, ...
    'String','Delay (sec)', ...
    'Style','text', ...
    'Tag','STXT_DELAY');
handles.options.CB_CHECK_FOR_STATE_INCONSISTENCIES = uicontrol('Parent',a, ...
    'Units','characters', ...
    'BackgroundColor',backgroundColor, ...
    'Callback',{@sf_debug_callback, 'check_for_state_inconsistencies'}, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'HorizontalAlignment','left', ...
    'Position',zero, ...
    'String','State Inconsistency', ...
    'Style','checkbox', ...
    'Tag','CB_CHECK_FOR_STATE_INCONSISTENCIES');
handles.options.CB_DETECT_CYCLES = uicontrol('Parent',a, ...
    'Units','characters', ...
    'BackgroundColor',backgroundColor, ...
    'Callback',{@sf_debug_callback, 'detect_cycles'}, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'HorizontalAlignment','left', ...
    'Position',zero, ...
    'String','Detect Cycles', ...
    'Style','checkbox', ...
    'Tag','CB_DETECT_CYCLES');
handles.options.CB_CHECK_FOR_CONFLICTING_TRANSITIONS = uicontrol('Parent',a, ...
    'Units','characters', ...
    'BackgroundColor',backgroundColor, ...
    'Callback',{@sf_debug_callback, 'check_for_conflicting_transitions'}, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'HorizontalAlignment','left', ...
    'Position',zero, ...
    'String','Transition Conflict', ...
    'Style','checkbox', ...
    'Tag','CB_CHECK_FOR_CONFLICTING_TRANSITIONS');
handles.options.CB_RANGE_CHECKS_FOR_DATA = uicontrol('Parent',a, ...
    'Units','characters', ...
    'BackgroundColor',backgroundColor, ...
    'Callback',{@sf_debug_callback, 'range_checks_for_data'}, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'HorizontalAlignment','left', ...
    'Position',zero, ...
    'String','Data Range', ...
    'Style','checkbox', ...
    'Tag','CB_RANGE_CHECKS_FOR_DATA');
handles.options.STXT_ERRORCHECKINGOPTIONS = uicontrol('Parent',a, ...
    'Units','characters', ...
    'BackgroundColor',backgroundColor, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'FontWeight','bold', ...
    'HorizontalAlignment','left', ...
    'Position',zero, ...
    'String','Error checking options', ...
    'Style','text', ...
    'Tag','STXT_ERRORCHECKINGOPTIONS');
handles.options.RB_ANIMATION_ENABLED = uicontrol('Parent',a, ...
    'Units','characters', ...
    'BackgroundColor',backgroundColor, ...
    'Callback',{@sf_debug_callback, 'animation_enabled'}, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'HorizontalAlignment','left', ...
    'Position',zero, ...
    'String','Enabled', ...
    'Style','radiobutton', ...
    'Tag','RB_ANIMATION_ENABLED');
handles.options.RB_ANIMATION_DISABLED = uicontrol('Parent',a, ...
    'Units','characters', ...
    'BackgroundColor',backgroundColor, ...
    'Callback',{@sf_debug_callback, 'animation_disabled'}, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'HorizontalAlignment','left', ...
    'Position',zero, ...
    'String','Disabled', ...
    'Style','radiobutton', ...
    'Tag','RB_ANIMATION_DISABLED');
handles.options.STXT_ANIMATION = uicontrol('Parent',a, ...
    'Units','characters', ...
    'BackgroundColor',backgroundColor, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'FontWeight','bold', ...
    'HorizontalAlignment','left', ...
    'Position',zero, ...
    'String','Animation', ...
    'Style','text', ...
    'Tag','STXT_ANIMATION');
handles.options.POP_DELAY = uicontrol('Parent',a, ...
    'Units','characters', ...
    'BackgroundColor',[1 1 1], ...
    'Callback',{@sf_debug_callback, 'animation_delay'}, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'Max',7, ...
    'Min',1, ...
    'Position',zero, ...
    'String',{0.0,0.2,0.4,0.6,0.8,1.0}, ...
    'Style','popupmenu', ...
    'Tag','POP_DELAY', ...
    'Value',1);


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The TEXT object notifying that the window is too large
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
handles.DTXT_TOO_LARGE = uicontrol('Parent',a, ...
    'Units','characters', ...
    'BackgroundColor',backgroundColor, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'FontWeight','bold', ...
    'HorizontalAlignment','center', ...
    'String', 'Move the mouse over the window to snap vertically', ...
    'Position',zero, ...
    'Style','text', ...
    'Visible', 'off', ...
    'Tag','DTXT_TOO_LARGE');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% DSIPLAY WINDOW Objects
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
handles.display.Frame1 = uicontrol('Parent',a, ...
    'Units','characters', ...
    'BackgroundColor',backgroundColor, ...
    'Position',zero, ...
    'Style','frame', ...
    'Enable', 'inactive', ...
    'Tag','Frame1');

handles.display.ETXT_MATLAB_COMMAND = uicontrol('Parent',a, ...
    'Units','characters', ...
    'BackgroundColor',[1 1 1], ...
    'Callback',{@sf_debug_callback, 'matlab_command'}, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'HorizontalAlignment','left', ...
    'Position',zero, ...
    'Style','edit', ...
    'Tag','ETXT_MATLAB_COMMAND');
handles.display.PB_CALL_STACK = uicontrol('Parent',a, ...
    'Units','characters', ...
    'Callback',{@sf_debug_callback, 'call_stack'}, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'FontWeight', 'bold', ...
    'Position',zero, ...
    'String','Call Stack', ...
    'Tag','PB_CALL_STACK');
handles.display.DTXT_CALL_STACK = uicontrol('Parent',a, ...
    'Units','characters', ...
    'Callback','', ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'Position',zero, ...
    'Style', 'text', ...
    'String','Call Stack', ...
    'Tag','DTXT_CALL_STACK');

if(0)
handles.display.PB_CALL_STACK_DN_ARROW = uicontrol('Parent',a, ...
    'Units','characters', ...
    'Callback',{@display_choices, 1}, ...
    'FontName',fontName, ...
    'CData', dnLongArrowBtnImage, ...
    'FontSize',fontSize, ...
    'Position',zero, ...
    'Tag','PB_CALL_STACK_DN_ARROW');
end

handles.display.PB_COVERAGE = uicontrol('Parent',a, ...
    'Units','characters', ...
    'Callback',{@sf_debug_callback, 'coverage'}, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'Position',zero, ...
    'FontWeight', 'bold', ...
    'String','Coverage', ...
    'Tag','PB_COVERAGE');
handles.display.DTXT_COVERAGE = uicontrol('Parent',a, ...
    'Units','characters', ...
    'Callback','', ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'Position',zero, ...
    'Style', 'text', ...
    'String','Coverage', ...
    'Tag','DTXT_COVERAGE');
handles.display.PB_COVERAGE_DN_ARROW = uicontrol('Parent',a, ...
    'Units','characters', ...
    'Callback',{@display_choices, 2}, ...
    'FontName',fontName, ...
    'CData', dnLongArrowBtnImage, ...
    'FontSize',fontSize, ...
    'Position',zero, ...
    'Tag','PB_COVERAGE_DN_ARROW');

handles.display.PB_CLEAR_OUTPUT = uicontrol('Parent',a, ...
    'Units','characters', ...
    'Callback',{@sf_debug_callback, 'clear_output'}, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'Position',zero, ...
    'FontWeight', 'bold', ...
    'Visible', 'off', ...
    'String','Clear Output', ...
    'Tag','PB_CLEAR_OUTPUT');
handles.display.PB_BREAKPOINTS = uicontrol('Parent',a, ...
    'Units','characters', ...
    'Callback',{@sf_debug_callback, 'breakpoints'}, ...
    'FontName',fontName, ...
    'FontWeight', 'bold', ...
    'FontSize',fontSize, ...
    'Position',zero, ...
    'String','Breakpoints', ...
    'Tag','PB_BREAKPOINTS');
handles.display.DTXT_BREAKPOINTS = uicontrol('Parent',a, ...
    'Units','characters', ...
    'Callback',{@sf_debug_callback, 'breakpoints'}, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'Position',zero, ...
    'Style', 'text', ...
    'String','Breakpoints', ...
    'Tag','DTXT_BREAKPOINTS');
handles.display.PB_BREAKPOINTS_DN_ARROW = uicontrol('Parent',a, ...
    'Units','characters', ...
    'Callback',{@display_choices, 4}, ...
    'FontName',fontName, ...
    'CData', dnLongArrowBtnImage, ...
    'FontSize',fontSize, ...
    'Position',zero, ...
    'Tag','PB_BREAKPOINTS_DN_ARROW');

handles.display.PB_CHART_DATA = uicontrol('Parent',a, ...
    'Units','characters', ...
    'Callback',{@sf_debug_callback, 'browse_data'}, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'FontWeight', 'bold', ...
    'Position',zero, ...
    'String','Browse Data', ...
    'Tag','PB_CHART_DATA');
handles.display.DTXT_CHART_DATA = uicontrol('Parent',a, ...
    'Units','characters', ...
    'Callback','', ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'Position',zero, ...
    'Style', 'text', ...
    'String','Browse Data', ...
    'Tag','DTXT_CHART_DATA');
handles.display.PB_CHART_DATA_DN_ARROW = uicontrol('Parent',a, ...
    'Units','characters', ...
    'Callback',{@display_choices, 3}, ...
    'FontName',fontName, ...
    'CData', dnLongArrowBtnImage, ...
    'FontSize',fontSize, ...
    'Position',zero, ...
    'Tag','PB_CHART_DATA_DN_ARROW');


handles.display.PB_ACTIVE_STATES = uicontrol('Parent',a, ...
    'Units','characters', ...
    'Callback',{@sf_debug_callback, 'active_states'}, ...
    'FontName',fontName, ...
    'FontWeight', 'bold', ...
    'FontSize',fontSize, ...
    'Position',zero, ...
    'String','Active States', ...
    'Tag','PB_ACTIVE_STATES');
handles.display.DTXT_ACTIVE_STATES = uicontrol('Parent',a, ...
    'Units','characters', ...
    'Callback','', ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'Position',zero, ...
    'Style', 'text', ...
    'String','Active States', ...
    'Tag','DTXT_ACTIVE_STATES');
handles.display.PB_ACTIVE_STATES_DN_ARROW = uicontrol('Parent',a, ...
    'Units','characters', ...
    'Callback',{@display_choices, 4}, ...
    'FontName',fontName, ...
    'CData', dnLongArrowBtnImage, ...
    'FontSize',fontSize, ...
    'Position',zero, ...
    'Tag','PB_ACTIVE_STATES_DN_ARROW');


handles.display.LB_OUTPUT = uicontrol('Parent',a, ...
    'Units','characters', ...
    'BackgroundColor',[1 1 1], ...
    'Callback',{@sf_debug_callback, 'output_box_click'}, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'HorizontalAlignment','left', ...
    'Position',zero, ...
    'Style','listbox', ...
    'Tag','LB_OUTPUT', ...
    'Value',1);
handles.display.STXT_MATLAB_COMMAND = uicontrol('Parent',a, ...
    'Units','characters', ...
    'BackgroundColor',backgroundColor, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'FontWeight','bold', ...
    'HorizontalAlignment','left', ...
    'Position',zero, ...
    'String','MATLAB Command:', ...
    'Style','text', ...
    'Tag','STXT_MATLAB_COMMAND');
handles.display.STXT_DISPLAYINOUTPUTWINDOW = uicontrol('Parent',a, ...
    'Units','characters', ...
    'BackgroundColor',backgroundColor, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'FontWeight','bold', ...
    'HorizontalAlignment','left', ...
    'Position',zero, ...
    'String','', ...
    'Style','text', ...
    'Tag','STXT_DISPLAYINOUTPUTWINDOW');


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% HELP & CLOSE WINDOW Objects
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
handles.help_close.PB_CLOSE = uicontrol('Parent',a, ...
    'Units','characters', ...
    'Callback',{@sf_debug_callback, 'close'}, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'Position',zero, ...
    'String','Close', ...
    'Tag','PB_CLOSE');
handles.help_close.PB_HELP = uicontrol('Parent',a, ...
    'Units','characters', ...
    'Callback','sfhelp;', ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'Position',zero, ...
    'String','Help', ...
    'Tag','PB_HELP');

%panesbuttons
crossBtnImage = sf_get_icon_data( crossButtonImageName );
handles.status.PB_KILL_STATUS = uicontrol('Parent',a, ...
    'Units','pixels', ...
    'Callback',{@flip_pane, 1}, ...
    'CData', crossBtnImage, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'Position',zero, ...
    'Visible', 'on', ...
    'Tag','PB_KILL_STATUS');
handles.options.PB_KILL_OPTIONS = uicontrol('Parent',a, ...
    'Units','pixels', ...
    'Callback',{@flip_pane, 3}, ...
    'CData', crossBtnImage, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'Position',zero, ...
    'Visible', 'on', ...
    'Tag','PB_KILL_OPTIONS');
handles.display.PB_KILL_DISPLAY = uicontrol('Parent',a, ...
    'Units','pixels', ...
    'CData', crossBtnImage, ...
    'Callback',{@flip_pane, 4}, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'Position',zero, ...
    'Visible', 'on', ...
    'Tag','PB_KILL_DISPLAY');


rtArrowBtnImage = rotate_image_90( dnArrowBtnImage );
upArrowBtnImage = rotate_image_90( rtArrowBtnImage );
handles.control.PB_FLIP_STATUS = uicontrol('Parent',a, ...
    'Units','pixels', ...
    'Callback',{@flip_pane, 1}, ...
    'CData', dnArrowBtnImage, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'Position',zero, ...
    'Tooltip', 'Show/hide the Status Pane', ...
    'Visible', 'on', ...
    'Tag','PB_FLIP_STATUS');
handles.control.PB_FLIP_OPTIONS = uicontrol('Parent',a, ...
    'Units','pixels', ...
    'Callback',{@flip_pane, 3}, ...
    'CData', dnArrowBtnImage, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'Position',zero, ...
    'Tooltip', 'Show/hide the Options Pane', ...
    'Visible', 'on', ...
    'Tag','PB_FLIP_OPTIONS');
handles.control.PB_FLIP_DISPLAY = uicontrol('Parent',a, ...
    'Units','pixels', ...
    'CData', dnArrowBtnImage, ...
    'Callback',{@flip_pane, 4}, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'Position',zero, ...
    'Tooltip', 'Show/hide the Display Pane', ...
    'Visible', 'on', ...
    'Tag','PB_FLIP_DISPLAY');


handles.DTXT_TOO_SMALL = uicontrol('Parent',a, ...
    'Units','normalized', ...
    'BackgroundColor',backgroundColor, ...
    'FontName',fontName, ...
    'FontSize',fontSize, ...
    'FontWeight','bold', ...
    'HorizontalAlignment','center', ...
    'Position',[0 0 1 1], ...
    'String', 'The window is too small', ...
    'Style','pushbutton', ...
    'Visible', 'off', ...
    'Tag','DTXT_TOO_SMALL');


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Menu objects
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

handles.menu.FILE_MENU = uimenu('Parent',fig, ...
   'Enable','on', ...
   'Interruptible','on', ...
   'Callback', @button_down, ...
   'Label','File', ...
   'Tag','FILE_MENU');
handles.menu.CLEAR_FILE_MENU = uimenu('Parent',handles.menu.FILE_MENU, ...
   'Enable','on', ...
   'Interruptible','on', ...
   'Callback', {@sf_debug_callback, 'clear_output'}, ...
    'Checked', 'off', ...
   'Label','Clear Display', ...
   'Tag','CLEAR_FILE_MENU');
handles.menu.SAVE_OUTPUT_MENU = uimenu('Parent',handles.menu.FILE_MENU, ...
   'Enable','on', ...
   'Interruptible','on', ...
   'Callback', {@sf_debug_callback, 'save_output'}, ...
    'Checked', 'off', ...
   'Label','Save Display', ...
   'Tag','SAVE_OUTPUT_MENU');

handles.menu.VIEW_MENU = uimenu('Parent',fig, ...
   'Enable','on', ...
   'Interruptible','on', ...
   'Callback', @button_down, ...
   'Label','View', ...
   'Tag','VIEW_MENU');
handles.menu.MIN_VIEW_MENU = uimenu('Parent',handles.menu.VIEW_MENU, ...
   'Enable','on', ...
   'Interruptible','on', ...
   'Callback', @gui_minimize, ...
    'Checked', 'off', ...
   'Label','&Minimal View', ...
    'Accelerator', 'm', ...
   'Tag','MIN_VIEW_MENU');
handles.menu.STATUS_VIEW_MENU = uimenu('Parent',handles.menu.VIEW_MENU, ...
   'Enable','on', ...
   'Interruptible','on', ...
   'Callback', {@flip_pane, 1}, ...
    'Checked', 'off', ...
    'Separator', 'on', ...
   'Label','Status Pane', ...
   'Tag','STATUS_VIEW_MENU');
handles.menu.CONTROL_VIEW_MENU = uimenu('Parent',handles.menu.VIEW_MENU, ...
   'Enable','on', ...
   'Interruptible','on', ...
   'Callback', '', ...
    'Checked', 'on', ...
   'Label','Control Pane', ...
   'Tag','CONTROL_VIEW_MENU');
handles.menu.OPTIONS_VIEW_MENU = uimenu('Parent',handles.menu.VIEW_MENU, ...
   'Enable','on', ...
   'Interruptible','on', ...
   'Callback', {@flip_pane, 3}, ...
    'Checked', 'off', ...
   'Label','Options Pane', ...
   'Tag','OPTIONS_VIEW_MENU');
handles.menu.DISPLAY_VIEW_MENU = uimenu('Parent',handles.menu.VIEW_MENU, ...
   'Enable','on', ...
   'Interruptible','on', ...
   'Callback', {@flip_pane, 4}, ...
    'Checked', 'off', ...
   'Label','Display Pane', ...
   'Tag','DISPLAY_VIEW_MENU');


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   txt objects to hide button edges
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if(0)
handles.display.DTXT_CALL_STACK_DOWN = uicontrol('Parent',fig, ...
   'Interruptible','on', ...
    'Style','text', ...
    'BackgroundColor', backgroundColor, ...
    'Visible', 'on', ...
    'Units','characters', ...
    'Position',zero, ...
   'Tag','DTXT_CALL_STACK_DOWN');
handles.display.DTXT_CALL_STACK_RIGHT = uicontrol('Parent',fig, ...
   'Interruptible','on', ...
    'Style','text', ...
    'BackgroundColor', backgroundColor, ...
    'Units','characters', ...
    'Visible', 'on', ...
    'Position',zero, ...
   'Tag','DTXT_CALL_STACK_RIGHT');
handles.display.DTXT_CALL_STACK_LEFT = uicontrol('Parent',fig, ...
   'Interruptible','on', ...
    'Style','text', ...
    'BackgroundColor', backgroundColor, ...
    'Visible', 'on', ...
    'Units','characters', ...
    'Position',zero, ...
   'Tag','DTXT_CALL_STACK_LEFT');
handles.display.DTXT_CALL_STACK_TOP = uicontrol('Parent',fig, ...
   'Interruptible','on', ...
    'Style','text', ...
    'BackgroundColor', backgroundColor, ...
    'Units','characters', ...
    'Visible', 'on', ...
    'Position',zero, ...
   'Tag','DTXT_CALL_STACK_TOP');
end

handles.display.DTXT_COVERAGE_DOWN = uicontrol('Parent',fig, ...
   'Interruptible','on', ...
    'Style','text', ...
    'BackgroundColor', backgroundColor, ...
    'Visible', 'on', ...
    'Units','characters', ...
    'Position',zero, ...
   'Tag','DTXT_COVERAGE_DOWN');
handles.display.DTXT_COVERAGE_RIGHT = uicontrol('Parent',fig, ...
   'Interruptible','on', ...
    'Style','text', ...
    'BackgroundColor', backgroundColor, ...
    'Units','characters', ...
    'Visible', 'on', ...
    'Position',zero, ...
   'Tag','DTXT_COVERAGE_RIGHT');
handles.display.DTXT_COVERAGE_LEFT = uicontrol('Parent',fig, ...
   'Interruptible','on', ...
    'Style','text', ...
    'BackgroundColor', backgroundColor, ...
    'Visible', 'on', ...
    'Units','characters', ...
    'Position',zero, ...
   'Tag','DTXT_COVERAGE_LEFT');
handles.display.DTXT_COVERAGE_TOP = uicontrol('Parent',fig, ...
   'Interruptible','on', ...
    'Style','text', ...
    'BackgroundColor', backgroundColor, ...
    'Units','characters', ...
    'Visible', 'on', ...
    'Position',zero, ...
   'Tag','DTXT_COVERAGE_TOP');

handles.display.DTXT_CHART_DATA_DOWN = uicontrol('Parent',fig, ...
   'Interruptible','on', ...
    'Style','text', ...
    'BackgroundColor', backgroundColor, ...
    'Visible', 'on', ...
    'Units','characters', ...
    'Position',zero, ...
   'Tag','DTXT_CHART_DATA_DOWN');
handles.display.DTXT_CHART_DATA_RIGHT = uicontrol('Parent',fig, ...
   'Interruptible','on', ...
    'Style','text', ...
    'BackgroundColor', backgroundColor, ...
    'Units','characters', ...
    'Visible', 'on', ...
    'Position',zero, ...
   'Tag','DTXT_CHART_DATA_RIGHT');
handles.display.DTXT_CHART_DATA_LEFT = uicontrol('Parent',fig, ...
   'Interruptible','on', ...
    'Style','text', ...
    'BackgroundColor', backgroundColor, ...
    'Visible', 'on', ...
    'Units','characters', ...
    'Position',zero, ...
   'Tag','DTXT_CHART_DATA_LEFT');
handles.display.DTXT_CHART_DATA_TOP = uicontrol('Parent',fig, ...
   'Interruptible','on', ...
    'Style','text', ...
    'BackgroundColor', backgroundColor, ...
    'Units','characters', ...
    'Visible', 'on', ...
    'Position',zero, ...
   'Tag','DTXT_CHART_DATA_TOP');

handles.display.DTXT_ACTIVE_STATES_DOWN = uicontrol('Parent',fig, ...
   'Interruptible','on', ...
    'Style','text', ...
    'BackgroundColor', backgroundColor, ...
    'Visible', 'on', ...
    'Units','characters', ...
    'Position',zero, ...
   'Tag','DTXT_ACTIVE_STATES_DOWN');
handles.display.DTXT_ACTIVE_STATES_RIGHT = uicontrol('Parent',fig, ...
   'Interruptible','on', ...
    'Style','text', ...
    'BackgroundColor', backgroundColor, ...
    'Units','characters', ...
    'Visible', 'on', ...
    'Position',zero, ...
   'Tag','DTXT_ACTIVE_STATES_RIGHT');
handles.display.DTXT_ACTIVE_STATES_LEFT = uicontrol('Parent',fig, ...
   'Interruptible','on', ...
    'Style','text', ...
    'BackgroundColor', backgroundColor, ...
    'Visible', 'on', ...
    'Units','characters', ...
    'Position',zero, ...
   'Tag','DTXT_ACTIVE_STATES_LEFT');
handles.display.DTXT_ACTIVE_STATES_TOP = uicontrol('Parent',fig, ...
   'Interruptible','on', ...
    'Style','text', ...
    'BackgroundColor', backgroundColor, ...
    'Units','characters', ...
    'Visible', 'on', ...
    'Position',zero, ...
   'Tag','DTXT_ACTIVE_STATES_TOP');

if(1)
handles.display.DTXT_BREAKPOINTS_DOWN = uicontrol('Parent',fig, ...
   'Interruptible','on', ...
    'Style','text', ...
    'BackgroundColor', backgroundColor, ...
    'Visible', 'on', ...
    'Units','characters', ...
    'Position',zero, ...
   'Tag','DTXT_BREAKPOINTS_DOWN');
handles.display.DTXT_BREAKPOINTS_RIGHT = uicontrol('Parent',fig, ...
   'Interruptible','on', ...
    'Style','text', ...
    'BackgroundColor', backgroundColor, ...
    'Units','characters', ...
    'Visible', 'on', ...
    'Position',zero, ...
   'Tag','DTXT_BREAKPOINTS_RIGHT');
handles.display.DTXT_BREAKPOINTS_LEFT = uicontrol('Parent',fig, ...
   'Interruptible','on', ...
    'Style','text', ...
    'BackgroundColor', backgroundColor, ...
    'Visible', 'on', ...
    'Units','characters', ...
    'Position',zero, ...
   'Tag','DTXT_BREAKPOINTS_LEFT');
handles.display.DTXT_BREAKPOINTS_TOP = uicontrol('Parent',fig, ...
   'Interruptible','on', ...
    'Style','text', ...
    'BackgroundColor', backgroundColor, ...
    'Units','characters', ...
    'Visible', 'on', ...
    'Position',zero, ...
   'Tag','DTXT_BREAKPOINTS_TOP');
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  frame objects
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
handles.frame.DTXT_LEFT = uicontrol('Parent',fig, ...
   'Interruptible','on', ...
    'Style','text', ...
    'Units','characters', ...
    'Position',zero, ...
    'Visible', 'on', ...
    'BackgroundColor', min( 1, backgroundColor * 1.3 ), ...
   'Tag','DTXT_LEFT');
handles.frame.DTXT_UP = uicontrol('Parent',fig, ...
   'Interruptible','on', ...
    'Style','text', ...
    'BackgroundColor', min( 1, backgroundColor * 1.3 ), ...
    'Visible', 'on', ...
    'Units','characters', ...
    'Position',zero, ...
   'Tag','DTXT_UP');
handles.frame.DTXT_DOWN = uicontrol('Parent',fig, ...
   'Interruptible','on', ...
    'Style','text', ...
    'BackgroundColor', backgroundColor * 0.33, ...
    'Visible', 'on', ...
    'Units','characters', ...
    'Position',zero, ...
   'Tag','DTXT_DOWN');
handles.frame.DTXT_RIGHT = uicontrol('Parent',fig, ...
   'Interruptible','on', ...
    'Style','text', ...
    'BackgroundColor', backgroundColor * 0.33, ...
    'Units','characters', ...
    'Visible', 'on', ...
    'Position',zero, ...
   'Tag','DTXT_DOWN');

% Now compute the ids relevant to each of the panes
%STATUS
fldNames = fieldnames( handles.status );
ids = []; allids = [];
for i = 1:length( fldNames )
    ids = [ids getfield( handles.status, fldNames{i} ) ];
end
handles.status.ids = ids;


%CONTROL
fldNames = fieldnames( handles.control );
ids = [];
for i = 1:length( fldNames )
    ids = [ids getfield( handles.control, fldNames{i} ) ];
end
handles.control.ids = ids;

%OPTIONS
fldNames = fieldnames( handles.options );
ids = [];
for i = 1:length( fldNames )
    ids = [ids getfield( handles.options, fldNames{i} ) ];
end
handles.options.ids = ids;


%DISPLAY
fldNames = fieldnames( handles.display );
ids = [];
for i = 1:length( fldNames )
    ids = [ids getfield( handles.display, fldNames{i} ) ];
end
handles.display.ids = ids;


%HELP_CLOSE
fldNames = fieldnames( handles.help_close );
ids = [];
for i = 1:length( fldNames )
    ids = [ids getfield( handles.help_close, fldNames{i} ) ];
end
handles.help_close.ids = ids;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Selection objects
% are defined after the display.ids is constructed specifically
% to not be included in display.ids because they are deleted when
% objects in display.ids are attempted to be hidden when the display
% pane is being closed
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
handles.display.PB_SELECTION = uicontrol('Parent',a, ...
    'Units','characters', ...
    'Callback','', ...
    'Position', far, ...
    'FontName',fontName, ...
    'Visible', 'off', ...
    'Enable', 'inactive', ...
    'FontSize',fontSize, ...
    'Position',zero, ...
    'Tag','PB_SELECTION');

for i = 1:maxSelections
    handles.display.DTXT_SELECTION(i) = uicontrol('Parent',fig, ...
        'Interruptible','on', ...
            'Style','text', ...
            'Units','characters', ...
            'Visible', 'on', ...
            'Enable', 'inactive', ...
            'HorizontalAlignment', 'left', ...
            'Position', far, ...
            'String','', ...
        'Tag','SELECTION');
end
handles.display.DTXT_SELECTION_BACKGROUND = uicontrol('Parent',fig, ...
   'Interruptible','on', ...
    'Style','text', ...
    'BackgroundColor', selectionBackgroundColor, ...
    'Visible', 'off', ...
    'Enable', 'inactive', ...
    'HorizontalAlignment', 'left', ...
    'Units','characters', ...
    'Position',far, ...
   'Tag','DTXT_SELECTION_BACKGROUND');
handles.display.DTXT_SELECTION_FOREGROUND = uicontrol('Parent',fig, ...
   'Interruptible','on', ...
    'Style','text', ...
    'BackgroundColor', selectionBackgroundColor, ...
    'ForegroundColor', selectionForegroundColor, ...
    'Units','characters', ...
    'HorizontalAlignment', 'left', ...
    'Enable', 'inactive', ...
    'Visible', 'off', ...
    'Position',far, ...
   'Tag','DTXT_SELECTION_FOREGROUND');



data = get( a, 'UserData' );
data.gui.handles = handles;
data.gui.inResize = 0;
data.gui.charScrSize = charScrSize;
data.gui.pix2charRatio = pix2charRatio;
data.gui.dnArrowBtnImage = dnArrowBtnImage;
data.gui.rtArrowBtnImage = rtArrowBtnImage;
data.gui.upArrowBtnImage = upArrowBtnImage;
data.gui.oldPos = zero;
data.gui.tooLarge = 0;
data.gui.tooNarrow = 0;
data.gui.tooShort = 0;
data.gui.oldDisplaySize = 0;
data.gui.maxPos = zero;
data.gui.motionCatchers = [];
data.gui.lastMouseOver = 0;
data.gui.inDisplaySelection = 0;
data.gui.displayChoiceTexts = [];
data.gui.displayChoiceCoords = [];
data.gui.currentDisplaySelection = 0;
data.gui.oldDisplayView = 0;
data.gui.display.mouseOver = '';
data.gui.processingKeyPress = 0;
data.gui.isInitialized = 0;
data.gui.allEnableOn = [];
data.gui.panes = viewOptions{1}(1:4);
data.gui.isMinimal = viewOptions{1}(5);
data.gui.helpClosePresent = 1;
if data.gui.isMinimal
    data.gui.helpClosePresent = 0;
end
% now set the possible choices for the display buttons
data.gui.display.choices{1} = sfdebug('sf','display_choices','call_stack');
data.gui.display.choices{2} = sfdebug('sf','display_choices','coverage');
data.gui.display.choices{3} = sfdebug('sf','display_choices','chart_data');
data.gui.display.choices{4} = sfdebug('sf','display_choices','active_states');
data.gui.display.choices{5} = sfdebug('sf','display_choices','breakpoints');

if(0)
set( data.gui.handles.display.DTXT_CALL_STACK...
     ,'String',data.gui.display.choices{1}{1}...
     ,'callback',data.gui.display.choices{1}{2}...
);

set( data.gui.handles.display.DTXT_COVERAGE...
     ,'String',data.gui.display.choices{2}{1}...
     ,'callback',data.gui.display.choices{2}{2}...
);

set( data.gui.handles.display.DTXT_CHART_DATA...
     ,'String',data.gui.display.choices{3}{1}...
     ,'callback',data.gui.display.choices{3}{2}...
);

set( data.gui.handles.display.DTXT_ACTIVE_STATES...
     ,'String',data.gui.display.choices{4}{1}...
     ,'callback',data.gui.display.choices{4}{2}...
);

set( data.gui.handles.display.DTXT_BREAKPOINTS...
     ,'String',data.gui.display.choices{5}{1}...
     ,'callback',data.gui.display.choices{5}{2}...
);
end
if(1)
set( data.gui.handles.display.DTXT_CALL_STACK...
     ,'callback',data.gui.display.choices{1}{2}...
);

set( data.gui.handles.display.DTXT_COVERAGE...
     ,'callback',data.gui.display.choices{2}{2}...
);

set( data.gui.handles.display.DTXT_CHART_DATA...
     ,'callback',data.gui.display.choices{3}{2}...
);

set( data.gui.handles.display.DTXT_ACTIVE_STATES...
     ,'callback',data.gui.display.choices{4}{2}...
);

set( data.gui.handles.display.DTXT_BREAKPOINTS...
     ,'callback',data.gui.display.choices{5}{2}...
);
end
data.gui.display.currentView = 1;
safe_set(a,'UserData',data);
%%%set( a, 'UserData', data );

% call the resize function to initialize the thing
gui_resize(fig);
units = get(fig,'units');
scrUnits =get(0,'Units');
set(0,'Units',units);
figPosition = get(fig,'Position');
scr = get(0,'ScreenSize');
figPosition(1:2) = scr(1:2)+(scr(3:4)-figPosition(3:4))/2;
set(fig,'Position',figPosition);
set(0,'Units',scrUnits);

%set( fig, 'Position', zero ); % cause the resize with proper gcbf set

function res = rotate_image_90( im )
% im must be m * n * 3
res( :, :, 1 ) = rot90( im(:,:,1) );
res( :, :, 2 ) = rot90( im(:,:,2) );
res( :, :, 3 ) = rot90( im(:,:,3) );


function res = dnArrowImage( w, h, pix2charRatio)
bgColor = get( 0, 'defaultuicontrolbackgroundcolor' );
fgColor = [0 0 0];
wPix = ceil( w * pix2charRatio(1));
hPix = ceil( h * pix2charRatio(2));
res = ones( hPix, wPix, 3 );
for i = 1:3
    res( :,:,i ) = res(:,:,i) * bgColor(i);
end

% the background is ready.  Now draw the arrow.
midX = ceil( wPix/2);
midY = ceil( hPix/2);
for i = 1:3
    for offset = 0:3
        res( midY+2-offset, midX-offset:midX+offset, i ) = fgColor(i);
    end
end



function safe_set(fig,userDataString,data)

    dbInfo = get(fig,'userdata');
    dbInfo.gui = data.gui;
    set(fig,'userdata',dbInfo);


function destroy_create_selection_objects(fig)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% a workaround for the HG bug
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
maxSelections = 7;
far = [ -1000 -1000 1 1 ];
backgroundColor = get( 0, 'defaultuicontrolbackgroundcolor' );
selectionBackgroundColor = [ 0 0 0.6 ];
selectionForegroundColor = [ 1 1 1 ];
fontSize = get( 0, 'defaultuicontrolfontsize' );
fontName = get( 0, 'defaultuicontrolfontname' );

data = get( fig, 'UserData' );
delete( [ data.gui.handles.display.DTXT_SELECTION, ...
            data.gui.handles.display.DTXT_SELECTION_BACKGROUND, ...
            data.gui.handles.display.DTXT_SELECTION_FOREGROUND, ...
            data.gui.handles.display.PB_SELECTION ] )


data.gui.handles.display.PB_SELECTION = uicontrol('Parent',fig, ...
    'Units','characters', ...
    'Callback','', ...
    'Position', far, ...
    'FontName',fontName, ...
    'Visible', 'off', ...
    'Enable', 'inactive', ...
    'FontSize',fontSize, ...
    'Tag','PB_SELECTION');
for i = 1:maxSelections
    data.gui.handles.display.DTXT_SELECTION(i) = uicontrol('Parent',fig, ...
        'Interruptible','on', ...
            'Style','text', ...
            'Units','characters', ...
            'Visible', 'on', ...
            'Enable', 'inactive', ...
            'HorizontalAlignment', 'left', ...
            'Position', far, ...
            'String','', ...
        'Tag','SELECTION');
end
data.gui.handles.display.DTXT_SELECTION_BACKGROUND = uicontrol('Parent',fig, ...
   'Interruptible','on', ...
    'Style','text', ...
    'BackgroundColor', selectionBackgroundColor, ...
    'Visible', 'off', ...
    'Enable', 'inactive', ...
    'HorizontalAlignment', 'left', ...
    'Units','characters', ...
    'Position',far, ...
   'Tag','DTXT_SELECTION_BACKGROUND');
data.gui.handles.display.DTXT_SELECTION_FOREGROUND = uicontrol('Parent',fig, ...
   'Interruptible','on', ...
    'Style','text', ...
    'BackgroundColor', selectionBackgroundColor, ...
    'ForegroundColor', selectionForegroundColor, ...
    'Units','characters', ...
    'HorizontalAlignment', 'left', ...
    'Enable', 'inactive', ...
    'Visible', 'off', ...
    'Position',far, ...
   'Tag','DTXT_SELECTION_FOREGROUND');


set( fig, 'UserData', data );


%---------------------------------------------------------------------
function tag = tag_l
%
%
%
   tag = 'SF_DEBUGGER';


%---------------------------------------------------------------------
function sf_debug_callback(obj, evd, command)
    sfdebug('gui', command);
     