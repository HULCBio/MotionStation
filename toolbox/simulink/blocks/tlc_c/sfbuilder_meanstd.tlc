%% File : sfbuilder_meanstd.tlc
%% Created: Thu May 16 11:47:49 2002
%% $Revision: 1.1 $
%%
%% Description: 
%%   Real-Time Workshop wrapper functions interface generated for 
%%   S-function "sfbuilder_meanstd.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Real-Time Workshop, see the Target Language Compiler manual
%%   (under Real-Time Workshop) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  sfbuilder_meanstd "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output
  %openfile externs
  extern void sfbuilder_meanstd_Outputs_wrapper(const real_T *sig,
                          real_T *Mean,
                          real_T *stDeviation,
                          const real_T *xD);
  extern void sfbuilder_meanstd_Update_wrapper(const real_T *sig,
                          const real_T *Mean,
                          const real_T *stDeviation,
                          real_T *xD);
  %closefile externs
  %<LibCacheExtern(externs)>
  %%
%endfunction

%% InitializeConditions =========================================================
%%
%function InitializeConditions(block, system) Output
 /* %<Type> Block: %<Name> */
  %assign rollVars = ["<dwork>/DSTATE"]
  %assign rollRegions = [0:%<LibBlockDWorkWidth(DSTATE)-1>]
  %roll sigIdx = rollRegions, lcv = 1, block, "Roller", rollVars
    real_T initVector[3] = {0,0,0}; 
    %if %<LibBlockDWorkWidth(DSTATE)> == 1
      %<LibBlockDWork(DSTATE, "", lcv, sigIdx)> = initVector[0];
     %else
      %<LibBlockDWork(DSTATE, "", lcv, sigIdx)> = initVector[%<lcv>];
     %endif
  %endroll
 
%endfunction
%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
   /* S-Function "sfbuilder_meanstd_wrapper" Block: %<Name> */

  %assign pu = LibBlockInputSignalAddr(0, "", "", 0)
  %assign py = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  %assign pxd = LibBlockDWorkAddr(DSTATE, "", "", 0)
  %assign py_width = LibBlockOutputSignalWidth(0)
  %assign pu_width = LibBlockOutputSignalWidth(0)
  sfbuilder_meanstd_Outputs_wrapper(%<pu>, %<py>, %<py1>,  %<pxd>);

  %%
%endfunction

%% Function: Update ==========================================================
%% Abstract:
%%    Update
%%     
%%
%function Update(block, system) Output
    /* S-Function "sfbuilder_meanstd_wrapper" Block: %<Name> */

  %assign pu = LibBlockInputSignalAddr(0, "", "", 0)
  %assign py = LibBlockOutputSignalAddr(0, "", "", 0)   
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  %assign pxd = LibBlockDWorkAddr(DSTATE, "", "", 0)
  
  

  sfbuilder_meanstd_Update_wrapper(%<pu>, %<py>, %<py1>, %<pxd>);
  %%
%endfunction 
%% [EOF] sfbuilder_meanstd.tlc





