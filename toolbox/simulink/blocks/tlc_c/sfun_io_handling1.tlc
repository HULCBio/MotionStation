%% $RCSfile: sfun_io_handling1.ttlc,v $
%% $Date: 2002/04/10 18:18:43 $
%%
%% Abstract:
%%      sfunction sfun_io_handling1 block target file
%%      See simulink/src/sfun_io_handling1.c
%%
%% Tom Weis, 18-Nov-2000
%%
%% Copyright 2000-2002 The MathWorks, Inc.
%% File : sfun_io_handling1.tlc generated from sfun_io_handling1.ttlc revsion 1.2 


%implements "sfun_io_handling1" "C"


%% Function: Outputs ===========================================================
%%
%function Outputs(block, system) Output
  /* %<Type> Block: %<Name> */
  %%
  %% Case1 - Tests block i/o code for:
  %%   %roll with RollThreshold=1
  %%   No user control variable (ucv)
  %%   Loop Control Variable (lcv=1).  Setting lcv=1 directs the %roll
  %%     construct to generate a for loop over the various contiguous input and 
  %%     output signals.
  %%
  /* Output Port0 tests LibBlockInputSignal, %roll, lcv=1 */
  %assign rollVars = ["U", "y0"]
  %if LibBlockOutputSignalIsComplex(0)
    %roll idx = RollRegions, lcv = 1, block, "Roller", rollVars
      %assign ur = LibBlockInputSignal(0, "", lcv, "%<tRealPart>%<idx>")
      %assign yr = LibBlockOutputSignal(0, "", lcv, "%<tRealPart>%<idx>")
      %assign ui = LibBlockInputSignal(0, "", lcv, "%<tImagPart>%<idx>")
      %assign yi = LibBlockOutputSignal(0, "", lcv, "%<tImagPart>%<idx>")
      %%                                            ^^^^^^^^^^^^^^^^^^^^^
      %% Note: For complex i/o you need to specify whether you are 
      %%       accessing the real or imaginary part of the signal
      %%
      %<yr> = %<ur> * 0.1;
      %<yi> = %<ui> * 0.1;
    %endroll
  %else
    %roll idx = RollRegions, lcv = 1, block, "Roller", rollVars
      %<LibBlockOutputSignal(0, "", lcv, idx)> = \
      %<LibBlockInputSignal(0, "", lcv, idx)> * 0.1;
      %%                                ^^^
      %% Note: For real i/o you only need to specify the signal index
      %%
    %endroll
  %endif

  %% Case2 - Tests block i/o code for:
  %%   %roll with RollThreshold=10
  %%   No ucv
  %%   Loop Control Variable (lcv=10)
  %%   Note on lcv=10: Setting lcv=10 directs the %roll construct to
  %%     generate a for loop for each contiguous input and 
  %%     output signal region with widths >= 10.  For regions with widths
  %%     < 10, the assignment statements are all linearly expanded out.
  %%
  /* Output Port1 tests LibBlockInputSignal, %roll, lcv=10 */
  %assign rollVars = ["U", "y1"]
  %if LibBlockOutputSignalIsComplex(1)
    %roll idx = RollRegions, lcv = 10, block, "Roller", rollVars
      %assign ur = LibBlockInputSignal(0, "", lcv, "%<tRealPart>%<idx>")
      %assign yr = LibBlockOutputSignal(1, "", lcv, "%<tRealPart>%<idx>")
      %assign ui = LibBlockInputSignal(0, "", lcv, "%<tImagPart>%<idx>")
      %assign yi = LibBlockOutputSignal(1, "", lcv, "%<tImagPart>%<idx>")
      %<yr> = %<ur> * 0.2;
      %<yi> = %<ui> * 0.2;
    %endroll
  %else
    %roll idx = RollRegions, lcv = 10, block, "Roller", rollVars
      %<LibBlockOutputSignal(1, "", lcv, idx)> = \
      %<LibBlockInputSignal(0, "", lcv, idx)> * 0.2;
    %endroll
  %endif

  %% Case3 - Tests block i/o code for:
  %%   %foreach
  %%   No ucv, lcv 
  %%   The %foreach generates code which mimics a %roll construct that
  %%     didn't roll (i.e, signal width < rollThreshold).  
  %%
  /* Output Port2 tests LibBlockInputSignal, %foreach */
  %assign nInputs = DataInputPort.Width
  %if LibBlockOutputSignalIsComplex(2)
    %foreach idx = nInputs
      %assign ur = LibBlockInputSignal(0, "", "", "%<tRealPart>%<idx>")
      %assign ui = LibBlockInputSignal(0, "", "", "%<tImagPart>%<idx>")
      %assign yr = LibBlockOutputSignal(2, "", "", "%<tRealPart>%<idx>")
      %assign yi = LibBlockOutputSignal(2, "", "", "%<tImagPart>%<idx>")
      %%                                   ^^^^^^
      %% ucv, lcv must be ""
      %%
      %<yr> = %<ur> * 0.3;
      %<yi> = %<ui> * 0.3;
      %endforeach
  %else
    %foreach idx = nInputs
      %<LibBlockOutputSignal(2, "", "", idx)> = \
      %<LibBlockInputSignal(0, "", "", idx)> * 0.3;
    %endforeach
  %endif

  %% Case4 - Tests block i/o code for:
  %%   %roll with rollThreshold=1
  %%   No ucv, lcv=1
  %%   Uses LibBlockInputSignalAddr instead of LibBlockInputSignal
  %%
  /* Output Port3 tests LibBlockInputSignalAddr, %roll, lcv=1 */
  %assign rollVars = ["U", "y3"]
  %if LibBlockOutputSignalIsComplex(3)
    %roll idx = RollRegions, lcv = 1, block, "Roller", rollVars
      %% Note: LibBlock[In|Out]putAddr only dereferences the fourth parameter
      %%       (idx) to the complex container's address.  The programmer 
      %%       must specify the real or imaginary component to access 
      %%       components within the structure.
      %assign u = LibBlockInputSignalAddr(0, "", lcv, idx)
      %assign y = LibBlockOutputSignalAddr(3, "", lcv, idx)
      (*%<y>).re = (*%<u>).re * 0.4;
      (*%<y>).im = (*%<u>).im * 0.4;
    %endroll
  %else
    %roll idx = RollRegions, lcv = 1, block, "Roller", rollVars
      *%<LibBlockOutputSignalAddr(3, "", lcv, idx)> = \
      *%<LibBlockInputSignalAddr(0, "", lcv, idx)> * 0.4;
    %endroll
  %endif

  %% Case5 - Tests block i/o code for:
  %%   %roll with rollThreshold=1
  %%   No ucv, lcv=10
  %%   Uses LibBlockInputSignalAddr instead of LibBlockInputSignal
  %%
  /* Output Port4 tests LibBlockInputSignalAddr, %roll, lcv=10 */
  %assign rollVars = ["U", "y4"]
  %if LibBlockOutputSignalIsComplex(4)
    %roll idx = RollRegions, lcv = 1, block, "Roller", rollVars
      %% Note: LibBlock[In|Out]putAddr only dereferences the fourth parameter
      %%       (idx) to the complex container's address.  The programmer 
      %%       must specify the real or imaginary component to access 
      %%       components within the structure.
      %assign u = LibBlockInputSignalAddr(0, "", lcv, idx)
      %assign y = LibBlockOutputSignalAddr(4, "", lcv, idx)
      (*%<y>).re = (*%<u>).re * 0.5;
      (*%<y>).im = (*%<u>).im * 0.5;
    %endroll
  %else
    %roll idx = RollRegions, lcv = 10, block, "Roller", rollVars
      *%<LibBlockOutputSignalAddr(4, "", lcv, idx)> = \
      *%<LibBlockInputSignalAddr(0, "", lcv, idx)> * 0.5;
    %endroll
  %endif

  %% Case6 - Tests block i/o code for:
  %%   %roll with rollThreshold=1
  %%   Uses ucv, lcv=1
  %%   Notes on using ucv: 
  %%     1. You must set the rollThreshold to 1 (lcv=1).
  %%     2. "FlatRoller" doesn't generate lcv's in the generated code
  %%        It is the .tlc programmer's responsibility to create their
  %%        own ucv.
  %%     3. You would %roll instead %foreach to handle discontigous input
  %%        and output regions.  Unless you specify in your s-function that
  %%        that a given inport requires contiguous inputs 
  %%        (ssSetInputPortRequiredContiguous), you need to use the %roll
  %%        version of ucv.  See sfun_io_handling2.{c, tlc} for an example
  %%        of an s-function that requires contiguous inputs.
  %%
  /* Output Port5 tests LibBlockInputSignal, %roll, ucv="i" */
  %assign iWidth = DataInputPort[0].Width
  { 
  int i;
  %if LibBlockOutputSignalIsComplex(0)
    %assign rollVars = [""]
    %assign threshold = 1
    %roll sigIdx=RollRegions, lcv=threshold, block, "FlatRoller", rollVars
      %assign ui = LibBlockInputSignal(0, "i", "", "%<tImagPart>%<sigIdx>")
      %assign ur = LibBlockInputSignal(0, "i", "", "%<tRealPart>%<sigIdx>")
      %assign yi = ...
        LibBlockOutputSignal(5, "i+%<sigIdx>", "", "%<tImagPart>%<sigIdx>")
      %assign yr = ...
        LibBlockOutputSignal(5, "i+%<sigIdx>", "", "%<tRealPart>%<sigIdx>")
      %assign loopLimit = %<ROLL_ITERATIONS()>
      %if loopLimit == 0
        %assign loopLimit = loopLimit + 1
      %endif
      for (i= 0; i <  %<loopLimit>; i++) {
        %<yr> = %<ur> * 0.6;
        %<yi> = %<ui> * 0.6;
      }
    %endroll
  %else
    %assign rollVars = [""]
    %assign threshold = 1
    %roll sigIdx=RollRegions, lcv=threshold, block, "FlatRoller", rollVars
      %assign u = LibBlockInputSignal(0, "i", "", sigIdx)
      %assign y = LibBlockOutputSignal(5, "i+%<sigIdx>", "", sigIdx)
      %assign loopLimit = %<ROLL_ITERATIONS()>
      %if loopLimit == 0
        %assign loopLimit = loopLimit + 1
      %endif
      for (i= 0; i <  %<loopLimit>; i++) {
        %<y> = %<u> * 0.6;
      }
    %endroll
  %endif
  }


%endfunction

%% [EOF] sfun_io_handling1.tlc
