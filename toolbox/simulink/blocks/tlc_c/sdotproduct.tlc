%% $RCSfile: sdotproduct.ttlc,v $
%% File : sdotproduct.tlc generated from sdotproduct.ttlc revsion 1.6
%% $Date: 2002/04/10 18:17:59 $
%%
%% Murali Yeddanapudi, 27-May-1998
%% Copyright 1990-2002 The MathWorks, Inc.
%%
%% Abstract:
%%      Dot product block target file.


%implements sdotproduct "C"


%% Function: FcnThriftedComplexMultiply ========================================
%% Abstract:
%%      This function multiplies two numbers in the complex plane. If any of
%%      the input arguments is only real, then the complex part is passed in
%%      as "".
%%
%function FcnThriftedComplexConjMultiply(ar,ai,br,bi,cr,ci,op) void
  %openfile buffer
  %%
  %% Compute Cr = Ar * Br + Ai * Bi
  %%
  %assign rhsStr = "%<ar> * %<br>"
  %if !LibIsEqual(ai, "") && !LibIsEqual(bi, "")
    %assign rhsStr = rhsStr + " + %<ai> * %<bi>"
  %endif
  %<cr> %<op> %<rhsStr>;
  %%
  %% Compute Ci = Ar * Bi - Ai * Br
  %%
  %if !LibIsEqual(ci, "")
    %assign rhsStr = "0.0"
    %if !LibIsEqual(bi, "")
      %assign rhsStr = "%<ar> * %<bi>"
    %endif
    %if !LibIsEqual(ai, "")
      %assign rhsStr = rhsStr + " - %<ai> * %<br>"
    %endif
    %<ci> %<op> %<rhsStr>;
  %endif
  %%
  %closefile buffer
  %return buffer
%endfunction %% FcnThriftedComplexMultiply


%% Function: Outputs ===========================================================
%% Abstract:
%%      Y = U0' * U1, where U0' is the complex conjugate transpose of U0
%%
%function Outputs(block, system) Output
  %assign sfcnName = ParamSettings.FunctionName
  /* %<Type> Block (%<sfcnName>): %<LibParentMaskBlockName(block)> */
  %%
  %assign u0re = LibBlockInputSignal(0, "", "", "%<tRealPart>0")
  %assign u0im = LibBlockInputSignal(0, "", "", "%<tImagPart>0")
  %assign u1re = LibBlockInputSignal(1, "", "", "%<tRealPart>0")
  %assign u1im = LibBlockInputSignal(1, "", "", "%<tImagPart>0")
  %%
  %assign yre = LibBlockOutputSignal(0, "", "", "%<tRealPart>0")
  %assign yim = LibBlockOutputSignal(0, "", "", "%<tImagPart>0")
  %%
  %% Need to declare a temporary variable for u1re when the output is
  %% being over-written and u0im is non-zero
  %assign outputOverWritesInput = ...
    ((LibBlockInputSignalBufferDstPort(0) == 0) || ...
     (LibBlockInputSignalBufferDstPort(1) == 0)) &&   ...
    (LibBlockInputSignalIsComplex(0) && LibBlockInputSignalIsComplex(1))
  %%
  %if outputOverWritesInput
    {
      %assign dtName = LibBlockOutputSignalDataTypeName(0, tRealPart)
      %<dtName> tmpVar;
    \
    %assign tmpVar = "tmpVar"
  %else
    %assign tmpVar = yre
  %endif
  %%
  %<FcnThriftedComplexConjMultiply(u0re, u0im, u1re, u1im, tmpVar, yim, "=")>\
  %%
  %assign rollVars    = ["U", "Y"]
  %assign rollRegion  = LibGetRollRegions1(RollRegions)
  %%
  %if LibIsEqual(rollRegion, []) 
    %if outputOverWritesInput
      %<yre> = tmpVar;
    %endif
  %else
    %% Continue with dot product for non-scalar case
    %roll idx = rollRegion, lcv = RollThreshold, block, "Roller", rollVars
      %assign u0re = LibBlockInputSignal(0,"",lcv,"%<tRealPart>%<idx>")
      %assign u0im = LibBlockInputSignal(0,"",lcv,"%<tImagPart>%<idx>")
      %assign u1re = LibBlockInputSignal(1,"",lcv,"%<tRealPart>%<idx>")
      %assign u1im = LibBlockInputSignal(1,"",lcv,"%<tImagPart>%<idx>")
      %%			   
      %assign yre = LibBlockOutputSignal(0,"",lcv,"%<tRealPart>%<idx>")
      %assign yim = LibBlockOutputSignal(0,"",lcv,"%<tImagPart>%<idx>")
      %%
      %<FcnThriftedComplexConjMultiply(u0re, u0im, u1re, u1im, yre, yim, "+=")>\
    %endroll
  %endif
  %if outputOverWritesInput
    }
  %endif

%endfunction

%% [EOF] sdotproduct.tlc
