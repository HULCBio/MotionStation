%% File : sfun_dtype_io.tlc generated from sfun_dtype_io.ttlc revsion 1.3 
%% $Date: 2002/04/10 18:18:37 $
%%
%% Mojdeh Shakeri
%%
%% Copyright 1990-2002 The MathWorks, Inc.
%%
%% Abstract: Sfun_dtype_io block target file

%implements sfun_dtype_io "C"

%% Function: Outputs ==========================================================
%% Abstract:
%%   If u2 is true (not zero), 
%%     y = u0 BITWISE_OR  u1
%%   otherwise, 
%%     y = u0 BITWISE_XOR u1
%%
%function Outputs(block, system) Output
    %%
    %%  Comment generated code
    %%
    /* s-function sfun_dtype_io: %<Name> */
    %%
    %% Get input data type name. It must be the same as output data type name.
    %% Note: we are not using the data type name in this example.
    %%
    %assign u0DTName = LibBlockInputSignalDataTypeName(0,"")
    %%
    %% Implement the bitwise OR or XOR
    %%
    %assign orOp     = "|"
    %assign xorOp    = "^"
    %assign notEqOp  = "!="
    %assign rollVars = ["U", "Y"]
    %roll idx = RollRegions, lcv = RollThreshold, block, "Roller", rollVars
      %%
      %assign u0 = LibBlockInputSignal( 0,"",lcv, idx)
      %assign u1 = LibBlockInputSignal( 1,"",lcv, idx)
      %assign u2 = LibBlockInputSignal( 2,"",lcv, idx)
      %assign y0 = LibBlockOutputSignal(0,"",lcv, idx)
      %%
      %<y0>  = ((%<u2> %<notEqOp> 0) ? ...
	(%<u0> %<orOp>  %<u1>) : ...
	(%<u0> %<xorOp> %<u1>));
    %endroll
    %%
    
%endfunction  %% Outputs

%% [EOF] sfun_dtype_io
