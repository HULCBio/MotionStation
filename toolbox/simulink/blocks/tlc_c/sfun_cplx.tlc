%% File : sfun_cplx.tlc generated from sfun_cplx.ttlc revsion 1.3 
%% $Date: 2002/04/10 18:18:31 $
%%
%% Mojdeh Shakeri
%%
%% Copyright 1990-2002 The MathWorks, Inc.
%%
%% Abstract: Sfun_cplx block target file
%%

%implements sfun_cplx "C"

%% Function: Outputs ==========================================================
%% Abstract:
%%       Y = P + U
%%
%function Outputs(block, system) Output
    %%
    %%  Comment generated code
    %%
    %% 
    %assign pIsComplex = LibBlockParameterIsComplex(Operand)
    %assign uIsComplex = LibBlockInputSignalIsComplex(0)
    %assign yIsComplex = LibBlockOutputSignalIsComplex(0)
    
    /* s-function sfun_cplx: %<Name> */
    %assign rollVars = ["U", "Y", "P"]
    %roll idx = RollRegions, lcv = RollThreshold, block, "Roller", rollVars
      %assign pre  = LibBlockParameter(Operand, "", lcv, "%<tRealPart>%<idx>")
      %assign pim  = LibBlockParameter(Operand, "", lcv, "%<tImagPart>%<idx>")
      %%
      %assign ure = LibBlockInputSignal(0,"",lcv,"%<tRealPart>%<idx>")
      %assign uim = LibBlockInputSignal(0,"",lcv,"%<tImagPart>%<idx>")
      %%			   
      %assign yre = LibBlockOutputSignal(0,"",lcv,"%<tRealPart>%<idx>")
      %assign yim = LibBlockOutputSignal(0,"",lcv,"%<tImagPart>%<idx>")
      %%
      %% Add real parts
      %<yre> = %<pre> + %<ure>;
      %%
      %% Add complex parts
      %if yIsComplex
	%if uIsComplex
	  %if pIsComplex
	    %<yim> = %<pim> + %<uim>;
	  %else %% p is real
	    %<yim> = %<uim>;
	  %endif %% pIsComplex
	%else
	  %% u is real, p must be complex
	  %<yim> = %<pim>;
	%endif %% uIsComplex
      %endif %% yIsComplex
      %%
    %endroll
    %%
    
%endfunction  %% Outputs

%% [EOF] sfun_cplx
