function r = reqmf(action, filename, reqstr)
%REQMF get or set a requirement string in an M-file.
%   R = REQMF('GET', FILENAME) returns the requirement
%   string in R.  (Looks through the entire file even though
%   the requirement line should be on the first line.)
%   R = REQMF('SET', FILENAME, REQSTR) writes the requirement
%   string REQSTR into file FILENAME.  Location is after the last
%   line in a set of comments.  If no comments, then after the first
%   non-empty line.  First character must be a space.  
%   Existing requirements are overwritten if correctly located,
%   otherwise removed .
%
%   Returns: Success returns the requirement.  All errors are thrown.
%

%  Author(s): M. Greenstein, 11/10/98
%  Copyright 1998-2004 The MathWorks, Inc.
%  $Revision: 1.1.6.2 $   $Date: 2004/04/15 00:36:27 $

a = lower(action);
str = ' % Autogenerated requirements (do not modify) = ';

switch (a),
   case 'get',
		r = '';

		% Attempt to open the input file.
		[fid, e] = fopen(filename, 'rt');
		if (-1 == fid), error(e); end

		% Read through the file.
		i = 1;
		while (i)
			line = fgetl(fid);
   		if (isnumeric(line)), break; end % eof?
   		j = strncmp(line, str, length(str));
   		if (j)
      		j = findstr(line, '{');
      		r = line(j:end);
      		break;      
   		end
			i = i + 1;
		end

		if(fclose(fid))
   		error('File close error');
      end
      
   case 'set',
      r = reqstr;

		% Attempt to open the input file.
		[fid, e] = fopen(filename, 'r');
		if (-1 == fid), error(e); end

      % Find the location for writing requirements: After the
      % the first set of comment lines (which are help lines).
      i = 1;
      j = 0;
      while (i)
         line = fgets(fid);
   		if (isnumeric(line)), break; end % eof?

         if (line(1) == '%')
            j = i;
         elseif (j)
            break;
         end
         i = i + 1;
      end % while (i)
      fseek(fid, 0, -1); % Rewind the file.
      if (~j)
         % There are no comment lines.  Put after the first non-empty line.
         i = 1;
         while (i)
            line = fgets(fid);
      		if (isnumeric(line)), break; end % eof?

            if ((line(1) + 0) ~= char(10) & (line(1) + 0) ~= char(13))
               j = i;
               break;
            end
            i = i + 1;
         end % while (i)
         fseek(fid, 0, -1); % Rewind the file again.
      end % if (~j)

		% Read through the file and create an output buffer.
      i = 1;
		buf = {};
		while (i)
   		line = fgets(fid);
   		if (isnumeric(line)), break; end % eof?
   		s = strncmp(line, str, length(str));
     		%%%%s = findstr(line, str);
         %%%%if (isempty(s)) % Ignore line with requirements.
         if (~s) % Ignore line with requirements.
         	buf{i} = line;
      		if (i == j)
         		% Write the requirement on the next line.
               i = i + 1;
               if (~strcmp(reqstr, '{ }'))
                  buf{i} = [str reqstr char(10)];
               end
   		   end
         end % if (isempty(s))
   		i = i + 1;
		end % while (i)

		if (fclose(fid))
   		error('File close error (1).');
		end

		% Write the new file from the output buffer.
		% Attempt to open the input file.
		[fid, e] = fopen(filename, 'w+');
		% Adding our own err message because fopen gives a stupid
		% error message back like: Sorry. No help in figuring out the problem . . .
		if (-1 == fid)
		  error(['Error while writing to file. ' ...
				 'Please check the file permissions. Make sure it is not read-only']); 
		end

		for i = 1:length(buf)
   		fprintf(fid, '%s', char(buf{i}));   
		end % for i = 1:length(buf)

		if (fclose(fid))
   		error('File close error (2).');
		end
      
   otherwise,
      error(['Unknown action ' action '.']);
      
end % switch(a),
   
% end function r = reqmf(action, name, reqstr)

