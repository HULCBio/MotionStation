% $Revision: 1.1.6.6 $
<(getSolverDialogSchema)Start time:
>(getSolverDialogSchema)開始時間:
<(getSolverDialogSchema)Simulation start time. Note that the values that you specify\nas block initial conditions must be their values at this time.
>(getSolverDialogSchema)ｼﾐｭﾚｰｼｮﾝの開始時間。ﾌﾞﾛｯｸの初期条件として指定する値は、現時点で\nそれらの値でなければならないことに注意してください。
<(getSolverDialogSchema)Stop time:
>(getSolverDialogSchema)終了時間:
<(getSolverDialogSchema)Simulation stop time.
>(getSolverDialogSchema)ｼﾐｭﾚｰｼｮﾝ終了時間
<(getSolverDialogSchema)Type:
>(getSolverDialogSchema)ﾀｲﾌﾟ:
<(getSolverDialogSchema)Variable-step
>(getSolverDialogSchema)可変ｽﾃｯﾌﾟ
<(getSolverDialogSchema)Fixed-step
>(getSolverDialogSchema)固定ｽﾃｯﾌﾟ
<(getSolverDialogSchema)Choose a variable or fixed-step solver.
>(getSolverDialogSchema)可変か固定ｽﾃｯﾌﾟｿﾙﾊﾞを選択してください。
<(getSolverDialogSchema)discrete (no continuous states)
>(getSolverDialogSchema)離散 (連続状態なし)
<(getSolverDialogSchema)Fixed-step size (fundamental sample time):
>(getSolverDialogSchema)固定ｽﾃｯﾌﾟ (基本ｻﾝﾌﾟﾙ時間):
<(getSolverDialogSchema)Specify the step size used by the selected\nfixed-step solver.
>(getSolverDialogSchema)選択した固定ｽﾃｯﾌﾟｿﾙﾊﾞで使用するｽﾃｯﾌﾟｻｲｽﾞを\n指定してください。
<(getSolverDialogSchema)Choose a solver.
>(getSolverDialogSchema)ｿﾙﾊﾞの選択
<(getSolverDialogSchema)Solver:
>(getSolverDialogSchema)ｿﾙﾊﾞ:
<(getSolverDialogSchema)Tasking mode for periodic sample times:
>(getSolverDialogSchema)周期的なｻﾝﾌﾟﾙ時間のﾀｽｸﾓｰﾄﾞ:
<(getSolverDialogSchema)Tasking mode of the real-time system targeted by this\nmodel.  Auto defaults to single-tasking for models with\na single discrete sample time and to multitasking for\nmodels with multiple discrete sample times.
>(getSolverDialogSchema)このﾓﾃﾞﾙのﾀｰｹﾞｯﾄとなるﾘｱﾙﾀｲﾑｼｽﾃﾑのﾀｽｸﾓｰﾄﾞ。複数の\n離散ｻﾝﾌﾟﾙ時間のﾓﾃﾞﾙに対してﾏﾙﾁﾀｽｸに、単一の離散ｻﾝﾌﾟﾙ時間\nのﾓﾃﾞﾙに対してはｼﾝｸﾞﾙﾀｽｸにします。ﾃﾞﾌｫﾙﾄはAutoです。
<(getSolverDialogSchema)Auto
>(getSolverDialogSchema)Auto
<(getSolverDialogSchema)SingleTasking
>(getSolverDialogSchema)SingleTasking
<(getSolverDialogSchema)MultiTasking
>(getSolverDialogSchema)MultiTasking
<(getSolverDialogSchema)Max step size:
>(getSolverDialogSchema)最大ｽﾃｯﾌﾟｻｲｽﾞ:
<(getSolverDialogSchema)Maximum step size for variable-step solver.
>(getSolverDialogSchema)可変ｽﾃｯﾌﾟｿﾙﾊﾞに対する最大ｽﾃｯﾌﾟ
<(getSolverDialogSchema)Step size for the fixed-step solver.
>(getSolverDialogSchema)固定ｽﾃｯﾌﾟｿﾙﾊﾞに対するｽﾃｯﾌﾟｻｲｽﾞ
<(getSolverDialogSchema)Relative tolerance:
>(getSolverDialogSchema)相対誤差:
<(getSolverDialogSchema)Relative tolerance.
>(getSolverDialogSchema)相対誤差
<(getSolverDialogSchema)Min step size:
>(getSolverDialogSchema)最小ｽﾃｯﾌﾟｻｲｽﾞ:
<(getSolverDialogSchema)Minimum step size for variable-step solver.
>(getSolverDialogSchema)可変ｽﾃｯﾌﾟｿﾙﾊﾞに対する最小ｽﾃｯﾌﾟ
<(getSolverDialogSchema)Absolute tolerance:
>(getSolverDialogSchema)絶対許容誤差:
<(getSolverDialogSchema)Absolute tolerance.
>(getSolverDialogSchema)絶対許容誤差
<(getSolverDialogSchema)Initial step size:
>(getSolverDialogSchema)初期ｽﾃｯﾌﾟｻｲｽﾞ:
<(getSolverDialogSchema)Initial step size.
>(getSolverDialogSchema)初期ｽﾃｯﾌﾟｻｲｽﾞ
<(getSolverDialogSchema)Maximum order:
>(getSolverDialogSchema)最大次数:
<(getSolverDialogSchema)Maximum order.
>(getSolverDialogSchema)最大次数
<(getSolverDialogSchema)Extrapolation order:
>(getSolverDialogSchema)補間の次数:
<(getSolverDialogSchema)Higher order methods are more expensive but may produce more accurate solution.
>(getSolverDialogSchema)高次のﾒｿｯﾄﾞは時間を要しますが、より正確な解を生成します。
<(getSolverDialogSchema)Zero crossing control:
>(getSolverDialogSchema)ｾﾞﾛｸﾛｯｼﾝｸﾞｺﾝﾄﾛｰﾙ:
<(getSolverDialogSchema)Locate time points of interest for blocks with intrinsic\nzero crossings running under a variable-step solver.
>(getSolverDialogSchema)可変ｽﾃｯﾌﾟｿﾙﾊﾞでｾﾞﾛｸﾛｯｼﾝｸﾞを行うﾌﾞﾛｯｸの対象となる時間ﾎﾟｲﾝﾄを\n見つけます。
<(getSolverDialogSchema)Use local settings
>(getSolverDialogSchema)ﾛｰｶﾙの設定を利用
<(getSolverDialogSchema)Enable all
>(getSolverDialogSchema)すべて有効
<(getSolverDialogSchema)Disable all
>(getSolverDialogSchema)すべて無効
<(getSolverDialogSchema)Periodic sample time constraint:
>(getSolverDialogSchema)周期的なｻﾝﾌﾟﾙ時間の制約:
<(getSolverDialogSchema)Constrain model's discrete sample times to specified values.
>(getSolverDialogSchema)ﾓﾃﾞﾙの離散ｻﾝﾌﾟﾙ時間を指定した値に制約します。
<(getSolverDialogSchema)Unconstrained
>(getSolverDialogSchema)制約なし
<(getSolverDialogSchema)Ensure sample time independent
>(getSolverDialogSchema)ｻﾝﾌﾟﾙ時間の独立を保証
<(getSolverDialogSchema)Specified
>(getSolverDialogSchema)仕様
<(getSolverDialogSchema)Higher priority value indicates higher task priority
>(getSolverDialogSchema)高いﾌﾟﾗｲｵﾘﾃｨの値はより高いﾀｽｸのﾌﾟﾗｲｵﾘﾃｨを示します
<(getSolverDialogSchema)Choose the appropriate priority ordering for the real-time system\ntargeted by this model.  The Real-Time Workshop uses this information\nto implement asynchronous data transfers.
>(getSolverDialogSchema)このﾓﾃﾞﾙでﾀｰｹﾞｯﾄとなるﾘｱﾙﾀｲﾑｼｽﾃﾑに対して並び替えるための適切な優先\n順位を選択してください。Real-Time Workshopは、非同期のﾃﾞｰﾀ転送を\n実行するためにこの情報を使います。
<(getSolverDialogSchema)Sample time properties:
>(getSolverDialogSchema)ｻﾝﾌﾟﾙ時間のﾌﾟﾛﾊﾟﾃｨ:
<(getSolverDialogSchema)Specify discrete sample-time properties in an Nx3 matrix where\neach row has the form [sample time, offset, priority].  Faster\nsample times must have higher priorities.
>(getSolverDialogSchema)各行が [ｻﾝﾌﾟﾙ時間, ｵﾌｾｯﾄ, 優先順位] となるNx3の行列に離散ｻﾝﾌﾟﾙ\n時間のﾌﾟﾛﾊﾟﾃｨを指定してください。 ｻﾝﾌﾟﾙ時間が速いと優先順位も\n高くなければなりません。
<(getSolverDialogSchema)Automatically handle data transfers between tasks
>(getSolverDialogSchema)ﾀｽｸ間のﾃﾞｰﾀの伝達を自動的に扱います。
<(getSolverDialogSchema)Ensure data integrity and determinism of data transfers\nbetween periodic tasks of a multitasking target.
>(getSolverDialogSchema)ﾏﾙﾁﾀｽｸのﾀｰｹﾞｯﾄの周期的なﾀｽｸ間でﾃﾞｰﾀ転送の決定とﾃﾞｰﾀの\n正確性を保証します。
<(getSolverDialogSchema)Simulation time
>(getSolverDialogSchema)ｼﾐｭﾚｰｼｮﾝ時間
<(getSolverDialogSchema)Solver options
>(getSolverDialogSchema)ｿﾙﾊﾞｵﾌﾟｼｮﾝ

<(getDataIODialogSchema)Input:
>(getDataIODialogSchema)入力:
<(getDataIODialogSchema)Load external input from workspace.
>(getDataIODialogSchema)ﾜｰｸｽﾍﾟｰｽから外部入力を読み込みます。
<(getDataIODialogSchema)Names of external input variables.
>(getDataIODialogSchema)外部入力の変数名です。
<(getDataIODialogSchema)Initial state:
>(getDataIODialogSchema)初期状態:
<(getDataIODialogSchema)Load initial state values from workspace.
>(getDataIODialogSchema)ﾜｰｸｽﾍﾟｰｽから初期状態値を読み込む
<(getDataIODialogSchema)Names of external variables for initial state values.
>(getDataIODialogSchema)初期状態値に対する外部変数名です。
<(getDataIODialogSchema)Load from workspace
>(getDataIODialogSchema)ﾜｰｸｽﾍﾟｰｽから読み込み
<(getDataIODialogSchema)Time:
>(getDataIODialogSchema)時間:
<(getDataIODialogSchema)Save simulation time to workspace.
>(getDataIODialogSchema)ﾜｰｸｽﾍﾟｰｽにｼﾐｭﾚｰｼｮﾝ時間を保存します。
<(getDataIODialogSchema)Variables to store simulation time.
>(getDataIODialogSchema)ｼﾐｭﾚｰｼｮﾝ時間を格納するための変数です。
<(getDataIODialogSchema)States:
>(getDataIODialogSchema)状態:
<(getDataIODialogSchema)Output state values during simulation.
>(getDataIODialogSchema)ｼﾐｭﾚｰｼｮﾝ中の状態値を出力します。
<(getDataIODialogSchema)Workspace variables to store state values.
>(getDataIODialogSchema)状態値を格納するためのﾜｰｸｽﾍﾟｰｽ変数
<(getDataIODialogSchema)Output:
>(getDataIODialogSchema)出力:
<(getDataIODialogSchema)Store model output values in workspace variables.
>(getDataIODialogSchema)ﾜｰｸｽﾍﾟｰｽ変数にﾓﾃﾞﾙの出力値を格納します。
<(getDataIODialogSchema)Workspace variables to store the model outputs.
>(getDataIODialogSchema)ﾓﾃﾞﾙの出力を格納するためのﾜｰｸｽﾍﾟｰｽ変数です。
<(getDataIODialogSchema)Final states:
>(getDataIODialogSchema)最終状態:
<(getDataIODialogSchema)Store final state values in workspace variables.
>(getDataIODialogSchema)ﾜｰｸｽﾍﾟｰｽ変数に最終状態値を格納します。
<(getDataIODialogSchema)Workspace variables to store final state values.
>(getDataIODialogSchema)最終状態値を格納するためのﾜｰｸｽﾍﾟｰｽ変数です。
<(getDataIODialogSchema)Save to workspace
>(getDataIODialogSchema)ﾜｰｸｽﾍﾟｰｽに保存
<(getDataIODialogSchema)Limit data points to last:
>(getDataIODialogSchema)ﾃﾞｰﾀ点の制限:
<(getDataIODialogSchema)Limit data points.
>(getDataIODialogSchema)ﾃﾞｰﾀ点を制限します。
<(getDataIODialogSchema)Maximum number of data points to store at workspace variables.
>(getDataIODialogSchema)ﾜｰｸｽﾍﾟｰｽ変数に格納するﾃﾞｰﾀ点の最大数です。
<(getDataIODialogSchema)Decimation:
>(getDataIODialogSchema)間引き:
<(getDataIODialogSchema)Time step decimation factor.
>(getDataIODialogSchema)時間ｽﾃｯﾌﾟの間引きﾌｧｸﾀ。
<(getDataIODialogSchema)Format:
>(getDataIODialogSchema)ﾌｫｰﾏｯﾄ:
<(getDataIODialogSchema)Array
>(getDataIODialogSchema)配列
<(getDataIODialogSchema)Structure
>(getDataIODialogSchema)構造体
<(getDataIODialogSchema)Structure with time
>(getDataIODialogSchema)時間付き構造体
<(getDataIODialogSchema)Save data in array, structure or structure with time.
>(getDataIODialogSchema)配列、構造体、時間付き構造体のいずれかにﾃﾞｰﾀを保存します。
<(getDataIODialogSchema)Signal logging name:
>(getDataIODialogSchema)信号のﾛｷﾞﾝｸﾞ名:
<(getDataIODialogSchema)Signal logging name.
>(getDataIODialogSchema)信号のﾛｷﾞﾝｸﾞ名。
<(getDataIODialogSchema)Output options:
>(getDataIODialogSchema)出力ｵﾌﾟｼｮﾝ:
<(getDataIODialogSchema)Refine output
>(getDataIODialogSchema)出力ﾘﾌｧｲﾝ
<(getDataIODialogSchema)Produce additional output
>(getDataIODialogSchema)追加出力の生成
<(getDataIODialogSchema)Produce specified output only
>(getDataIODialogSchema)指定出力のみ生成
<(getDataIODialogSchema)Time step output options for variable-step solvers:\n\n"Refine output" uses the Solver interpolant to produce additional \noutput points for each integration time step. During refinement,\nthe solver also checks for zero crossings.\n\n"Produce additional output" and "Produce specified output only" \nare used to specify explicit integration hit times.
>(getDataIODialogSchema)可変ｽﾃｯﾌﾟｿﾙﾊﾞに対する時間ｽﾃｯﾌﾟの出力ｵﾌﾟｼｮﾝ:\n\n"出力ﾘﾌｧｲﾝ"は、各積分の時間ｽﾃｯﾌﾟに対する追加の出力ﾎﾟｲﾝﾄを生成するために\nｿﾙﾊﾞの内挿を使用します。調整中にｿﾙﾊﾞはｾﾞﾛｸﾛｯｼﾝｸﾞのチェックも行います。\n\n"追加出力の生成"と"指定出力のみ生成"はﾋｯﾄ時間の積分を明確に指定するために\n使われます。
<(getDataIODialogSchema)Refine factor:
>(getDataIODialogSchema)ﾘﾌｧｲﾝﾌｧｸﾀ:
<(getDataIODialogSchema)Number of points to generate between time steps.
>(getDataIODialogSchema)時間ｽﾃｯﾌﾟ間で生成するための点数です。
<(getDataIODialogSchema)Output times:
>(getDataIODialogSchema)出力時間:
<(getDataIODialogSchema)Output times.
>(getDataIODialogSchema)出力時間
<(getDataIODialogSchema)Save options
>(getDataIODialogSchema)ｵﾌﾟｼｮﾝの保存

<(getOptDialogSchema)Block reduction optimization
>(getOptDialogSchema)ﾌﾞﾛｯｸﾘﾀﾞｸｼｮﾝの最適化
<(getOptDialogSchema)Exclude unnecessary blocks from simulation or code generation from\nthis model.
>(getOptDialogSchema)このﾓﾃﾞﾙからのｺｰﾄﾞ生成や、ｼﾐｭﾚｰｼｮﾝからの不必要なﾌﾞﾛｯｸを取り除きます。
<(getOptDialogSchema)Conditional input branch execution
>(getOptDialogSchema)条件的な入力の分岐の実行
<(getOptDialogSchema)For blocks that conditionally need input signals, e.g., Switch\nblock, execute only those upstream blocks needed to provide\nthe currently selected input.
>(getOptDialogSchema)条件付きのﾌﾞﾛｯｸに対して入力信号が必要です。たとえば、switchﾌﾞﾛｯｸ、現在選択されている入力を与えるために必要なこれらの上流のﾌﾞﾛｯｸのみ\n実行します。
<(getOptDialogSchema)Inline parameters
>(getOptDialogSchema)ｲﾝﾗｲﾝﾊﾟﾗﾒｰﾀ
<(getOptDialogSchema)Treat block parameters as invariant, except for global (tunable)\nparameters.
>(getOptDialogSchema)ｸﾞﾛｰﾊﾞﾙ(ﾁｭｰﾅﾌﾞﾙ)ﾊﾟﾗﾒｰﾀを除き、不変式としてﾌﾞﾛｯｸﾊﾟﾗﾒｰﾀを扱います。
<(getOptDialogSchema)Configure ...
>(getOptDialogSchema)設定 ...
<(getOptDialogSchema)Define and configure global (tunable) parameters.
>(getOptDialogSchema)ｸﾞﾛｰﾊﾞﾙ(ﾁｭｰﾅﾌﾞﾙ)ﾊﾟﾗﾒｰﾀの定義と設定
<(getOptDialogSchema)Specify how generated code stores global (tunable) parameters.\nSelect NonHierarhcial to trade off modularity for efficiency.
>(getOptDialogSchema)生成されたｺｰﾄﾞがどのようにｸﾞﾛｰﾊﾞﾙ(ﾁｭｰﾅﾌﾞﾙ)ﾊﾟﾗﾒｰﾀを格納するかを指定します。\n効率性に対するﾓｼﾞｭｰﾙ方式のﾄﾚｰﾄﾞｵﾌのためにNonHierarhcialを選択してください。
<(getOptDialogSchema)Parameter structure:
>(getOptDialogSchema)ﾊﾟﾗﾒｰﾀ構造:
<(getOptDialogSchema)Remove code that protects against division arithmetic exceptions
>(getOptDialogSchema)除算演算の例外に対して保護されたｺｰﾄﾞの削除
<(getOptDialogSchema)Suppress generation of code that guards against fixed-point\ndivision by zero.
>(getOptDialogSchema)固定小数点がｾﾞﾛ割にならないよう保護するｺｰﾄﾞの生成を抑えます。
<(getOptDialogSchema)Implement logic signals as boolean data (vs. double).
>(getOptDialogSchema)ﾌﾞｰﾘｱﾝﾃﾞｰﾀ(vs. double)として論理信号を使用します。
<(getOptDialogSchema)Use boolean data type instead of double for logical signals in\nLogical Operator, Combinatorial Logic, Relational Operator,\nand Hit Crossing blocks.
>(getOptDialogSchema)Logical Operator, Combinatorial Logic, Relational Operator, \nHit Crossingﾌﾞﾛｯｸのﾛｼﾞｶﾙな信号に対して、倍精度の代わりに\nﾌﾞｰﾘｱﾝﾃﾞｰﾀﾀｲﾌﾟを使用します。
<(getOptDialogSchema)Signal storage reuse
>(getOptDialogSchema)信号ｽﾄﾚｰｼﾞの再利用
<(getOptDialogSchema)Reuse memory storage locations for block signals whereever possible.
>(getOptDialogSchema)ﾌﾞﾛｯｸ信号に対するﾒﾓﾘｽﾄﾚｰｼﾞの場所を可能な限り再利用します。
<(getOptDialogSchema)Enable local block outputs
>(getOptDialogSchema)ﾛｰｶﾙﾌﾞﾛｯｸの出力を有効にする
<(getOptDialogSchema)Declare block outputs in local (function) scope wherever\npossible to reduce global RAM usage.
>(getOptDialogSchema)ｸﾞﾛｰﾊﾞﾙなRAMの使用を減らすために、可能な限りﾛｰｶﾙ(function)\nscopeにﾌﾞﾛｯｸの出力を指定します。
<(getOptDialogSchema)Reuse block outputs
>(getOptDialogSchema)ﾌﾞﾛｯｸ出力の再利用
<(getOptDialogSchema)Reuse local (function) variables for block outputs\nwherever possible.  Selecting this option trades off\ncode traceability for code efficiency.
>(getOptDialogSchema)ﾌﾞﾛｯｸの出力に対してﾛｰｶﾙ(function)変数を可能な限り\n再利用します。このｵﾌﾟｼｮﾝを選択すると、ｺｰﾄﾞの効率性に\n対するｺｰﾄﾞの追跡可能性(traceability)はﾄﾚｰﾄﾞｵﾌになります。
<(getOptDialogSchema)Eliminate superfluous temporary variables (Expression folding)
>(getOptDialogSchema)余分なﾃﾝﾎﾟﾗﾘ変数の削除 (畳込み(Folding)表現)
<(getOptDialogSchema)Collapse block computations into single expressions wherever\npossible.  This improves code readibility and efficiency.
>(getOptDialogSchema)単一の表現でﾌﾞﾛｯｸの計算を可能な限り少なくします。これはｺｰﾄﾞの\n可読性と効率性を改善します。
<(getOptDialogSchema)Ignore integer downcasts in folded expressions
>(getOptDialogSchema)畳込み(folded)表現で整数のﾀﾞｳﾝｷｬｽﾄを無視
<(getOptDialogSchema)Remove casts of intermediate variables to improve code efficiency.\nWhen this option is selected, expressions involving 8-bit and 16-\nbit arithmetic on microprocessors of a larger bit size are less\nlikely to overflow in code than in simulation.
>(getOptDialogSchema)ｺｰﾄﾞ効率を改善するために中間変数のｷｬｽﾄを削除してください。\nこのｵﾌﾟｼｮﾝを選択した場合、大きいﾋﾞｯﾄｻｲｽﾞのﾏｲｸﾛﾌﾟﾛｾｯｻ上での8ﾋﾞｯﾄと\n16ﾋﾞｯﾄ演算を含む表現は、ｼﾐｭﾚｰｼｮﾝよりもｺｰﾄﾞ内でｵｰﾊﾞｰﾌﾛｰする可能性が\n少なくなります。
<(getOptDialogSchema)Loop unrolling threshold:
>(getOptDialogSchema)ﾙｰﾌﾟの展開のしきい値:
<(getOptDialogSchema)Minimum signal width that will generate a "for" loop.
>(getOptDialogSchema)"for"ﾙｰﾌﾟを生成する最小の信号幅
<(getOptDialogSchema)Inline invariant signals
>(getOptDialogSchema)ｲﾝﾗｲﾝｲﾝﾊﾞﾘｱﾝﾄ信号
<(getOptDialogSchema)Precompute and inline the values of invariant signals in\nthe generated code.
>(getOptDialogSchema)生成されたｺｰﾄﾞ内の不変信号の値をｲﾝﾗｲﾝ化し、予測します。
<(getOptDialogSchema)Remove root level I/O zero initialization
>(getOptDialogSchema)ﾙｰﾄﾚﾍﾞﾙI/Oのｾﾞﾛ初期化を削除
<(getOptDialogSchema)Suppress code that initializes root-level I/O data structures to zero\nsince it may be unnecessary for your application.
>(getOptDialogSchema)ﾕｰｻﾞのｱﾌﾟﾘｹｰｼｮﾝに必要ないため、ﾙｰﾄﾚﾍﾞﾙのI/Oﾃﾞｰﾀの構造をｾﾞﾛに初期化する\nｺｰﾄﾞを抑えます。
<(getOptDialogSchema)Remove internal state zero initialization
>(getOptDialogSchema)内部状態のｾﾞﾛ初期化を削除
<(getOptDialogSchema)Suppress code that initializes global data structures (e.g., block\nI/O data structures) to zero since it may be unnecessary for your\napplication.
>(getOptDialogSchema)ﾕｰｻﾞのｱﾌﾟﾘｹｰｼｮﾝに必要ないため、ｸﾞﾛｰﾊﾞﾙﾃﾞｰﾀの構造(たとえば、ﾌﾞﾛｯｸI/O\nﾃﾞｰﾀの構造)をｾﾞﾛに初期化するｺｰﾄﾞを抑えます。
<(getOptDialogSchema)Use memset to initialize floats and doubles to 0.0
>(getOptDialogSchema)floatとdoubleを0に初期化するためにmemsetを使用
<(getOptDialogSchema)Optimize initialization of storage for floats and doubles. Select\nthis option if the representation of floating point zero used by\nyour compiler and target CPU is identical to the integer bit pattern 0.
>(getOptDialogSchema)floatとdoubleに対するｽﾄﾚｰｼﾞの初期化を最適化します。\nｺﾝﾊﾟｲﾗとﾀｰｹﾞｯﾄCPUで使われる浮動小数点0の表現が整数ﾋﾞｯﾄﾊﾟﾀｰﾝ0と\n同一の場合、このｵﾌﾟｼｮﾝを選択してください。
<(getOptDialogSchema)Optimize initialization code for model reference
>(getOptDialogSchema)ﾓﾃﾞﾙﾘﾌｧﾚﾝｽの初期化ｺｰﾄﾞの最適化
<(getOptDialogSchema)Suppress generation of initialization code to accommodate the case\nwhere this model is referenced by a subsystem that resets its states\non enable. Select this option if this model will never be referenced\nby such a subsystem. Note that Simulink reports an error if this\nconstraint is violated, in which case you can deselect this optimization.
>(getOptDialogSchema)このﾓﾃﾞﾙが有効な状態をﾘｾｯﾄするｻﾌﾞｼｽﾃﾑによって参照される場合に対応する\nための初期化ｺｰﾄﾞの生成を抑えます。このﾓﾃﾞﾙがそのようなｻﾌﾞｼｽﾃﾑによって\n決して参照されない場合に、このｵﾌﾟｼｮﾝを選択してください。このｵﾌﾟｼｮﾝの\n選択を解除する場合にこの制約に違反すると、Simulinkのﾚﾎﾟｰﾄがｴﾗｰになる\nことに注意してください。
<(getOptDialogSchema)Use bitsets for storing state configuration
>(getOptDialogSchema)状態の設定をｽﾄｱするためにbitsetsを利用
<(getOptDialogSchema)Use bitsets for storing state configuration.
>(getOptDialogSchema)状態の設定をｽﾄｱするためにbitsetsを利用
<(getOptDialogSchema)Use bitsets for storing boolean data
>(getOptDialogSchema)ﾌﾞｰﾘｱﾝﾃﾞｰﾀをｽﾄｱするためにbitsetを使用
<(getOptDialogSchema)Use bitsets for storing boolean data.
>(getOptDialogSchema)ﾌﾞｰﾘｱﾝﾃﾞｰﾀをｽﾄｱするためにbitsetを使用
<(getOptDialogSchema)Minimize array reads using temporary variables
>(getOptDialogSchema)ﾃﾝﾎﾟﾗﾘ変数を使用して読み込む配列の最小化
<(getOptDialogSchema)Minimize array reads in global memory by using temporary variables.
>(getOptDialogSchema)ﾃﾝﾎﾟﾗﾘ変数を使用してｸﾞﾛｰﾊﾞﾙﾒﾓﾘに読み込む配列を最小化します。
<(getOptDialogSchema)Simulation and code generation
>(getOptDialogSchema)ｼﾐｭﾚｰｼｮﾝとｺｰﾄﾞ生成
<(getOptDialogSchema)Parameters
>(getOptDialogSchema)ﾊﾟﾗﾒｰﾀ
<(getOptDialogSchema)Signals
>(getOptDialogSchema)信号
<(getOptDialogSchema)Data initialization
>(getOptDialogSchema)ﾃﾞｰﾀの初期化
<(getOptDialogSchema)Stateflow
>(getOptDialogSchema)Stateflow
<(getOptDialogSchema)Fixed-point
>(getOptDialogSchema)固定小数点
<(getOptDialogSchema)Code generation
>(getOptDialogSchema)ｺｰﾄﾞ生成

<(getDebugDialogSchema)none
>(getDebugDialogSchema)なし
<(getDebugDialogSchema)warning
>(getDebugDialogSchema)ﾜｰﾆﾝｸﾞ
<(getDebugDialogSchema)error
>(getDebugDialogSchema)ｴﾗｰ
<(getDebugDialogSchema)Solver data inconsistency:
>(getDebugDialogSchema)ｿﾙﾊﾞﾃﾞｰﾀの不整合:
<(getDebugDialogSchema)Detect S-functions that have continuous sample times but do not\nproduce consistent results when executed multiple times.
>(getDebugDialogSchema)連続のｻﾝﾌﾟﾙ時間をもつS-functionを検出しますが、複数回実行された\n場合、一致した結果を生成しません。
<(getDebugDialogSchema)Array bounds exceeded:
>(getDebugDialogSchema)配列の境界の限度:
<(getDebugDialogSchema)Ensure that Simulink-allocated memory used in S-functions\ndo not write beyond their assigned array bounds when\nwriting to their outputs, states, or work vectors.
>(getDebugDialogSchema)S-functionで使用されるSimulinkのｱﾛｹｰﾄﾒﾓﾘは、出力や状態、\nまたはﾜｰｸﾍﾞｸﾄﾙへの書き込み時に、割り当てられた配列の境界を\n超える書き込みは行わないことを保証します。
<(getDebugDialogSchema)Algebraic loop:
>(getDebugDialogSchema)代数ﾙｰﾌﾟ:
<(getDebugDialogSchema)Detect algebraic loops in the model.
>(getDebugDialogSchema)ﾓﾃﾞﾙ内の代数ﾙｰﾌﾟを検出します。
<(getDebugDialogSchema)Minimize algebraic loop:
>(getDebugDialogSchema)代数ﾙｰﾌﾟの最小化:
<(getDebugDialogSchema)Detect when algebraic loop minimization cannot be performed for a subsystem\nor referenced model for which algebraic loop minimization is specified.
>(getDebugDialogSchema)代数ﾙｰﾌﾟの最小化が、ｻﾌﾞｼｽﾃﾑに対して、あるいは代数ﾙｰﾌﾟの最小化の指定に対する\n参照ﾓﾃﾞﾙに対して実行できない場合に検出します。
<(getDebugDialogSchema)Block priority violation:
>(getDebugDialogSchema)ﾌﾞﾛｯｸﾌﾟﾗｲｵﾘﾃｨ違反:
<(getDebugDialogSchema)Detect when Simulink cannot honor a user-specified block priority.
>(getDebugDialogSchema)Simulinkがﾕｰｻﾞ指定のﾌﾞﾛｯｸの優先順位を利用できない場合に検出します。
<(getDebugDialogSchema)Min step size violation:
>(getDebugDialogSchema)最小ｽﾃｯﾌﾟｻｲｽﾞ違反:
<(getDebugDialogSchema)Detect when the minimum step size for a variable-step solver is larger\nthan the computed step size.
>(getDebugDialogSchema)可変ｽﾃｯﾌﾟｿﾙﾊﾞに対する最小ｽﾃｯﾌﾟｻｲｽﾞが計算されたｽﾃｯﾌﾟｻｲｽﾞよりも大きい場合に検出します。
<(getDebugDialogSchema)Automatic solver parameter selection:
>(getDebugDialogSchema)自動ｿﾙﾊﾞﾊﾟﾗﾒｰﾀ選択:
<(getDebugDialogSchema)Report solver parameters values that are computed or changed from their specified values.
>(getDebugDialogSchema)指定された値から計算、または変更されるｿﾙﾊﾞのﾊﾟﾗﾒｰﾀ値のﾚﾎﾟｰﾄ
<(getDebugDialogSchema)Source block specifies -1 sample time:
>(getDebugDialogSchema)-1のｻﾝﾌﾟﾙ時間が指定されたｿｰｽﾌﾞﾛｯｸ:
<(getDebugDialogSchema)Detect source blocks that have an inherited sample time.
>(getDebugDialogSchema)継承されたｻﾝﾌﾟﾙ時間をもつｿｰｽﾌﾞﾛｯｸを検出します。
<(getDebugDialogSchema)Discrete used as continuous:
>(getDebugDialogSchema)連続として用いられる離散:
<(getDebugDialogSchema)Detect discrete blocks that use a continuous sample time.
>(getDebugDialogSchema)連続ｻﾝﾌﾟﾙ時間を使用している離散ﾌﾞﾛｯｸを検出します。
<(getDebugDialogSchema)Multitask rate transition:
>(getDebugDialogSchema)ﾏﾙﾁﾀｽｸﾚｰﾄ変換:
<(getDebugDialogSchema)Detect unspecified data transfers between rates.
>(getDebugDialogSchema)ﾚｰﾄ間の詳細不明なﾃﾞｰﾀ転送を検出します。
<(getDebugDialogSchema)Single task rate transition:
>(getDebugDialogSchema)ｼﾝｸﾞﾙﾀｽｸﾚｰﾄ変換:
<(getDebugDialogSchema)Detect unspecified data transfers between rates.
>(getDebugDialogSchema)ﾚｰﾄ間の詳細不明なﾃﾞｰﾀ転送を検出します。
<(getDebugDialogSchema)Tasks with equal priority:
>(getDebugDialogSchema)同じ優先順位をもつﾀｽｸ:
<(getDebugDialogSchema)Detect tasks with equal priority. Set to error if tasks of equal priority can preempt each other in the target system.
>(getDebugDialogSchema)同じ優先順位をもつﾀｽｸを検出します。同じ優先順位のﾀｽｸがﾀｰｹﾞｯﾄｼｽﾃﾑ内で互いに優先する場合にｴﾗｰを設定します。
<(getDebugDialogSchema)Attempted division by singular matrix:
>(getDebugDialogSchema)特異値行列による除算:
<(getDebugDialogSchema)Detect singular matrix during matrix inversion in Product block.
>(getDebugDialogSchema)Productﾌﾞﾛｯｸの逆行列の計算中に起こる特異値行列を検出します。
<(getDebugDialogSchema)Data overflow:
>(getDebugDialogSchema)ﾃﾞｰﾀのｵｰﾊﾞｰﾌﾛｰ:
<(getDebugDialogSchema)Detect signal overflow conditions during simulation.
>(getDebugDialogSchema)ｼﾐｭﾚｰｼｮﾝ中の信号のｵｰﾊﾞｰﾌﾛｰ状態を検出します。
<(getDebugDialogSchema)32-bit integer to single precision float conversion:
>(getDebugDialogSchema)32ﾋﾞｯﾄの整数を単精度浮動小数点に変換:
<(getDebugDialogSchema)Detect possible data precision loss when converting from int32 to float.
>(getDebugDialogSchema)in32をfloatに変換した場合の桁落ちの可能性を検出します。
<(getDebugDialogSchema)Parameter downcast:
>(getDebugDialogSchema)ﾊﾟﾗﾒｰﾀのﾀﾞｳﾝｷｬｽﾄ:
<(getDebugDialogSchema)Detect potential overflow conditions involving downcasts\nof global (tunable) parameters in a computation.
>(getDebugDialogSchema)計算におけるｸﾞﾛｰﾊﾞﾙ(ﾁｭｰﾅﾌﾞﾙ)ﾊﾟﾗﾒｰﾀのﾀﾞｳﾝｷｬｽﾄを含む\nｵｰﾊﾞｰﾌﾛｰ状態の可能性を検出します。
<(getDebugDialogSchema)Parameter overflow:
>(getDebugDialogSchema)ﾊﾟﾗﾒｰﾀのｵｰﾊﾞｰﾌﾛｰ:
<(getDebugDialogSchema)Detect when the data type of a parameter cannot accommodate\nits specified value.
>(getDebugDialogSchema)ﾊﾟﾗﾒｰﾀのﾃﾞｰﾀﾀｲﾌﾟが指定された値に対応できない場合に検出します。
<(getDebugDialogSchema)Parameter precision loss:
>(getDebugDialogSchema)ﾊﾟﾗﾒｰﾀの桁落ち:
<(getDebugDialogSchema)Detect when the data type of a parameter cannot maintain\nthe precision of its value.
>(getDebugDialogSchema)ﾊﾟﾗﾒｰﾀのﾃﾞｰﾀﾀｲﾌﾟが値の精度を保持できない場合に検出します。
<(getDebugDialogSchema)Underspecified data types:
>(getDebugDialogSchema)指定されていないﾃﾞｰﾀﾀｲﾌﾟ:
<(getDebugDialogSchema)Detect when a signal data type is determined heuristically.
>(getDebugDialogSchema)信号のﾃﾞｰﾀﾀｲﾌﾟがﾋｭｰﾘｽﾃｨｯｸに定義された場合に検出します。
<(getDebugDialogSchema)Unnecessary type conversions:
>(getDebugDialogSchema)不必要なﾀｲﾌﾟ変換:
<(getDebugDialogSchema)Detect unnecessary data type conversion blocks.
>(getDebugDialogSchema)不必要なﾃﾞｰﾀﾀｲﾌﾟの変換ﾌﾞﾛｯｸを検出します。
<(getDebugDialogSchema)Vector/matrix block input conversion:
>(getDebugDialogSchema)ﾍﾞｸﾄﾙ/行列:
<(getDebugDialogSchema)Detect vector-to-matrix and matrix-to-vector conversions.
>(getDebugDialogSchema)ﾍﾞｸﾄﾙから行列、行列からﾍﾞｸﾄﾙへの変換を検出します。
<(getDebugDialogSchema)Invalid function call connection:
>(getDebugDialogSchema)不正なfunction call接続:
<(getDebugDialogSchema)Detect illegal use of function-call subsystems.\nSetting this option to none or warning may cause\nSimulink to insert extra delay operations.
>(getDebugDialogSchema)不正なfunction-callｻﾌﾞｼｽﾃﾑの使用を検出します。\nこのｵﾌﾟｼｮﾝをnoneまたはﾜｰﾆﾝｸﾞに設定するとSimulinkは\n余分な遅延操作を入れるかもしれません。
<(getDebugDialogSchema)Signal label mismatch:
>(getDebugDialogSchema)信号ﾗﾍﾞﾙの不一致:
<(getDebugDialogSchema)Detect when different signal labels map to the same block output.
>(getDebugDialogSchema)異なる信号ﾗﾍﾞﾙが同じﾌﾞﾛｯｸの出力にﾏｯﾋﾟﾝｸﾞされた場合に検出します。
<(getDebugDialogSchema)Unconnected block input ports:
>(getDebugDialogSchema)接続されていないﾌﾞﾛｯｸの入力端子:
<(getDebugDialogSchema)Detect unconnected block input ports.
>(getDebugDialogSchema)接続されていないﾌﾞﾛｯｸの入力端を検出します。
<(getDebugDialogSchema)Unconnected block output ports:
>(getDebugDialogSchema)接続されていないﾌﾞﾛｯｸの出力端子:
<(getDebugDialogSchema)Detect unconnected block output ports.
>(getDebugDialogSchema)接続されていないﾌﾞﾛｯｸの出力端子を検出します。
<(getDebugDialogSchema)Unconnected line:
>(getDebugDialogSchema)接続されていないﾗｲﾝ:
<(getDebugDialogSchema)Detect unconnected lines.
>(getDebugDialogSchema)接続されていないﾗｲﾝを検出します。
<(getDebugDialogSchema)S-function upgrades needed:
>(getDebugDialogSchema)ｱｯﾌﾟｸﾞﾚｰﾄﾞの必要なS-function:
<(getDebugDialogSchema)Detect S-functions that can be upgraded to use new features.
>(getDebugDialogSchema)新機能を使うためのｱｯﾌﾟｸﾞﾚｰﾄﾞが可能なS-functionの検出
<(getDebugDialogSchema)Check undefined subsystem initial output
>(getDebugDialogSchema)定義されていないｻﾌﾞｼｽﾃﾑの初期出力のﾁｪｯｸ
<(getDebugDialogSchema)Detect potential initial output differences from previous releases,\nwhere conditionally executed subsystems contain Outports with the \n'Initial Output' set to [] that are fed by blocks having an explicit\ninitial condition.
>(getDebugDialogSchema)以前のﾘﾘｰｽのものと異なる可能性のある初期出力を検出します。\nここで条件付きで実行されたｻﾌﾞｼｽﾃﾑは'Initial Output'が明示的な\n初期条件をもつﾌﾞﾛｯｸによって[]に設定されたOutportを含みます。
<(getDebugDialogSchema)Check preactivation output of execution context
>(getDebugDialogSchema)実行内容のｱｸﾃｨﾌﾞになる前の出力をﾁｪｯｸ
<(getDebugDialogSchema)Detect potential initial output differences from previous releases,\nwhere conditionally executed subsystems involving Outports with the \n'Initial Output' set to [] are connected to blocks that produce\nnon-zero outputs for zero inputs.
>(getDebugDialogSchema)以前のﾘﾘｰｽのものと異なる可能性のなる初期出力を検出します。\nここで、'Initial Output'が[]に設定されたOutportを含んだ条件付きで\n実行されるｻﾌﾞｼｽﾃﾑは、ｾﾞﾛの入力に対して非ｾﾞﾛの出力を生成するﾌﾞﾛｯｸに\n接続されています。
<(getDebugDialogSchema)Check runtime output of execution context
>(getDebugDialogSchema)実行内容の実行時の出力をﾁｪｯｸ
<(getDebugDialogSchema)Detect potential output differences from previous releases,\nwhere conditionally executed subsystems involving Outports with\nthe 'Initial Output' set to [] are connected to blocks with\ntunable variables.
>(getDebugDialogSchema)以前のﾘﾘｰｽのものと異なる可能性のある出力を検出します。\nここで、'Initial Output'が[]に設定されたOutportを含んだ\n条件付きで実行されるｻﾌﾞｼｽﾃﾑは、ﾁｭｰﾆﾝｸﾞ可能な変数をもつﾌﾞﾛｯｸ\nに接続されています。
<(getDebugDialogSchema)Unspecified bus object
>(getDebugDialogSchema)指定のないbusｵﾌﾞｼﾞｪｸﾄ
<(getDebugDialogSchema)Detect when a bus enters a root model outport for which a bus object \nhas not been specified.
>(getDebugDialogSchema)ﾊﾞｽが、busｵﾌﾞｼﾞｪｸﾄが指定されていないﾙｰﾄﾓﾃﾞﾙの出力端子を入力されることを\n検出します。
<(getDebugDialogSchema)Invalid root Inport/Outport block connection:
>(getDebugDialogSchema)不正なﾙｰﾄのInport/Outportﾌﾞﾛｯｸの接続:
<(getDebugDialogSchema)Detect root Inport and Outport block connections that are invalid\nwhen this model is referenced by another model.
>(getDebugDialogSchema)このﾓﾃﾞﾙが別のﾓﾃﾞﾙによって参照される場合に、ﾙｰﾄのInportとOutport\nﾌﾞﾛｯｸの不正な結線を検出します。
<(getDebugDialogSchema)Unspecified inheritability of sample time:
>(getDebugDialogSchema)指定のないｻﾝﾌﾟﾙ時間の継承:
<(getDebugDialogSchema)Detect S-functions that do not specify their sample time inheritance\nrule.  Not specifying an inheritance rule may lead to incorrect results.
>(getDebugDialogSchema)ｻﾝﾌﾟﾙ時間の継承ﾙｰﾙが指定されていないS-functionを検出します。\n継承ﾙｰﾙが指定されていないと正しい結果を導くことができません。
<(getDebugDialogSchema)Model version mismatch:
>(getDebugDialogSchema)ﾓﾃﾞﾙのﾊﾞｰｼﾞｮﾝの不一致:
<(getDebugDialogSchema)Detect a version number mismatch between the model block and\nthe referenced model.
>(getDebugDialogSchema)ﾓﾃﾞﾙﾌﾞﾛｯｸと参照されたﾓﾃﾞﾙ間で一致しないﾊﾞｰｼﾞｮﾝ番号を検出\nします。
<(getDebugDialogSchema)Port and parameter mismatch:
>(getDebugDialogSchema)端子とﾊﾟﾗﾒｰﾀの不一致:
<(getDebugDialogSchema)Detect a port or parameter mismatch between the model block and\nthe referenced model.
>(getDebugDialogSchema)ﾓﾃﾞﾙﾌﾞﾛｯｸと参照されたﾓﾃﾞﾙ間で一致しない端子またはﾊﾟﾗﾒｰﾀを検出\nします。
<(getDebugDialogSchema)Model configuration mismatch:
>(getDebugDialogSchema)ﾓﾃﾞﾙの設定の不一致:
<(getDebugDialogSchema)Detect a mismatch in configuration parameters (such as \nSolver) between this model and a referenced model.
>(getDebugDialogSchema)このﾓﾃﾞﾙと参照されたﾓﾃﾞﾙ間の(ｿﾙﾊﾞのような)設定ﾊﾟﾗﾒｰﾀの\n不一致を検出します。
<(getDebugDialogSchema)Model Verification block enabling:
>(getDebugDialogSchema)Model Verificationﾌﾞﾛｯｸを有効にする:
<(getDebugDialogSchema)Set the global control of the Model Verification blocks and\nthe Assertion block.
>(getDebugDialogSchema)Model VerificationﾌﾞﾛｯｸとAssertionﾌﾞﾛｯｸのｸﾞﾛｰﾊﾞﾙなｺﾝﾄﾛｰﾙを\n設定します。
<(getDebugDialogSchema)Use local settings
>(getDebugDialogSchema)ﾛｰｶﾙな設定を利用
<(getDebugDialogSchema)Enable All
>(getDebugDialogSchema)すべて有効
<(getDebugDialogSchema)Disable All
>(getDebugDialogSchema)すべて無効
<(getDebugDialogSchema)Duplicate data store names:
>(getDebugDialogSchema)ﾃﾞｰﾀｽﾄｱ名の重複:
<(getDebugDialogSchema)Prevent multiple Data Store Memory blocks from using the same data store name.
>(getDebugDialogSchema)複数のData Store Memoryﾌﾞﾛｯｸが同じｽﾄｱ名を使うことを防ぎます。

<(getHardwareDialogSchema)Embedded hardware (simulation and code generation)
>(getHardwareDialogSchema)組み込みﾊｰﾄﾞｳｪｱ (ｼﾐｭﾚｰｼｮﾝとｺｰﾄﾞ生成)
<(getHardwareDialogSchema)Emulation hardware (code generation only)
>(getHardwareDialogSchema)ｴﾐｭﾚｰｼｮﾝﾊｰﾄﾞｳｪｱ (ｺｰﾄﾞ生成のみ)
<(getHardwareDialogSchema)Device type:
>(getHardwareDialogSchema)ﾃﾞﾊﾞｲｽﾀｲﾌﾟ:
<(getHardwareDialogSchema)Select a predefined hardware device to specify the C language\nconstraints for your microprocessor or Custom if your microprocessor\nis not listed.  Select ASIC/FPGA for no constraints.
>(getHardwareDialogSchema)ﾕｰｻﾞのﾏｲｸﾛﾌﾟﾛｾｯｻに制約されるC言語を指定するために定義される\nﾊｰﾄﾞｳｪｱﾃﾞﾊﾞｲｽか、ﾕｰｻﾞのﾏｲｸﾛﾌﾟﾛｾｯｻがﾘｽﾄされない場合はｶｽﾀﾑを選択して\nください。制約なしの場合はASIC/FPGAを選択してください。
<(getHardwareDialogSchema)Select a predefined hardware device to specify the C language\nconstraints for your microprocessor or "Custom" if your microprocessor\nis not listed.  Select "MATLAB Host Computer" to target current\nMATLAB host machine.
>(getHardwareDialogSchema)ﾕｰｻﾞのﾏｲｸﾛﾌﾟﾛｾｯｻに制約されるC言語を指定するために定義される\nﾊｰﾄﾞｳｪｱﾃﾞﾊﾞｲｽか、ﾕｰｻﾞのﾏｲｸﾛﾌﾟﾛｾｯｻがﾘｽﾄされない場合はｶｽﾀﾑを選択して\nください。ｶﾚﾝﾄのMATLABのﾎｽﾄﾏｼﾝをﾀｰｹﾞｯﾄにする場合は"MATLAB Host Computer"\nを選択してください。
<(getHardwareDialogSchema)Number of bits:
>(getHardwareDialogSchema)ﾋﾞｯﾄ数:
<(getHardwareDialogSchema)Hardware word sizes.
>(getHardwareDialogSchema)ﾊｰﾄﾞｳｪｱのﾜｰﾄﾞｻｲｽﾞです。
<(getHardwareDialogSchema)Number of bits used to represent C type char.
>(getHardwareDialogSchema)Cのﾀｲﾌﾟのcharを表すために使われるﾋﾞｯﾄ数です。
<(getHardwareDialogSchema)Number of bits used to represent C type short.
>(getHardwareDialogSchema)Cのﾀｲﾌﾟのshortを表すために使われるﾋﾞｯﾄ数です。
<(getHardwareDialogSchema)Number of bits used to represent C type int.
>(getHardwareDialogSchema)Cのﾀｲﾌﾟのintを表すために使われるﾋﾞｯﾄ数です。
<(getHardwareDialogSchema)Number of bits used to represent C type long.
>(getHardwareDialogSchema)Cのﾀｲﾌﾟのlongを表すために使われるﾋﾞｯﾄ数です。
<(getHardwareDialogSchema)char:
>(getHardwareDialogSchema)char:
<(getHardwareDialogSchema)short:
>(getHardwareDialogSchema)short:
<(getHardwareDialogSchema)int:
>(getHardwareDialogSchema)int:
<(getHardwareDialogSchema)long:
>(getHardwareDialogSchema)long:
<(getHardwareDialogSchema)Byte ordering:
>(getHardwareDialogSchema)ﾊﾞｲﾄ順:
<(getHardwareDialogSchema)native word size:
>(getHardwareDialogSchema)ﾈｲﾃｨﾌﾞﾜｰﾄﾞｻｲｽﾞ:
<(getHardwareDialogSchema)Signed integer division rounds to:
>(getHardwareDialogSchema)符号付き整数の除算の丸め:
<(getHardwareDialogSchema)Specify how your C compiler rounds the result of dividing two signed\nintegers.  This information enables efficient C code to be generated\nfrom this model.
>(getHardwareDialogSchema)2つの符号付き整数の除算結果をCｺﾝﾊﾟｲﾗでどのように丸めるかを指定します。\nこの情報は、このﾓﾃﾞﾙから効率的なCｺｰﾄﾞを生成するために有効です。
<(getHardwareDialogSchema)Shift right on a signed integer as arithmetic shift
>(getHardwareDialogSchema)算術ｼﾌﾄとして符号付き整数を右にｼﾌﾄ
<(getHardwareDialogSchema)Specify that your C compiler implements a right shift of a signed integer\nas an arithmetic right shift. Virtually all compilers do this.
>(getHardwareDialogSchema)Cｺﾝﾊﾟｲﾗが算術の右ｼﾌﾄとして符号付き整数の右ｼﾌﾄを実行するよう指定します。\n実質的にはすべてのｺﾝﾊﾟｲﾗはこの操作を行います。
<(getHardwareDialogSchema)Specify that the hardware to be used to test code generated from this model\nis the same as the hardware on which the code will finally run. If this option\nis not selected, the Real-Time Workshop generates additional code to emulate\nthe final hardware on the test hardware.
>(getHardwareDialogSchema)このﾓﾃﾞﾙから生成されたｺｰﾄﾞをﾃｽﾄするために使用されるﾊｰﾄﾞｳｪｱが、ｺｰﾄﾞを最終的に\n実行するﾊｰﾄﾞｳｪｱと同じであることを指定します。このｵﾌﾟｼｮﾝが選択されない場合、\nReal-Time Workshopは、ﾃｽﾄﾊｰﾄﾞｳｪｱ上で最終ﾊｰﾄﾞｳｪｱをｴﾐｭﾚｰﾄするために特別にｺｰﾄﾞを\n生成します。
<(getHardwareDialogSchema)Unspecified
>(getHardwareDialogSchema)指定なし
<(getHardwareDialogSchema)Little Endian
>(getHardwareDialogSchema)Little Endian
<(getHardwareDialogSchema)Big Endian
>(getHardwareDialogSchema)Big Endian
<(getHardwareDialogSchema)Specify if the byte ordering of the target is Big Endian (most\nsignificant byte first) or Little Endian (least significant byte\nfirst).  If left unspecifed, Real-Time Workhop generates executable\ncode to compute the result.
>(getHardwareDialogSchema)ﾀｰｹﾞｯﾄのﾊﾞｲﾄ順がBig Endian(最上位ﾊﾞｲﾄが最初)かLittle Endian\n(最下位ﾊﾞｲﾄが最初)を指定します。\n指定されない場合、Real-Time Workhopは結果を計算するために実行ｺｰﾄﾞを\n生成します。
<(getHardwareDialogSchema)The number of bits that the target processor can process at one time.\nProviding the processor's native word size allows for more efficient\ncode to be generated when converting the endian byte order of data types.
>(getHardwareDialogSchema)ﾀｰｹﾞｯﾄのﾌﾟﾛｾｯｻが一度に処理することのできるﾋﾞｯﾄ数。\nﾌﾟﾛｾｯｻのﾈｲﾃｨﾌﾞﾜｰﾄﾞｻｲｽﾞを与えると、ﾃﾞｰﾀﾀｲﾌﾟのﾊﾞｲﾄの並び順を変換するときに\nより効果的なｺｰﾄﾞの生成を可能にします。
<(getHardwareDialogSchema)Configure current execution hardware device
>(getHardwareDialogSchema)ｶﾚﾝﾄの実行ﾊｰﾄﾞｳｪｱﾃﾞﾊﾞｲｽの設定
<(getHardwareDialogSchema)Push this button to start configuring current execution hardware device.
>(getHardwareDialogSchema)ｶﾚﾝﾄの実行ﾊｰﾄﾞｳｪｱﾃﾞﾊﾞｲｽの設定を始めるにはこのﾎﾞﾀﾝを押してください。
<(getHardwareDialogSchema)Zero
>(getHardwareDialogSchema)Zero
<(getHardwareDialogSchema)Floor
>(getHardwareDialogSchema)Floor
<(getHardwareDialogSchema)Undefined
>(getHardwareDialogSchema)指定なし
<(getHardwareDialogSchema)None
>(getHardwareDialogSchema)なし

<(getCodeAppDialogSchema)Include comments
>(getCodeAppDialogScheam)ｺﾒﾝﾄを含める
<(getCodeAppDialogSchema)Include comments in generated code.
>(getCodeAppDialogScheam)生成ｺｰﾄﾞにｺﾒﾝﾄを含めます。
<(getCodeAppDialogSchema)Show eliminated statements
>(getCodeAppDialogScheam)削除されたｽﾃｰﾄﾒﾝﾄの表示
<(getCodeAppDialogSchema)Show eliminated statements as comments in the generated code.
>(getCodeAppDialogScheam)生成ｺｰﾄﾞ内にｺﾒﾝﾄとして削除されたｽﾃｰﾄﾒﾝﾄを表示します。
<(getCodeAppDialogSchema)Verbose comments for SimulinkGlobal storage class
>(getCodeAppDialogScheam)SimulinkGlobalｽﾄﾚｰｼﾞｸﾗｽに対する詳細なｺﾒﾝﾄ
<(getCodeAppDialogSchema)To reduce file size, the model parameters data struture is not\ncommented when there are more than 1000 parameters.  Select this\noption to always include the comments.
>(getCodeAppDialogScheam)ﾌｧｲﾙｻｲｽﾞを減らすために、1000以上のﾊﾟﾗﾒｰﾀがある場合にﾓﾃﾞﾙﾊﾟﾗﾒｰﾀの\nﾃﾞｰﾀ構造をｺﾒﾝﾄしません。ｺﾒﾝﾄを常に含めるには、このｵﾌﾟｼｮﾝを選択\nしてください。
<(getCodeAppDialogSchema)Simulink block comments
>(getCodeAppDialogScheam)Simulinkﾌﾞﾛｯｸのｺﾒﾝﾄ
<(getCodeAppDialogSchema)Simulink block comments.
>(getCodeAppDialogScheam)Simulinkﾌﾞﾛｯｸのｺﾒﾝﾄ
<(getCodeAppDialogSchema)Simulink block descriptions
>(getCodeAppDialogScheam)Simulinkﾌﾞﾛｯｸの概要
<(getCodeAppDialogSchema)Insert the Description field from the Block Properties dialog into the\ngenerated code as a comment.
>(getCodeAppDialogScheam)ﾌﾞﾛｯｸﾊﾟﾗﾒｰﾀﾀﾞｲｱﾛｸﾞから生成されたｺｰﾄﾞ内にｺﾒﾝﾄとしてDescriptionﾌｨｰﾙﾄﾞを\n挿入します。
<(getCodeAppDialogSchema)Simulink data object descriptions
>(getCodeAppDialogScheam)Simulinkﾃﾞｰﾀｵﾌﾞｼﾞｪｸﾄの概要
<(getCodeAppDialogSchema)Insert Simulink data object descriptions into the gnerated code as a\ncomment.
>(getCodeAppDialogScheam)生成されたｺｰﾄﾞ内にｺﾒﾝﾄとしてSimulinkﾃﾞｰﾀｵﾌﾞｼﾞｪｸﾄの概要を挿入します。
<(getCodeAppDialogSchema)Stateflow object descriptions
>(getCodeAppDialogSchema)Stateflowｵﾌﾞｼﾞｪｸﾄの概要
<(getCodeAppDialogSchema)Insert Stateflow object descriptions into the gnerated code as a\ncomment.
>(getCodeAppDialogSchema)生成されたｺｰﾄﾞ内にｺﾒﾝﾄとしてStateflowｵﾌﾞｼﾞｪｸﾄの概要を挿入します。
<(getCodeAppDialogSchema)Custom comments (MPT objects only)
>(getCodeAppDialogSchema)ｶｽﾀﾑｺﾒﾝﾄ (MPTｵﾌﾞｼﾞｪｸﾄのみ)
<(getCodeAppDialogSchema)Allows you to add a comment above a signal's or parameter's\nidentifier in the generated file.
>(getCodeAppDialogSchema)生成されたﾌｧｲﾙ内の信号、またはﾊﾟﾗﾒｰﾀの識別子の上にｺﾒﾝﾄを\n追加することができます。
<(getCodeAppDialogSchema)Generate scalar inlined parameters as:
>(getCodeAppDialogSchema)ｽｶﾗのｲﾝﾗｲﾝﾊﾟﾗﾒｰﾀの生成:
<(getCodeAppDialogSchema)Symbol format:
>(getCodeAppDialogSchema)ｼﾝﾎﾞﾙﾌｫｰﾏｯﾄ:
<(getCodeAppDialogSchema)Symbol format rule for identifiers.  Rule may contain valid C-identifier\ncharacters and these macros:\n  $M - Mangle\n  $R - Root model name\n  $N - Name of object being identified\n  $H - System hierarchy number\n  $A - Data type acronym
>(getCodeAppDialogSchema)識別子のｼﾝﾎﾞﾙﾌｫｰﾏｯﾄのﾙｰﾙです。 ﾙｰﾙは有効なCの識別子のｷｬﾗｸﾀとこれらのﾏｸﾛを\n含みます:\n  $M - ﾏﾝｸﾞﾙ\n  $R - ﾙｰﾄのﾓﾃﾞﾙ名\n  $N - 識別子となるｵﾌﾞｼﾞｪｸﾄ名\n  $H - ｼｽﾃﾑの階層数\n  $A - ﾃﾞｰﾀﾀｲﾌﾟの頭文字
<(getCodeAppDialogSchema)Minimum mangle length:
>(getCodeAppDialogSchema)ﾏﾝｸﾞﾙの最小の長さ:
<(getCodeAppDialogSchema)Larger value reduces the chance of identifier disturbance when model\nis modified.
>(getCodeAppDialogSchema)ﾓﾃﾞﾙを修正するときに、大きな値は識別子の変更を妨害しにくくします。
<(getCodeAppDialogSchema)Prefix model name to global identifiers
>(getCodeAppDialogSchema)ｸﾞﾛｰﾊﾞﾙな識別子をﾓﾃﾞﾙ名の前につける
<(getCodeAppDialogSchema)For all code formats, prefix the model name to subsystem\nfunction names. When appropriate for the code format,\nalso prefix the model name to top-level functions and data\nstructures. This prevents compiler errors due to name\nclashes when combining multiple models.
>(getCodeAppDialogSchema)すべてのｺｰﾄﾞ形式でｻﾌﾞｼｽﾃﾑの関数名をﾓﾃﾞﾙ名の前につけます。\nｺｰﾄﾞ形式が適切な場合、ﾄｯﾌﾟﾚﾍﾞﾙの関数とﾃﾞｰﾀ構造をﾓﾃﾞﾙ名の\n前につけます。これは複数のﾓﾃﾞﾙを結合する場合に、名前の衝突に\nよるｺﾝﾊﾟｲﾙｴﾗｰを防ぎます。
<(getCodeAppDialogSchema)Include system hierarchy number in identifiers
>(getCodeAppDialogSchema)識別子にｼｽﾃﾑの階層番号を含める
<(getCodeAppDialogSchema)Include the system hierarchy number in variable identifiers. For example,\nthe ''s3_'' in rtB.s3_signame (a block output signal named ''signame'').\nIncluding the system hierarchy number in the identifiers improves the\ntraceability of generated code. To locate the subsystem in which\nthis identifier resides, type:\n  hilite_system(''<S3>'')\nat the MATLAB prompt. Note: hilite_system subsystem argument requires a capital S.
>(getCodeAppDialogSchema)変数の識別子にｼｽﾃﾑの階層番号を含めます。たとえばrtB.s3_signame(''signame''と\n名前のつけられたﾌﾞﾛｯｸの出力信号)に''s3_''をつけます。識別子にｼｽﾃﾑの階層番号を\n含めることは、生成ｺｰﾄﾞのﾄﾚｰｻﾋﾞﾘﾃｨ(追跡可能性)を向上させます。この識別子が\n存在するｻﾌﾞｼｽﾃﾑを置くには、MATLABﾌﾟﾛﾝﾌﾟﾄで以下のようにﾀｲﾌﾟします:\n  hilite_system(''<S3>'')\n注意: hilite_system ｻﾌﾞｼｽﾃﾑの引数は大文字のSが必要です。
<(getCodeAppDialogSchema)Include data type acronym in identifiers
>(getCodeAppDialogSchema)識別子にﾃﾞｰﾀﾀｲﾌﾟの頭文字を含める
<(getCodeAppDialogSchema)Include acronym expressing data type in signal and work vector\nidentifiers. For example, ''rtB.i32_signame'' indicates a 32-bit\ninteger block output named ''signame''.
>(getCodeAppDialogSchema)信号とﾜｰｸﾍﾞｸﾄﾙの識別子にﾃﾞｰﾀﾀｲﾌﾟを表す頭文字を含めます。たとえば、\n''rtB.i32_signame''は''signame''と名前のつけられたﾌﾞﾛｯｸ出力が32ﾋﾞｯﾄの\n整数であることを示します。
<(getCodeAppDialogSchema)Maximum identifier length:
>(getCodeAppDialogSchema)識別子の最大の長さ:
<(getCodeAppDialogSchema)Maximum identifer length for variable, typedef, and function names.
>(getCodeAppDialogSchema)変数、typedef、関数名に対する識別子の最大の長さ。
<(getCodeAppDialogSchema)Specify filename of M- or TLC-function that adds the custom comment.
>(getCodeAppDialogSchema)ｶｽﾀﾑのｺﾒﾝﾄに追加するM-またはTLC-関数のﾌｧｲﾙ名を指定します。
<(getCodeAppDialogSchema)Custom comments function:
>(getCodeAppDialogSchema)ｶｽﾀﾑｺﾒﾝﾄ関数:
<(getCodeAppDialogSchema)Browse
>(getCodeAppDialogSchema)選択
<(getCodeAppDialogSchema)Edit
>(getCodeAppDialogSchema)編集
<(getCodeAppDialogSchema)Select rule that changes the spelling of all #defines.
>(getCodeAppDialogSchema)すべての#defineのｽﾍﾟﾙを変更するﾙｰﾙを選択してください。
<(getCodeAppDialogSchema)None
>(getCodeAppDialogSchema)なし
<(getCodeAppDialogSchema)Force upper case
>(getCodeAppDialogSchema)大文字
<(getCodeAppDialogSchema)Force lower case
>(getCodeAppDialogSchema)小文字
<(getCodeAppDialogSchema)Custom M-function
>(getCodeAppDialogSchema)ｶｽﾀﾑM-function
<(getCodeAppDialogSchema)#define naming:
>(getCodeAppDialogSchema)#define定義名:
<(getCodeAppDialogSchema)M-function:
>(getCodeAppDialogSchema)M-function:
<(getCodeAppDialogSchema)Select rule that changes spelling of all parameter names.
>(getCodeAppDialogSchema)すべてのﾊﾟﾗﾒｰﾀ名のｽﾍﾟﾙの変更ﾙｰﾙを選択します。
<(getCodeAppDialogSchema)Parameter naming:
>(getCodeAppDialogSchema)ﾊﾟﾗﾒｰﾀ名:
<(getCodeAppDialogSchema)Select rule that changes spelling of all signal names.
>(getCodeAppDialogSchema)すべての信号名のｽﾍﾟﾙの変更ﾙｰﾙを選択します。
<(getCodeAppDialogSchema)Signal naming:
>(getCodeAppDialogSchema)信号名:
<(getCodeAppDialogSchema)Overall control
>(getCodeAppDialogSchema)すべてのｺﾝﾄﾛｰﾙ
<(getCodeAppDialogSchema)Specify whether inlined parameters are coded as numeric constants or\nas macro-defined symbols.  Select Macro for more efficient code.
>(getCodeAppDialogSchema)ｲﾝﾗｲﾝ化されたﾊﾟﾗﾒｰﾀを数値の定数か、ﾏｸﾛに定義されたｼﾝﾎﾞﾙのどちらでｺｰﾄﾞ化\nするかを指定します。より効果的なｺｰﾄﾞに対するﾏｸﾛを選択してください。
<(getCodeAppDialogSchema)Auto generated comments
>(getCodeAppDialogSchema)自動的に生成されるｺﾒﾝﾄ
<(getCodeAppDialogSchema)Custom comments
>(getCodeAppDialogSchema)ｶｽﾀﾑｺﾒﾝﾄ
<(getCodeAppDialogSchema)Auto-generated identifier naming rules
>(getCodeAppDialogSchema)自動生成される識別子の命名規則
<(getCodeAppDialogSchema)Simulink data object naming rules
>(getCodeAppDialogSchema)Simulinkﾃﾞｰﾀｵﾌﾞｼﾞｪｸﾄの命名規則

<(getConfigSetDialogSchema)Name:
>(getConfigSetDialogSchema)名前:
<(getConfigSetDialogSchema)Description:
>(getConfigSetDialogSchema)概要:
<(getConfigSetDialogSchema)Simulation mode:
>(getConfigSetDialogSchema)ｼﾐｭﾚｰｼｮﾝﾓｰﾄﾞ:
<(getConfigSetDialogSchema)normal
>(getConfigSetDialogSchema)ﾉｰﾏﾙ
<(getConfigSetDialogSchema)accelerator
>(getConfigSetDialogSchema)ｱｸｾﾗﾚｰﾀ
<(getConfigSetDialogSchema)external
>(getConfigSetDialogSchema)ｴｸｽﾀｰﾅﾙ
<(getConfigSetDialogSchema)Restore to default preferences
>(getConfigSetDialogSchema)ﾃﾞﾌｫﾙﾄの設定に戻す
<(getConfigSetDialogSchema)Reset the current configuration preferences to factory value.
>(getConfigSetDialogSchema)ｶﾚﾝﾄのｺﾝﾌｨｷﾞｭﾚｰｼｮﾝの設定を工場出荷時の値にﾘｾｯﾄします。
<(getConfigSetDialogSchema)Restore to saved preferences
>(getConfigSetDialogSchema)保存した設定に戻す
<(getConfigSetDialogSchema)Reset the current configuration preferences to the saved preferences.
>(getConfigSetDialogSchema)ｶﾚﾝﾄのｺﾝﾌｨｷﾞｭﾚｰｼｮﾝの設定を保存した設定にﾘｾｯﾄします。
<(getConfigSetDialogSchema)Save preferences
>(getConfigSetDialogSchema)設定の保存
<(getConfigSetDialogSchema)Save configuration preferences to preference file.
>(getConfigSetDialogSchema)ｺﾝﾌｨｷﾞｭﾚｰｼｮﾝの設定を設定ﾌｧｲﾙに保存します。
<(getConfigSetDialogSchema)Clear saved preferences
>(getConfigSetDialogSchema)保存した設定をｸﾘｱする
<(getConfigSetDialogSchema)Remove saved configuration preferences file.
>(getConfigSetDialogSchema)保存したｺﾝﾌｨｷﾞｭﾚｰｼｮﾝの設定ﾌｧｲﾙを削除します。
<(getConfigSetDialogSchema)The Configuration is a set of 'Configuration Components' that individually define specific settings for a paritcular model's execution (simulation) and/or deployment (code generation).  A given model can have more than one Configuration associated with it.  Different Configurations can be customized for the different phases of model development.  The 'Active' Configuration is used for current operation (simulation or code generation) on the model.  Only one Configuration is active at a time.
>(getConfigSetDialogSchema)ｺﾝﾌｨｷﾞｭﾚｰｼｮﾝは、個々のﾓﾃﾞﾙの実行(ｼﾐｭﾚｰｼｮﾝ)および/または展開(ｺｰﾄﾞ生成)のための特定の設定を個別に定義する'Configuration Components'のｾｯﾄです。 与えられたﾓﾃﾞﾙに関連する1つ以上のｺﾝﾌｨｷﾞｭﾚｰｼｮﾝがあっても構いません。  異なるｺﾝﾌｨｷﾞｭﾚｰｼｮﾝはﾓﾃﾞﾙ開発の異なるﾌｪｰｽﾞにおいてｶｽﾀﾏｲｽﾞが可能です。  'Active'ｺﾝﾌｨｷﾞｭﾚｰｼｮﾝはﾓﾃﾞﾙ上でのｶﾚﾝﾄの操作(ｼﾐｭﾚｰｼｮﾝやｺｰﾄﾞ生成)に対して使われます。  1つのｺﾝﾌｨｷﾞｭﾚｰｼｮﾝのみがある時間においてｱｸﾃｨﾌﾞになります。
<(getConfigSetDialogSchema)The Configuration Preferences under Simulink Root is the template for the configuration set of new models created.  Within this MATLAB session, any changes made in this configuration set will automatically propagate to the configuration set of a new model created afterwards.  Saved preferences will be automatically loaded into memory at the start of next MATLAB session.
>(getConfigSetDialogSchema)Simulinkのﾙｰﾄでのｺﾝﾌｨｷﾞｭﾚｰｼｮﾝの設定は、新規に作成されたﾓﾃﾞﾙのｺﾝﾌｨｷﾞｭﾚｰｼｮﾝｾｯﾄのためのﾃﾝﾌﾟﾚｰﾄです。  このMATLABｾｯｼｮﾝ内で、このｺﾝﾌｨｷﾞｭﾚｰｼｮﾝｾｯﾄの任意の変更は、それ以降に作成された新規ﾓﾃﾞﾙのｺﾝﾌｨｷﾞｭﾚｰｼｮﾝｾｯﾄに自動的に反映します。  保存された設定はつぎのMATLABｾｯｼｮﾝの開始すると自動的にﾒﾓﾘに読み込まれます。
<(getConfigSetDialogSchema)A Configuration can also be a standalone object without attaching to any model. Users may backup/restore/transfer configuration from one model to another.
>(getConfigSetDialogSchema)ｺﾝﾌｨｷﾞｭﾚｰｼｮﾝは任意のﾓﾃﾞﾙを加えずにｽﾀﾝﾄﾞｱﾛﾝのｵﾌﾞｼﾞｪｸﾄにすることも可能です。ﾕｰｻﾞは1つのﾓﾃﾞﾙから別のﾓﾃﾞﾙにｺﾝﾌｨｷﾞｭﾚｰｼｮﾝをﾊﾞｯｸｱｯﾌﾟ/ﾘｽﾄｱ/変換します。

<(getGRTDialogSchema)MAT-file variable name modifier:
>(getGRTDialogSchema)MAT-ﾌｧｲﾙの変数名の変更:
<(getGRTDialogSchema)prefix rt_ to variable name,\nappend _rt to variable name,\nor no modification.
>(getGRTDialogSchema)変数名に接頭辞rt_を付けるか、\n変数名に_rtを追加するか、\nあるいは何も変更しません。
<(getGRTDialogSchema)Generate code and/or data files supporting exchange of signal and parameter\ndata via one of the following methods:\n(1) generation of C API code for interfacing tunable parameters and block\nI/O signales;\n(2) generation of External Mode support code;\n(3) generation of ASAP2 file.\nIf None is selected, no extra support code is generated.
>(getGRTDialogSchema)下記の方法の中の1つにより信号とﾊﾟﾗﾒｰﾀﾃﾞｰﾀの交換をｻﾎﾟｰﾄするｺｰﾄﾞおよび/または\nﾃﾞｰﾀﾌｧｲﾙを生成:\n(1) ﾁｭｰﾅﾌﾞﾙﾊﾟﾗﾒｰﾀとﾌﾞﾛｯｸのI/O信号のｲﾝﾀﾌｪｰｽのためのC APIｺｰﾄﾞの生成;\n(2) ｴｸｽﾀｰﾅﾙﾓｰﾄﾞをｻﾎﾟｰﾄするｺｰﾄﾞの生成; \n(3) ASAP2ﾌｧｲﾙの生成。\nなしを選択した場合、特別なｻﾎﾟｰﾄｺｰﾄﾞは生成されません。
<(getGRTDialogSchema)Parameters in C API
>(getGRTDialogSchema)C APIのﾊﾟﾗﾒｰﾀ
<(getGRTDialogSchema)Signals in C API
>(getGRTDialogSchema)C APIの信号
<(getGRTDialogSchema)Generate signals structure in C API.
>(getGRTDialogSchema)C APIの信号の構造体を生成します。
<(getGRTDialogSchema)Generate parameter tuning structures in C API.
>(getGRTDialogSchema)C APIのﾊﾟﾗﾒｰﾀをﾁｭｰﾆﾝｸﾞする構造体を生成
<(getGRTDialogSchema)Verification
>(getGRTDialogSchema)検証
<(getGRTDialogSchema)Data exchange
>(getGRTDialogSchema)ﾃﾞｰﾀ交換
<(getGRTDialogSchema)Interface:
>(getGRTDialogSchema)ｲﾝﾀﾌｪｰｽ:
<(getGRTDialogSchema)None
>(getGRTDialogSchema)なし
<(getGRTDialogSchema)C-API
>(getGRTDialogSchema)C-API
<(getGRTDialogSchema)External Mode
>(getGRTDialogSchema)ｴｸｽﾀｰﾅﾙﾓｰﾄﾞ
<(getGRTDialogSchema)ASAP2
>(getGRTDialogSchema)ASAP2

<(getModelReferenceDialogSchema)Rebuild options:
>(getModelReferenceDialogSchema)ﾘﾋﾞﾙﾄﾞｵﾌﾟｼｮﾝ:
<(getModelReferenceDialogSchema)Specify options for rebuilding models referenced by this model.
>(getModelReferenceDialogSchema)このﾓﾃﾞﾙによって参照されるﾓﾃﾞﾙのﾘﾋﾞﾙﾄﾞのｵﾌﾟｼｮﾝを指定します。
<(getModelReferenceDialogSchema)Never rebuild targets diagnostic:
>(getModelReferenceDialogSchema)ﾀｰｹﾞｯﾄの診断をﾘﾋﾞﾙﾄﾞしない:
<(getModelReferenceDialogSchema)Detect out of date models when 'Rebuild Options'\nis set to 'Never rebuild targets'.
>(getModelReferenceDialogSchema)'ﾘﾋﾞﾙﾄﾞｵﾌﾟｼｮﾝ'を'ﾀｰｹﾞｯﾄをﾘﾋﾞﾙﾄﾞしない'に設定した\n場合に古いﾓﾃﾞﾙを検出します。
<(getModelReferenceDialogSchema)Total number of instances allowed per top model:
>(getModelReferenceDialogSchema)ﾄｯﾌﾟのﾓﾃﾞﾙごとに可能なｲﾝｽﾀﾝｽの総数:
<(getModelReferenceDialogSchema)Specify the number of times this model can be referenced directly or\nindirectly by another model. Allowing mulitple references decreases\nthe efficency of code generated from this model.
>(getModelReferenceDialogSchema)別のﾓﾃﾞﾙによってこのﾓﾃﾞﾙに直接あるいは間接的な参照が可能な回数を指定\nします。複数の参照を行うと、このﾓﾃﾞﾙから生成したｺｰﾄﾞの効率が下がります。
<(getModelReferenceDialogSchema)Model dependencies:
>(getModelReferenceDialogSchema)ﾓﾃﾞﾙの従属関係:
<(getModelReferenceDialogSchema)Specify other files on which this model depends (e.g., MAT-files).  Changes\nin these dependencies can trigger rebuilding of this model.
>(getModelReferenceDialogSchema)このﾓﾃﾞﾙに依存する他のﾌｧｲﾙを指定します(たとえば、MAT-ﾌｧｲﾙ)。\nこれらの従属関係の変更は、このﾓﾃﾞﾙのﾘﾋﾞﾙﾄﾞを可能にします。
<(getModelReferenceDialogSchema)Pass scalar root inputs by value
>(getModelReferenceDialogSchema)値によってｽｶﾗのﾙｰﾄ入力を渡す
<(getModelReferenceDialogSchema)Control whether scalar root inputs are passed by value\nor reference to the referenced model's target.  Selecting\nthis option increases the efficiency of code generated\nfrom this model.
>(getModelReferenceDialogSchema)ｽｶﾗのﾙｰﾄの入力は、参照ﾓﾃﾞﾙのﾀｰｹﾞｯﾄに値、またはﾘﾌｧﾚﾝｽの\nどちらかによって渡されることをｺﾝﾄﾛｰﾙします。このｵﾌﾟｼｮﾝを\n選択することで、このﾓﾃﾞﾙから生成されたｺｰﾄﾞの効率がｱｯﾌﾟ\nします。
<(getModelReferenceDialogSchema)Minimize algebraic loop occurrences
>(getModelReferenceDialogSchema)代数ﾙｰﾌﾟの発生の最小化
<(getModelReferenceDialogSchema)Attempt to eliminate algebraic loops involving references to this model.\nSelecting this option decreases the efficiency of code generated\nfrom this model.
>(getModelReferenceDialogSchema)このﾓﾃﾞﾙへの参照に関する代数ﾙｰﾌﾟを除去しようとします。\nこのｵﾌﾟｼｮﾝを選択すると、このﾓﾃﾞﾙから生成されたｺｰﾄﾞの効率性が下がります。
<(getModelReferenceDialogSchema)Build Simulation Target
>(getModelReferenceDialogSchema)ｼﾐｭﾚｰｼｮﾝﾀｰｹﾞｯﾄのﾋﾞﾙﾄﾞ
<(getModelReferenceDialogSchema)Build a Simulation target for this model if the existing\nSimulation target is out of date or it does not exist.
>(getModelReferenceDialogSchema)存在するｼﾐｭﾚｰｼｮﾝﾀｰｹﾞｯﾄが古いか、あるいは存在しない場合に\nこのﾓﾃﾞﾙのｼﾐｭﾚｰｼｮﾝﾀｰｹﾞｯﾄをﾋﾞﾙﾄﾞします。
<(getModelReferenceDialogSchema)Build RTW Target
>(getModelReferenceDialogSchema)RTWﾀｰｹﾞｯﾄのﾋﾞﾙﾄﾞ
<(getModelReferenceDialogSchema)Build an RTW target for this model if the existing\nRTW target is out of date or it does not exist.
>(getModelReferenceDialogSchema)存在するRTWﾀｰｹﾞｯﾄが古いか、あるいは存在しない場合に\nこのﾓﾃﾞﾙのRTWﾀｰｹﾞｯﾄをﾋﾞﾙﾄﾞします。
<(getModelReferenceDialogSchema)Zero
>(getModelReferenceDialogSchema)0
<(getModelReferenceDialogSchema)One
>(getModelReferenceDialogSchema)1
<(getModelReferenceDialogSchema)Multiple
>(getModelReferenceDialogSchema)複数
<(getModelReferenceDialogSchema)Always
>(getModelReferenceDialogSchema)常に行う
<(getModelReferenceDialogSchema)If any changes detected
>(getModelReferenceDialogSchema)任意の変更を検出
<(getModelReferenceDialogSchema)If any changes in known dependencies detected
>(getModelReferenceDialogSchema)既知の従属関係
<(getModelReferenceDialogSchema)Never
>(getModelReferenceDialogSchema)行わない

<(getRTWCustomCodeDialogSchema)Source file:
>(getRTWCustomCodeDialogSchema)ｿｰｽﾌｧｲﾙ:
<(getRTWCustomCodeDialogSchema)Enter code to appear at the top of the generated <model>.c source file.
>(getRTWCustomCodeDialogSchema)生成された<model>.cのｿｰｽﾌｧｲﾙの一番上に表示するためのｺｰﾄﾞを入力します。
<(getRTWCustomCodeDialogSchema)Enter code to appear at the top of the generated <model>.h header file.
>(getRTWCustomCodeDialogSchema)生成された<model>.hのﾍｯﾀﾞﾌｧｲﾙの一番上に表示するためのｺｰﾄﾞを入力します。
<(getRTWCustomCodeDialogSchema)Header file:
>(getRTWCustomCodeDialogSchema)ﾍｯﾀﾞﾌｧｲﾙ:
<(getRTWCustomCodeDialogSchema)Source files:
>(getRTWCustomCodeDialogSchema)ｿｰｽﾌｧｲﾙ:
<(getRTWCustomCodeDialogSchema)Enter a space-separated list of include directories to be added to\nthe include path when compiling the generated code.
>(getRTWCustomCodeDialogSchema)生成されたｺｰﾄﾞのｺﾝﾊﾟｲﾙ中に、ｲﾝｸﾙｰﾄﾞﾊﾟｽを追加するためにｲﾝｸﾙｰﾄﾞﾃﾞｨﾚｸﾄﾘ\nのｽﾍﾟｰｽ区切りのﾘｽﾄを入力します。
<(getRTWCustomCodeDialogSchema)Include directories:
>(getRTWCustomCodeDialogSchema)ﾃﾞｨﾚｸﾄﾘを含む:
<(getRTWCustomCodeDialogSchema)Enter a space-separated list of include directories to be added to\nthe include path when compiling the generated code.
>(getRTWCustomCodeDialogSchema)生成されたｺｰﾄﾞのｺﾝﾊﾟｲﾙ中に、ｲﾝｸﾙｰﾄﾞﾊﾟｽを追加するためにｲﾝｸﾙｰﾄﾞﾃﾞｨﾚｸﾄﾘ\nのｽﾍﾟｰｽ区切りのﾘｽﾄを入力します。
<(getRTWCustomCodeDialogSchema)Enter a space-separated list of source files to be compiled and linked\nwith the generated code.
>(getRTWCustomCodeDialogSchema)生成されたｺｰﾄﾞをｺﾝﾊﾟｲﾙしてﾘﾝｸするためにｿｰｽﾌｧｲﾙのｽﾍﾟｰｽ区切りのﾘｽﾄを入力\nします。
<(getRTWCustomCodeDialogSchema)Libraries:
>(getRTWCustomCodeDialogSchema)ﾗｲﾌﾞﾗﾘ:
<(getRTWCustomCodeDialogSchema)Enter a space-separated list of static library files to be linked\nwith the generated code.
>(getRTWCustomCodeDialogSchema)生成されたｺｰﾄﾞにﾘﾝｸするためにｽﾀﾃｨｯｸﾗｲﾌﾞﾗﾘのｽﾍﾟｰｽ区切りのﾘｽﾄを入力\nします。
<(getRTWCustomCodeDialogSchema)Initialize function:
>(getRTWCustomCodeDialogSchema)初期化関数:
<(getRTWCustomCodeDialogSchema)Enter code to appear in the generated model initialize function.
>(getRTWCustomCodeDialogSchema)生成されたﾓﾃﾞﾙの初期化関数に表示するためのｺｰﾄﾞを入力します。
<(getRTWCustomCodeDialogSchema)Terminate function:
>(getRTWCustomCodeDialogSchema)終了関数:
<(getRTWCustomCodeDialogSchema)Enter code to appear in the generated model terminate function.
>(getRTWCustomCodeDialogSchema)生成されたﾓﾃﾞﾙの終了関数に表示するためのｺｰﾄﾞを入力します。
<(getRTWCustomCodeDialogSchema)Source file
>(getRTWCustomCodeDialogSchema)ｿｰｽﾌｧｲﾙ
<(getRTWCustomCodeDialogSchema)Header file
>(getRTWCustomCodeDialogSchema)ﾍｯﾀﾞﾌｧｲﾙ
<(getRTWCustomCodeDialogSchema)Initialize function
>(getRTWCustomCodeDialogSchema)初期化関数
<(getRTWCustomCodeDialogSchema)Terminate function
>(getRTWCustomCodeDialogSchema)終了関数
<(getRTWCustomCodeDialogSchema)Select one of the item to be edited in the right panel.
>(getRTWCustomCodeDialogSchema)右側のﾊﾟﾈﾙで編集するために項目の1つを選択してください。
<(getRTWCustomCodeDialogSchema)Include directories
>(getRTWCustomCodeDialogSchema)ﾃﾞｨﾚｸﾄﾘを含む
<(getRTWCustomCodeDialogSchema)Source files
>(getRTWCustomCodeDialogSchema)ｿｰｽﾌｧｲﾙ
<(getRTWCustomCodeDialogSchema)Libraries
>(getRTWCustomCodeDialogSchema)ﾗｲﾌﾞﾗﾘ
<(getRTWCustomCodeDialogSchema)Select one of the item to be edited in the right panel.
>(getRTWCustomCodeDialogSchema)右側のﾊﾟﾈﾙで編集するために項目の1つを選択してください。
<(getRTWCustomCodeDialogSchema)Include custom c-code in generated:
>(getRTWCustomCodeDialogSchema)生成されたｶｽﾀﾑc-ｺｰﾄﾞを含む:
<(getRTWCustomCodeDialogSchema)Include list of additional:
>(getRTWCustomCodeDialogSchema)追加のﾘｽﾄを含む:
  
<(getRTWDialogSchema)RTW system target file:
>(getRTWDialogSchema)RTWｼｽﾃﾑﾀｰｹﾞｯﾄﾌｧｲﾙ:
<(getRTWDialogSchema)Current system target file. Use Browse button at right to select\na different target.
>(getRTWDialogSchema)ｶﾚﾝﾄのｼｽﾃﾑﾀｰｹﾞｯﾄﾌｧｲﾙです。違うﾀｰｹﾞｯﾄを選択するには右側の\n参照ﾎﾞﾀﾝを利用してください。
<(getRTWDialogSchema)Browse ...
>(getRTWDialogSchema)参照 ...
<(getRTWDialogSchema)Launch system target file browser.
>(getRTWDialogSchema)ｼｽﾃﾑﾀｰｹﾞｯﾄのﾌｧｲﾙﾌﾞﾗｳｻﾞを起動します。
<(getRTWDialogSchema)Additional TLC command line options.
>(getRTWDialogSchema)付加的なTLCｺﾏﾝﾄﾞﾗｲﾝｵﾌﾟｼｮﾝ
<(getRTWDialogSchema)TLC options:
>(getRTWDialogSchema)TLCｵﾌﾟｼｮﾝ:
<(getRTWDialogSchema)Make command:
>(getRTWDialogSchema)Makeｺﾏﾝﾄﾞ:
<(getRTWDialogSchema)Make command with optional arguments.
>(getRTWDialogSchema)追加引数をもつｺﾏﾝﾄﾞを作成します。
<(getRTWDialogSchema)Template makefile:
>(getRTWDialogSchema)ﾃﾝﾌﾟﾚｰﾄmakeﾌｧｲﾙ:
<(getRTWDialogSchema)Current template makefile for building RTW target.
>(getRTWDialogSchema)RTWﾀｰｹﾞｯﾄをﾋﾞﾙﾄﾞするためのｶﾚﾝﾄのﾃﾝﾌﾟﾚｰﾄmakeﾌｧｲﾙです。
<(getRTWDialogSchema)Code generation directory:
>(getRTWDialogSchema)ｺｰﾄﾞ生成ﾃﾞｨﾚｸﾄﾘ:
<(getRTWDialogSchema)Path to build directory (default is model directory).
>(getRTWDialogSchema)ﾋﾞﾙﾄﾞのﾃﾞｨﾚｸﾄﾘのﾊﾟｽ(ﾃﾞﾌｫﾙﾄはﾓﾃﾞﾙﾃﾞｨﾚｸﾄﾘです)。
<(getRTWDialogSchema)Ignore custom storage classes
>(getRTWDialogSchema)ｶｽﾀﾑｽﾄﾚｰｼﾞｸﾗｽを無視する
<(getRTWDialogSchema)Treat custom storage classes as 'Auto'.
>(getRTWDialogSchema)ｶｽﾀﾑｽﾄﾚｰｼﾞｸﾗｽが'Auto'に設定されるものとして取り扱います。
<(getRTWDialogSchema)Generate code only
>(getRTWDialogSchema)ｺｰﾄﾞ生成のみ
<(getRTWDialogSchema)Do not execute makefile when generating code.
>(getRTWDialogSchema)ｺｰﾄﾞの生成時にmakefileを実行しません。
<(getRTWDialogSchema)Generate code
>(getRTWDialogSchema)ｺｰﾄﾞ生成
<(getRTWDialogSchema)Build
>(getRTWDialogSchema)ﾋﾞﾙﾄﾞ
<(getRTWDialogSchema)Generate Real-Time Workshop code for current target.
>(getRTWDialogSchema)ｶﾚﾝﾄのﾀｰｹﾞｯﾄのReal-Time Workshopｺｰﾄﾞを生成します。
<(getRTWDialogSchema)Generate HTML report
>(getRTWDialogSchema)HTMLﾚﾎﾟｰﾄの生成
<(getRTWDialogSchema)Document the generated C code in an HTML report.
>(getRTWDialogSchema)HTMLﾚﾎﾟｰﾄに生成されたCｺｰﾄﾞを記録します。
<(getRTWDialogSchema)Save build log
>(getRTWDialogSchema)ﾋﾞﾙﾄﾞﾛｸﾞの保存
<(getRTWDialogSchema)Verbose build
>(getRTWDialogSchema)ﾋﾞﾙﾄﾞ（ｺﾏﾝﾄﾞ表示)
<(getRTWDialogSchema)Show code generation stages and compiler output.
>(getRTWDialogSchema)ｺｰﾄﾞ生成の段階とｺﾝﾊﾟｲﾗの出力を表示します。
<(getRTWDialogSchema)Retain .rtw file
>(getRTWDialogSchema).rtwﾌｧｲﾙを残す
<(getRTWDialogSchema)Retain the <model>.rtw file in the current build directory.
>(getRTWDialogSchema)ｶﾚﾝﾄのﾋﾞﾙﾄﾞﾃﾞｨﾚｸﾄﾘにある<model>.rtwﾌｧｲﾙを残します。
<(getRTWDialogSchema)Profile TLC
>(getRTWDialogSchema)TLCﾌﾟﾛﾌｧｲﾙ
<(getRTWDialogSchema)Profile the execution time of each TLC file used to generate code\nfor this model in HTML format.
>(getRTWDialogSchema)HTMLﾌｫｰﾏｯﾄでこのﾓﾃﾞﾙに対してｺｰﾄﾞを生成するために利用された\n各TLCﾌｧｲﾙの実行時間をﾌﾟﾛﾌｧｲﾙします。
<(getRTWDialogSchema)Start TLC debugger when generating code
>(getRTWDialogSchema)ｺｰﾄﾞ生成時にTLCﾃﾞﾊﾞｯｶﾞを実行 
<(getRTWDialogSchema)Start the TLC debugger during code generation at the beginning\nof the TLC program.  TLC breakpoint statements automatically\ninvoke the TLC debugger regardless this setting.
>(getRTWDialogSchema)TLCﾌﾟﾛｸﾞﾗﾑの初めのｺｰﾄﾞ生成中にTLCﾃﾞﾊﾞｯｶﾞを開始してください。\nTLCﾌﾞﾚｰｸﾎﾟｲﾝﾄのｽﾃｰﾄﾒﾝﾄは、この設定にかかわらず自動的に\nTLCﾃﾞﾊﾞｯｶﾞを呼び出します。
<(getRTWDialogSchema)Start TLC coverage when generating code
>(getRTWDialogSchema)ｺｰﾄﾞ生成時にTLCｶﾊﾞﾚｰｼﾞを実行 
<(getRTWDialogSchema)Generates .log files containing the number of times each\nline of TLC code is executed during code generation.
>(getRTWDialogSchema)ｺｰﾄﾞ生成中にTLCｺｰﾄﾞの各行でﾋｯﾄした回数を含む.logﾌｧｲﾙ\nを生成します。
<(getRTWDialogSchema)Enable TLC assertion
>(getRTWDialogSchema)TLCｱｻｰｼｮﾝを有効にする
<(getRTWDialogSchema)Produce a TLC stack trace when the argument to the\nassert directives evaluates to false.
>(getRTWDialogSchema)assertｺﾏﾝﾄﾞの引数が謝っていると評価された場合に\nTLCｽﾀｯｸﾄﾚｰｽを生成します。
<(getRTWDialogSchema)Include hyperlinks to model
>(getRTWDialogSchema)ﾓﾃﾞﾙへのﾊｲﾊﾟｰﾘﾝｸを含む
<(getRTWDialogSchema)Link code segements to their corresponding block in the model.\nNote that code generation time increases for large models.
>(getRTWDialogSchema)このﾓﾃﾞﾙ内のﾌﾞﾛｯｸに対応するためにｺｰﾄﾞｾｸﾞﾒﾝﾄにﾘﾝｸします。\nｺｰﾄﾞの生成時間は大きなﾓﾃﾞﾙで増加することに注意してください。
<(getRTWDialogSchema)Launch report after code generation completes
>(getRTWDialogSchema)ｺｰﾄﾞ生成の完了後にﾚﾎﾟｰﾄを起動
<(getRTWDialogSchema)Automatically open HTML report after code generation completes.
>(getRTWDialogSchema)ｺｰﾄﾞ生成が終了した後にHTMLﾚﾎﾟｰﾄを自動的に開きます。
<(getRTWDialogSchema)Launch old Simulation Parameters dialog ...
>(getRTWDialogSchema)以前のｼﾐｭﾚｰｼｮﾝﾊﾟﾗﾒｰﾀﾀﾞｲｱﾛｸﾞを起動します ...
<(getRTWDialogSchema)Target selection
>(getRTWDialogSchema)ﾀｰｹﾞｯﾄｼﾐｭﾚｰｼｮﾝ
<(getRTWDialogSchema)General
>(getRTWDialogSchema)一般
<(getRTWDialogSchema)Debug
>(getRTWDialogSchema)ﾃﾞﾊﾞｯｸﾞ
<(getRTWDialogSchema)Build process
>(getRTWDialogSchema)ﾋﾞﾙﾄﾞﾌﾟﾛｾｽ
<(getRTWDialogSchema)Documentation
>(getRTWDialogSchema)ﾄﾞｷｭﾒﾝﾃｰｼｮﾝ
<(getRTWDialogSchema)TLC process
>(getRTWDialogSchema)TLCﾌﾟﾛｾｽ
<(getRTWDialogSchema)Custom storage class
>(getRTWDialogSchema)ｶｽﾀﾑｽﾄﾚｰｼﾞｸﾗｽ
<(getRTWDialogSchema)RTW process
>(getRTWDialogSchema)RTWﾌﾟﾛｾｽ
  
<(getSFSimDialogSchema)Enable debugging/animation
>(getSFSimDialogSchema)ﾃﾞﾊﾞｯｸﾞ/ｱﾆﾒｰｼｮﾝを有効にする
<(getSFSimDialogSchema)Enable overflow detection (with debugging)
>(getSFSimDialogSchema)ｵｰﾊﾞｰﾌﾛｰの検出を有効にする (ﾃﾞﾊﾞｯｸﾞ中)
<(getSFSimDialogSchema)Echo expressions without semicolons
>(getSFSimDialogSchema)ｾﾐｺﾛﾝなしのｴｺｰ表現
<(getSFSimDialogSchema)Custom code:
>(getSFSimDialogSchema)ｶｽﾀﾑｺｰﾄﾞ:
<(getSFSimDialogSchema)Include Code
>(getSFSimDialogSchema)ｺｰﾄﾞを含む
<(getSFSimDialogSchema)Initialization Code
>(getSFSimDialogSchema)初期化ｺｰﾄﾞ
<(getSFSimDialogSchema)Termination Code
>(getSFSimDialogSchema)終了ｺｰﾄﾞ
<(getSFSimDialogSchema)Include Paths
>(getSFSimDialogSchema)ﾊﾟｽを含む
<(getSFSimDialogSchema)Source Files
>(getSFSimDialogSchema)ｿｰｽﾌｧｲﾙ
<(getSFSimDialogSchema)Libraries
>(getSFSimDialogSchema)ﾗｲﾌﾞﾗﾘ
<(getSFSimDialogSchema)Generated Code Directory
>(getSFSimDialogSchema)生成されたｺｰﾄﾞのﾃﾞｨﾚｸﾄﾘ
<(getSFSimDialogSchema)Reserved Names
>(getSFSimDialogSchema)予約名
<(getSFSimDialogSchema)Custom code included at the top of generated code (e.g. #include''s):
>(getSFSimDialogSchema)生成されたｺｰﾄﾞのﾄｯﾌﾟに含まれたｶｽﾀﾑｺｰﾄﾞ (例 #include):
<(getSFSimDialogSchema)Space-separated list of custom include directories:
>(getSFSimDialogSchema)ｶｽﾀﾑのｲﾝｸﾙｰﾄﾞﾃﾞｨﾚｸﾄﾘのｽﾍﾟｰｽで区切られたﾘｽﾄ:
<(getSFSimDialogSchema)Custom source files:
>(getSFSimDialogSchema)ｶｽﾀﾑｿｰｽﾌｧｲﾙ:
<(getSFSimDialogSchema)Custom libraries:
>(getSFSimDialogSchema)ｶｽﾀﾑﾗｲﾌﾞﾗﾘ:
<(getSFSimDialogSchema)Code generation directory:
>(getSFSimDialogSchema)ｺｰﾄﾞ生成ﾃﾞｨﾚｸﾄﾘ:
<(getSFSimDialogSchema)Custom initialization code (called from mdlInitialize):
>(getSFSimDialogSchema)ｶｽﾀﾑ初期化ｺｰﾄﾞ(mdlInitializeから呼び出し):
<(getSFSimDialogSchema)Custom termination code (called from mdlTerminate):
>(getSFSimDialogSchema)ｶｽﾀﾑ終了ｺｰﾄﾞ (mdlTerminateから呼び出し):
<(getSFSimDialogSchema)Reserved names:
>(getSFSimDialogSchema)予約名:
<(getSFSimDialogSchema)Use settings for all libraries
>(getSFSimDialogSchema)すべてのﾗｲﾌﾞﾗﾘの設定に利用
<(getSFSimDialogSchema)Description:
>(getSFSimDialogSchema)説明:
<(getSFSimDialogSchema)Document Link:
>(getSFSimDialogSchema)ﾄﾞｷｭﾒﾝﾄﾘﾝｸ:
<(getSFSimDialogSchema)Build mode:
>(getSFSimDialogSchema)ﾋﾞﾙﾄﾞﾓｰﾄﾞ:
<(getSFSimDialogSchema)Stateflow target (incremental)
>(getSFSimDialogSchema)Stateflowﾀｰｹﾞｯﾄ (追加)
<(getSFSimDialogSchema)Rebuild all (including libraries)
>(getSFSimDialogSchema)すべてﾘﾋﾞﾙﾄﾞ (ﾗｲﾌﾞﾗﾘを含む)
<(getSFSimDialogSchema)Make without generating code
>(getSFSimDialogSchema)ｺｰﾄﾞ生成なしで作成
<(getSFSimDialogSchema)Clean all (delete generated code/executables
>(getSFSimDialogSchema)すべて削除 (生成されたｺｰﾄﾞ/実行ﾌｧｲﾙの削除
<(getSFSimDialogSchema)Clean objects (delete executables only)
>(getSFSimDialogSchema)ｵﾌﾞｼﾞｪｸﾄの削除 (実行ﾌｧｲﾙのみ削除)
<(getSFSimDialogSchema)Build
>(getSFSimDialogSchema)ﾋﾞﾙﾄﾞ
<(getSFSimDialogSchema)Rebuild All
>(getSFSimDialogSchema)すべてﾘﾋﾞﾙﾄﾞ
<(getSFSimDialogSchema)Make
>(getSFSimDialogSchema)Make
<(getSFSimDialogSchema)Clean All
>(getSFSimDialogSchema)すべて削除
<(getSFSimDialogSchema)Clean Objects
>(getSFSimDialogSchema)ｵﾌﾞｼﾞｪｸﾄの削除
<(getSFSimDialogSchema)Coder Options
>(getSFSimDialogSchema)ｺｰﾀﾞｰｵﾌﾟｼｮﾝ

<(getTargetExtModeDialogGroup)External mode
>(getTargetExtModeDialogGroup)ｴｸｽﾀｰﾅﾙﾓｰﾄﾞ
<(getTargetExtModeDialogGroup)Generates communication support code for\nexecuting targets in Simulink external mode.
>(getTargetExtModeDialogGroup)Simulinkｴｸｽﾀｰﾅﾙﾓｰﾄﾞでのﾀｰｹﾞｯﾄを実行する\nための通信ｻﾎﾟｰﾄｺｰﾄﾞを生成します。
<(getTargetExtModeDialogGroup)Transport layer:
>(getTargetExtModeDialogGroup)ﾄﾗﾝｽﾎﾟｰﾄ層:
<(getTargetExtModeDialogGroup)Selects transport protocols for external mode communications.
>(getTargetExtModeDialogGroup)ｴｸｽﾀｰﾅﾙﾓｰﾄﾞ通信のためのﾄﾗﾝｽﾎﾟｰﾄﾌﾟﾛﾄｺﾙを選択します。
<(getTargetExtModeDialogGroup)Static memory allocation
>(getTargetExtModeDialogGroup)静的なﾒﾓﾘ割り当て
<(getTargetExtModeDialogGroup)Use static memory buffer for external mode\ninstead of allocating dynamic memory (mallocs).
>(getTargetExtModeDialogGroup)ﾀﾞｲﾅﾐｯｸﾒﾓﾘの割り当て(mallocs)の代わりにｴｸｽﾀｰﾅﾙﾓｰﾄﾞ\nに対する静的なﾒﾓﾘのﾊﾞｯﾌｧを使用します。
<(getTargetExtModeDialogGroup)MEX-file arguments:
>(getTargetExtModeDialogGroup)MEX-ﾌｧｲﾙの引数:
<(getTargetExtModeDialogGroup)External Mode mex args.
>(getTargetExtModeDialogGroup)ｴｸｽﾀｰﾅﾙﾓｰﾄﾞのmex引数。
<(getTargetExtModeDialogGroup)Memory management
>(getTargetExtModeDialogGroup)ﾒﾓﾘ管理
<(getTargetExtModeDialogGroup)External mode options
>(getTargetExtModeDialogGroup)ｴｸｽﾀｰﾅﾙﾓｰﾄﾞｵﾌﾟｼｮﾝ
<(getTargetExtModeDialogGroup)MEX-file name:
>(getTargetExtModeDialogGroup)MEX-ﾌｧｲﾙ名:
<(getTargetExtModeDialogGroup)Static memory buffer size:
>(getTargetExtModeDialogGroup)静的なﾒﾓﾘのﾊﾞｯﾌｧｻｲｽﾞ:
<(getTargetExtModeDialogGroup)Size in bytes of external mode static memory buffer.
>(getTargetExtModeDialogGroup)ｴｸｽﾀｰﾅﾙﾓｰﾄﾞでの静的なﾒﾓﾘのﾊﾞｯﾌｧのﾊﾞｲﾄでのｻｲｽﾞです。
<(getTargetExtModeDialogGroup)Host/Target interface
>(getTargetExtModeDialogGroup)ﾎｽﾄ/ﾀｰｹﾞｯﾄのｲﾝﾀﾌｪｰｽ

<(getTargetSoftwareDialogGroup)Target floating point math environment:
>(getTargetSoftwareDialogGroup)浮動小数点の計算環境のﾀｰｹﾞｯﾄ:
<(getTargetSoftwareDialogGroup)Specify math library extension available to your target.
>(getTargetSoftwareDialogGroup)ﾀｰｹﾞｯﾄで利用可能な数学ﾗｲﾌﾞﾗﾘの拡張子を指定してください。
<(getTargetSoftwareDialogGroup)Utility function generation
>(getTargetSoftwareDialogGroup)ﾕｰﾃｨﾘﾃｨ関数の生成
<(getTargetSoftwareDialogGroup)Specify where utility functions are generated.
>(getTargetSoftwareDialogGroup)ﾕｰﾃｨﾘﾃｨ関数の生成場所を指定
<(getTargetSoftwareDialogGroup)Software environment
>(getTargetSoftwareDialogGroup)ｿﾌﾄｳｪｱ環境
<(getTargetSoftwareDialogGroup)Auto
>(getTargetSoftwareDialogGroup)Auto
<(getTargetSoftwareDialogGroup)Shared location
>(getTargetSoftwareDialogGroup)共有場所

<(dialogCallback)Configuration preferences restored!
>(dialogCallback)ｺﾝﾌｨｷﾞｭﾚｰｼｮﾝの設定を戻しました!
<(dialogCallback)Restore Saved Preferences
>(dialogCallback)保存した設定に戻す
<(dialogCallback)Configuration preferences saved!
>(dialogCallback)ｺﾝﾌｨｷﾞｭﾚｰｼｮﾝの設定を保存しました!
<(dialogCallback)Save Preferences
>(dialogCallback)設定を保存
<(dialogCallback)Saved configuration prefernces cleared!
>(dialogCallback)保存したｺﾝﾌｨｷﾞｭﾚｰｼｮﾝの設定をｸﾘｱしました!
<(dialogCallback)Clear Preferences
>(dialogCallback)設定をｸﾘｱ
<(dialogCallback)Warning: C-API will not be generated.  To generate C-API, either Signals or Parameters or both should be checked.
>(dialogCallback)ﾜｰﾆﾝｸﾞ: C-APIは生成されません。C-APIを生成するには、信号かﾊﾟﾗﾒｰﾀのいずれか、あるいはその両方がﾁｪｯｸされなければなりません。

<(getConfigSetDialogSchema.m)Select:
>(getConfigSetDialogSchema.m)選択:
<(getDataODialogSchema)Data Import/Export
>(getDataODialogSchema)ﾃﾞｰﾀのｲﾝﾎﾟｰﾄ/ｴｸｽﾎﾟｰﾄ
<(getSolverDialogSchema)Solver
>(getSolverDialogSchema)ｿﾙﾊﾞ
<(getSolverDialogSchema)Sample Time
>(getSolverDialogSchema)ｻﾝﾌﾟﾙ時間
<(getOptDialogSchema)Optimization
>(getOptDialogSchema)最適化
<(getOptDialogSchema)Diagnostics
>(getOptDialogSchema)診断
<(getOptDialogSchema)Application lifespan (days)
>(getOptDialogSchema)ｱﾌﾟﾘｹｰｼｮﾝのlifespan (日)
<(getOptDialogSchema)Optimize size of counters used to compute absolute and elapsed time,\nusing the specified application life span.
>(getOptDialogSchema)特定のｱﾌﾟﾘｹｰｼｮﾝのﾗｲﾌｽﾊﾟﾝ(life span)を使って、絶対経過時間を計算する\nために使われるｶｳﾝﾀのｻｲｽﾞを最適化します。
<(getDebugDialogSchema)Data Integrity
>(getDebugDialogSchema)ﾃﾞｰﾀの完全性
<(getDebugDialogSchema)Signal resolution control:
>(getDebugDialogSchema)信号の分解能のｺﾝﾄﾛｰﾙ:
<(getDebugDialogSchema)Control which named signals and states get resolved to Simulink signal objects.
>(getDebugDialogSchema)Simulinkの信号ｵﾌﾞｼﾞｪｸﾄを解くために指定した信号と状態をｺﾝﾄﾛｰﾙします。
<(getDebugDialogSchema)Try resolve all signals & states
>(getDebugDialogSchema)すべての信号&状態を使って解く
<(getDebugDialogSchema)Try resolve all signals & states (warn for implicit resolution)
>(getDebugDialogSchema)すべての信号&状態を使って解く (陰的解法に対してﾜｰﾆﾝｸﾞを出力)
<(getDebugDialogSchema)Enable All
>(getDebugDialogSchema)すべて有効
<(getDebugDialogSchema)Conversion
>(getDebugDialogSchema)変換
<(getDebugDialogSchema)Connectivity
>(getDebugDialogSchema)接続性
<(getDebugDialogSchema)Compatibility
>(getDebugDialogSchema)互換性
<(getDebugDialogSchema)Model Referencing
>(getDebugDialogSchema)ﾓﾃﾞﾙ参照
<(getDebugDialogSchema)Model block version mismatch:
>(getDebugDialogSchema)Modelﾌﾞﾛｯｸﾊﾞｰｼﾞｮﾝの不一致:
<(getDebugDialogSchema)Unsupported data logging:
>(getDebugDialogSchema)ｻﾎﾟｰﾄされないﾃﾞｰﾀﾛｷﾞﾝｸﾞ:
<(getDebugDialogSchema)Detect data logging options that are not supported, when this model\nis referenced by another model, e.g., use of To Workspace blocks and\nScope blocks to save data to the MATLAB workspace.
>(getDebugDialogSchema)このﾓﾃﾞﾙが他のﾓﾃﾞﾙによって参照されない場合、ｻﾎﾟｰﾄされないﾃﾞｰﾀﾛｷﾞﾝｸﾞの\nｵﾌﾟｼｮﾝを検出します。たとえば、MATLABのﾜｰｸｽﾍﾟｰｽにﾃﾞｰﾀを保存するために\nTo WorkspaceﾌﾞﾛｯｸとScopeﾌﾞﾛｯｸが使われている場合などです。
<(getDebugDialogSchema)Rebuild options for all referenced models
>(getDebugDialogSchema)すべての参照ﾓﾃﾞﾙに対するﾘﾋﾞﾙﾄﾞｵﾌﾟｼｮﾝ
<(getModelReferenceDialogSchema)Rebuild options for all referenced models
>(getModelReferenceDialogSchema)すべての参照ﾓﾃﾞﾙに対するﾘﾋﾞﾙﾄﾞｵﾌﾟｼｮﾝ
<(getModelReferenceDialogSchema)Options for referencing this model
>(getModelReferenceDialogSchema)このﾓﾃﾞﾙを参照するｵﾌﾟｼｮﾝ
<(getHardwareDialogSchema)Hardware Implementation
>(getHardwareDialogSchema)ﾊｰﾄﾞｳｪｱ実行
<(getCodeAppDialogSchema)Comments
>(getCodeAppDialogSchema)ｺﾒﾝﾄ
<(getCodeAppDialogSchema)Requirements in block comments
>(getCodeAppDialogSchema)ﾌﾞﾛｯｸのｺﾒﾝﾄにあるrequirement
<(getCodeAppDialogSchema)Insert entered requirements into the generated code as a comment.
>(getCodeAppDialogSchema)生成されたｺｰﾄﾞ内にｺﾒﾝﾄとして入力したrequirementを挿入します。


