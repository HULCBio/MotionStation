%% $Revision: 1.1.6.3 $
%%
%% Copyright 1994-2003 The MathWorks, Inc.


%% Target language is C
%implements * "C"

%if ISEQUAL(ConfigSet.EnableCustomComments, 1) & ISFIELD(ConfigSet,"CustomCommentsFcn")
  %assign CusCommFile = ConfigSet.CustomCommentsFcn
  %assign CusCommFcn = FEVAL("strtok",CusCommFile,".")
  %if !ISEMPTY(CusCommFcn)
    %assign CusCommTLCFile = CusCommFcn + ".tlc"
    %if FILE_EXISTS(CusCommTLCFile)
       %include "%<CusCommTLCFile>"
    %else 
       %assign temp = "fileparts(which('%<CusCommTLCFile>'))"
       %assign filePath = FEVAL("eval", temp)
       %if !ISEMPTY(filePath)
          %addincludepath filePath
          %include "%<CusCommTLCFile>"
       %endif
    %endif
  %endif
%endif
%if FILE_EXISTS("ECCustomCommentExample.tlc")
   %include "ECCustomCommentExample.tlc"
%else
   %assign temp = "fileparts(which('ECCustomCommentExample.tlc'))"
   %assign filePath = FEVAL("eval", temp)
   %if !ISEMPTY(filePath)
       %addincludepath filePath
       %include "ECCustomCommentExample.tlc"
   %endif
%endif

%%=============================================================================
%function GetCustomComments(record,request) void
      
%assign comment1 = ""
%if ISEQUAL(ConfigSet.EnableCustomComments,1)
    %if ISFIELD(ConfigSet,"CustomCommentsFcn") 
       %assign CusCommFile = ConfigSet.CustomCommentsFcn
    %else
       %assign CusCommFile = ""
    %endif
    %assign CusCommFcn = FEVAL("strtok",CusCommFile,".")
    %assign temp = "fileparts(which('%<CusCommFile>'))"
    %assign mfilePath = FEVAL("eval", temp)
    %if !ISEMPTY(CusCommFcn)
        %assign CusCommTLCFile = CusCommFcn + ".tlc"
        %assign CusCommMFile = CusCommFcn + ".m"
        %if ISEQUAL(CusCommFile,CusCommTLCFile) & FILE_EXISTS(CusCommTLCFile) 
            %assign comment1 = UserCustomComments(record,CompiledModel.Name,request)
        %elseif ISEQUAL(CusCommFile,CusCommMFile) & !ISEMPTY(mfilePath) 
            %assign id = LibGetRecordIdentifier(record)
            %assign comment1 = FEVAL(CusCommFcn,id,CompiledModel.Name,request)
        %elseif FILE_EXISTS(CusCommTLCFile) 
            %assign comment1 = UserCustomComments(record,CompiledModel.Name,request)
        %elseif !ISEMPTY(mfilePath)
            %assign id = LibGetRecordIdentifier(record)
            %assign comment1 = FEVAL(CusCommFcn,id,CompiledModel.Name,request)
        %else
            %assign errTxt = "Error: %<CusCommFile> is a undefined file for" +...
                              " Custom Comments. Please check if it is on the matlab path."
            %<LibReportFatalError(errTxt)>
        %endif
    %else
        %assign errTxt = "Error: Custom comments is turned on. A Custom comments" +...
                         " function needs to be specified."
        %<LibReportFatalError(errTxt)>
    %endif
%else
    %%%% A built-in hook for adding custom comments 
    %if FILE_EXISTS("ECCustomCommentExample.tlc")
        %assign comment1 = ECCustomComments(record,CompiledModel.Name,request)
    %endif
%endif
%if ISEQUAL(comment1, 0)
    %assign comment1 = ""
    %assign errTxt = "Calling custom comments function error for '%<id>'." +...
                     " No custom comment is placed in generated code."
    %<LibReportWarning(errTxt)>
%endif

%return comment1
%endfunction

%%=============================================================================
%function ExpandInit(width, initValue, dt) void
%% No Complex number
%switch dt
   %case "uint8_T"
       %assign  castTo = "Unsigned"
       %break
   %case "uint16_T"
       %assign  castTo = "Unsigned"
       %break
   %case "uint32_T"
       %assign  castTo = "Unsigned"
       %break
   %case "int8_T"
       %assign  castTo = "Number"
       %break
   %case "int16_T"
       %assign  castTo = "Number"
       %break
   %case "int32_T"
       %assign  castTo = "Number"
       %break
   %case "real32_T"
       %assign  castTo = "Real32"
       %break
   %case "int8_T"
       %assign  castTo = "Unsigned"
       %break
   %case "boolean_T"
       %assign  castTo = "Boolean"
       %break
   %default
       %assign  castTo = "Real"
       %break
%endswitch

%if width == 1
    %assign init = CAST(castTo,initValue[0])
    %return STRING(init)
%else
    %openfile initStr
    {
    %foreach idx = width
      %assign init = CAST(castTo,initValue[idx])
      %if idx < (width - 1)
        %<init>,
      %else
        %<init>
      %endif
    %endforeach
    }\
    %closefile initStr
    %return initStr
%endif
%endfunction

%%=============================================================================
%function GetPointerForData(cscDefn, msDefn, datarec) void

  %assign dataAccess = SLibGetDataAccess(cscDefn, datarec)
  %if dataAccess == "Pointer"
    %return "*"
  %else
    %return ""
  %endif
%endfunction

%%=============================================================================
%function GetDefnUnstructForInitFromDataObject(cscDefn, msDefn, record) void
 
  %assign id = LibGetRecordIdentifier(record)
  %assign pointer      = GetPointerForData(cscDefn, msDefn, record)
  %assign qualifier    = SLibGetQualifier(msDefn)
  %assign dt           = LibGetRecordCompositeDataTypeName(record)
  %assign width        = LibGetDataWidth(record)
  %assign dims         = (width == 1) ? "" : "[%<width>]"
  %assign typeandname  = qualifier + dt + " " + pointer + id + dims
  %assign initStr        = ""
  %if cscDefn.DataInit == "Static" && cscDefn.DataAccess == "Direct"
      %assign width = LibGetDataWidth(record)
      %assign object = record.Object.ObjectProperties
      %assign initValue = object.RTWInfo.Object.ObjectProperties.InitialValue
      %assign initStr = ExpandInit(width,initValue,dt)
      %assign initStr = " = %<initStr>"
  %endif
  %assign terminator = ";"

  %return typeandname + ...
    initStr + ...
    terminator 
%endfunction

%% Function: DataAccess =========================================================
%% Abstract:
%%   DataAccess provides an API for requesting code fragments or other
%%   information corresponding to data of a custom storage class.
%%
%function DataAccess(record, request, idx, reim) void

  %assign cscDefn = SLibGetCSCDefForData(record)
  %assign msDefn = SLibGetMemorySectionDefForData(record)
  %assign className = cscDefn.Name

  %switch request

    %case "declare"
         %return LibDataAccessInSpecificTLC("Simulink", "Unstructured.tlc", record, request, idx, reim)
      %break

    %case "define"
         %assign returnStr = LibDataAccessInSpecificTLC("Simulink", "Unstructured.tlc", record, request, idx, reim)
         %assign cmplx = SLibGetRecordIsComplex(record)
         %if !cmplx
            %if ISEQUAL(record.Object.Class,"Signal") & ISEQUAL(ConfigSet.InitialValueSource,"DataObject")
                %assign returnStr = GetDefnUnstructForInitFromDataObject(cscDefn, msDefn, record)
           %endif
         %endif
         %return returnStr
      %break

    %case "declComment"
      %assign id = LibGetRecordIdentifier(record)
      %assign object = record.Object.ObjectProperties

      %%% Custom comments for this data declaration can be inserted here
      %assign comment1 = ""
      %assign comment1 = GetCustomComments(record,request)

      %%%%% Place Description field of Data Object in Generated Code
      %assign comment2 = ""
      %if ISEQUAL(ConfigSet.SimulinkDataObjDesc, 1)
        %assign objDes = record.Object.ObjectProperties.Description
        %if !ISEMPTY(objDes)
           %assign comment2 = "/* %<objDes> */"
        %endif
      %endif

      %assign comment3 = ""
      %return ["%<comment1>","%<comment2>","%<comment3>"]
      %break

    %case "defnComment"
      %assign id        = LibGetRecordIdentifier(record)
      %assign object = record.Object.ObjectProperties

      %%% Custom comments for this data definition can be inserted
      %assign comment1 = ""
      %assign comment1 = GetCustomComments(record,request)     

      %%%%% Place Description field of Data Object in Generated Code
      %assign comment2 = ""
      %if ISEQUAL(ConfigSet.SimulinkDataObjDesc, 1)
        %assign objDes = record.Object.ObjectProperties.Description
        %if !ISEMPTY(objDes)
           %assign comment2 = "/* %<objDes> */"
        %endif
      %endif

      %assign comment3 = ""
      %return ["%<comment1>","%<comment2>","%<comment3>"]
      %break

    %case "contents"
         %return LibDataAccessInSpecificTLC("Simulink", "Unstructured.tlc", record, request, idx, reim)
      %break

    %case "address"
         %return LibDataAccessInSpecificTLC("Simulink", "Unstructured.tlc", record, request, idx, reim)
      %break

    %case "initialize"
         %return LibDataAccessInSpecificTLC("Simulink", "Unstructured.tlc", record, request, idx, reim)
      %break

    %case "layout"
         %return LibDataAccessInSpecificTLC("Simulink", "Unstructured.tlc", record, request, idx, reim)
      %break

    %default
      %% You should invoke LibDefaultCustomStorageUnknownClassAccessType
      %% for unrecognized requests.  It gracefully errors for unhandled
      %% critical cases, and supplies safe defaults for unhandled
      %% noncritical requests.
      %return LibDefaultCustomStorageUnknownDataAccessType ...
        (record, request, idx, reim)
      %break

  %endswitch

%endfunction

%% Function: ClassAccess ========================================================
%% Abstract:
%%   ClassAccess provides an API for requesting information or actions
%%   corresponding to a custom storage class.
%%
%function ClassAccess(record, request) void

  %assign cscDefn = SLibGetCSCDefForCSC(record)
  %assign msDefn = SLibGetMemorySectionDefForCSC(record)

  %switch request
    %case "comment"
      %assign rtnStr = ""

      %return rtnStr
      %break

    %case "typeComment"
      %assert cscDefn.CommentSource == "Default"
      %assign rtnStr = ""

      %return rtnStr
      %break

    %case "declComment"
      %assert cscDefn.CommentSource == "Default"

      %%% Custom comments for this CSC in declaration can be inserted
      %assign rtnStr = ""

      %return rtnStr
      %break

    %case "defnComment"
      %assert cscDefn.CommentSource == "Default"

      %%% Custom comments for this CSC in definition can be inserted
      %assign rtnStr = ""

      %return rtnStr

     %default
        %return LibClassAccessInSpecificTLC("Simulink", "Unstructured.tlc", record, request)
      %break

  %endswitch

%endfunction

%% [EOF] MPTUnstructured.tlc
