<!-- $Revision: 1.4.2.1 $ -->
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>Simulink demo</title>
</head>

<body bgcolor="#FFFFFF">
<table width="100%" border=0 cellspacing=0 bgcolor=ffe4b0>
<tr>
<td><b>busdemo.mdl</b></td>
<td align=right><a href="matlab:busdemo"><b>Open this Model</b></a></td>
</tr>
</table>
<p style="color:#990000; font-weight:bold; font-size:x-large">Simulink Bus Signal Demonstration</p>

<p>This interactive demonstration introduces you to the following
Simulink concepts: </p>

<ul>
    <li>Distinguishing vector, matrix, and bus/composite signals</li>
    <li>Understanding signal line formats</li>
    <li>Displaying and understanding signal dimensions</li>
    
  <li>Using the Bus Creator and the Bus Selector blocks</li>
    <li>Viewing matrix signals on a Simulink Scope</li>
    <li>Highlighting blocks in the Simulink diagram</li>
</ul>

<p>If you haven't already, <a
href="matlab:busdemoscript('step1');">open the Simulink model
busdemo.mdl.</a> <br>
</p>

<hr>

<h3><a name="DemoDescription"></a>Model description</h3>

<p>The left side of this model contains five source blocks from the Simulink Sources 
  library.&nbsp; Each block generates a scalar output signal, a signal with a 
  width of one, that is appropriately labeled on the diagram. The output of the 
  <a
href="matlab:busdemoscript('hiliteblock',['Chirp',char(32),'Signal']);">Chirp 
  Signal</a> block is passed into a <a href="matlab:busdemoscript('hiliteblock','Goto');">Goto 
  block</a> whose Tag is set to A. The associated <a href="matlab:busdemoscript('hiliteblock','Subsystem/From');">From 
  block</a> is found inside of the Subsystem block. If you <a href="matlab:open_system('busdemo/Subsystem');">open 
  the Subsystem</a>, you'll see that the Chirp signal and the output of the Constant 
  block are bundled together into a bus using a <a
href="matlab:busdemoscript('hiliteblock',['Subsystem/Bus',char(32),'Creator1']);">Bus 
  Creator</a> block (found in the Simulink Signal &amp; Systems library).</p>
<p>Similarly, the three signals from the <a href="matlab:busdemoscript('hiliteblock','Clock');">Clock</a>, <a
href="matlab:busdemoscript('hiliteblock',['Pulse',char(32),'Generator']);"> Pulse Generator</a>, and <a href="matlab:busdemoscript('hiliteblock','Sine Wave');">Sine Wave</a> blocks are bundled together using another Bus Creator block, labeled  <a
href="matlab:busdemoscript('hiliteblock',['Bus',char(32),'Creator2']);">Bus Creator2.</a> The two bus signals, labeled bus1 and bus2, are then bundled together using a third <a
href="matlab:busdemoscript('hiliteblock',['Bus',char(32),'Creator']);">Bus 
  Creator </a>block to create the nested bus signal labeled main_bus.</p>
<p> The bundled signal from the final Bus Creator is then passed 
  into the<a
href="matlab:busdemoscript('hiliteblock',['Bus',char(32),'Selector']);"> Bus Selector</a>  block. </p>

<p>The Bus Selector block extracts the Pulse and Chirp signals
from the original bundle of signals. These two signals are
finally displayed on a Simulink <a
href="matlab:busdemoscript('hiliteblock',['Bus',char(32),'Output']);">Scope</a>
with two axes.&nbsp; The Pulse signal is shown on the top axes
and the Chirp signal on the bottom axes. </p>

<p>You can <a href="matlab:busdemoscript('step2');">run the
simulation</a> to see the output of the Chirp and Pulse blocks on
the Scope. </p>

<p><strong>Note:</strong> This model uses Bus Creator and Bus
Selector blocks instead of Mux and Demux blocks for a variety
reasons. One important motivation is that bus signals are very
efficient, as only the signals chosen in the Bus Selector are
passed around the diagram during a simulation. Another
consideration is that the two Bus blocks are configured using the
signal names, allowing you to create a Simulink diagram that is
easier to read.</p>

<hr>

<h3>Bus signals and line formats in Simulink</h3>

<p>After running the simulation, look at the lines in
busdemo.mdl.&nbsp;Notice that the signal connecting the Bus
Creator and Bus Selector blocks is drawn with three lines, as
shown below. </p>

<blockquote>
    <blockquote>
        <p><img src="images/busdemofig1.gif" width="181"
        height="123"></p>
    </blockquote>
</blockquote>

<p>This line format indicates that the signal is a <i>bus signal.</i>
A bus signal represents a set of signals, analogous to a bundle
of wires tied together. The bus signal can behave in one of two
ways, either as a vector signal or as a composite signal, based
on the size and shape of the signals bundled into the bus signal.
</p>

<p>To understand this better, <a
href="matlab:busdemoscript('step3');">display the signal
dimensions</a> by checking the <strong>Signal dimensions</strong>
item in the Simulink diagram's <strong>Format</strong> menu. You
should notice that the label &quot;5{5}&quot; appears on the bus
signal, as shown below. </p>

<blockquote>
    <blockquote>
        <p><img src="images/busdemofig4.gif" width="174"
        height="104"></p>
    </blockquote>
</blockquote>

<p>The number before the braces tells you how many lines were
bundled together to create that particular bus signal. For example, the output of the Bus Creator2 block was created from the three lines from the Clock, Pulse, and Sine Wave blocks. The number inside of the braces tells you how many total
signals are contain in the bus. In the case of the bus2 signal, each output from the Source blocks is a scalar, so the bus contains a total of three signals, one from each line.</p>

<p>All the bus signal in this model are treated like vector signals
because each individual signal in the bus is a scalar. As such,
you can pass the bus signal into any Simulink block that accepts
vector inputs, such as a Gain, Sum, Integer, etc.</p>

<p>Bus signals are also treated as vector signals when all the
individual signals in the bus are either scalars or 1-dimensional
vectors, as you will see below.</p>

<hr>

<h3>Vector signals in Simulink</h3>

<p>You can change the Sine Wave block to output a vector of
signals, instead of a scalar. To do this, first<a
href="matlab:busdemoscript('step5');"> open the Sine Wave block</a>
by double clicking on the block in the diagram. This opens the
Block Parameters dialog associated with the Sine Wave block. </p>

<p>The first field in the Block Parameters dialog is <strong>Amplitude</strong>.
You can change the value in this field to a vector, using the
following commands. </p>

<ol>
    <li><a href="matlab:busdemoscript('step6');">Type [1 2] into
        the <strong>Amplitude</strong> field.</a></li>
    <li><a href="matlab:busdemoscript('step7');">Apply the
        changes and close the dialog</a> by clicking the <strong>OK</strong>
        button.</li>
    <li><a href="matlab:busdemoscript('update','vector');">Update
        the Simulink diagram</a> by selecting the <strong>Update
        diagram</strong> command from the model's <strong>Edit</strong>
        menu. </li>
</ol>

<p>The line coming out of the Sine Wave block now has a
&quot;2&quot; above it, indicating that it carries a vector, or
1-dimensional, signal with two elements. Notice, now, that the
input signal to the Bus Selector block is labeled with
&quot;5{6}&quot;. The 5 before the braces tells you that there
are still five signals bundled together in the bus signal. Since
one of these signals is a vector with two elements, the total
width of the bus signal is now six, the value inside the braces.</p>

<p>The bus signal is still treated as a vector and can be passed
to any Simulink block that accepts vector signals. In fact, as
long as the bus signal consists solely of scalars and
1-dimensional vectors, it will be treated as a vector signal. As
you will soon see, there is one more condition on when bus
signals are treated as vectors.</p>

<hr>

<h3>Row and column matrix signals in Simulink</h3>

<p>By default, the signals in your Simulink diagram are
1-dimensional vectors. You can, however, introduce 2-dimensional
matrices into your diagram. To demonstrate this, change the Sine
Wave block so it outputs a matrix signal instead of the vector
you previously entered. </p>

<p>To do this, <a href="matlab:busdemoscript('step5');">open Sine
Wave block</a> by double clicking on the block. At the bottom of
the dialog (and on the bottom of <i>all</i> Source block dialogs)
you'll see the <strong>Interpret vector parameters as 1-D</strong>
check box. </p>

<ul>
    <li>When this box is checked, Simulink interprets any row or
        column vector you type into the Block Parameters dialog
        as a 1-dimensional array.</li>
    <li>When this box is not checked, Simulink interprets any row
        or column vector you type into the Block Parameters
        dialog as a 2-dimensional matrix. (<strong>Note:</strong>
        If you are working in this mode, then <em>all</em> the
        vectors and matrices you enter into the Block Parameters
        dialog must have consistent dimensions.)</li>
</ul>

<p>To illustrate this, make the output of the Sine Wave
2-dimensional using the following steps.</p>

<ol>
    <li><a href="matlab:busdemoscript('step8');">Uncheck the <strong>Interpret
        vector parameters as 1-D</strong> check box</a> (If you
        haven't already, make sure to <a
        href="matlab:busdemoscript('step6');">change the <strong>Amplitude</strong>
        to the vector [1 2]</a>.)</li>
    <li><a href="matlab:busdemoscript('step9');">Apply the
        changes and close the dialog</a> by clicking the <strong>OK</strong>
        button.</li>
    <li><a href="matlab:busdemoscript('update','matrix');">Update
        the Simulink diagram</a> to see the changes take effect
        in the signal dimension labels. </li>
</ol>

<p>Notice that the output signal of the Sine Wave block is now
labeled &quot;[1x2]&quot;. Simulink is actually carrying a 2-D
matrix signal along that line!&nbsp; The input signal to the Bus
Selector block is still labeled with &quot;5{6}&quot; as it
contains five signals with a total of six elements. In this case,
however, the fifth signal in the bus is actually a row matrix.</p>

<p>This is the final case where the bus signal is treated as a
vector; when all signals in the bus are either scalars,
1-dimensional vectors, or either row or column matrices. If the
bus contains both row <em>and</em> column matrix signals then the
bus signal is no longer a vector signal. Instead, it is treated
as a composite signal, discussed in a moment.</p>

<h3>Matrix signals in Simulink</h3>

<p>You can enter any 2-dimensional matrix into the Source blocks.
For example, to enter a 2x2 matrix <a
href="matlab:busdemoscript('step9_5');">open the Sine Wave block
dialog, enter [1 2; 3 4] in the <strong>Amplitude</strong>
parameter, and update the diagram</a>. The signal coming out of
the Sine Wave block now has the dimensions [2x2]. </p>

<p><strong>Note:</strong> When you enter an m-by-n matrix where
neither <em>m </em>nor <em>n</em> is one, the block's output will
always be a matrix regardless of the current state of the <strong>Interpret
vector parameters as 1-D</strong> check box. The check box <i>only</i>
applies to vector parameters, where either <em>m</em> or <em>n</em>
is one. </p>

<p>The signal going into the Bus Selector is now labeled with
&quot;5{8}&quot;. It contains 5 signals, but one of those signals
has four elements for a total width of eight. In this case, the
bus signal is treated as a composite signal. In fact, as soon as
any of the signals in the bus contain a 2-dimensional signal that
is neither a row nor column matrix, the bus signal is
automatically treated as a composite signal.</p>

<p>A composite signal is useful for bundling data into a single
wire to pass through the Simulink diagram. However, a composite
signal cannot be passed into most Simulink blocks. In fact,
composite signals can <em>only</em> be passed into virtual
blocks, such as the Bus Selector, Subsystem, Goto, Demux, etc.</p>
<p>To summarize, a bus signal is treated as a composite signal when either of the
following conditions is met.</p>

<ol>
    <li>The bus contains a signal that is a row matrix and
        another signal that is a column matrix.</li>
    <li>The bus contains one or more [<em>m </em>x <em>n</em>]
        matrices where both <em>m</em> and <em>n</em> are greater
        than one.</li>
</ol>

<hr>

<h3>Using the Bus Creator Block</h3>

<p>To understand more about how the bus signal is structured, <a
href="matlab:busdemoscript('step9_75');">open the Bus Creator block.</a> This block has two inputs, each of which is itself a bus signal. The two bus signals, labeled bus1 and bus2, are listed in the <strong>Signals in bus</strong> list, proceeded by a plus sign. If you <a
href="matlab:busdemoscript('step9_80');">expand out the two bus signals</a> by double-clicking in each top level node in the tree, you'll see the nested signals that make up the final bus.</p>

<p>The names used in the <strong>Signals in bus</strong> list are inherited from the signal names typed onto the Simulink diagram. If you want to locate the block a particular signal originated from, you can do the following.<p>

<ol>
    <li><a
href="matlab:busdemoscript('step9_85');">Select, for example, the Pulse signal</a> in the bus2 node.
    <li><a
href="matlab:busdemoscript('step9_90');">Press the Find button</a> to the right of the <strong>Signals in bus</strong> list.
    <li>Note that the Pulse Generator block is now highlighted.
</ol>

<p>The Bus Creator uses the signal name to determine the source of a particular signal in the bus.</p>

<hr>

<h3>Using the Bus Selector Block</h3>

<p>As the signal label indicates, the output of the Bus Creator
block still consists of five signals, where the last element is
the 2x2 matrix signal you previously entered. To illustrate this,
you can configure the Bus Selector block to output the matrix
signal from the Sine Wave block. To do this, first&nbsp; <a
href="matlab:busdemoscript('step10');">open the Bus Selector
block</a> by double clicking on the block. </p>

<ul>
    <li>On the left side of this dialog, you see a list of all
        the signals  passed into the Bus
        Selector block. You can <a
href="matlab:busdemoscript('step10_5');">Click on the tree</a> corresponding to a bus to see the source signals that the bus is composed of. The output signal of the Bus Creator is  in turn composed of the two bus signals bus1 and bus2.</li>
    <li>On the right side, you see "Selected Signals" - a list of all the input signals that
        are to serve as the output for 
        the Bus Selector block. To reference a signal corresponding to a specific input bus, use the dot-notation. For example,
        to access the Chirp input signal from bus1, use bus1.Chirp.</li>
</ul>

<p>The following steps illustrate how you can specify the output signal list to correspond to the Pulse Generator and Sine Wave sources. </p>

<ol>
    <li><a href="matlab:busdemoscript('step11');">Highlight the
        bus1.Chirp signal in the <strong>Selected signals</strong>
        list and remove it</a> by selecting <strong>Remove</strong>
        to the left of the list.</li>
    <li><a href="matlab:busdemoscript('step11');">Highlight</a> <a
        href="matlab:busdemoscript('step12');">the bus2.Sine signal in
        the <strong>Signals in the bus</strong> list and add it
        to the </a><a href="matlab:busdemoscript('step11');"><strong>Selected
        signals</strong></a> by choosing <strong>Select&gt;&gt;</strong>.</li>
    <li><a href="matlab:busdemoscript('step13');">Apply these
        changes and close the dialog</a> by selecting <strong>OK</strong>.</li>
</ol>

<p>Now, <a href="matlab:busdemoscript('step14')">run the
simulation</a>. The bottom axes on the Scope displays the four
signals from the Sine Wave block. </p>

<p><strong>Note: </strong>The labels for the signal name and
signal dimension may overlap on the bottom line feeding into the
Scope block. If this is the case, just hold the left mouse button
down on the signal name while dragging it to another location on
the line. Then, you should see that a [2x2] signal feeds into the
second input. </p>

<hr>

<h3>Interesting feature: hilite_system</h3>

<p>Various blocks in the Simulink diagram highlighted when you
clicked some of the links in this demonstration. This was done
using the new <font face="Courier">hilite_system</font> function.
The syntax is <font face="Courier">hilite_system(sys)</font>
where <font face="Courier">sys</font> is the name of the block
you want to highlight. There are a variety of different
highlighting schemes, which you can find by looking at the help
text for this command. Here are a few samples that highlight the
Sine Wave block. </p>

<ul>
    <li><a
        href="matlab:busdemo;hilite_system(['busdemo/Sine',char(32),'Wave'],'find');"><font
        face="Courier">hilite_system('busdemo/Sine Wave','find')</font></a><font
        face="Courier"> </font>% Uses the highlighting scheme
        used by the Find dialog</li>
    <li><a
        href="matlab:busdemo;hilite_system(['busdemo/Sine',char(32),'Wave'],'unique');"><font
        face="Courier">hilite_system('busdemo/Sine
        Wave','unique')</font></a><font face="Courier"> </font>%
        Uses the highlighting scheme used by the Simulink Graphical Merge tool. </li>
    <li><a
        href="matlab:busdemo;hilite_system(['busdemo/Sine',char(32),'Wave'],'none');"><font
        face="Courier">hilite_system('busdemo/Sine Wave','none')</font></a><font
        face="Courier"> </font>% Removes any highlighting</li>
</ul>

<p><a href="matlab:busdemoscript('closemodel');">Close</a> the
Bus Signal Demonstration Simulink Model</p>
</body>
</html>
