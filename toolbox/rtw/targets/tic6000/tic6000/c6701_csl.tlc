%% $RCSfile: c6701_csl.tlc,v $
%% $Revision: 1.8.4.3 $ $Date: 2004/04/01 16:14:58 $
%% Copyright 2001-2004 The MathWorks, Inc.


%% ==========================================================================
%% Function: render_Core_CSL_Defines
%% Abstract:

%function render_Core_CSL_Defines() void
%openfile buff

/*****************************************************************************/
/* c6701 header **************************************************************/
/* see the TMS320C6000 Peripherals Reference Guide (SPRU190C)                */
/* for technical specifications                                              */

/**************************** CONTROL REGISTERS *******************************/

extern cregister volatile unsigned int AMR;     /* Address Mode Register      */
extern cregister volatile unsigned int CSR;     /* Control Status Register    */
extern cregister volatile unsigned int IFR;     /* Interrupt Flag Register    */
extern cregister volatile unsigned int ISR;     /* Interrupt Set Register     */
extern cregister volatile unsigned int ICR;     /* Interrupt Clear Register   */
extern cregister volatile unsigned int IER;     /* Interrupt Enable Register  */
extern cregister volatile unsigned int ISTP;    /* Interrupt Service Tbl Ptr  */
extern cregister volatile unsigned int IRP;     /* Interrupt Return Pointer   */
extern cregister volatile unsigned int NRP;     /* Non-maskable Int Return Ptr*/
extern cregister volatile unsigned int IN;      /* General Purpose Input Reg  */
extern cregister volatile unsigned int OUT;     /* General Purpose Output Reg */

/* Synchronization Event Numbers */
#define SEN_NONE             0x00
#define SEN_TINT0            0x01
#define SEN_TINT1            0x02
#define SEN_SD_INT           0x03      
#define SEN_EXT_INT4         0x04
#define SEN_EXT_INT5         0x05
#define SEN_EXT_INT6         0x06
#define SEN_EXT_INT7         0x07
#define SEN_DMA_INT0         0x08
#define SEN_DMA_INT1         0x09
#define SEN_DMA_INT2         0x0A
#define SEN_DMA_INT3         0x0B
#define SEN_XEVT0            0x0C
#define SEN_REVT0            0x0D
#define SEN_XEVT1            0x0E
#define SEN_REVT1            0x0F
#define SEN_DSPINT           0x10

/** Secondary Control Register **/
#define SX_COND                0
#define SX_IE                  1
#define FRAME_COND             2
#define FRAME_IE               3
#define LAST_COND              4
#define LAST_IE                5
#define BLOCK_COND             6
#define BLOCK_IE               7
#define RDROP_COND             8
#define RDROP_IE               9
#define WDROP_COND            10
#define WDROP_IE              11
#define RSYNC_STAT            12
#define RSYNC_CLR             13
#define WSYNC_STAT            14
#define WSYNC_CLR             15
#define DMAC_EN               16
#define DMAC_EN_SZ             3

#define DMA0_SECONDARY_CTRL_ADDR     0x01840008   /* DMA 0 SEC CTRL REG       */
#define DMA0_SECONDARY_CTRL_REG      *(volatile unsigned int *)(DMA0_SECONDARY_CTRL_ADDR)
#define DMA1_SECONDARY_CTRL_ADDR     0x01840048   /* DMA 1 SEC CTRL REG       */
#define DMA1_SECONDARY_CTRL_REG      *(volatile unsigned int *)(DMA1_SECONDARY_CTRL_ADDR)
#define DMA2_SECONDARY_CTRL_ADDR     0x0184000C   /* DMA 2 SEC CTRL REG       */
#define DMA2_SECONDARY_CTRL_REG      *(volatile unsigned int *)(DMA2_SECONDARY_CTRL_ADDR)
#define DMA3_SECONDARY_CTRL_ADDR     0x0184004C   /* DMA 3 SEC CTRL REG       */
#define DMA3_SECONDARY_CTRL_REG      *(volatile unsigned int *)(DMA3_SECONDARY_CTRL_ADDR)

/* CPU Interrupt Numbers                                                      */

#define INTR_RST          0x00
#define INTR_NMI          0x01
#define INTR_RSV1         0x02
#define INTR_RSV2         0x03
#define INTR-4            0x04
#define INTR_5            0x05
#define INTR_6            0x06
#define INTR_7            0x07
#define INTR_8            0x08
#define INTR_9            0x09
#define INTR_10           0x0A
#define INTR_11           0x0B
#define INTR_12           0x0C
#define INTR_13           0x0D
#define INTR_14           0x0E
#define INTR_15           0x0F
%%
%% CSL function doesn't exist for clearing individual bits of McBSP control
%% register, therefore, following definitions must be used even when
%% DSP/BIOS is used.

%if useDSPBIOS
/* Multi-Channel Buffered Serial Port Control Registers & Bits */
#define MCBSP0_ADDR    0x018C0000
#define MCBSP0_SPCR    *(volatile unsigned int *)(MCBSP0_ADDR+0x08)
#define MCBSP1_ADDR    0x01900000
#define MCBSP1_SPCR    *(volatile unsigned int *)(MCBSP1_ADDR+0x08)
#define RRST           0
#define XRST          16
%endif
%%

#define INTERRUPT_ENABLE(intr) IER |= (1<<(intr))
#define GLOBAL_INTERRUPT_ENABLE CSR |= 0x01  /* sets GIE bit (bit 0) */

%closefile buff
%return buff
%endfunction %% render_Core_CSL_Defines



%% ==========================================================================
%% Function: render_disable_interrupts
%% Abstract:

%function render_disable_interrupts() void
%openfile buff

/* Function: disable_interrupts ------------------------------
 *
 * Abstract:
 *      Disable all DSP interrupts
 */
 
void disable_interrupts()
{      
  IRQ_globalDisable();    
  IRQ_resetAll();                          
}

%closefile buff
%return buff
%endfunction %% render_disable_interrupts


%% ==========================================================================
%% Function: render_enable_interrupts
%% Abstract:

%function render_enable_interrupts() void
%openfile buff

/* Function: enable_interrupts -------------------------------
 *
 * Abstract:
 *      Enable the all DMA and DSP interrupts
 */
 
void enable_interrupts()
{
%if (IRInfo.DMAIntNeeded && !useDSPBIOS)
	initDMAInterrupts();
%endif
	IRQ_nmiEnable();				        /* enable non-maskable interrupts */
	IRQ_globalEnable();				        /* global interrupt enable */
%if (IRInfo.DMAIntNeeded)	
	INTERRUPT_ENABLE(SEN_DMA_INT1);   
	MCBSP0_SPCR |= (1<<RRST) | (1<<XRST);
%endif
%%	

%if (IRInfo.timerIntNeeded)	
    %if !useDSPBIOS
        intr_hook (Timer1_ISR, INTR_15);
        hTimer1 = TIMER_Open(TIMER_DEV1, TIMER_OPEN_RESET); 
        TIMER_ConfigB (hTimer1, 
                       TimerControl,
                       (int) (%<IRInfo.timerIntPeriod>), 
                       0x00000000 
                       );  
    %endif
    
	TimerEventId1 = TIMER_getEventId(hTimer1);
	IRQ_enable(TimerEventId1);	
	%if (!IRInfo.DMAIntNeeded)
        TIMER_start(hTimer1);
    %endif
    
    ICR = IFR | 0x8000;
    IER |= 0x8002;                        /* enable timer interrupt (# 15)  */
    CSR |= 1;
%endif
}

%closefile buff
%return buff
%endfunction %% render_enable_interrupts



%% ==========================================================================
%% Function: render_intr_hook
%% Abstract:

%function render_intr_hook() void
%openfile buff

/* Function: intr_hook ---------------------------------------
 *
 * Abstract:
 *      Hook an ISR to an interrupt.
 */
 
void intr_hook(ISR_Fcn isrp, int interrupt_number)
{
    if ((interrupt_number > 0) && (interrupt_number < 16)) { 
         isr_jump_table[interrupt_number] = (ISR_Fcn)isrp;
    }
}

%closefile buff
%return buff
%endfunction %% render_intr_hook



%% ==========================================================================
%% Function: render_DMA_Functions
%% Abstract:

%function render_DMA_Functions() void
%openfile buff

/* Function: DMA_isr ----------------------------------------
 *
 * Abstract:
 *      This function services interrupts posted by DMA
 */
 
%if useDSPBIOS
void dma_isr(void)
%else
interrupt void dma_isr(void)
%endif
{
	static int wrap_ptr = 0;
%if (!useDSPBIOS) && CompiledModel.FixedStepOpts.SolverMode == "MultiTasking"
    unsigned int temp_irp;
    unsigned int temp_amr;
    unsigned int temp_sat;

    temp_irp = IRP;
    SAVE_AMR(temp_amr);
    SAVE_SAT(temp_sat);
%endif
	
%if (IRInfo.timerStopCnt != 0)		
        TIMER_resume(hTimer1);		
        
%endif   
%%
%if CompiledModel.FixedStepOpts.SolverMode == "SingleTasking"
    	pendingInterrupt = TRUE;  
    	DMA1_SECONDARY_CTRL_REG &= ~(1<<FRAME_COND);   
    	
    	if (wrap_ptr ^= 1) {
    		adcBuffPtr = adc_buffer;
    		dacBuffPtr = dac_buffer;
    	}
    %%	
    %if useDSPBIOS
    
        SWI_post (&SWI_0);
    %endif
%else  %% Multitasking:
    DMA1_SECONDARY_CTRL_REG &= ~(1<<FRAME_COND);   
    if (wrap_ptr ^= 1) {
        adcBuffPtr = adc_buffer;
        dacBuffPtr = dac_buffer;
    }

    %if useDSPBIOS
        singleRateStep();
    %else
        rt_OneStep();
    %endif
%endif
%if (!useDSPBIOS) && CompiledModel.FixedStepOpts.SolverMode == "MultiTasking"
    RESTORE_SAT(temp_sat);
    RESTORE_AMR(temp_amr);
    IRP = temp_irp;
%endif
} 


%if !useDSPBIOS 
/* Function: initDMAInterrupts -------------------------------
 *
 * Abstract:
 *      This function enables DMA interrupts
 */
 
void initDMAInterrupts(void)
{
    DMA1_PRIMARY_CTRL |= MASK(DMA_AUTO_START_VAL, START);
}
%endif



/* Function: disableDMA --------------------------------------
 *
 * Abstract:
 *      This function disables DMA events
 */
 
void disable_DMA()
{
    /* To be implemented */                      
}

%closefile buff
%return buff
%endfunction %% render_DMA_Functions



%% ==========================================================================
%% Function: render_Timer1_ISR
%% Abstract:

%function render_Timer1_ISR() void
%openfile buff

/* Function: Timer1_ISR() ------------------------------------
 *
 * Abstract:
 *      This function services interrupts posted by timer # 1
 */

%if useDSPBIOS  
void Timer1_ISR (Uint32 Mailbox) 
%else
interrupt void Timer1_ISR () 
%endif
{
%if (IRInfo.timerStopCnt != 0)
    static volatile int cntr = 0;              
%endif
%if (!useDSPBIOS) && CompiledModel.FixedStepOpts.SolverMode == "MultiTasking"
    unsigned int temp_irp;
    unsigned int temp_amr;
    unsigned int temp_sat;

    temp_irp = IRP;
    SAVE_AMR(temp_amr);
    SAVE_SAT(temp_sat);
%endif
%if (IRInfo.timerStopCnt != 0)
  
    /* Pause timer so that timer interrupt does not collide with DMA interrupt */
    if (++cntr == (int)(%<IRInfo.timerStopCnt>)) {
        TIMER_pause(hTimer1);  
        cntr = 0;
    }
    
%endif

%if CompiledModel.FixedStepOpts.SolverMode == "SingleTasking"
    pendingInterrupt = TRUE;
    %%
    %if useDSPBIOS    
        SWI_post(&SWI_0);
    %else
        ICR = IFR | 0x8000;
    %endif      
%else  %% Multitasking:
    %if useDSPBIOS
        singleRateStep();
    %else
        rt_OneStep();
    %endif
%endif

%if (!useDSPBIOS) && CompiledModel.FixedStepOpts.SolverMode == "MultiTasking"
    RESTORE_SAT(temp_sat);
    RESTORE_AMR(temp_amr);
    IRP = temp_irp;
%endif
}

%closefile buff
%return buff
%endfunction %% render_Timer1_ISR



%% ==========================================================================
%% Entry point for creating chip support library for c6701evm 


%% First, generate header file

%openfile hdrFile = "MW_c6xxx_csl.h" 
%openfile cslFile = "MW_c6xxx_csl.c"
%selectfile hdrFile
%%
%<render_Core_CSL_Defines()>

%if (IRInfo.DMAIntNeeded)
%if useDSPBIOS
void dma_isr(void);
%else
interrupt void dma_isr(void);
%endif
%endif
%%
%% Now, generate source file
%%
%selectfile cslFile
%%
#define _C6XCHIP_SOURCE_FILE_

#include <std.h>
#include <csl.h>
#include <csl_edma.h>
#include <csl_mcbsp.h>
%if (IRInfo.timerIntNeeded && !useDSPBIOS)
    #include <csl_timer.h>
    #include <csl_legacy.h>
%endif
#include <csl_irq.h>
#include "MW_c6xxx_csl.h"
#include "rtwtypes.h"
#include "%<CompiledModel.Name>.h" 
#include "%<CompiledModel.Name>_private.h"
%if useDSPBIOS
#include "%<CompiledModel.Name>cfg.h"
%endif
#include <c6x.h>

%if !useDSPBIOS
typedef void (*ISR_Fcn) (void);
extern far ISR_Fcn isr_jump_table[16];
%endif
volatile int pendingInterrupt = FALSE;
%if (IRInfo.timerIntNeeded)
static Uint32 TimerEventId1;
%endif

%if !useDSPBIOS
%<render_intr_hook()>
%endif
%%
%if (IRInfo.timerIntNeeded)

    static Uint32 TimerEventId1;
    %if !useDSPBIOS     
		static TIMER_HANDLE hTimer1;
		
		static UINT32 TimerControl = TIMER_MK_CTL(
          TIMER_CTL_FUNC_GPIO,
          TIMER_CTL_INVOUT_NO,
          TIMER_CTL_DATOUT_0,
          TIMER_CTL_PWID_ONE,
          TIMER_CTL_GO_NO,
          TIMER_CTL_HLD_YES,
          TIMER_CTL_CP_PULSE,
          TIMER_CTL_CLKSRC_CPUOVR4,
          TIMER_CTL_INVINP_NO
		); 
    %endif
%endif

extern void rt_OneStep(void);

%if (IRInfo.DMAIntNeeded)
%<render_DMA_Functions()>
%endif
%%
%if (IRInfo.timerIntNeeded)

%<render_Timer1_ISR()>
%endif

%<render_enable_interrupts()>
%<render_disable_interrupts()>

%closefile hdrFile
%closefile cslFile

%% [EOF] c6701_csl.tlc
