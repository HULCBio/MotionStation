%% ============================================================================
%% $RCSfile: c6000_cmd.tlc,v $
%% $Revision: 1.26.2.2 $
%% $Date: 2004/04/08 20:59:35 $
%% Copyright 2000-2003 The MathWorks, Inc.
%%
%% Abstract:
%%  This file reads various tlc parameters and constructs a linker command
%%  file for the TMS320C6000 Linker (SPRU 186E).  The output file is
%%  called "ModelName".cmd, and its usage is:
%%      lnk6x -@ModelName.cmd
%%
%% ============================================================================

%if EXISTS("_C6000_CMD_") == 0
%assign _C6000_CMD_ = 1

%% Function: constructMemoryAllocation ========================================
%%
%function constructMemoryAllocation() void
%openfile memoryAllocation
%if LinkerCommandFile == "Internal_memory_map"
/* Internal Memory Map */

MEMORY
{
%if BoardType=="C6711DSK"
  vecs:         org = 0x00000000,   len =   0x300  /* ISVT */
  ISRAM:        org = 0x00000300,   len =  0xfd00  /* 64 Kb ISRAM minus VECS*/ 
%elseif BoardType=="C6713DSK"
  ISRAM:        org = 0x00000000,   len = 0x30000  /* 192 KB ISRAM  */ 
%elseif BoardType=="C6416DSK"
  ISRAM:        org = 0x00000000,  len = 0x100000  /* 1 MB ISRAM  */ 
%else   %% C6701EVM
  RESET (RX):   org = 0x00000000,   len =   0x400
  IPRAM (RX):   org = 0x00000400,   len =  0xfc00  /* ~64 Kb IPRAM  */
  IDRAM1 (RWI): org = 0x80000000,   len =  0x8000  /*  32 Kb IDRAM1 */
  IDRAM2 (RWI): org = 0x80008000,   len =  0x8000  /*  32 Kb IDRAM2 */
%endif  
}
%else
/* Full Memory Map */
%%
MEMORY
{
%if BoardType=="C6711DSK"
  vecs:         org = 0x00000000,   len =    0x300  /* ISVT */
  vecs_rel:     org = 0x80000000,   len =    0x300  /* relocated ISVT section */           
  CE0:          org = 0x80000300,   len = 0xfffd00  /* ~16 Mb SDRAM  */  
%elseif BoardType=="C6713DSK"
  ISRAM:        org = 0x00000000,   len =  0x30000  /* ISRAM (256k minus 64k cache) */
  CE0:          org = 0x80000000,  len =  0x800000  /* 8 Mb SDRAM */  
%elseif BoardType=="C6416DSK"
  ISRAM:        org = 0x00000000,   len =  0xc0000  /* ISRAM (1MB minus 256k cache) */
  CE0:          org = 0x80000000,  len = 0x1000000  /* 16 Mb SDRAM */  
%else   %% C6701EVM
  RESET (RX):   org = 0x00000000,   len =    0x400
  IPRAM (RX):   org = 0x00000400,   len =  0x0fc00  /* ~64 Kb IPRAM  */
  SBSRAM:       org = 0x00400000,   len =  0x40000  /* 260 Kb SBSRAM */
  SDRAM0:       org = 0x02000000,   len = 0x400000  /* 4 Mb SDRAM    */ 
  SDRAM1:       org = 0x03000000,   len = 0x400000  /* 4 Mb SDRAM    */ 
  IDRAM (RWI):  org = 0x80000000,   len =  0x10000  /* 64 Kb IDRAM   */
%endif  
}
%endif
%closefile memoryAllocation
%return memoryAllocation
%endfunction %% constructMemoryAllocation

%% Function: constructSectionAllocation =======================================
%%
%function constructSectionAllocation() void
%openfile sectionAllocation
%if LinkerCommandFile == "Internal_memory_map"
SECTIONS
{

%if (BoardType=="C6711DSK" || BoardType=="C6713DSK" || BoardType=="C6416DSK")
 %if (BoardType=="C6711DSK")
  "vectors"   > vecs
 %else  
  "vectors"   > ISRAM
 %endif
  .text       > ISRAM
  .rtdx_text  > ISRAM 
  .bss        > ISRAM
  .stack      > ISRAM
  .sysmem     > ISRAM
  .jump       > ISRAM  
  .cinit      > ISRAM 
  .pinit      > ISRAM   
  .const      > ISRAM
  .switch     > ISRAM
  .data       > ISRAM
  .cio        > ISRAM
  .rtdx_data  > ISRAM 
  .far        > ISRAM  
%else   %% C6701EVM
  .reset      > RESET
  .text       > IPRAM  
  .rtdx_text  > IPRAM                      
  .bss        > IDRAM1  
  .stack      > IDRAM2
  .sysmem     > IDRAM2
  .jump       > IDRAM2
  .cinit      > IDRAM2 
  .pinit      > IDRAM2  
  .const      > IDRAM2
  .switch     > IDRAM2
  .data       > IDRAM2  
  .cio        > IDRAM2
  .rtdx_data  > IDRAM2    
  .far        > IDRAM2  
%endif
}
%else      %% Full Mem Map
SECTIONS
{
%if (BoardType=="C6416DSK" || BoardType=="C6713DSK" || BoardType=="C6711DSK")
 %if BoardType=="C6711DSK" 
  "vectors"   > vecs
 %else
  "vectors"   > ISRAM
 %endif
  %% Place remaining stuff in SDRAM.  (Some items could be put in remaining ISRAM instead.)
  .text       > CE0
  .rtdx_text  > CE0 
  .bss        > CE0
  .stack      > CE0
  .sysmem     > CE0
  .jump       > CE0  
  .cinit      > CE0 
  .pinit      > CE0   
  .const      > CE0
  .switch     > CE0
  .data       > CE0
  .cio        > CE0
  .rtdx_data  > CE0 
  .far        > CE0  
%else     %% C6701EVM
  .reset      > RESET
  .text       > SDRAM0  
  .rtdx_text  > IPRAM                      
  .bss        > SDRAM1  
  .stack      > SBSRAM
  .sysmem     > SDRAM0
  .jump       > IDRAM
  .cinit      > SDRAM1 
  .pinit      > SDRAM0  
  .const      > SDRAM0
  .switch     > SDRAM0
  .data       > SDRAM0  
  .cio        > SDRAM0
  .rtdx_data  > IDRAM    
  .far        > SDRAM0  
%endif
}
%endif
%closefile sectionAllocation
%return sectionAllocation
%endfunction %% constructSectionAllocation



%% Entry point for creating build files =============================
%%

%openfile cmdFile = "%<CompiledModel.Name>.cmd"
%if useDSPBIOS == 1
	/* This linker command file is generated by the Target for TI C6000(tm).
	* Memory is configured by the DSP/BIOS(tm) linker command file.
	*/
	
	-l %<CompiledModel.Name>cfg.cmd
	
	%if LinkerCommandFile == "Internal_memory_map"
        -stack 0x2000
	%else
        -stack 0x40000
	%endif
	
%else
	%if c6000BuildAction=="Generate_code_only"
	%assign LinkerCommandFile = "Full_memory_map"
	%endif
	%assign mapfilename = "%<CompiledModel.Name>.map"
	%assign cofffilename = "%<CompiledModel.Name>.out"
	/* This linker command file is generated by the Target for TI C6000(tm).
	* It contains the linker options, output filename, MEMORY section
	* and SECTIONS section.  (see SPRU 186E)  Usage:
	*
	*  lnk6x -@%<CompiledModel.Name>.cmd file1.obj file2.obj ... lib1 lib2 ...
	*/
	
	_RTDX_interrupt_mask = ~0x000000008; /* int used by RTDX                     */
	
	%<constructMemoryAllocation()>
	
	%<constructSectionAllocation()>
	
%endif

/* [EOF] %<CompiledModel.Name>.cmd */

%closefile cmdFile

%endif  %% _C6000_CMD_

%% [EOF] c6000_cmd.tlc
