%% $RCSfile: c6000_cdb.tlc,v $
%% $Revision: 1.14.4.2 $ $Date: 2004/01/22 18:25:55 $
%% Copyright 2001-2003 The MathWorks, Inc.


%function createDSKMEMObj() void
%%
%% Memory maps for DSKs:  C6416, C6713, C6711
%%
%openfile buff
%%
%if (LinkerCommandFile == "Full_memory_map")
%%
%if (BoardType=="C6711DSK")
VECS = prog.module("MEM").create("VECS");
prog.module("MEM").instance("VECS").createHeap = 0;
prog.module("MEM").instance("VECS").space  = "code";
prog.module("MEM").instance("VECS").comment = "Interrupt vector table";
VECS_rel = prog.module("MEM").create("VECS_rel");
prog.module("MEM").instance("VECS_rel").createHeap = 0;
prog.module("MEM").instance("VECS_rel").space  = "code";
prog.module("MEM").instance("VECS_rel").comment = "External memory space for interrupt vector table (relocated here at runtime)";
%% -- C6711DSK Full Memory Map: --
prog.module("MEM").instance("VECS").base     = 0x00000000;
prog.module("MEM").instance("VECS").len      =   0x000300;
prog.module("MEM").instance("SDRAM").base    = 0x80000300;
prog.module("MEM").instance("SDRAM").len     =   0xfffd00;
prog.module("MEM").instance("VECS_rel").base = 0x80000000;
prog.module("MEM").instance("VECS_rel").len  =   0x000300;
%%
%elseif (BoardType=="C6713DSK")
%%  We use max cache size of 64kb; remaining IRAM is 192kb
SDRAM = prog.module("MEM").create("SDRAM");
prog.module("MEM").instance("SDRAM").createHeap = 0;
prog.module("MEM").instance("SDRAM").space = "code/data";
prog.module("MEM").instance("SDRAM").comment = "SDRAM is 8 MB on C6713DSK";
prog.module("MEM").instance("IRAM").comment =  "ISRAM is 256KB minus 64K cache.";
%% -- C6713DSK Full Memory Map: --
prog.module("MEM").instance("IRAM").base     = 0x00000000;
prog.module("MEM").instance("IRAM").len      =    0x30000;
prog.module("MEM").instance("SDRAM").base    = 0x80000000;
prog.module("MEM").instance("SDRAM").len     =   0x800000;
%%
%elseif (BoardType=="C6416DSK")
%%  SDRAM is not pre-defined in c64xx.cdb seed.  ISRAM is pre-defined instead.
%%  We use max cache size of 256kb; remaining ISRAM is 768kb
SDRAM = prog.module("MEM").create("SDRAM");
prog.module("MEM").instance("SDRAM").createHeap = 0;
prog.module("MEM").instance("SDRAM").space = "code/data";
prog.module("MEM").instance("SDRAM").comment = "16 MB SDRAM on C6416DSK";
prog.module("MEM").instance("ISRAM").comment = "ISRAM is 1MB minus 256K cache.";
%% -- C6416DSK Full Memory Map: --
prog.module("MEM").instance("ISRAM").base    = 0x00000000;
prog.module("MEM").instance("ISRAM").len     =    0xc0000;
prog.module("MEM").instance("SDRAM").base    = 0x80000000;
prog.module("MEM").instance("SDRAM").len     =  0x1000000;
%endif
%%
%else  %% Internal mem map:
%%
%if (BoardType=="C6711DSK") 
ISRAM = prog.module("MEM").create("ISRAM");
prog.module("MEM").instance("ISRAM").createHeap = 0;
prog.module("MEM").instance("ISRAM").space = "code/data";
prog.module("MEM").instance("ISRAM").comment = "ISRAM is 64KB minus VECS.";
VECS = prog.module("MEM").create("VECS");
prog.module("MEM").instance("VECS").createHeap = 0;
prog.module("MEM").instance("VECS").space  = "code";
%% -- C6711DSK Internal Memory Map: --
prog.module("MEM").instance("ISRAM").base    = 0x00000300;
prog.module("MEM").instance("ISRAM").len     =     0xfd00;
prog.module("MEM").instance("VECS").base     = 0x00000000;
prog.module("MEM").instance("VECS").len      =      0x300;
%%
%elseif (BoardType=="C6713DSK")
%% How to get access to the full 256kB when not using cache?  
%% The GEL file and the CCS Help for C6713DSK
%% each state that ISRAM only goes up to 0x30000.  XXX
prog.module("MEM").instance("IRAM").comment  = "C6713 ISRAM is 192KB.";
%% -- C6713DSK Internal Memory Map: --
prog.module("MEM").instance("IRAM").base     = 0x00000000;
prog.module("MEM").instance("IRAM").len      =    0x30000;
%%
%elseif (BoardType=="C6416DSK")
%% -- C6416DSK Internal Memory Map: --
prog.module("MEM").instance("ISRAM").base    = 0x00000000;
prog.module("MEM").instance("ISRAM").len     =   0x100000;
prog.module("MEM").instance("ISRAM").comment = "ISRAM is 1MB.";
%endif   
%%
%endif
%%
%closefile buff
%return buff
%endfunction  %% createDSKMEMObj



%function createEVMMEMObj() void
%openfile buff
%%
VECS = prog.module("MEM").create("VECS");
prog.module("MEM").instance("VECS").createHeap = 0;
prog.module("MEM").instance("VECS").space  = "code";
%%
%if (LinkerCommandFile == "Full_memory_map")
prog.module("MEM").instance("VECS").base = 0x02000000;
prog.module("MEM").instance("VECS").len = 0x00000300;
SBSRAM = prog.module("MEM").create("SBSRAM");
prog.module("MEM").instance("SBSRAM").createHeap = 0;
prog.module("MEM").instance("SBSRAM").base = 0x00400000;
prog.module("MEM").instance("SBSRAM").len = 0x00040000;
prog.module("MEM").instance("SBSRAM").space = "code/data";
SDRAM0 = prog.module("MEM").create("SDRAM0");
prog.module("MEM").instance("SDRAM0").createHeap = 0;
prog.module("MEM").instance("SDRAM0").base = 0x02000300;
prog.module("MEM").instance("SDRAM0").len = 0x003ffd00;
prog.module("MEM").instance("SDRAM0").space = "code/data";
SDRAM1 = prog.module("MEM").create("SDRAM1");
prog.module("MEM").instance("SDRAM1").createHeap = 0;
prog.module("MEM").instance("SDRAM1").base = 0x03000000;
prog.module("MEM").instance("SDRAM1").len = 0x00400000;
prog.module("MEM").instance("SDRAM1").space = "code/data";
%else
prog.module("MEM").instance("IPRAM").base = 0x00000200;
prog.module("MEM").instance("IPRAM").len = 0x0000fe00;
prog.module("MEM").instance("IDRAM").base = 0x80000000;
prog.module("MEM").instance("IDRAM").len = 0x00010000;
prog.module("MEM").instance("VECS").base = 0x00000000;
prog.module("MEM").instance("VECS").len = 0x00000200;
%endif
%%
%closefile buff
%return buff
%endfunction  %% createEVMMEMObj



%function createSWIObj( mem ) void
%openfile buff
%%
%if CompiledModel.FixedStepOpts.SolverMode == "SingleTasking"
SWI_0 = prog.module("SWI").create("SWI_0");
SWI_0.fxn = prog.extern("singleRateStep");
SWI_0.order = 3;
prog.module("SWI").instance("KNL_swi").order = 2;
prog.module("SWI").OBJMEMSEG = prog.get("%<mem>");
%endif
%%
%closefile buff
%return buff
%endfunction  %% createSWIObj



%function createLOGObj( mem ) void
%openfile buff
%%
prog.module("LOG").create("LOG_MW1");
prog.module("LOG").instance("LOG_MW1").bufSeg = prog.get("%<mem>");
%%
%closefile buff
%return buff
%endfunction  %% createLOGObj



%function addEDMA_HWI() void
%% use this function only if BoardType="C6711DSK" or "C6416DSK" or "C6713DSK"
%openfile buff
%%
prog.module("HWI").instance("HWI_INT8").fxn = prog.extern("EDMA_isr");
prog.module("HWI").instance("HWI_INT8").useDispatcher = 1;
%%
%closefile buff
%return buff
%endfunction  %% addEDMA_HWI



%function addDMA_HWI() void
%% use this function only if (BoardType="C6701EVM")
%openfile buff
%%
prog.module("HWI").instance("HWI_INT9").fxn = prog.extern("dma_isr");
prog.module("HWI").instance("HWI_INT9").useDispatcher = 1;
%%
%closefile buff
%return buff
%endfunction  %% addDMA_HWI



%function manageMCBSP() void
%% use this function only if (BoardType="C6701EVM")
%openfile buff
%%
mcbspCfg1 = prog.module("MCBSP").create("mcbspCfg1");
mcbspCfg1.mcbspXcrXwdlen1 = "32-bits";
assert.add('mcbspCfg1.mcbspXcrXwdLen2 == "32-bits"');
mcbspCfg1.mcbspRcrRfig = "Pulse ignored";
mcbspCfg1.mcbspRcrRwdlen1 = "32-bits";
assert.add('mcbspCfg1.mcbspRcrRwdlen2 == "32-bits"');
mcbspCfg1.mcbspRcr = 0x00A400A0;
mcbspCfg1.mcbspXcr = 0x00A000A0;
prog.module("HMCBSP").instance("Mcbsp_Port0").mcbspHandleEnable = 1;
prog.module("HMCBSP").instance("Mcbsp_Port0").mcbspEnablePreInit = 1;
prog.module("HMCBSP").instance("Mcbsp_Port0").mcbspPreInit = prog.get("mcbspCfg1");
%%
%closefile buff
%return buff
%endfunction  %% manageMCBSP



%function setupDMA() void
%% use this function only if (BoardType="C6701EVM")
%openfile buff
%%
externDeclDMA1SrcAddress = prog.module("ExternDecl").create("externDeclDMA1SrcAddress");
externDeclDMA1DstAddress = prog.module("ExternDecl").create("externDeclDMA1DstAddress");
dmaCfg1 = prog.module("DMA").create("dmaCfg1");
dmaGblCfg1 = prog.module("GDMA").create("dmaGblCfg1");
externDeclDMA1SrcAddress.comment = "DMA1 Source Address";
externDeclDMA1SrcAddress.bufType = "Uint32";
externDeclDMA1SrcAddress.bufName = "dac_buffer";
externDeclDMA1SrcAddress.bufSpec = "Array";
externDeclDMA1DstAddress.comment = "DMA1 Dst Address";
externDeclDMA1DstAddress.bufType = "Uint32";
externDeclDMA1DstAddress.bufName = "adc_buffer";
externDeclDMA1DstAddress.bufSpec = "Array";
dmaCfg1.dmaPrictlSrcDir = "Increment";
dmaCfg1.dmaPrictlDstDir = "Increment";
dmaCfg1.dmaPrictlRsync = "McBSP 0 Receive Event";
dmaCfg1.dmaPrictlWsync = "McBSP 0 Transmit Event";
dmaCfg1.dmaPrictlSplit = "Global Address Register A";
dmaCfg1.dmaPrictlPri = "DMA";
dmaCfg1.dmaPrictlTcint = "Enable";
dmaCfg1.dmaPrictlEmod = "Pause";
dmaCfg1.dmaPrictlSrcReload = "Global Address Register C";
dmaCfg1.dmaPrictlDstReload = "Global Address Register B";
dmaCfg1.dmaSecctlFrameIe = "Enable";
dmaCfg1.dmaSecctlBlockIe = "Disable";
dmaCfg1.dmaSecctlRsyncClr = "Clear";
dmaCfg1.dmaSecctlWsyncClr = "Clear";
dmaCfg1.dmaSrcAddrFormat = "Extern Decl. Obj.";
dmaCfg1.dmaSrcAddrSymbol = "dac_buffer";
dmaCfg1.dmaDstAddrFormat = "Extern Decl. Obj.";
dmaCfg1.dmaDstAddrSymbol = "adc_buffer";
dmaCfg1.dmaXfrcntFrameCountNumeric = 0x0002;
dmaCfg1.dmaXfrcntElementCountNumeric = 0x0040;
dmaCfg1.dmaPrictl = 0x6B634450;
dmaCfg1.dmaSecctl = 0x0000A008;
dmaCfg1.dmaSrcAddrFormatAdv = "Extern Decl. Obj.";
dmaCfg1.dmaDstAddrFormatAdv = "Extern Decl. Obj.";
dmaCfg1.dmaXfrcnt = 0x00020040;
dmaCfg1.dmaPrictlStart = "Start w/ Autoinit";
prog.module("HDMA").instance("DMA_Channel1").dmaHandleEnable = 1;
prog.module("HDMA").instance("DMA_Channel1").dmaEnablePreInit = 1;
prog.module("HDMA").instance("DMA_Channel1").dmaPreInit = prog.get("dmaCfg1");
dmaGblCfg1.dmaGbladdrANumeric = 0x018C0000;
dmaGblCfg1.dmaGbladdrBFormat = "Symbolic";
dmaGblCfg1.dmaGbladdrBSymbolic = "adc_buffer";
dmaGblCfg1.dmaGbladdrCFormat = "Symbolic";
dmaGblCfg1.dmaGbladdrCSymbolic = "dac_buffer";
dmaGblCfg1.dmaGblcntAFrameCountReload = 0x0002;
dmaGblCfg1.dmaGblcntAElementCountReload = 0x0040;
dmaGblCfg1.dmaGbladdrANumericAdv = 0x018C0000;
dmaGblCfg1.dmaGbladdrBFormatAdv = "Symbolic";
dmaGblCfg1.dmaGbladdrBSymbolicAdv = "adc_buffer";
dmaGblCfg1.dmaGbladdrCFormatAdv = "Symbolic";
dmaGblCfg1.dmaGbladdrCSymbolicAdv = "dac_buffer";
dmaGblCfg1.dmaGblcntAAdv = 0x00020040;
prog.module("GDMA").DMA_PRE_ALLOC_GBLADDRA = 1;
prog.module("GDMA").DMA_PRE_ALLOC_GBLADDRB = 1;
prog.module("GDMA").DMA_PRE_ALLOC_GBLADDRC = 1;
prog.module("GDMA").DMA_PRE_ALLOC_GBLCNTA = 1;
prog.module("GDMA").DMA_ENABLE_PRE_INIT = 1;
prog.module("GDMA").DMA_PRE_INIT = prog.get("dmaGblCfg1");
%%
%closefile buff
%return buff
%endfunction  %% addDMA_HWI



%function assignMEMObj( datamem, textmem, stackmem ) void
%openfile buff
%%
prog.module("MEM").NOMEMORYHEAPS = 1;
prog.module("MEM").STACKSIZE = %<STACKSIZE>;
%% BIOS Data
prog.module("MEM").ARGSSEG = prog.get("%<datamem>");
prog.module("MEM").STACKSEG = prog.get("%<stackmem>");
prog.module("MEM").GBLINITSEG = prog.get("%<datamem>");
prog.module("MEM").TRCDATASEG = prog.get("%<datamem>");
prog.module("MEM").SYSDATASEG = prog.get("%<datamem>");
prog.module("MEM").OBJSEG = prog.get("%<datamem>");
%% BIOS Code
prog.module("MEM").BIOSSEG = prog.get("%<textmem>");
prog.module("MEM").SYSINITSEG = prog.get("%<textmem>");
prog.module("MEM").HWISEG = prog.get("%<textmem>");
%if (BoardType=="C6416DSK" || BoardType=="C6713DSK")
prog.module("MEM").HWIVECSEG = prog.get("%<textmem>");
%else
prog.module("MEM").HWIVECSEG = prog.get("VECS");
%endif
prog.module("MEM").RTDXTEXTSEG = prog.get("%<textmem>");
%% Compiler Sections
prog.module("MEM").TEXTSEG = prog.get("%<textmem>");
prog.module("MEM").SWITCHSEG = prog.get("%<datamem>");
prog.module("MEM").BSSSEG = prog.get("%<datamem>");
prog.module("MEM").FARSEG = prog.get("%<datamem>");
prog.module("MEM").CINITSEG = prog.get("%<datamem>");
prog.module("MEM").PINITSEG = prog.get("%<datamem>");
prog.module("MEM").CONSTSEG = prog.get("%<datamem>");
prog.module("MEM").DATASEG = prog.get("%<datamem>");
prog.module("MEM").CIOSEG = prog.get("%<datamem>");
%%
prog.module("MEM").BIOSOBJSEG == prog.get("MEM_NULL");
prog.module("MEM").MALLOCSEG == prog.get("MEM_NULL"); 
%%
%closefile buff
%return buff
%endfunction  %% assignMEMObj



%function assignSYSObj( mem ) void
%openfile buff
%%
prog.module("IDL").OBJMEMSEG = prog.get("%<mem>");  
%% prog.module("LOG").OBJMEMSEG = prog.get("%<mem>");    
prog.module("QUE").OBJMEMSEG = prog.get("%<mem>");    
prog.module("LCK").OBJMEMSEG = prog.get("%<mem>");    
prog.module("STS").OBJMEMSEG = prog.get("%<mem>");    
prog.module("SYS").TRACESIZE = 0;    
prog.module("SYS").TRACESEG = prog.get("%<mem>");
prog.module("SYS").EXITFXN = prog.extern("exitprocessing");
%%
%closefile buff
%return buff
%endfunction  %% assignSYSObj



%function manageTSKObj() void
%openfile buff
%%
prog.module("TSK").instance("TSK_idle").stackMemSeg = prog.get("MEM_NULL");
prog.module("TSK").instance("TSK_idle").order = 1;
prog.module("TSK").ENABLETSK = 0;
assert.add('prog.module("TSK").OBJMEMSEG == prog.get("MEM_NULL")');
assert.add('prog.module("TSK").STACKSEG == prog.get("MEM_NULL")');
%%     
prog.module("IDL").instance("LNK_dataPump").order = 1; 
prog.module("IDL").instance("RTA_dispatcher").order = 2;   
prog.module("IDL").instance("IDL_cpuLoad").order = 3;   
%%
%closefile buff
%return buff
%endfunction  %% manageTSKObj



%function addTimerObj() void
%openfile buff
%%
timerCfg0 = prog.module("TIMER").create("timerCfg0");
prog.module("HWI").instance("HWI_INT15").fxn = prog.extern("Timer1_ISR");
prog.module("HWI").instance("HWI_INT15").useDispatcher = 1;
prog.module("HWI").instance("HWI_INT15").arg = 1;
%if (BoardType=="C6416DSK") 
timerCfg0.timerCtlClksrc = "(CPU clock)/8";
%else
timerCfg0.timerCtlClksrc = "(CPU clock)/4";
%endif
timerCfg0.timerPrd = %<IRInfo.timerIntPeriod>;
timerCfg0.timerCtlAdv = 0x00000200;
timerCfg0.timerPrdAdv = %<IRInfo.timerIntPeriod>;
prog.module("HTIMER").instance("Timer_Device1").timerHandleEnable = 1;
prog.module("HTIMER").instance("Timer_Device1").timerEnablePreInit = 1;
prog.module("HTIMER").instance("Timer_Device1").timerPreInit = prog.get("timerCfg0");
%%
%closefile buff
%return buff
%endfunction  %% addTimerObj



%function addRTDX( textmem ) void
%openfile buff
%%
%if FEVAL("isUsingHighSpeedRTDX_TItarget")
prog.module("RTDX").MODE = "HSRTDX";
%else
prog.module("RTDX").MODE = "JTAG";
%endif
prog.module("RTDX").ENABLERTDX = 1;
prog.module("MEM").RTDXTEXTSEG = prog.get("%<textmem>");
%if (EXISTS(::RTDXSrcSize) == TLC_TRUE && EXISTS(::RTDXSnkSize) == TLC_TRUE)
    %if ( ::RTDXSrcSize > ::RTDXSnkSize )
        %assign BufSzInBytes = ::RTDXSrcSize
    %else
        %assign BufSzInBytes = ::RTDXSnkSize            
    %endif
%elseif (EXISTS(::RTDXSrcSize) == TLC_TRUE)
    %assign BufSzInBytes = ::RTDXSrcSize            
%elseif (EXISTS(::RTDXSnkSize) == TLC_TRUE)
    %assign BufSzInBytes = ::RTDXSnkSize            
%endif
%% resize RTDX buffer if RTDX frames are "bigger" than what RTA already needs
%if ( BufSzInBytes > 256 )
prog.module("RTDX").BUFSIZE = %<BufSzInBytes+16>;         
%endif
assert.add('prog.module("HWI").instance("HWI_RESERVED1").useDispatcher == 1');
%%
%closefile buff
%return buff
%endfunction  %% addRTDX



%function manageInputOutputObj( datamem, textmem ) void
%openfile buff
%%
prog.module("LOG").instance("LOG_system").bufSeg = prog.get("%<datamem>");
prog.module("LOG").OBJMEMSEG = prog.get("%<datamem>");
%%
prog.module("HST").HOSTLINKTYPE = "RTDX";
prog.module("HST").instance("RTA_fromHost").bufSeg = prog.get("%<datamem>");
prog.module("HST").instance("RTA_toHost").bufSeg = prog.get("%<datamem>");
%%
%if (IRInfo.RTDXIntNeeded)
%<addRTDX(textmem)>
%else
prog.module("RTDX").ENABLERTDX = 1;
prog.module("MEM").RTDXTEXTSEG = prog.get("%<textmem>");
prog.module("RTDX").BUFSIZE = 272;
%endif
%%
%closefile buff
%return buff
%endfunction  %% manageInputOutputObj



%function addProfilingObj() void
%openfile buff
%%
%assign stsNameList = FEVAL("ti_profreport","getStsObjectNames")
%foreach k = SIZE(stsNameList,1)
%assign stsName = stsNameList[k]
%<stsName> = prog.module("STS").create("%<stsName>");
%<stsName>.unitType = "High resolution time based";
assert.add('%<stsName>.operation == "A * x"');
%if (BoardType=="C6416DSK") 
assert.add('%<stsName>.numA == 8');
%else
assert.add('%<stsName>.numA == 4');
%endif
%endforeach
%%
%closefile buff
%return buff
%endfunction  %% addProfilingObj



%function adjustCPUrateInfo( boardType ) void
%openfile buff
%%
%if (boardType == "c6711dsk")
prog.module("GBL").CLKOUT = 150.0000;
%elseif (boardType == "c6713dsk")
prog.module("GBL").CLKOUT = 225.0000;
%elseif (boardType == "c6416dsk")
prog.module("GBL").CLKOUT = 600.0000;
%elseif (boardType == "c6701evm")
%if (c6701evmCpuClockRate == "133MHz")
prog.module("GBL").CLKOUT = 133.0000;
%elseif (c6701evmCpuClockRate == "100MHz")
prog.module("GBL").CLKOUT = 100.0000;
%elseif (c6701evmCpuClockRate == "33.25MHz")
%% TCONF can't handle 33.2500 properly yet, don't do anything for now
%elseif (c6701evmCpuClockRate == "25MHz")
prog.module("GBL").CLKOUT = 25.0000;
%endif
%endif
%%
%closefile buff
%return buff
%endfunction  %% manageInputOutputObj



%% Function: createTCFFilec6711DSK ===================================================
%%
%% Abstract:
%%         Create tconf JavaScript according to selected memory map

%function createTCFFilec6711DSK() void
%assign CDBPath = CCSDir + "c6000/bios/include/c6211.cdb"
%if (LinkerCommandFile == "Internal_memory_map")
%assign DefaultMemory = "ISRAM"
%else
%assign DefaultMemory = "SDRAM"
%endif

%openfile tcfFile = "%<CompiledModel.Name>.tcf"
%%
load(utils.findFile('assert.tci'));
prog.load("%<CDBPath>");                                        // seed file
%%
prog.module("GBL").BOARDNAME = "c6711";
assert.add('prog.module("GBL").DSPSUBTYPE == 6711');
prog.module("GBL").CHIPTYPE = "6711";
%%
%if (CompiledModel.ConfigSet.ProdEndianess=="BigEndian")
prog.module("GBL").ENDIANMODE = "big";
assert.add('prog.module("GBL").CSLNAME == "csl6711e.lib"');
%else
prog.module("GBL").ENDIANMODE = "little";
assert.add('prog.module("GBL").CSLNAME == "csl6711.lib"');
%endif
%%
%<adjustCPUrateInfo("c6711dsk")>
%%
prog.module("GBL").C621XCONFIGUREL2 = 0;                        // L2 cache turned on later as needed     
%<createDSKMEMObj()>
%<assignMEMObj("%<DefaultMemory>", "%<DefaultMemory>", "%<DefaultMemory>")>
%%
%<createLOGObj("%<DefaultMemory>")>
%<createSWIObj("%<DefaultMemory>")>
%<manageTSKObj()>
%<manageInputOutputObj("%<DefaultMemory>", "%<DefaultMemory>")>
%<assignSYSObj("%<DefaultMemory>")>
%%
%if (IRInfo.DMAIntNeeded)
%<addEDMA_HWI()>
%endif
%if (IRInfo.timerIntNeeded)
%<addTimerObj()>
%endif
%if (ProfileGenCode)
%<addProfilingObj()>                                        // enables rtdx, too
%endif
%%
assert.check();
prog.gen("%<CompiledModel.Name>.cdb");
%%
%closefile tcfFile               
%endfunction  %% createTCFFilec6711DSK

%% Function: createTCFFilec6713DSK ===================================================
%%
%% Abstract:
%%         Create tconf JavaScript according to selected memory map

%function createTCFFilec6713DSK() void
%%%assign CDBPath = CCSDir + "c6000/bios/include/dsk6713.cdb"
%assign CDBPath = CCSDir + "c6000/bios/include/c6713.cdb"
%if (LinkerCommandFile == "Internal_memory_map")
%assign DefaultMemory = "IRAM"
%else
%assign DefaultMemory = "SDRAM"
%endif

%openfile tcfFile = "%<CompiledModel.Name>.tcf"
%%
load(utils.findFile('assert.tci'));
prog.load("%<CDBPath>");                                        // seed file
%%
%%  Set up PLL for the higher clock frequency.  (See dsk6713.cdb.)
prog.module("GBL").CALLUSERINITFXN = 1;
prog.module("GBL").USERINITFXN = prog.extern("GBL_setPLLto225MHz");
assert.add('prog.module("CLK").PRD == 56250');
assert.add('prog.module("CLK").INSTRUCTIONS == 225000');
%%
prog.module("GBL").BOARDNAME = "c6713";
%% The following property DSPSUBTYPE has a bug on the TI side 
%% for 6712/6713.  See DSK release notes.  
%% The intention is that this property should be "671x".
assert.add('prog.module("GBL").DSPSUBTYPE == 6711');   
prog.module("GBL").CHIPTYPE = "6713";
%%
%if (CompiledModel.ConfigSet.ProdEndianess=="BigEndian")
prog.module("GBL").ENDIANMODE = "big";
assert.add('prog.module("GBL").CSLNAME == "csl6713e.lib"');
%else
prog.module("GBL").ENDIANMODE = "little";
assert.add('prog.module("GBL").CSLNAME == "csl6713.lib"');
%endif
%%
%<adjustCPUrateInfo("c6713dsk")>
%%
prog.module("GBL").C621XCONFIGUREL2 = 0;                        // L2 cache turned on later as needed     
%<createDSKMEMObj()>
%<assignMEMObj("%<DefaultMemory>", "%<DefaultMemory>", "%<DefaultMemory>")>
%%
%<createLOGObj("%<DefaultMemory>")>
%<createSWIObj("%<DefaultMemory>")>
%<manageTSKObj()>
%<manageInputOutputObj("%<DefaultMemory>", "%<DefaultMemory>")>
%<assignSYSObj("%<DefaultMemory>")>
%%
%if (IRInfo.DMAIntNeeded)
%<addEDMA_HWI()>
%endif
%if (IRInfo.timerIntNeeded)
%<addTimerObj()>
%endif
%if (ProfileGenCode)
%<addProfilingObj()>                                        // enables rtdx, too
%endif
%%
assert.check();
prog.gen("%<CompiledModel.Name>.cdb");
%%
%closefile tcfFile               
%endfunction  %% createTCFFilec6713DSK

%% Function: createTCFFilec6416DSK ===================================================
%%
%% Abstract:
%%         Create tconf JavaScript according to selected memory map

%function createTCFFilec6416DSK() void
%assign CDBPath = CCSDir + "c6000/bios/include/c64xx.cdb"
%if (LinkerCommandFile == "Internal_memory_map")
%assign DefaultMemory = "ISRAM"
%else
%assign DefaultMemory = "SDRAM"
%endif

%openfile tcfFile = "%<CompiledModel.Name>.tcf"
%%
load(utils.findFile('assert.tci'));
prog.load("%<CDBPath>");                                       // seed file
%%
prog.module("GBL").BOARDNAME = "c6416";
assert.add('prog.module("GBL").DSPSUBTYPE == 6400');
prog.module("GBL").CHIPTYPE = "6416";
%if (CompiledModel.ConfigSet.ProdEndianess=="BigEndian")
prog.module("GBL").ENDIANMODE = "big";
assert.add('prog.module("GBL").CSLNAME == "csl6416e.lib"');
%else
prog.module("GBL").ENDIANMODE = "little";
assert.add('prog.module("GBL").CSLNAME == "csl6416.lib"');
%endif
%%
%<adjustCPUrateInfo("c6416dsk")>
%%
prog.module("GBL").C641XCONFIGUREL2 = 0;   // L2 cache turned on later as needed     
%<createDSKMEMObj()>
%<assignMEMObj("%<DefaultMemory>", "%<DefaultMemory>", "%<DefaultMemory>")>
%%
%<createLOGObj("%<DefaultMemory>")>
%<createSWIObj("%<DefaultMemory>")>
%<manageTSKObj()>
%<manageInputOutputObj("%<DefaultMemory>", "%<DefaultMemory>")>
%<assignSYSObj("%<DefaultMemory>")>
%%
%if (IRInfo.DMAIntNeeded)
%<addEDMA_HWI()>
%endif
%if (IRInfo.timerIntNeeded)
%<addTimerObj()>
%endif
%if (ProfileGenCode)
%<addProfilingObj()>                                        // enables rtdx, too
%endif
%%
assert.check();
prog.gen("%<CompiledModel.Name>.cdb");
%%
%closefile tcfFile               
%endfunction  %% createTCFFilec6416DSK



%% Function: createTCFFilec6701EVM ===================================================
%%
%% Abstract:
%%         Create tconf JavaScript according to selected memory map

%function createTCFFilec6701EVM() void
%assign CDBPath = CCSDir + "c6000/bios/include/c6xxx.cdb"

%if (LinkerCommandFile == "Internal_memory_map")
%assign DefaultDataMemory = "IDRAM"
%assign DefaultTextMemory = "IPRAM"
%assign DefaultStackMemory = "IDRAM"
%else
%assign DefaultDataMemory = "SDRAM0"
%assign DefaultTextMemory = "SDRAM1"
%assign DefaultStackMemory = "SBSRAM"
%endif

%openfile tcfFile = "%<CompiledModel.Name>.tcf"
%%
load(utils.findFile('assert.tci'));
prog.load("%<CDBPath>");                                        // seed file
%%
prog.module("GBL").BOARDNAME = "c6701";
assert.add('prog.module("GBL").DSPSUBTYPE == 6700');
prog.module("GBL").CHIPTYPE = "6701";
%%
%if (CompiledModel.ConfigSet.ProdEndianess=="BigEndian")
prog.module("GBL").ENDIANMODE = "big";
assert.add('prog.module("GBL").CSLNAME == "csl6701e.lib"');
%else
prog.module("GBL").ENDIANMODE = "little";
assert.add('prog.module("GBL").CSLNAME == "csl6701.lib"');
%endif
%%
%<adjustCPUrateInfo("c6701evm")>
%%
%<createEVMMEMObj()>
%<assignMEMObj("%<DefaultDataMemory>", "%<DefaultTextMemory>", "%<DefaultStackMemory>")>
%%
%<createLOGObj("%<DefaultDataMemory>")>
%<createSWIObj("%<DefaultDataMemory>")>
%<manageTSKObj()>
%<manageInputOutputObj("%<DefaultDataMemory>", "%<DefaultTextMemory>")>
%<assignSYSObj("%<DefaultDataMemory>")>
%%
%<manageMCBSP()>
%%
%if (IRInfo.DMAIntNeeded)
%<setupDMA()>
%<addDMA_HWI()>
%endif
%if (IRInfo.timerIntNeeded)
%<addTimerObj()>
%endif
%if (ProfileGenCode)
%<addProfilingObj()>                                        // enables rtdx, too
%endif
%%
assert.check();
prog.gen("%<CompiledModel.Name>.cdb");
%%
%closefile tcfFile         
%endfunction  %% createTCFFilec6701EVM



%%
%% Entry point
%%         Dispatches call to a function according to selected board

%% xxx We may want to create a new m-function that will do the same as the
%% next three lines (in order to improve the speed)
%assign CCSDir = FEVAL ("winqueryreg", "HKEY_LOCAL_MACHINE", "SOFTWARE\\Classes\\CLSID\\{DE4FA3E7-B47F-11D1-B009-0040055C1953}\\LocalServer32")
%assign CCSDir = FEVAL ("lower", CCSDir)
%assign CCSDir = FEVAL ("strrep", CCSDir, "cc\\bin\\cc_app.exe", "")
%assign CCSDir = FEVAL ("strrep", CCSDir, "\\", "/")

%if (BoardType=="C6711DSK")
%<createTCFFilec6711DSK()>\
%elseif (BoardType=="C6416DSK")
%<createTCFFilec6416DSK()>\
%elseif (BoardType=="C6713DSK")
%<createTCFFilec6713DSK()>\
%else
%<createTCFFilec6701EVM()>\
%endif   

%% [EOF] c6000_cdb.tlc
