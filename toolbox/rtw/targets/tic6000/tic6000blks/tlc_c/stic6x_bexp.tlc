%% $RCSfile: stic6x_bexp.tlc,v $
%% $Revision: 1.1.6.1 $
%% $Date: 2004/01/22 18:32:30 $
%%
%% Copyright 2001-2003 The MathWorks, Inc.
%%
%% Abstract: Compute <algorithm> using optimized TI C62/64 DSPLIB bexp fcn call

%implements stic6x_bexp "C"

%include "tiblksutil.tlc"

%% Function: BlockTypeSetup ==============================================
%function BlockTypeSetup(block, system) void

  %<Include_ti_header(block, "dsp_bexp")>

%endfunction %% BlockTypeSetup


%% Function: Outputs ==========================================================
%%
%function Outputs(block, system) Output
  %%
  %assign INPORT        = 0
  %assign OUTPORT       = 0
  %assign numChans      = getInportChans(INPORT)
  %assign numSamps      = getInportSamps(INPORT)
  %assign numSamps      = (LibBlockInputSignalIsComplex(INPORT)) ? (2 * numSamps) : (numSamps)
  %assign OutputAddress = "(short *)" + LibBlockOutputSignalAddr(OUTPORT, "", "", 0)
  %assign InputAddress  = "(const int *)" + LibBlockInputSignalAddr(INPORT, "", "", 0)
  /* C%<chipID.Value[0]>x DSP Library bexp (%<ParamSettings.FunctionName>) - '%<Name>' */
  %if (numChans == 1)
    %<LibBlockOutputSignal(OUTPORT, "", "", 0)> = DSP_bexp(%<InputAddress>, %<numSamps>);
  %else
    {
      const int *x         = %<InputAddress>;
      short     *y         = %<OutputAddress>;
      int        chanCount = %<numChans>;

      while (chanCount--) {
        *y++ = DSP_bexp(x, %<numSamps>);
        x += %<numSamps>;
      }
    }
  %endif

%endfunction

%% [EOF] stic6x_bexp.tlc
