%% $RCSfile: c6000_dma.tlc,v $
%% $Revision: 1.1.6.1 $
%% $Date: 2004/01/22 18:32:05 $
%% Copyright 2001-2003 The MathWorks, Inc.
%% part of the Target for C6000 DSP



%if !EXISTS("C6000_DMA_TLC")
%assign C6000_DMA_TLC = 1

%include "c6000_util.tlc"

%%  These helper functions may only be called after all the
%%  BlockInstanceSetup functions have run.  That is, the functions
%%  should only be called during mdlStart or later.


%% ==========================================================================
%% Function: renderDMADefinesC6701 
%% Abstract: 
%%      This function adds DMA constants for TMS320c6701 to chip header file

%function renderDMADefinesC6701(block) void
%openfile buff

/* DMA header --------------------------------------------------------------- */
/* see the TMS320C6000 Peripherals Reference Guide (SPRU190C)                 */
/* for technical specifications                                               */

/* Register Addresses                                                         */

/* DMA Channel 0                                                              */
#define DMA0_PRIMARY_CTRL_ADDR       0x01840000   /* DMA 0 PRI CTRL REG       */
#define DMA0_SECONDARY_CTRL_ADDR     0x01840008   /* DMA 0 SEC CTRL REG       */
#define DMA0_SRC_ADDR_ADDR           0x01840010   /* DMA 0 SRC ADDR           */
#define DMA0_DEST_ADDR_ADDR          0x01840018   /* DMA 0 DEST ADDR          */
#define DMA0_XFER_COUNTER_ADDR       0x01840020   /* DMA 0 TRANS CNT          */

/* DMA Channel 1                                                              */
#define DMA1_PRIMARY_CTRL_ADDR       0x01840040   /* DMA 1 PRI CTRL REG       */
#define DMA1_SECONDARY_CTRL_ADDR     0x01840048   /* DMA 1 SEC CTRL REG       */
#define DMA1_SRC_ADDR_ADDR           0x01840050   /* DMA 1 SRC ADDR           */
#define DMA1_DEST_ADDR_ADDR          0x01840058   /* DMA 1 DEST ADDR          */
#define DMA1_XFER_COUNTER_ADDR       0x01840060   /* DMA 1 TRANS CNT          */

/* DMA Channel 2 */
#define DMA2_PRIMARY_CTRL_ADDR       0x01840004   /* DMA 2 PRI CTRL REG       */
#define DMA2_SECONDARY_CTRL_ADDR     0x0184000C   /* DMA 2 SEC CTRL REG       */
#define DMA2_SRC_ADDR_ADDR           0x01840014   /* DMA 2 SRC ADDR           */
#define DMA2_DEST_ADDR_ADDR          0x0184001C   /* DMA 2 DEST ADDR          */
#define DMA2_XFER_COUNTER_ADDR       0x01840024   /* DMA 2 TRANS CNT          */

/* DMA Channel 3 */
#define DMA3_PRIMARY_CTRL_ADDR       0x01840044   /* DMA 3 PRI CTRL REG       */
#define DMA3_SECONDARY_CTRL_ADDR     0x0184004C   /* DMA 3 SEC CTRL REG       */
#define DMA3_SRC_ADDR_ADDR           0x01840054   /* DMA 3 SRC ADDR           */
#define DMA3_DEST_ADDR_ADDR          0x0184005C   /* DMA 3 DEST ADDR          */
#define DMA3_XFER_COUNTER_ADDR       0x01840064   /* DMA 3 TRANS CNT          */

/* DMA Auxiliary Control                                                      */
#define DMA_AUXCR_ADDR               0x01840070   /* AUX DMA CTRL REG         */

/* DMA Global Registers */
#define DMA_GCR_A_ADDR               0x01840028   /* GLOBAL CNT RELOADA       */
#define DMA_GCR_B_ADDR               0x0184002C   /* GLOBAL CNT RELOADB       */
#define DMA_GNDX_A_ADDR              0x01840030   /* GLOBAL INDEX REG A       */
#define DMA_GNDX_B_ADDR              0x01840034   /* GLOBAL INDEX REG B       */
#define DMA_GADDR_A_ADDR             0x01840038   /* GLOBAL ADDR REG A        */
#define DMA_GADDR_B_ADDR             0x0184003C   /* GLOBAL ADDR REG B        */
#define DMA_GADDR_C_ADDR             0x01840068   /* GLOBAL ADDR REG C        */
#define DMA_GADDR_D_ADDR             0x0184006C   /* GLOBAL ADDR REG D        */

/* Register Contents */

/* DMA Channel 0 */
#define DMA0_PRIMARY_CTRL    *(volatile unsigned int *)DMA0_PRIMARY_CTRL_ADDR
#define DMA0_SECONDARY_CTRL  *(volatile unsigned int *)DMA0_SECONDARY_CTRL_ADDR
#define DMA0_SRC_ADDR        *(volatile unsigned int *)DMA0_SRC_ADDR_ADDR
#define DMA0_DEST_ADDR       *(volatile unsigned int *)DMA0_DEST_ADDR_ADDR
#define DMA0_XFER_COUNTER    *(volatile unsigned int *)DMA0_XFER_COUNTER_ADDR

/* DMA Channel 1 */
#define DMA1_PRIMARY_CTRL    *(volatile unsigned int *)DMA1_PRIMARY_CTRL_ADDR
#define DMA1_SECONDARY_CTRL  *(volatile unsigned int *)DMA1_SECONDARY_CTRL_ADDR
#define DMA1_SRC_ADDR        *(volatile unsigned int *)DMA1_SRC_ADDR_ADDR
#define DMA1_DEST_ADDR       *(volatile unsigned int *)DMA1_DEST_ADDR_ADDR
#define DMA1_XFER_COUNTER    *(volatile unsigned int *)DMA1_XFER_COUNTER_ADDR

/* DMA Channel 2 */
#define DMA2_PRIMARY_CTRL    *(volatile unsigned int *)DMA2_PRIMARY_CTRL_ADDR
#define DMA2_SECONDARY_CTRL  *(volatile unsigned int *)DMA2_SECONDARY_CTRL_ADDR
#define DMA2_SRC_ADDR        *(volatile unsigned int *)DMA2_SRC_ADDR_ADDR
#define DMA2_DEST_ADDR       *(volatile unsigned int *)DMA2_DEST_ADDR_ADDR
#define DMA2_XFER_COUNTER    *(volatile unsigned int *)DMA2_XFER_COUNTER_ADDR

/* DMA Channel 3 */
#define DMA3_PRIMARY_CTRL    *(volatile unsigned int *)DMA3_PRIMARY_CTRL_ADDR
#define DMA3_SECONDARY_CTRL  *(volatile unsigned int *)DMA3_SECONDARY_CTRL_ADDR
#define DMA3_SRC_ADDR        *(volatile unsigned int *)DMA3_SRC_ADDR_ADDR
#define DMA3_DEST_ADDR       *(volatile unsigned int *)DMA3_DEST_ADDR_ADDR
#define DMA3_XFER_COUNTER    *(volatile unsigned int *)DMA3_XFER_COUNTER_ADDR

/* DMA Auxiliary Control */
#define DMA_AUXCR            *(volatile unsigned int *)DMA_AUXCR_ADDR

/* DMA Global Registers */
#define DMA_GCR_A            *(volatile unsigned int *)DMA_GCR_A_ADDR
#define DMA_GCR_B            *(volatile unsigned int *)DMA_GCR_B_ADDR
#define DMA_GNDX_A           *(volatile unsigned int *)DMA_GNDX_A_ADDR
#define DMA_GNDX_B           *(volatile unsigned int *)DMA_GNDX_B_ADDR 
#define DMA_GADDR_A          *(volatile unsigned int *)DMA_GADDR_A_ADDR
#define DMA_GADDR_B          *(volatile unsigned int *)DMA_GADDR_B_ADDR
#define DMA_GADDR_C          *(volatile unsigned int *)DMA_GADDR_C_ADDR
#define DMA_GADDR_D          *(volatile unsigned int *)DMA_GADDR_D_ADDR

/* Primary Control Register */

#define START                  0
#define START_SZ               2
#define STATUS                 2
#define STATUS_SZ              2
#define SRC_DIR                4
#define SRC_DIR_SZ             2
#define DST_DIR                6
#define DST_DIR_SZ             2
#define ESIZE                  8
#define ESIZE_SZ               2
#define SPLIT                 10
#define SPLIT_SZ               2
#define CNT_RELOAD            12
#define INDEX                 13
#define RSYNC                 14
#define RSYNC_SZ               5
#define WSYNC                 19
#define WSYNC_SZ               5
#define PRI                   24
#define TCINT                 25
#define FS                    26
#define EMOD                  27
#define SRC_RELOAD            28
#define SRC_RELOAD_SZ          2
#define DST_RELOAD            30
#define DST_RELOAD_SZ          2

/* Secondary Control Register */

#define SX_COND                0
#define SX_IE                  1
#define FRAME_COND             2
#define FRAME_IE               3
#define LAST_COND              4
#define LAST_IE                5
#define BLOCK_COND             6
#define BLOCK_IE               7
#define RDROP_COND             8
#define RDROP_IE               9
#define WDROP_COND            10
#define WDROP_IE              11
#define RSYNC_STAT            12
#define RSYNC_CLR             13
#define WSYNC_STAT            14
#define WSYNC_CLR             15
#define DMAC_EN               16
#define DMAC_EN_SZ             3

/* DMA Channel Transfer Counter Register */
#define ELEMENT_COUNT               0
#define ELEMENT_COUNT_SZ           16

#define FRAME_COUNT                16
#define FRAME_COUNT_SZ             16

/* DMA Global Count Reload Register Bits */
#define ELEMENT_COUNT_RELOAD        0
#define ELEMENT_COUNT_RELOAD_SZ    16

#define FRAME_COUNT_RELOAD         16
#define FRAME_COUNT_RELOAD_SZ      16


/* DMA Global Index Register Bits */
#define ELEMENT_INDEX               0
#define ELEMENT_INDEX_SZ           16 

#define FRAME_INDEX                16
#define FRAME_INDEX_SZ             16

/* DMA Global Address Register Bits */
#define SPLIT_ADDRESS               3
#define SPLIT_ADDRESS_SZ           29

/* DMA Auxiliary Control Register Bits */
#define CH_PRI                      0
#define CH_PRI_SZ                   4

#define AUXPRI                      4

/* Bitfield constants */
#define DMA_CH0              0x00
#define DMA_CH1              0x01
#define DMA_CH2              0x02
#define DMA_CH3              0x03

/* DMA Channel Primary Control Register bitfield values */

/* START */
#define DMA_STOP_VAL         0x00
#define DMA_START_VAL        0x01
#define DMA_PAUSE_VAL        0x02
#define DMA_AUTO_START_VAL   0x03

/* SRC DIR, DST DIR */
#define DMA_ADDR_NO_MOD      0x00
#define DMA_ADDR_INC         0x01
#define DMA_ADDR_DEC         0x02
#define DMA_ADDR_INDX        0x03

/* Synchronization Event Numbers */
#define SEN_NONE             0x00
#define SEN_TINT0            0x01
#define SEN_TINT1            0x02
#define SEN_SD_INT           0x03      
#define SEN_EXT_INT4         0x04
#define SEN_EXT_INT5         0x05
#define SEN_EXT_INT6         0x06
#define SEN_EXT_INT7         0x07
#define SEN_DMA_INT0         0x08
#define SEN_DMA_INT1         0x09
#define SEN_DMA_INT2         0x0A
#define SEN_DMA_INT3         0x0B
#define SEN_XEVT0            0x0C
#define SEN_REVT0            0x0D
#define SEN_XEVT1            0x0E
#define SEN_REVT1            0x0F
#define SEN_DSPINT           0x10

/* ESIZE defines */
#define DMA_ESIZE32          0x00
#define DMA_ESIZE16          0x01
#define DMA_ESIZE8           0x02

/* PRI defines */
#define DMA_CPU_PRI          0x00
#define DMA_DMA_PRI          0x01

/* SPLIT mode operation defines */
#define DMA_SPLIT_DIS        0x00
#define DMA_SPLIT_GARA       0x01
#define DMA_SPLIT_GARB       0x02
#define DMA_SPLIT_GARC       0x03

/* CNT RELOAD defines */
#define DMA_CNT_RELOADA      0x00
#define DMA_CNT_RELOADB      0x01

/* INDEX defines */
#define DMA_INDXA            0x00
#define DMA_INDXB            0x01

/* EMULATION MODE response defines */
#define DMA_NO_EM_HALT       0x00
#define DMA_EM_HALT          0x01

/* SRC/DST RELOAD defines */
#define DMA_RELOAD_NONE      0x00
#define DMA_RELOAD_GARB      0x01
#define DMA_RELOAD_GARC      0x02
#define DMA_RELOAD_GARD      0x03

/* DMAC EN Control */
#define DMAC_LO              0x00
#define DMAC_HI              0x01
#define DMAC_RSYNC_STAT      0x02
#define DMAC_WSYNC_STAT      0x03
#define DMAC_FRAME_COND      0x04
#define DMAC_BLOCK_COND      0x05

%closefile buff
%return buff
%endfunction %% renderDMADefinesC6701



%% ==========================================================================
%% Function: renderDMADefinesC671x 
%% Abstract: 
%%      This function renders DMA constants for TMS320c6711/6713

%function renderDMADefinesC671x(block) void
%openfile buff

/* Define EDMA Transfer Parameter Entry Fields */
#define     OPT				0*4			/* Options Parameter                    */
#define     SRC				1*4			/* SRC Address Parameter                */
#define     CNT				2*4			/* Count Parameter                      */
#define     DST				3*4			/* DST Address Parameter                */
#define     IDX				4*4			/* IDX Parameter                        */
#define     LNK				5*4			/* LNK Parameter                        */
						
/* Define EDMA Parameter RAM Addresses */ 
#define EVENT0_PARAMS 0x01A00000
#define EVENT1_PARAMS EVENT0_PARAMS + 0x18
#define EVENT2_PARAMS EVENT1_PARAMS + 0x18
#define EVENT3_PARAMS EVENT2_PARAMS + 0x18
#define EVENT4_PARAMS EVENT3_PARAMS + 0x18
#define EVENT5_PARAMS EVENT4_PARAMS + 0x18
#define EVENT6_PARAMS EVENT5_PARAMS + 0x18
#define EVENT7_PARAMS EVENT6_PARAMS + 0x18
#define EVENT8_PARAMS EVENT7_PARAMS + 0x18
#define EVENT9_PARAMS EVENT8_PARAMS + 0x18
#define EVENTA_PARAMS EVENT9_PARAMS + 0x18
#define EVENTB_PARAMS EVENTA_PARAMS + 0x18
#define EVENTC_PARAMS EVENTB_PARAMS + 0x18
#define EVENTD_PARAMS EVENTC_PARAMS + 0x18
#define EVENTE_PARAMS EVENTD_PARAMS + 0x18
#define EVENTF_PARAMS EVENTE_PARAMS + 0x18
#define EVENTN_PARAMS EVENTF_PARAMS + 0x18
#define EVENTO_PARAMS EVENTN_PARAMS + 0x18

%closefile buff
%return buff
%endfunction %% renderDMADefinesC671x

%% ==========================================================================
%% Function: renderDMADefinesC6416 
%% Abstract: 
%%      This function renders DMA constants for TMS320c6416

%function renderDMADefinesC6416(block) void
%openfile buff

/* Define EDMA Transfer Parameter Entry Fields */
#define     OPT				0*4			/* Options Parameter                    */
#define     SRC				1*4			/* SRC Address Parameter                */
#define     CNT				2*4			/* Count Parameter                      */
#define     DST				3*4			/* DST Address Parameter                */
#define     IDX				4*4			/* IDX Parameter                        */
#define     LNK				5*4			/* LNK Parameter                        */
						
/* Consult C6000 Peripherals reference if further EDMA #defines are needed */

%closefile buff
%return buff
%endfunction %% renderDMADefinesC6416



%% ==========================================================================
%% Function: renderConfigDMAFunctionPrototype  
%% Abstract: 
%%      This function adds function prototype to chip header file
%%

%function renderConfigDMAFunctionPrototype(block) void
%openfile buff
void config_DMA(void);
%closefile buff
%return buff
%endfunction %% renderConfigDMAFunctionPrototype



%% ==========================================================================
%% Function: renderConfigDMAFunctionC6701 
%% Abstract: 
%%      This function adds definition of ConfigDMA function for TMS320c6701 

%function renderConfigDMAFunctionC6701(block) void
%openfile buff

/* Function: config_DMA ------------------------------------------------
 *
 * Abstract:
 *      This function configures DMA according to the model requirements	
 */
 
void config_DMA(void)
{
    const int samplesPerFrame = %<FrameSize>;
	%%
	%% This DMA configuration function handles all three of the
	%% following situations:
	%%   A/D only
	%%   D/A only
	%%   Both A/D and D/A
	%%
	%assign usingADC   = EXISTS("::CompiledModel.c6701evm_adc_instance") || %<EXISTS("::CompiledModel.c6711dsk_adc_instance")>
	%assign usingDAC   = EXISTS("::CompiledModel.c6701evm_dac_instance") || %<EXISTS("::CompiledModel.c6711dsk_dac_instance")>
	%assign AD_Mode    = usingADC && !usingDAC
	%assign DA_Mode    = usingDAC && !usingADC
	%assign Split_Mode = usingADC && usingDAC	
	%assign dst_reload = (DA_Mode)    ? "DMA_RELOAD_NONE" : "DMA_RELOAD_GARB"
	%assign src_reload = (AD_Mode)    ? "DMA_RELOAD_NONE" : "DMA_RELOAD_GARC"
	%assign wsync      = (AD_Mode)    ? "SEN_NONE"        : "SEN_XEVT0"
	%assign rsync      = (DA_Mode)    ? "SEN_NONE"        : "SEN_REVT0"
	%assign split      = (Split_Mode) ? "DMA_SPLIT_GARA"  : "DMA_SPLIT_DIS"
	%assign dst_dir    = (DA_Mode)    ? "DMA_ADDR_NO_MOD" : "DMA_ADDR_INC"
	%assign src_dir    = (AD_Mode)    ? "DMA_ADDR_NO_MOD" : "DMA_ADDR_INC"
	%%
   /* define control register values */
    const unsigned int pri_ctl_word  = 
          MASK(%<dst_reload>, DST_RELOAD)
        | MASK(%<src_reload>, SRC_RELOAD)
        | MASK(DMA_EM_HALT, EMOD)
        | MASK(0, FS)
        | MASK(1, TCINT)
        | MASK(DMA_DMA_PRI, PRI)
        | MASK(%<wsync>, WSYNC)
        | MASK(%<rsync>, RSYNC)
        | MASK(DMA_INDXA, INDEX)
        | MASK(DMA_CNT_RELOADA, CNT_RELOAD)
        | MASK(%<split>, SPLIT)
        | MASK(DMA_ESIZE32, ESIZE)
        | MASK(%<dst_dir>, DST_DIR)
        | MASK(%<src_dir>, SRC_DIR)
        | MASK(DMA_STOP_VAL, START);

    const unsigned int sec_ctl_word  =
          MASK(0, SX_IE)
        | MASK(1, FRAME_IE)
        | MASK(0, LAST_IE)
        | MASK(0, BLOCK_IE)
        | MASK(0, RDROP_IE)
        | MASK(0, WDROP_IE)
        | MASK(1, RSYNC_CLR)
        | MASK(1, WSYNC_CLR)
        | MASK(DMAC_LO, DMAC_EN);

    const unsigned int chn_xfer_cntr =
          MASK(samplesPerFrame, ELEMENT_COUNT)
        | MASK(2, FRAME_COUNT);

    %assign src_addr = (AD_Mode) ? "MCBSP0_ADDR"        : "(unsigned int)dac_buffer"
    %assign dst_addr = (DA_Mode) ? "MCBSP0_ADDR + 0x04" : "(unsigned int)adc_buffer"
    %%
    /* Initialize memory mapped DMA registers */
    DMA1_PRIMARY_CTRL   = pri_ctl_word;
    DMA1_SECONDARY_CTRL = sec_ctl_word;
    DMA1_SRC_ADDR       = %<src_addr>;
    DMA1_DEST_ADDR      = %<dst_addr>;
    DMA1_XFER_COUNTER   = chn_xfer_cntr;
    %%
    %if Split_Mode
    DMA_GADDR_A         = MCBSP0_ADDR;
    %endif
    %%
    %if !DA_Mode        %% Split or AD
    DMA_GADDR_B         = (unsigned int)adc_buffer;
    %endif
    %%
    %if !AD_Mode        %% Split or DA
    DMA_GADDR_C         = (unsigned int)dac_buffer; 
    %endif
    %%
    DMA_GCR_A           = chn_xfer_cntr; 
}

%closefile buff
%return buff
%endfunction %% renderConfigDMAFunctionC6701



%% ==========================================================================
%% Function: renderConfigDMAFunctionC6711 
%% Abstract: 
%%      This function adds definition of ConfigDMA function for TMS320c6711 

%function renderConfigDMAFunctionC6711(block) void
%openfile buff

/* Function: config_DMA ------------------------------------------------
 *
 * Abstract:
 *      This function configures DMA according to the model requirements
 *      (EDMA - Enhanced Direct Memory Transfer used)
 */
 
void config_DMA(void)
{
	/*
	Assumes hMcbsp has been initialized to correct port for codec: 
	- for onboard codec, use EDMA events for McBSP0 and 16-bit elements
	- for TMDX326040 and PCM3006 daughtercards codecs, use EDMA events for McBSP1 and 32-bit elements
	The FRAME_SIZE parameter must be equal to the number of sample sets (rows), not the number of samples.
	*/
	
	%% initialization required for onboard DSK codec 
	%if EXISTS("::CompiledModel.c6711dsk_adc_instance") || EXISTS("::CompiledModel.c6711dsk_dac_instance")
		const int xmt_event = EDMA_CHA_XEVT0;
		const int rcv_event = EDMA_CHA_REVT0;
		const int element_size = EDMA_OPT_ESIZE_16BIT;
	%endif
	
	%% initialization for TI analog daughtercard
	%if EXISTS("::CompiledModel.tmdx326040_adc_instance") || EXISTS("::CompiledModel.tmdx326040_dac_instance")
		const int xmt_event = EDMA_CHA_XEVT1;
		const int rcv_event = EDMA_CHA_REVT1;
		const int element_size = EDMA_OPT_ESIZE_32BIT;
	%endif

	/* General EDMA Initialization */
	EDMA_reset( EDMA_HINV );   /* Clear all pending events              */
	EDMA_RSET(CIER,0x0000);    /* Disable all events to Interrupt       */
	EDMA_RSET(CIPR,0xFFFF);    /* Clear all pending Queued EDMA ints    */
	
    hEdma_xmt			= EDMA_open( xmt_event, 0 );
    hEdma_rcv			= EDMA_open( rcv_event, 0 );
    hEdma_rld_ping_rcv	= EDMA_allocTable( -1 );
    hEdma_rld_pong_rcv	= EDMA_allocTable( -1 );
    hEdma_rld_ping_xmt	= EDMA_allocTable( -1 );
    hEdma_rld_pong_xmt	= EDMA_allocTable( -1 );

	/* Initialize EDMA for Transfer from McBSP on Receipt of New Sample	*/
    EDMA_configArgs(
  	  hEdma_rcv,
      EDMA_OPT_RMK(
        EDMA_OPT_PRI_HIGH,
        element_size,
        EDMA_OPT_2DS_NO,
        EDMA_OPT_SUM_NONE,
        EDMA_OPT_2DD_NO,
        EDMA_OPT_DUM_INC,
        EDMA_OPT_TCINT_YES,
        EDMA_OPT_TCC_OF(0X4),
        EDMA_OPT_LINK_YES,
        EDMA_OPT_FS_NO),
%if (CompiledModel.ConfigSet.ProdEndianess!="BigEndian") || EXISTS("::CompiledModel.tmdx326040_adc_instance")      
  	  MCBSP_getRcvAddr(hMcbsp),
%else
  	  MCBSP_getRcvAddr(hMcbsp)+2,
%endif
  	  FRAME_SIZE,
  	  (Uns)&ping_RX[0],
  	  EDMA_IDX_DEFAULT,
  	  EDMA_RLD_RMK( 0,hEdma_rld_pong_rcv )
    );
    
	/* Initialize EDMA Reload Parameters for PingRX Buffer */
    EDMA_configArgs(
  	  hEdma_rld_ping_rcv,
      EDMA_OPT_RMK(
        EDMA_OPT_PRI_HIGH,
        element_size,
        EDMA_OPT_2DS_NO,
        EDMA_OPT_SUM_NONE,
        EDMA_OPT_2DD_NO,
        EDMA_OPT_DUM_INC,
        EDMA_OPT_TCINT_YES,
        EDMA_OPT_TCC_OF(0X4),
        EDMA_OPT_LINK_YES,
        EDMA_OPT_FS_NO),
%if (CompiledModel.ConfigSet.ProdEndianess!="BigEndian") || EXISTS("::CompiledModel.tmdx326040_adc_instance") 
  	  MCBSP_getRcvAddr(hMcbsp),
%else
  	  MCBSP_getRcvAddr(hMcbsp)+2,
%endif
  	  FRAME_SIZE,
  	  (Uns)&ping_RX[0],
  	  EDMA_IDX_DEFAULT,
  	  EDMA_RLD_RMK( 0, hEdma_rld_pong_rcv )
    );
	
	/* Initialize EDMA Reload Parameters for PongRX Buffer */
    EDMA_configArgs(
  	  hEdma_rld_pong_rcv,
      EDMA_OPT_RMK(
        EDMA_OPT_PRI_HIGH,
        element_size,
        EDMA_OPT_2DS_NO,
        EDMA_OPT_SUM_NONE,
        EDMA_OPT_2DD_NO,
        EDMA_OPT_DUM_INC,
        EDMA_OPT_TCINT_YES,
        EDMA_OPT_TCC_OF(0X5),
        EDMA_OPT_LINK_YES,
        EDMA_OPT_FS_NO),
%if (CompiledModel.ConfigSet.ProdEndianess!="BigEndian") || EXISTS("::CompiledModel.tmdx326040_adc_instance")  
  	  MCBSP_getRcvAddr(hMcbsp),
%else
  	  MCBSP_getRcvAddr(hMcbsp)+2,
%endif
  	  FRAME_SIZE,
  	  (Uns)&pong_RX[0],
  	  EDMA_IDX_DEFAULT,
  	  EDMA_RLD_RMK( 0, hEdma_rld_ping_rcv )
    );

	/* Initialize EDMA for Transfer Samples back to McBSP when TXer is Ready */
    EDMA_configArgs(
  	  hEdma_xmt,
      EDMA_OPT_RMK(
        EDMA_OPT_PRI_LOW,
        element_size,
        EDMA_OPT_2DS_NO,
        EDMA_OPT_SUM_INC,
        EDMA_OPT_2DD_NO,
        EDMA_OPT_DUM_NONE,
        EDMA_OPT_TCINT_YES,
        EDMA_OPT_TCC_OF(0X6),
        EDMA_OPT_LINK_YES,
        EDMA_OPT_FS_NO),
  	  (Uns)&pong_TX[0],
  	  FRAME_SIZE,
  	  MCBSP_getXmtAddr(hMcbsp),
  	  EDMA_IDX_DEFAULT,
  	  EDMA_RLD_RMK( 0, hEdma_rld_ping_xmt )
    );

	/* Initialize EDMA Reload Parameters for PingTX Buffer */
    EDMA_configArgs(
  	  hEdma_rld_ping_xmt,
      EDMA_OPT_RMK(
        EDMA_OPT_PRI_LOW,
        element_size,
        EDMA_OPT_2DS_NO,
        EDMA_OPT_SUM_INC,
        EDMA_OPT_2DD_NO,
        EDMA_OPT_DUM_NONE,
        EDMA_OPT_TCINT_YES,
        EDMA_OPT_TCC_OF(0X7),
        EDMA_OPT_LINK_YES,
        EDMA_OPT_FS_NO),
  	  (Uns)&ping_TX[0],
  	  FRAME_SIZE,
  	  MCBSP_getXmtAddr(hMcbsp),
  	  EDMA_IDX_DEFAULT,
  	  EDMA_RLD_RMK( 0, hEdma_rld_pong_xmt )
    );

	/* Initialize EDMA Reload Parameters for PongTX Buffer */
	EDMA_configArgs(
  	  hEdma_rld_pong_xmt,
      EDMA_OPT_RMK(
        EDMA_OPT_PRI_LOW,
        element_size,
        EDMA_OPT_2DS_NO,
        EDMA_OPT_SUM_INC,
        EDMA_OPT_2DD_NO,
        EDMA_OPT_DUM_NONE,
        EDMA_OPT_TCINT_YES,
        EDMA_OPT_TCC_OF(0X6),
        EDMA_OPT_LINK_YES,
        EDMA_OPT_FS_NO),
  	  (Uns)&pong_TX[0],
  	  FRAME_SIZE,
  	  MCBSP_getXmtAddr(hMcbsp),
  	  EDMA_IDX_DEFAULT,
  	  EDMA_RLD_RMK( 0, hEdma_rld_ping_xmt )
    );
	
	EDMA_intEnable(4);
	EDMA_intEnable(5);
	EDMA_intEnable(6);
	EDMA_intEnable(7);

    EDMA_enableChannel( hEdma_xmt );			
    EDMA_enableChannel( hEdma_rcv );
}

%closefile buff
%return buff
%endfunction %% renderConfigDMAFunctionC6711


%% ==========================================================================
%% Function: renderConfigDMAFunctionAIC23 
%% Abstract: 
%%      This function adds definition of ConfigDMA function for AIC23 

%function renderConfigDMAFunctionAIC23(block) void
%openfile buff

/* Function: config_DMA ------------------------------------------------
 *
 * Abstract:
 *      This function configures DMA according to the model requirements
 *      (EDMA - Enhanced Direct Memory Transfer used)
 *      For AIC23, the EDMA is set to handle 2*FRAME_SIZE elements,
 *      since the codec always runs in stereo mode and always sends
 *      L and R as separate words to the serial port.  
 */
 
void config_DMA(void)
{
%if (BoardType=="C6416DSK")
    %assign xmtEvent = "EDMA_CHA_XEVT2"
    %assign rcvEvent = "EDMA_CHA_REVT2"
%else   %% C6713DSK:
    %assign xmtEvent = "EDMA_CHA_XEVT1"
    %assign rcvEvent = "EDMA_CHA_REVT1"
%endif
    const int xmt_event = %<xmtEvent>; 
    const int rcv_event = %<rcvEvent>;

%if (DataFormat=="16BIT")
    const int element_size = EDMA_OPT_ESIZE_16BIT;
%else  
    %% 20-, 24-, 32-bit transfers are packed into 32 bits 
    %% as far as the EDMA is concerned
    const int element_size = EDMA_OPT_ESIZE_32BIT;
%endif

     /* General EDMA Initialization */
     EDMA_reset( EDMA_HINV );   /* Clear all pending events              */
     EDMA_RSET(CIER,0x0000);    /* Disable all events to Interrupt       */
     EDMA_RSET(CIPR,0xFFFF);    /* Clear all pending Queued EDMA ints    */
     
     hEdma_xmt			= EDMA_open( xmt_event, 0 );
     hEdma_rcv			= EDMA_open( rcv_event, 0 );
     hEdma_rld_ping_rcv	= EDMA_allocTable( -1 );
     hEdma_rld_pong_rcv	= EDMA_allocTable( -1 );
     hEdma_rld_ping_xmt	= EDMA_allocTable( -1 );
     hEdma_rld_pong_xmt	= EDMA_allocTable( -1 );

     /* Initialize EDMA for Transfer from Data McBSP on Receipt of New Sample	*/
     EDMA_configArgs(
          hEdma_rcv,
          EDMA_OPT_RMK(
               EDMA_OPT_PRI_HIGH,
               element_size,
               EDMA_OPT_2DS_NO,
               EDMA_OPT_SUM_NONE,
               EDMA_OPT_2DD_NO,
               EDMA_OPT_DUM_INC,
               EDMA_OPT_TCINT_YES,
               EDMA_OPT_TCC_OF(0X4),
%% The following 5 register fields only exist on C64.
%if BoardType=="C6416DSK"
               EDMA_OPT_TCCM_DEFAULT, 
               EDMA_OPT_ATCINT_DEFAULT, 
               EDMA_OPT_ATCC_DEFAULT, 
               EDMA_OPT_PDTS_DEFAULT, 
               EDMA_OPT_PDTD_DEFAULT,
%endif
               EDMA_OPT_LINK_YES,
               EDMA_OPT_FS_NO),
%if ((CompiledModel.ConfigSet.ProdEndianess=="BigEndian") && (DataFormat == "16BIT")) 
          MCBSP_getRcvAddr(hMcbspData)+2,
%else
          MCBSP_getRcvAddr(hMcbspData),
%endif
          FRAME_SIZE*2,
          (Uns)&ping_RX[0],
          EDMA_IDX_DEFAULT,
          EDMA_RLD_RMK( 0,hEdma_rld_pong_rcv )
     );

     /* Initialize EDMA Reload Parameters for PingRX Buffer */
     EDMA_configArgs(
         hEdma_rld_ping_rcv,
         EDMA_OPT_RMK(
             EDMA_OPT_PRI_HIGH,
             element_size,
             EDMA_OPT_2DS_NO,
             EDMA_OPT_SUM_NONE,
             EDMA_OPT_2DD_NO,
             EDMA_OPT_DUM_INC,
             EDMA_OPT_TCINT_YES,
             EDMA_OPT_TCC_OF(0X4),
%% The following 5 register fields only exist on C64.
%if BoardType=="C6416DSK"
             EDMA_OPT_TCCM_DEFAULT, 
             EDMA_OPT_ATCINT_DEFAULT, 
             EDMA_OPT_ATCC_DEFAULT, 
             EDMA_OPT_PDTS_DEFAULT, 
             EDMA_OPT_PDTD_DEFAULT,
%endif
             EDMA_OPT_LINK_YES,
             EDMA_OPT_FS_NO),
%if ((CompiledModel.ConfigSet.ProdEndianess=="BigEndian") && (DataFormat == "16BIT")) 
          MCBSP_getRcvAddr(hMcbspData)+2,
%else
          MCBSP_getRcvAddr(hMcbspData),
%endif
         FRAME_SIZE*2, 
         (Uns)&ping_RX[0],
         EDMA_IDX_DEFAULT,
         EDMA_RLD_RMK( 0, hEdma_rld_pong_rcv )
     );
     
     /* Initialize EDMA Reload Parameters for PongRX Buffer */
     EDMA_configArgs(
         hEdma_rld_pong_rcv,
         EDMA_OPT_RMK(
             EDMA_OPT_PRI_HIGH,
             element_size,
             EDMA_OPT_2DS_NO,
             EDMA_OPT_SUM_NONE,
             EDMA_OPT_2DD_NO,
             EDMA_OPT_DUM_INC,
             EDMA_OPT_TCINT_YES,
             EDMA_OPT_TCC_OF(0X5),
%% The following 5 register fields only exist on C64.
%if BoardType=="C6416DSK"
             EDMA_OPT_TCCM_DEFAULT, 
             EDMA_OPT_ATCINT_DEFAULT, 
             EDMA_OPT_ATCC_DEFAULT, 
             EDMA_OPT_PDTS_DEFAULT, 
             EDMA_OPT_PDTD_DEFAULT,
%endif
             EDMA_OPT_LINK_YES,
             EDMA_OPT_FS_NO),
%if ((CompiledModel.ConfigSet.ProdEndianess=="BigEndian") && (DataFormat == "16BIT")) 
         MCBSP_getRcvAddr(hMcbspData)+2,
%else
         MCBSP_getRcvAddr(hMcbspData),
%endif
         FRAME_SIZE*2, 
         (Uns)&pong_RX[0],
         EDMA_IDX_DEFAULT,
         EDMA_RLD_RMK( 0, hEdma_rld_ping_rcv )
     );
     
     /* Initialize EDMA for Transfer Samples back to McBSP when TXer is Ready */
     EDMA_configArgs(
         hEdma_xmt,
         EDMA_OPT_RMK(
             EDMA_OPT_PRI_LOW,
             element_size,
             EDMA_OPT_2DS_NO,
             EDMA_OPT_SUM_INC,
             EDMA_OPT_2DD_NO,
             EDMA_OPT_DUM_NONE,
             EDMA_OPT_TCINT_YES,
             EDMA_OPT_TCC_OF(0X6),
%% The following 5 register fields only exist on C64.
%if BoardType=="C6416DSK"
             EDMA_OPT_TCCM_DEFAULT, 
             EDMA_OPT_ATCINT_DEFAULT, 
             EDMA_OPT_ATCC_DEFAULT, 
             EDMA_OPT_PDTS_DEFAULT, 
             EDMA_OPT_PDTD_DEFAULT,
%endif
             EDMA_OPT_LINK_YES,
             EDMA_OPT_FS_NO),
         (Uns)&pong_TX[0],
         FRAME_SIZE*2, 
%if ((CompiledModel.ConfigSet.ProdEndianess=="BigEndian") && (DataFormat == "16BIT")) 
         MCBSP_getXmtAddr(hMcbspData)+2,
%else
         MCBSP_getXmtAddr(hMcbspData),
%endif
         EDMA_IDX_DEFAULT,
         EDMA_RLD_RMK( 0, hEdma_rld_ping_xmt )
     );
     
     /* Initialize EDMA Reload Parameters for PingTX Buffer */
     EDMA_configArgs(
         hEdma_rld_ping_xmt,
         EDMA_OPT_RMK(
             EDMA_OPT_PRI_LOW,
             element_size,
             EDMA_OPT_2DS_NO,
             EDMA_OPT_SUM_INC,
             EDMA_OPT_2DD_NO,
             EDMA_OPT_DUM_NONE,
             EDMA_OPT_TCINT_YES,
             EDMA_OPT_TCC_OF(0X7),
%% The following 5 register fields only exist on C64.
%if BoardType=="C6416DSK"
             EDMA_OPT_TCCM_DEFAULT, 
             EDMA_OPT_ATCINT_DEFAULT, 
             EDMA_OPT_ATCC_DEFAULT, 
             EDMA_OPT_PDTS_DEFAULT, 
             EDMA_OPT_PDTD_DEFAULT,
%endif
             EDMA_OPT_LINK_YES,
             EDMA_OPT_FS_NO),
         (Uns)&ping_TX[0],
         FRAME_SIZE*2, 
%if ((CompiledModel.ConfigSet.ProdEndianess=="BigEndian") && (DataFormat == "16BIT")) 
         MCBSP_getXmtAddr(hMcbspData)+2,
%else
         MCBSP_getXmtAddr(hMcbspData),
%endif
         EDMA_IDX_DEFAULT,
         EDMA_RLD_RMK( 0, hEdma_rld_pong_xmt )
     );
     
     /* Initialize EDMA Reload Parameters for PongTX Buffer */
     EDMA_configArgs(
         hEdma_rld_pong_xmt,
         EDMA_OPT_RMK(
             EDMA_OPT_PRI_LOW,
             element_size,
             EDMA_OPT_2DS_NO,
             EDMA_OPT_SUM_INC,
             EDMA_OPT_2DD_NO,
             EDMA_OPT_DUM_NONE,
             EDMA_OPT_TCINT_YES,
             EDMA_OPT_TCC_OF(0X6),
%% The following 5 register fields only exist on C64.
%if BoardType=="C6416DSK"
             EDMA_OPT_TCCM_DEFAULT, 
             EDMA_OPT_ATCINT_DEFAULT, 
             EDMA_OPT_ATCC_DEFAULT, 
             EDMA_OPT_PDTS_DEFAULT, 
             EDMA_OPT_PDTD_DEFAULT,
%endif
             EDMA_OPT_LINK_YES,
             EDMA_OPT_FS_NO),
         (Uns)&pong_TX[0],
         FRAME_SIZE*2, 
%if ((CompiledModel.ConfigSet.ProdEndianess=="BigEndian") && (DataFormat == "16BIT")) 
         MCBSP_getXmtAddr(hMcbspData)+2,
%else
         MCBSP_getXmtAddr(hMcbspData),
%endif
         EDMA_IDX_DEFAULT,
         EDMA_RLD_RMK( 0, hEdma_rld_ping_xmt )
     );
     
     EDMA_intEnable(4);
     EDMA_intEnable(5);
     EDMA_intEnable(6);
     EDMA_intEnable(7);
     
     EDMA_enableChannel( hEdma_xmt );			
     EDMA_enableChannel( hEdma_rcv );

}
%closefile buff
%return buff
%endfunction %% renderConfigDMAFunctionAIC23



%% ==========================================================================
%% Function Create_config_DMA
%% Abstract: 
%%      This function generates code needed for DMA configuration

%function Create_config_DMA(block) void
    %if JustCreatedCompiledModelRecord("c6000_config_DMA")
        %%
        %openfile hdrFile = "MW_c6xxx_csl.h", "a"
        %openfile srcFile = "MW_c6xxx_csl.c", "a"     
        %%
        %selectfile hdrFile
        %% Create and cache the function prototype
        %<renderConfigDMAFunctionPrototype(block)>
        %%
        %<AddUtilDefinesToModelH(block)>
        %% Create and cache DMA defines and function definition
        %if BoardType=="C6711DSK"
            %<renderDMADefinesC671x(block)>
			%selectfile srcFile
			%<renderConfigDMAFunctionC6711(block)>  
        %elseif BoardType=="C6713DSK"
            %<renderDMADefinesC671x(block)>
			%selectfile srcFile
			%<renderConfigDMAFunctionAIC23(block)>  
        %elseif BoardType=="C6416DSK"
            %<renderDMADefinesC6416(block)>
			%selectfile srcFile
			%<renderConfigDMAFunctionAIC23(block)>  
        %elseif BoardType=="C6701EVM"
            %<renderDMADefinesC6701(block)>
            %selectfile srcFile
            %<renderConfigDMAFunctionC6701(block)>            
        %endif
        %%
        %closefile hdrFile
        %closefile srcFile
        %%
    %endif %% only allow config dma to be created once
%endfunction %% Create_config_DMA()
	
	
	
%endif %% C6000_DMA_TLC

%% [EOF] c6000_dma.tlc
