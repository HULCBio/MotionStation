%% $RCSfile: c6000_satmpy.tlc,v $
%% $Revision: 1.1.6.2 $     
%% $Date: 2004/04/08 21:00:55 $
%% Copyright 2001-2003 The MathWorks, Inc.
%% part of the Target for C6701 EVM

%if !EXISTS("C6000_SATMPY_TLC")
%assign C6000_SATMPY_TLC = 1
   


    %% Function:  create_sat_mpyStereo ======================================
    %%
    %% Creates a file containing a linear assembly function for
    %% multiplication with saturation
    %%
    %function create_sat_mpyStereo(block, upperBound, lowerBound) Output

    %openfile hhFile = "sat_mpy.sa"        

        	.global 	_sat_mpy
        	       	
_sat_mpy:	.cproc	sampl1, scale, upper, lower, sampl2

        	.reg    res, tmp, if1, if2
 
; first sample

			; zzz1 = sample1 * scale
			; if (sample1<upper) then IF1 = 1					
			; if (sample1<upper) then IF1 = 2					
			; tmp = (int) zzz1;			
			; res = tmp << 16;			
			; if (!IF1) then res = 0x7FFF0000			
			; if (!IF2) then res = 0x80000000

			mpydp	A5:A4, B5:B4, B9:B8    

			cmpltdp	A5:A4, A7:A6, if1			
			cmpgtdp	A5:A4, B7:B6, if2
		
			dpint	B9:B8, tmp
			shl		tmp, 16, res

[!if1]		mvklh	%<upperBound>, res
[!if2]		mvklh	%<lowerBound>, res	
 
; second sample       		   	     	  	  	

			; zzz2 = sample2 * scale
			; if (sample2<upper) then IF1 = 1					
			; if (sample2<upper) then IF1 = 2					
			; tmp = (int) zzz2;			
			; if (!IF1) then res = 0x00007FFF			
			; if (!IF2) then res = 0x00008000		

			mpydp	A9:A8, B5:B4, B9:B8
			
			cmpltdp	A9:A8, A7:A6, if1
			cmpgtdp	A9:A8, B7:B6, if2
						
			dpint	B9:B8, tmp
			
[!if1]		mvk	    %<upperBound>, res
[!if2]		mvk	    %<lowerBound>, res	

			shl		tmp, 16, tmp
			shru	tmp, 16, tmp

; combine samples

			; res = res AND tmp
			or		res, tmp, res
		
			.return	res
			
			.endproc    
    
    %closefile hhFile
    
    %endfunction  %% create_sat_mpyStereo
    
    
    
    %% Function:  create_sat_mpyMono ======================================
    %%
    %% Creates a file containing a linear assembly function for
    %% multiplication with saturation
    %%
    %function create_sat_mpyMono(block, upperBound, lowerBound) Output

    %openfile hhFile = "sat_mpy.sa"     
    
         	.global 	_sat_mpy
        	     	
_sat_mpy:	.cproc	sampl, scale, upper, lower

        	.reg    res, if1, if2, tmp

			; zzz = sample * scale
			; if (sample<upper) then IF1 = 1
			; if (sample>lower) then IF2 = 1		
			; tmp = (int) zzz;
			; res = tmp << 16;
			; if (!IF1) then res = 0x7FFF0000
			; if (!IF2) then res = 0x80000000
			
			mpydp	A5:A4, B5:B4, B9:B8			
						
			cmpltdp	A5:A4, A7:A6, if1
			cmpgtdp	A5:A4, B7:B6, if2
			
			dpint	B9:B8, tmp	
			shl		tmp, 16, res

[!if1]		mvklh	%<upperBound>, res
[!if2]		mvklh	%<lowerBound>, res			
		
			.return	res
			
			.endproc   

    %closefile hhFile
    
    %endfunction  %% create_sat_mpyMono		
    
    
    
    %% Function:  create_sat_mpyStereoInt ======================================
    %%
    %% Creates a file containing a linear assembly function for
    %% multiplication with saturation
    %%
    %function create_sat_mpyStereoInt(block, upperBound, lowerBound) Output

    %openfile hhFile = "sat_mpy.sa"        

        	.global 	_sat_mpy
        	       	
_sat_mpy:	.cproc	sampl1, upper, lower, sampl2

        	.reg    res, tmp, if1, if2
 
; first sample

			; if (sample1<upper) then IF1 = 1					
			; if (sample1<upper) then IF1 = 2					
			; tmp = (int) sample;			
			; res = tmp << 16;			
			; if (!IF1) then res = 0x7FFF0000			
			; if (!IF2) then res = 0x80000000   

			cmpltdp	A5:A4, B5:B4, if1			
			cmpgtdp	A5:A4, A7:A6, if2
			
			dpint	A5:A4, tmp
			shl		tmp, 16, res

[!if1]		mvklh	%<upperBound>, res
[!if2]		mvklh	%<lowerBound>, res	
 
; second sample       		   	     	  	  	

			; if (sample2<upper) then IF1 = 1					
			; if (sample2<upper) then IF1 = 2					
			; tmp = (int) zzz2;			
			; if (!IF1) then res = 0x00007FFF			
			; if (!IF2) then res = 0x00008000		

			cmpltdp	B7:B6, B5:B4, if1
			cmpgtdp	B7:B6, A7:A6, if2
						
			dpint	B7:B6, tmp
			
[!if1]		mvk	    %<upperBound>, res
[!if2]		mvk	    %<lowerBound>, res	

			shl		tmp, 16, tmp
			shru	tmp, 16, tmp

; combine samples

			; res = res AND tmp
			or		res, tmp, res
		
			.return	res
			
			.endproc    
    
    %closefile hhFile
    
    %endfunction  %% create_sat_mpyStereoInt    
    

    
    %% Function:  create_sat_mpyMonoInt ======================================
    %%
    %% Creates a file containing a linear assembly function for
    %% multiplication with saturation
    %%
    %function create_sat_mpyMonoInt(block, upperBound, lowerBound) Output

    %openfile hhFile = "sat_mpy.sa"     
     
         	.global 	_sat_mpy
        	     	
_sat_mpy:	.cproc	sampl, scale, upper, lower

        	.reg    res, if1, if2, tmp

			; if (sample<upper) then IF1 = 1
			; if (sample>lower) then IF2 = 1		
			; tmp = (int) sampl;
			; res = tmp << 16;
			; if (!IF1) then res = 0x7FFF0000
			; if (!IF2) then res = 0x80000000
			
			cmpltdp	A5:A4, B5:B4, if1
			cmpgtdp	A5:A4, A7:A6, if2
			
			dpint	A5:A4, tmp	
			shl		tmp, 16, res

[!if1]		mvklh	%<upperBound>, res
[!if2]		mvklh	%<lowerBound>, res			
		
			.return	res
			
			.endproc   

    %closefile hhFile
    
    %endfunction  %% create_sat_mpyMonoInt	
    
    
    
    %% Function:  create_sat_mpyDSK ======================================
    %%
    %% Creates a file containing a linear assembly function for
    %% multiplication with saturation
    %%
    
    %function create_sat_mpyDSK(block, upperBound, lowerBound) Output
    
    %openfile hhFile = "sat_mpy.h"
    
static inline short sat_mpy (float a, float b, float up_bnd, float lo_bnd);

#include "sat_mpy.c"

    %closefile hhFile

    %openfile ccFile = "sat_mpy.c"

short sat_mpy (float a, float b, float up_bnd, float lo_bnd)
{
    float p = a * b;
    short  r = (short)p;

    if (a > up_bnd) r = %<upperBound>;
    if (a < lo_bnd) r = %<lowerBound>;

    return r & 0xFFFE;
}

    %closefile ccFile
    
    %endfunction  %% create_sat_mpyDSK	    
      
    
    
    %% Function:  create_sat_mpyDSKInt ======================================
    %%
    %% Creates a file containing a linear assembly function for
    %% multiplication with saturation
    %%
    %function create_sat_mpyDSKInt(block, upperBound, lowerBound) Output
    
    %openfile hhFile = "sat_mpy.h"
    
static inline short sat_mpy (int a, float up_bnd, float lo_bnd);

#include "sat_mpy.c"

    %closefile hhFile

    %openfile ccFile = "sat_mpy.c"

short sat_mpy (int a, float up_bnd, float lo_bnd)
{
    if (a > up_bnd) a = %<upperBound>;
    if (a < lo_bnd) a = %<lowerBound>;

    return a & 0xFFFE;
}

    %closefile ccFile

    %endfunction  %% create_sat_mpyDSKInt	    
    
    
%endif %% C6000_SATMPY_TLC

%% [EOF] c6000_satmpy.tlc
