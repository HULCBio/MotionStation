%% $RCSfile: stic6x_mat_trans.tlc,v $
%% $Revision: 1.1.6.1 $
%% $Date: 2004/01/22 18:32:43 $
%%
%% Copyright 2001-2003 The MathWorks, Inc.
%%
%% Abstract: TI C62/C64 DSPLIB "mat_trans"
%%           (optimized fixed-point matrix transpose function)

%implements stic6x_mat_trans "C"

%include "tiblksutil.tlc"

%% Function: BlockTypeSetup ==============================================
%function BlockTypeSetup(block, system) void

  %<Include_ti_header(block, "dsp_mat_trans")>

%endfunction %% BlockTypeSetup

%% Function: Outputs ==========================================================
%%
%function Outputs(block, system) Output
    %%
    %assign INPORT = 0
    %assign OUTPORT  = 0
    %assign width = LibBlockInputSignalWidth(INPORT)
    %assign dims  = LibBlockInputSignalDimensions(INPORT)  
    %assign numDims = LibBlockInputSignalNumDimensions(INPORT)
    %if numDims == 1
        %assign nCols = 1
        %assign nRows = width
    %else
        %assign nCols = dims[1]
        %assign nRows = dims[0]
    %endif
    %%
    /* C%<chipID.Value[0]>x DSP Library mat_trans (%<ParamSettings.FunctionName>) - '%<Name>' */
    %% Have to switch rows and columns, as the assembly routine expects row-major-ness
    %if (nCols == 1) || (nRows == 1)
      %<LibBlockCopyInputsToOutputs(INPORT,OUTPORT)> 
    %else
      /* Call row-major assembly routine (need to switch rows and columns since Simulink is column-major) */
      DSP_mat_trans((%<LibBlockInputSignalAddr(INPORT,"","",0)>),%<nCols>,%<nRows>,(%<LibBlockOutputSignalAddr(OUTPORT,"","",0)>));
    %endif
%endfunction

%% [EOF] stic6x_mat_trans.tlc
