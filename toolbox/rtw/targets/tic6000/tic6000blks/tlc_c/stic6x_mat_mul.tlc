%% $RCSfile: stic6x_mat_mul.tlc,v $
%% $Revision: 1.1.6.1 $
%% $Date: 2004/01/22 18:32:42 $
%%
%% Copyright 2001-2003 The MathWorks, Inc.
%%
%% Abstract: Matrix multiply

%implements stic6x_mat_mul "C"

%include "tiblksutil.tlc"

%% Function: BlockTypeSetup ==============================================
%function BlockTypeSetup(block, system) void

  %<Include_ti_header(block, "dsp_mat_mul")>

%endfunction %% BlockTypeSetup


%% Function: Outputs ==========================================================
%%
%function Outputs(block, system) Output
  %%
  %assign INPORT_A   = 0
  %assign INPORT_B   = 1
  %assign OUTPORT    = 0
  %%
  /* C%<chipID.Value[0]>x DSP Library mat_mul (%<ParamSettings.FunctionName>) - '%<Name>' */
  %%
  %% Everything has to be turned on its ear because TI works with row major data but we
  %% work with column major data.
  %assign Aptr     = LibBlockInputSignalAddr( INPORT_A , "", "", 0)
  %assign numDimsA = LibBlockInputSignalNumDimensions(INPORT_A)
  %assign inDimsA  = LibBlockInputSignalDimensions(INPORT_A)
  %assign nRowsA   = inDimsA[0]
  %assign nColsA   = (numDimsA == 2) ? inDimsA[1] : 1
  %assign Bptr     = LibBlockInputSignalAddr( INPORT_B , "", "", 0)
  %assign numDimsB = LibBlockInputSignalNumDimensions(INPORT_B)
  %assign inDimsB  = LibBlockInputSignalDimensions(INPORT_B)
  %assign nRowsB   = inDimsB[0]
  %assign nColsB   = (numDimsB == 2) ? inDimsB[1] : 1
  %assign outPtr   = LibBlockOutputSignalAddr( OUTPORT , "", "", 0)
  DSP_mat_mul(%<Bptr>, %<nColsB>, %<nRowsB>, %<Aptr>, %<nRowsA>, %<outPtr>, %<SFcnParamSettings.OUT_SHIFT>);

%endfunction

%% [EOF] stic6x_mat_mul.tlc
