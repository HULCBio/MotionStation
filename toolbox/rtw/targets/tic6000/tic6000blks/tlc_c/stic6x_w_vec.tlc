%% $RCSfile: stic6x_w_vec.tlc,v $
%% $Revision: 1.1.6.1 $
%% $Date: 2004/01/22 18:32:53 $
%%
%% Copyright 2001-2003 The MathWorks, Inc.
%%
%% Abstract: TI C6X DSPLIB "w_vec"
%%           (optimized fixed-point Weighted Vector Sum function)

%implements stic6x_w_vec "C"

%include "tiblksutil.tlc"

%% Function: BlockTypeSetup ==============================================
%function BlockTypeSetup(block, system) void

  %<Include_ti_header(block, "dsp_w_vec")>

%endfunction %% BlockTypeSetup

%% Function: Outputs ==========================================================
%%
%function Outputs(block, system) Output
  %%
  %assign INPORT_X = 0
  %assign INPORT_Y = 1
  %assign INPORT_S = 2
  %assign OUTPORT  = 0
  %assign dataWidth = LibBlockInputSignalWidth(INPORT_X)
  %assign nChans    = getInportChans(INPORT_X)
  %assign nSamps    = getInportSamps(INPORT_X)
  %if (SFcnParamSettings.WEIGHTS_ARE_FROM_MASK)
    %assign weightsPtr = LibBlockParameterAddr(WEIGHTS_RTP,"","",0)
  %else
    %assign weightsPtr = LibBlockInputSignalAddr(INPORT_S,"","",0)
  %endif    
  %%
  /* C%<chipID.Value[0]>x DSP Library w_vec (%<ParamSettings.FunctionName>) - '%<Name>' */
  %if ((nChans == 1) || (SFcnParamSettings.SCALAR_WEIGHTS))
    DSP_w_vec((%<LibBlockInputSignalAddr(INPORT_X,"","",0)>), (%<LibBlockInputSignalAddr(INPORT_Y,"","",0)>), *(%<weightsPtr>), (%<LibBlockOutputSignalAddr(OUTPORT,"","",0)>), %<dataWidth> );
  %else
    {
      short *x = (short *)%<LibBlockInputSignalAddr(INPORT_X,"","",0)>;
      short *y = (short *)%<LibBlockInputSignalAddr(INPORT_Y,"","",0)>;
      short *s = (short *)%<weightsPtr>;
      short *r = (short *)%<LibBlockOutputSignalAddr(OUTPORT,"","",0)>;
      %if !(nSamps % 2)
        %% nSamps is even
        short nChans = %<nChans>;
        while(nChans--) {
          DSP_w_vec(x, y, *s++, r, %<nSamps>);
          x += %<nSamps>;
          y += %<nSamps>;
          r += %<nSamps>;
        }
      %else
        %% nSamps is odd
        %assign offset1 = nSamps-1
        %assign offset2 = nSamps+1
        %if nChans > 3
        short nChansDivTwo = %<nChans \>> 1>;
        while (nChansDivTwo--) {
          /* Do second channel of pair first */
        %else
          /* Do second channel first */            
        %endif
          DSP_w_vec(x+%<offset1>, y+%<offset1>, *(s+1), r+%<offset1>,%<offset2>);
          /* First channel */
          DSP_w_vec(x, y, *s, r, %<nSamps>);
        %if nChans > 2
          x += %<nSamps*2>;
          y += %<nSamps*2>;
          r += %<nSamps*2>;
          s += 2;
        %endif
        %if nChans > 3
        }
        %endif
        %if nChans % 2
          %% Make sure to get last channel if odd number of channels
          /* last channel */
          DSP_w_vec(x, y, *s, r, %<nSamps>);
        %endif
      %endif
    }
  %endif

%endfunction

%% [EOF] stic6x_w_vec.tlc
