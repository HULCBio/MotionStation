%% Abstract:
%%      TLC file for xPC Target Byte Reversal block
%%
%% Copyright 1996-2004 The MathWorks, Inc.
%% $Revision: 1.1.4.1 $ $Date: 2004/03/30 13:13:58 $

%implements xpcreverseendian "C"

%% Make the preprocessor declarations.
%function BlockTypeSetup(block, system) void
  %openfile buffer

  /* Used to reverse endianness */
  #define SWAP16(x) (((x) >> 8) | (((x) & 0xff) << 8))
  #define SWAP32(x) (SWAP16((x) >> 16) | (SWAP16((x) & 0xffff) << 16))

  %closefile buffer
  %<LibCacheDefine(buffer)>
%endfunction

%function Outputs(block,system) Output

  /* ReverseEndian: %<block.Name> */
  %assign which = block.SFcnParamSettings.Width1Input
  %if SIZE(which, 1)

    /* 1 byte-wide input datatypes */
  %endif
  %% Simple memcpy will do for these
  %foreach i = SIZE(which, 1)
    memcpy(%<LibBlockOutputSignalAddr(which[i], "", "", 0)>, ...
      %<LibBlockInputSignalAddr(which[i], "", "", 0)>, ...
      %<block.DataInputPort[which[i]].Width>);
  %endforeach
  %%
  %assign which = block.SFcnParamSettings.Width2Input
  %if SIZE(which, 1)

    /* 2 byte-wide input datatypes */
  %endif
  %foreach i = SIZE(which, 1)
    %assign rv    = ["", ""]
    %assign rv[0] = SPRINTF("u%d", which[i])
    %assign rv[1] = SPRINTF("y%d", which[i])
    %assign rr = block.DataInputPort[which[i]].RollRegions
    %roll sigIdx = rr, lcv = RollThreshold, block, "Roller", rv
      %assign isp = LibBlockInputSignalAddr(which[i], "", lcv, sigIdx)
      %assign osp = LibBlockOutputSignalAddr(which[i], "", lcv, sigIdx)
      ((uint16_T *)%<osp>)[0] =
            SWAP16(((uint16_T *)%<isp>)[0]);
    %endroll
  %endforeach
  %%
  %assign which = block.SFcnParamSettings.Width4Input
  %if SIZE(which, 1)

    /* 4 byte-wide input datatypes */
  %endif
  %foreach i = SIZE(which, 1)
    %assign rv = ["", ""]
    %assign rv[0] = SPRINTF("u%d", which[i])
    %assign rv[1] = SPRINTF("y%d", which[i])
    %assign rr = block.DataInputPort[which[i]].RollRegions
    %roll sigIdx = rr, lcv = RollThreshold, block, "Roller", rv
      %assign isp = LibBlockInputSignalAddr(which[i], "", lcv, sigIdx)
      %assign osp = LibBlockOutputSignalAddr(which[i], "", lcv, sigIdx)
      ((uint32_T *)%<osp>)[0] =
            SWAP32(((uint32_T *)%<isp>)[0]);
    %endroll
  %endforeach
  %%
  %%
  %assign which = block.SFcnParamSettings.Width8Input
  %if SIZE(which, 1)

    /* 8 byte-wide input datatypes */
    {
      %% Pointers need to be declared only once for all such inputs
      int32_T *tmpy, *tmpu;
  %endif
  %foreach i = SIZE(which, 1)
    %assign rv = ["", ""]
    %assign rv[0] = SPRINTF("u%d", which[i])
    %assign rv[1] = SPRINTF("y%d", which[i])
    %assign rr = block.DataInputPort[which[i]].RollRegions
    %roll sigIdx = rr, lcv = RollThreshold, block, "Roller", rv
      %assign isp = LibBlockInputSignalAddr(which[i], "", lcv, sigIdx)
      %assign osp = LibBlockOutputSignalAddr(which[i], "", lcv, sigIdx)
      tmpy = (uint32_T *)%<osp>;
      tmpu = (uint32_T *)%<isp>;
      tmpy[1] = SWAP32(tmpu[0]);
      tmpy[0] = SWAP32(tmpu[1]);
    %endroll
  %endforeach
  %if SIZE(which, 1)
  }
  %endif
  %%
%endfunction