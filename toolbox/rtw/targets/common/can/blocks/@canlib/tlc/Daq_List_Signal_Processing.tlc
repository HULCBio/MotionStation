%% $RCSfile: Daq_List_Signal_Processing.tlc,v $
%% $Revision: 1.4.4.2 $
%% $Date: 2004/04/19 01:19:08 $
%%
%%
%%   Copyright 2002-2003 The MathWorks, Inc.

%% File Abstract ================================================================
%%
%% This is a generic template to be used as a starting point when implementing a
%% custom storage class with Real-Time Workshop Embedded Coder.  This template
%% implements externally visible global variables.

%% Disclaimer ===================================================================
%%
%% Custom storage classes are an advanced feature of Real-Time Workshop Embedded
%% Coder, and provide tremendous customization capability of data symbols in the
%% generated code.  This file contains a brief description of the recommended TLC
%% function API to implement a custom storage class.  Programming to this API
%% isolates you from future changes to Real-Time Workshop Embedded Coder.
%% Functionality programmed outside of the recommended API is at risk of not
%% working in a future release.

%% Make sure no white space in this file shows up in code.
%selectfile NULL_FILE

%% Target language is C
%implements * "C"

%% Function: DataAccess =========================================================
%% Abstract:
%%   DataAccess provides an API for requesting code fragments or other
%%   information corresponding to data of a custom storage class.
%%
%% Function arguments:
%%   record
%%     The record corresponding to the specific data instance of a class.
%%
%%   request
%%     The nature of the code or information requested.  DataAccess must honor
%%     the following requests: "address", "contents", "declare", "define",
%%     "initialize", and "layout".
%%
%%   idx
%%     The desired index.  This is "" for scalars and "[some_index]" otherwise.
%%     Note that idx is [] for non-indexing requests "declare" and "define".
%%
%%   reim
%%     A string corresponding to the selection of the real or imaginary
%%     component of complex data.  For non-complex data, reim is "".  For
%%     complex data, reim is ".%<tRealPart>" (.re by default) for the real
%%     component, ".%<tImagPart>" (.im by default) for the imaginary component,
%%     and "" for the base of both components.  Together with idx, reim is
%%     used to select a scalar element of a complex, nonscalar array.

%function DataAccess(record, request, idx, reim) void

  %% ============================================================================
  %% Functions to determine data attributes
  %% ============================================================================
  %%
  %% LibGetRecordIdentifier(record)
  %%   Returns the name (aka, identifier) of the data
  %% 
  %% LibGetDataWidth(record)
  %%   Returns the width of the data
  %% 
  %% LibParameterInstanceInitStr(record)
  %%   Returns the initializer string for a parameter record.  For example, the
  %%   string "{0.0, 2.5}" is returned for the MATLAB vector [0; 2.5].
  %% 
  %% LibGetRecordCompositeDataTypeName(record)
  %%   Returns the record's C data type.  For example, "real_T" and "creal_T"
  %%   is returned for non-complex and complex real data, respectively.
  %% 
  %% LibGetGroundValue(record, reim)
  %%   Returns ground for the record, whereby the representation depends on
  %%   record's datatype.  Typically "FALSE", "0", or "0.0" is returned.
  %% 
  %% LibGetDataLayout(record)
  %%   Returns a vector of information describing the method in which Simulink
  %%   maps the data to memory.  See "layout" below for more details.
  %% 
  %% LibGetCustomStorageAttributes(record)
  %%   Returns the custom storage class attributes associated with a Simulink
  %%   data object.  That is, a reference to data.RTWInfo.CustomAttributes 
  %%   is returned.
  %%
  %% LibCustomStorageRecordIsModelParameter(record)
  %%   Returns true if a record is a model parameter
  %%
  %% LibCustomStorageRecordIsBlockState(record)
  %%   Returns true if a record is a block state
  %%
  %% LibCustomStorageRecordIsBlockOutput(record)
  %%   Returns true if a record is a block output
  %%
  %% LibCustomStorageRecordIsExternalInput(record)
  %%   Rreturns true if a record is an external input
  %%
  %% LibCustomStorageRecordIsExternalOutput(record)
  %%   Returns true if a record is an external output
  %%
  %% ============================================================================
  %% Functions to insert user-defined code
  %% ============================================================================
  %%
  %% LibCacheIncludes(text)
  %%   Place text at the top of <model>_common.h in the include section.
  %% 
  %% LibPrmFileCustomCode(text, "header|trailer")
  %%   Place text at the top|bottom of <model>_prm.h prior|after model data
  %%   declarations.
  %% 
  %% LibHeaderFileCustomCode(text, "header|trailer")
  %%   Place text at the top|bottom of <model>_common.h prior|after model
  %%   data definitions.
  %%
  %% ============================================================================
  %% Functions to detect and report errors
  %% ============================================================================
  %%
  %% LibCustomStorageVerifyRecordIsScalar(record)
  %%   Error if the data is non-scalar.
  %%
  %% LibCustomStorageVerifyRecordIsModelParameter(record)
  %%   Error if the data is not a block parameter (as opposed to a signal,
  %%   for example).
  %%
  %% LibCustomStorageVerifyRecordIsNonComplex(record)
  %%   Error if the data is complex (i.e., has an imaginary component).
  %%
  %% ============================================================================
  %% Utility functions
  %% ============================================================================
  %%
  %% LibCustomData(record, request, idx, reim)
  %%   Executes the DataAccess() method for the specified record.  This is
  %%   useful when a class ueses or mirrors another class.
  %% 
  %% LibConvertNameToIdentifier(name)
  %%   Converts a (file) name to a valid C identifier.  Typically used when
  %%   guarding against multiple header file inclusions.
  
  %switch request

    %% ==========================================================================
    %% The "declare" request is used to declare data to have external linkage
    %% in the <model>_export.h file.  If the data does not need external linkage
    %% (i.e. if you do not want a declaration to appear in the <model>_export.h
    %% file), the request should return "".
    %%
    %% Note that if this request returns a statement, that statement must
    %% include the terminating semicolon.
    %%
    %% Sample code:
    %%
    %%   %assign id = LibGetRecordIdentifier(record)
    %%   %assign dt = LibGetRecordCompositeDataTypeName(record)
    %%   %return "%<dt> %<id>%<idx>;"
    %%
    %case "declare"
      
      %% LibDefaultCustomStorageDeclare is the default declare function to
      %% declares a global variable whose identifier is the name of the data.
      %return "extern %<LibDefaultCustomStorageDeclare(record)>"
      %break

    %% ==========================================================================
    %% The "define" request is used to define (allocate) data.  Code fragments
    %% generated by this request are inserted into the  <model>_prm.h file.
    %% Parameters should statically set their initial value set to a nominal
    %% value.
    %%
    %% If this request returns a statement, that statement must include
    %% the terminating semicolon.
    %%
    %% Sample code:
    %%
    %%   %assign id = LibGetRecordIdentifier(record)
    %%   %assign dt = LibGetRecordCompositeDataTypeName(record)
    %%   %if LibCustomStorageRecordIsParameter(record)
    %%     %assign initStr = LibParameterInstanceInitStr(record)
    %%     %return "%<dt> %<id>%<idx> = %<STRING(initStr)>;"
    %%   %else
    %%     %return "%<dt> %<id>%<idx>;"
    %%   %endif
    %%
    %case "define"
      
      %% LibDefaultCustomStorageDefine is the default define function to define
      %% a global variable whose identifier is the name of the data.  If the
      %% data is a parameter, the definition is also statically initialized to
      %% its nominal value (as set in MATLAB).
      %return "%<LibDefaultCustomStorageDefine(record)>"
      %break
      
    %% ==========================================================================
    %% The "contents" request is used to generate code corresponding to the
    %% usage of data on the left-hand or right-hand side of an assignment.  The
    %% argument idx is set to an array indexer if the data is nonscalar, and ""
    %% otherwise.  The argument reim is set to "%.<tRealPart>" (.re by default)
    %% or "%.<tImagPart>" (.im by default) if the data is complex.  If you are
    %% using the same data structure as The Mathworks, Inc. to represent complex
    %% data (in struct fields ".re" and ".im") you can use the flag reim
    %% as-is for the complex subindex.
    %%
    %% This request must return a reference to data as an expression, not a
    %% statement, so it should not include a terminating semicolon.
    %%
    %% Sample code:
    %%
    %%   %assign id = LibGetRecordIdentifier(record)
    %%   %return "%<id>%<idx>%<reim>"
    %%
    %case "contents"
      
      %% LibDefaultCustomStorageContents is the default contents function to
      %% return a scalar element of a global variable whose identifier is the
      %% name of the data.
      %return LibDefaultCustomStorageContents(record, idx, reim)
      %break

    %% ==========================================================================
    %% The usage of the "address" request is identical to the "contents" request,
    %% except the function is to return the address of the data instead of
    %% its contents.
    %%
    %% Sample code:
    %%
    %%   %assign id = LibGetRecordIdentifier(record)
    %%   %return "&%<id>%<idx>%<reim>"
    %%
    %case "address"
      
      %% LibDefaultCustomStorageAddress is the default address function to
      %% return the address of a scalar element of a global variable whose
      %% identifier is the name of the data.
      %return LibDefaultCustomStorageAddress(record, idx, reim)
      %break

    %% ==========================================================================
    %% The "initialize" request is executed when generating code for the model
    %% registration function, and is a hook to initialize internal and external
    %% data to zero.  Internal data refers to block outputs (signals) and block
    %% states.  External data refers to root-level inports and outports.  Note
    %% that this request is not executed when the option "Initialize internal
    %% data" or "Initialize external I/O data" is not selected for internal and
    %% external data, repectively.
    %%
    %% If this request returns a statement, that statement must include
    %% the terminating semicolon.
    %%
    %% Sample code:
    %%
    %%   %assign id = LibGetRecordIdentifier(record)
    %%   %assign gndValue = LibGetGroundValue(record, tRealPart)
    %%   %return "%<id>%<idx>%<reim> = %<gndValue>;"
    %%
    %case "initialize"

      %% LibDefaultCustomStorageInitialize is the default initialization
      %% function that initializes a scalar element of a global variable to 0. 
      %return LibDefaultCustomStorageInitialize(record, idx, reim)
      %break
      
    %% ==========================================================================
    %% The "layout" request is used to define the method in which data is mapped
    %% to memory.  Return a vector with one of the following formats:
    %%
    %% ["data-class", NumDimensions, [dim1, dim2, ..., dimM], "zero_index"]
    %% ["other"]
    %%
    %% For example, a 4D, 2D, vector, and scalar data, respectively
    %%
    %%   3x3x2x5 matrix: ["col-mat-nd", 4, [3, 3, 2, 5], "[0]"]
    %%       3x4 matrix: ["col-mat",    2, [3, 4],       "[0]"]
    %%     3(x1) vector: ["vector",     2, [3, 1],       "[0]"]
    %%     (1x1) scalar: ["scalar",     2, [1, 1],       ""   ]
    %%
    %% The information returned by this request is used, among other
    %% things, for generating interfaces to data.  For example, the Real-Time
    %% Workshop's C-API for signals and parameters utilizes this information.
    %%
    %case "layout"
      
      %% LibDefaultCustomStorageLayout is the default layout function, and may
      %% be used when the data is laid out in memory like built-in Simulink
      %% data.  If the data is not laid out in memory like Simulink data,
      %% return the vector ["other"].
      %return LibDefaultCustomStorageLayout(record)
      %break

    %% ==========================================================================
    %% Handle unrecognized requests
    %%
    %default
      
      %% You should invoke LibDefaultCustomStorageUnknownClassAccessType
      %% for unrecognized requests.  It gracefully errors for unhandled
      %% critical cases, and supplies safe defaults for unhandled
      %% noncritical requests.
      %return LibDefaultCustomStorageUnknownDataAccessType ...
	(record, request, idx, reim)
      %break
      
  %endswitch

%endfunction


%% Function: ClassAccess ========================================================
%% Abstract:
%%   ClassAccess provides an API for requesting information or actions
%%   corresponding to a custom storage class.
%%
%% Function argurments:
%%   record
%%     An entry in the global memory map corresponding to a custom storage
%%     class.  It contains subrecords corresponding to the data of the
%%     particular class.  The library function 
%%     LibCustomStorageClassRecordNumData() returns the number of data subrecords 
%%     in the class record.  The library function LibGetDataRecord() 
%%     returns a subrecord corresponding to the i'th data element in the 
%%     class record.  The TLC library functions may then operate on the 
%%     data subrecord.
%%
%%   request
%%     the nature of the code or information requested.  ClassAccess must honor
%%     the following types of requests:  "setup" and "comment"
%%
%function ClassAccess(record, request) void
   %switch request

    %% ==========================================================================
    %% The "setup" request performs class-wide operations prior to code
    %% generation.
    %%
    %% The following example checks that each data subrecord is a Simulink
    %% parameter:
    %%
    %%   %assign numData = LibCustomStorageClassRecordNumData(record)
    %%   %foreach idx = numData
    %%     %assign data = LibGetDataRecord(record, idx)
    %%     %% error if data is not a Simulink parameter
    %%     %<LibCustomStorageVerifyRecordIsParameter(data)>
    %%   %endforeach
    %%   %return
    %%
    %case "setup"
      %% Classes defining global variables do not need a setup action
      %<TidProcessing(record)>

      %return
      %break

    %% ==========================================================================
    %% The "comment" request returns text that is inserted into the
    %% <model>_export.h and <model>_prm.h files prior to any declaration or
    %% definition of data of this class.  Comment delimeters should be part of
    %% the string.
    %%
    %% The string returned should not include a terminating newline (although it
    %% may include intermediate newlines).  A terminating newline will be
    %% created automatically by Real-Time Workshop Embedded Coder.
    %% 
    %% Sample code:
    %%
    %%   %return "/* Data with custom storage class CAL\n" + ...
    %%           " * is used to define calibration data\n" + ...
    %%           " */"
    %%   or,
    %%
    %%   %openfile textBuf
    %%   /* Data with custom storage class CAL
    %%    * is used to define calibration data
    %%    */
    %%   %closefile textBuf
    %%   %return textBuf
    %%
    %case "comment"
      
      %% LibDefaultCustomStorageComment is the default comment function,
      %% and returns a string identifying the custom storage class.
      %return LibDefaultCustomStorageComment(record)
      %break

    %% ==========================================================================
    %% Handle unrecognized requests
    %%
    %default
      
      %% You should invoke LibDefaultCustomStorageUnknownClassAccessType
      %% for unrecognized requests.  It gracefully errors for unhandled
      %% critical cases, and supplies safe defaults for unhandled
      %% noncritical requests.
      %return LibDefaultCustomStorageUnknownClassAccessType(record, request)
      %break
      
  %endswitch
      
%endfunction

%function TidProcessing(record) void
   %% numData = number of CCPSignals in the model 
   %assign numData = LibCustomStorageClassRecordNumData(record)
   %% totalNumTIDs == total number of different tid's in model
   %assign totalNumTIDs = SIZE(CompiledModel.SampleTime,1)
   %% usedNumTIDs == number of different tid's in model we are using
   %assign usedNumTIDs = 0

   %assign initialisers = "unused"
   %% build a list of initialisers for the UsedTIDList vector
   %foreach tididx = totalNumTIDs - 1
      %assign initialisers = "%<initialisers>, unused "
   %endforeach
   
   %assign UsedTIDList = Vector(totalNumTIDs) [%<initialisers>]
  
   %openfile output_file = "DAQ_LIST_EVENT_MAPPINGS"
   %selectfile output_file
**************************************************************
* Mappings from Simulink Signals to DAQ List Event Channels  *
**************************************************************

Note: These mappings are derived from the sample rates of the signals within
the Simulink model.   It is only safe to specify the following event
channels for these signals, otherwise the correctness of the sampled signals
cannot be guarenteed.

In your calibration tool you should setup the set of event channels
specified below.  To measure a signal using DAQ lists, you should then 
associate the correct event channel to that signal according to the 
specification below.

**************************************************************

   %closefile output_file
   %foreach idx = numData
      %assign data = LibGetDataRecord(record, idx)
    
      %% must work out if we are doing a right click subsystem build or a ctrl-B (normal) build
      %assign normal_build = FEVAL("canlib_asap2_daq_utils","normalbuild")
      
      %if normal_build == 1
         %% use CompiledModel.Name
         %assign sampleTime = FEVAL("canlib_asap2_getSampleTime","%<LibGetRecordIdentifier(data)>","%<CompiledModel.Name>","0","0")
      %else
         %% get the handle to the original block and use this as the SYSTEM for SigId2SampleTime
         %assign original_handle = FEVAL("canlib_asap2_daq_utils","originalhandle")
         %assign sampleTime = FEVAL("canlib_asap2_getSampleTime","%<LibGetRecordIdentifier(data)>",%<original_handle>,"0","0")
      %endif
     
      %% perform some error checking on the sampleTime result
      %if sampleTime == Inf
         %openfile buffer
Attempt to use Signal %<LibGetRecordIdentifier(data)> with Infinite Sample Time in a DAQ List.
Adding signals with Infinite sample times (such as constants) to DAQ lists is not supported.
To monitor this signal you should use ASAP2.Signal's with the Calibration Tool operating in polling mode.
         %closefile buffer
         %exit %<buffer>
      %endif

      %if sampleTime == -2
         %openfile buffer
M-code "canlib_asap2_getSampleTime" returned -2 as the sample time.
This is an unknown error.  
Please check your signals are named correctly in the model.
         %closefile buffer
         %exit %<buffer>
      %endif
      
      %openfile output_file = "DAQ_LIST_EVENT_MAPPINGS", "a"
      %selectfile output_file
%<LibGetRecordIdentifier(data)>:
      %closefile output_file
      %% map the sample time onto a TID according to the RTW file
      %foreach sampletime_index = totalNumTIDs
         %if CompiledModel.SampleTime[sampletime_index].PeriodAndOffset[0] == sampleTime
            %assign new_tid = CompiledModel.SampleTime[sampletime_index].TID
            %% output TID value to MATLAB
            %openfile output_file = "DAQ_LIST_EVENT_MAPPINGS", "a"
            %selectfile output_file
Event Channel number = %<new_tid>
--------------------------------------

            %closefile output_file
            %% must check for uniqueness of TID and add to list of TID's if unique
            %% note: I make no assumptions about the values of the TIDs which
            %% should make the code more robust to change
            %% also, this approach only creates as many DAQ lists as necessary
            %% we do not need one for each TID if no CCPSignals are attached!
            %assign found_tid = 0
            %foreach tididx = SIZE(UsedTIDList,1)
               %if TYPE(UsedTIDList[tididx]) == "Number"
                  %if UsedTIDList[tididx] == new_tid
                     %assign found_tid = 1
                     %break
                  %endif
               %endif
            %endforeach
            %% add to TIDList if new
            %if found_tid == 0
               %assign UsedTIDList[usedNumTIDs] = new_tid
               %assign usedNumTIDs = usedNumTIDs + 1
            %endif
         %endif
      %endforeach
   %endforeach
   %openfile output_file = "DAQ_LIST_EVENT_MAPPINGS", "a"
   %selectfile output_file
****************************************************************************
Total sample rates in the model = %<totalNumTIDs>
Number of sample rates used for DAQ = %<usedNumTIDs>
****************************************************************************   
   %%foreach idx = totalNumTIDs
   %%   %<UsedTIDList[idx]>
   %%%endforeach
   %closefile output_file
      
   %% overwrite ccp_auto_defs.h if already exists
   %openfile ccp_auto_defs = "ccp_auto_defs.h"
   %selectfile ccp_auto_defs
  
   %% get the total number of ODTs available for use 
   %% maximum number = 254
   %assign numODTs = FEVAL("canlib_asap2_daq_utils","totalnumodts")
   %if numODTs > 254
      %closefile ccp_auto_defs
      %openfile buffer
The maximum number (254) of Object Descriptor Tables (ODT's) was exceeded.
To fix this error, you should reduce the total number of ODT's that is specified in
the mask of the CAN Calibration Protocol Block.
      %closefile buffer
      %exit %<buffer>
   %endif
   /* 
    * Auto generated include file for CCP DAQ List implementation 
    *
    */
    
   /*
    * Defines
    */
   #define CCP_DAQ_LIST_ENABLED
   #define TOTAL_NUM_TIDS %<totalNumTIDs>
   /* Maximum of 254 ODTS in total 0 <= n <= (253 == 0xFD) */
   /* 1 DAQ list for each TID in the model */
   #define C_NUMBER_OF_DAQ_LISTS %<usedNumTIDs>
   /* ODTs shared equally between DAQ lists */
   %assign num_odts_per_daq = %<CAST("Number",numODTs / usedNumTIDs)>
   %if num_odts_per_daq < 1
      %closefile ccp_auto_defs
      %openfile buffer
There were not enough Object Descriptor Tables (ODT's) available to allocate at least 
one per DAQ list.
To fix this error, you should increase the total number of ODT's that is specified in 
the mask of the CAN Calibration Protocol Block.
For this particular model, you will need at least %<usedNumTIDs> ODT's to avoid this
error message.   This is the number of DAQ lists that will be created for this model.
      %closefile buffer
      %exit %<buffer>
   %endif
   #define C_NUMBER_OF_ODTS_PER_DAQ %<num_odts_per_daq>

   %closefile ccp_auto_defs

   %% must add ccp_auto_defs to model.h file explicitly
   %openfile buffer
   #include "ccp_auto_defs.h"
   %closefile buffer
   %% LibCacheIncludes only adds to model_private.h
   %%<LibCacheIncludes(buffer)
   
   %% LibAddtoCommonIncludes seems to add to both
   %% model.h and model_private.h with #ifdefs to stop
   %% it being included twice
   %<LibAddToCommonIncludes("ccp_auto_defs.h")>
%endfunction

%% [EOF] TEMPLATE.tlc
