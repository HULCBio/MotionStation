%% sfun_extended_custcode.tlc
%%
%% Abstract:
%%   
%%
%% $Revision: 1.1.6.2 $
%% $Date: 2004/04/19 01:22:36 $
%%
%% Copyright 2002-2004 The MathWorks, Inc.

%implements sfun_extended_custcode "C"
%include "targets_general_includes.tlc"


%%
%% Custom Code Functions To Be Used 
%%
%% LibHeaderFileCustomCode(buffer, location) void
%% LibExportFileCustomCode(buffer, location) void
%% LibPrmFileCustomCode(buffer, location) void
%% LibSourceFileCustomCode(buffer, location) void
%% LibRegFileCustomCode(buffer, location) void
%%
%% LibMdlStartCustomCode(buffer, location) void
%% LibMdlTerminateCustomCode(buffer, location) void
%% LibMdlRegCustomCode(buffer, location) void
%%
%% LibSystemInitializeCustomCode(system, buffer, location) void
%% LibSystemOutputCustomCode(system, buffer, location) void
%% LibSystemUpdateCustomCode(system, buffer, location) void
%% LibSystemDerivativeCustomCode(system, buffer, location) void
%% LibSystemEnableCustomCode(system, buffer, location) void
%% LibSystemDisableCustomCode(system, buffer, location) void
%% 


%function ProcessCustomCode(block, system) Output
    %with RTWdata
       %assign codeGenForSim = SLibCodeGenForSim()
       %if codeGenForSim 
           %% Generate no driver code

           %% This mode of code generation is either for S-Function
           %% target or for processor in the loop

       %else


           %switch Unique

           %case "Multiple"
              %% Do nothing
              %break

           %case "Singleton"
              %% Check to see if another instance of this block with key exists.
              %% If it does then throw an error.
              %% If it does not then mark the model that at least
              %% one instance of this block has been added. 
              %if CustomCodeExists(ReferenceMask,Location,Key)
                 %matlab hilite_system(InstanceMask)
                 %if !FEVAL("all",FEVAL("isspace",Key))
                    %exit "Only one instance of %<ReferenceMask> with key %<Key> is allowed in this model"
                 %else
                    %exit "Only one instance of %<ReferenceMask> is allowed in this model"
                 %endif
              %else
                  %addtorecord CompiledModel ExtendedCustomCoderUniqueFlag { \
                     ReferenceMask "%<ReferenceMask>" \
                     Location "%<Location>" \
                     Key "%<Key>" \
                  }
              %endif %% [ CustomCodeExists ]
              %break

           %case "Unique"  
              %% This custom code block is emulating the
              %% BlockTypeSetup function. Only the first block
              %% which matches the ReferenceMask and Location 
              %% conditions will be allowed to generate code.
              %if CustomCodeExists(ReferenceMask,Location,Key)
                  %return
              %else
                  %addtorecord CompiledModel ExtendedCustomCoderUniqueFlag { \
                     ReferenceMask "%<ReferenceMask>" \
                     Location "%<Location>" \
                     Key "%<Key>" \
                  }
              %endif %% [ CustomCodeExists ]

          %endswitch %% [ Unique ]
       
          %if EXISTS("Top")
               %<WriteCustomCode(block, system, Location, Top, "header")>
          %endif

          %if EXISTS("Middle")
               %<WriteCustomCode(block, system, Location, Middle,  "execution")>
          %endif

          %if EXISTS("Bottom")
               %<WriteCustomCode(block, system, Location, Bottom, "trailer")>
          %endif
     %endif
   %endwith
%endfunction
                      
%function WriteCustomCode(block, system, zone, buffer, location) Output
     %if WHITE_SPACE(buffer)
        %% Don't output empty buffers
        %return
     %endif

     %% Items which support header and trailer only
     %%      LibHeaderFileCustomCode(buffer, location) void
     %%      LibExportFileCustomCode(buffer, location) void
     %%      LibPrmFileCustomCode(buffer, location) void
     %%      LibSourceFileCustomCode(buffer, location) void
     %%      LibRegFileCustomCode(buffer, location) void
     %switch zone
          %case "Header File"
               %if !ISEQUAL(location,"execution") 
                    %<LibHeaderFileCustomCode(BlockComment(system), location)> 
                    %<LibHeaderFileCustomCode(buffer, location)>
               %endif
              %break
          %case "Export Header"
               %if !ISEQUAL(location,"execution") 
                    %<LibExportFileCustomCode(BlockComment(system), location)>
                    %<LibExportFileCustomCode(buffer, location)>
               %endif
               %break
          %case "Parameter File"
               %if !ISEQUAL(location,"execution") 
                    %<LibPrmFileCustomCode(BlockComment(system), location)>
                    %<LibPrmFileCustomCode(buffer, location)>
               %endif
               %break
          %case "Source File"
               %if !ISEQUAL(location,"execution") 
                    %<LibSourceFileCustomCode(BlockComment(system), location)>
                    %<LibSourceFileCustomCode(buffer, location)>
               %endif
               %break
          %case "Registration File"
               %if !ISEQUAL(location,"execution") 
                    %<LibRegFileCustomCode(BlockComment(system), location)>
                    %<LibRegFileCustomCode(buffer, location)>
               %endif
               %break
          %case "Registration Function"
               %<LibMdlRegCustomCode(BlockComment(system), location)>
               %<LibMdlRegCustomCode(buffer, location)>
               %break
          %case "Model Start Function"
               %<LibMdlStartCustomCode(BlockComment(system), location)>
               %<LibMdlStartCustomCode(buffer, location)>
               %break
          %case "Model Terminate Function"
               %<LibMdlTerminateCustomCode(BlockComment(system), location)>
               %<LibMdlTerminateCustomCode(buffer, location)>
               %break
          %case "Subsystem Initialize Function"
               %if ISEQUAL(location,"execution") 
                        %% Take advantage of the fact that we are allready in
                        %% the Start function and get Simulink to order the
                        %% code correctly.
                        %<buffer>
               %else
                        %<LibMdlStartCustomCode(BlockComment(system), location)>
                        %<LibMdlStartCustomCode(buffer, location)>
               %endif
               %break
          %case "Subsystem Outputs Function"
               %<LibSystemOutputCustomCode(system, BlockComment(system), location)>
               %<LibSystemOutputCustomCode(system, buffer, location)>
               %break
          %case "Subsystem Update Function"
               %<LibSystemUpdateCustomCode(system, BlockComment(system), location)>
               %<LibSystemUpdateCustomCode(system, buffer, location)>
               %break
          %case "Subsystem Derivatives Function"
               %if EXISTS("system.DerivativeFcn")
                   %<LibSystemDerivativeCustomCode(system, BlockComment(system), location)>
                   %<LibSystemDerivativeCustomCode(system, buffer, location)>
               %else
                   %assign errTxt = "The Real-Time Workshop Subsystem Derivatives custom code block "\
                   "cannot be placed in subsystem:  %<system.Name> because the subsystem does not "\
                   "have a derivatives function."
                    %<LibReportError(errTxt)>
               %endif
               %break
          %case "Subsystem Enable Function"
               %<LibSystemEnableCustomCode(system, BlockComment(system), location)>
               %<LibSystemEnableCustomCode(system, buffer, location)>
               %break
          %case "Subsystem Disable Function"
               %<LibSystemDisableCustomCode(system, BlockComment(system), location)>
               %<LibSystemDisableCustomCode(system, buffer, location)>
          %default
               %exit %<zone> is not supported.
          %endswitch

%endfunction

%function BlockComment(system)
     %return "/* System : " + system.Name + " */ "
%endfunction

%% Function: Outputs ==========================================================
%% Abstract:
%%
%function Outputs(block, system) Output
%endfunction

%% Function: Outputs ==========================================================
%% Abstract:
%%
%function Start(block, system) Output 
    %<ProcessCustomCode(block, system)>
%endfunction

%% Function: Outputs ==========================================================
%% Abstract:
%%
%function Update(block, system) Output 
%endfunction

%%-----------------------------------------------------
%% Function CustomCodeExists
%%
%% Purpose
%%
%%      Tests to see if a record
%%
%%      ExtendedCustomCoderUniqueFlag{
%%          ReferenceBlock "...."
%%          Location "...."
%%      }
%%
%%      has been placed in the CompiledModel top record
%%      which matches the ReferenceMask and Location 
%%      arguments. If a match is found the TLC_TRUE
%%      is retured, else TLC_FALSE is returned
%%
%%------------------------------------------------------
%function CustomCodeExists(ReferenceMask,Location,Key)
    %if EXISTS(CompiledModel.ExtendedCustomCoderUniqueFlag)
        %assign nRecords = SIZE(CompiledModel.ExtendedCustomCoderUniqueFlag,1)
        %foreach idx=nRecords
            %assign rec = CompiledModel.ExtendedCustomCoderUniqueFlag[idx]
            %if ISEQUAL(rec.ReferenceMask,ReferenceMask) && ISEQUAL(rec.Location,Location) && ISEQUAL(rec.Key,Key) 
                %return TLC_TRUE
            %endif
        %endforeach
        %return TLC_FALSE
    %else
        %return TLC_FALSE
    %endif
%endfunction
%% [EOF] register_programmer.tlc
