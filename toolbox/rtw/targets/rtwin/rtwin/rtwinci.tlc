%%****************************************************************************
%%****************************************************************************
%%
%%              TLC for Counter Input block from Real-Time Windows Target
%%
%%              $Revision: 1.3.2.1 $
%%              $Date: 2002/12/18 10:35:17 $
%%              $Author: batserve $
%%
%%              Copyright 1994-2002 The MathWorks, Inc.
%%
%%****************************************************************************
%%****************************************************************************


%implements "rtwinci" "C"


%% include RTWin library

%include "rtwinlib.tlc"



%% Function: BlockInstanceSetup ====================================================
%% Abstract:
%%      Register board to board table
%%

%function BlockInstanceSetup(block, system) void

%<RTWinRegisterBoard(block)>

%endfunction %% BlockInstanceSetup



%% Function: BlockInstanceData ====================================================
%% Abstract:
%%      Emit boards table into the code
%%
%function BlockInstanceData(block, system) void

%<RTWinEmitBoards()>

%endfunction %% BlockInstanceData



%% Function: InitializeConditions =============================
%% Abstract:
%%	Reset counters by calling:
%%      RTBIO_DriverIO(adapter, COUNTERINPUT, IORESET, n, ch, NULL, &parm);
%%
%function InitializeConditions(block, system) Output
%%
  /* %<Type> Block: %<Name> */
  {
    %assign n = LibBlockOutputSignalWidth(0)
    %assign chanptr = LibBlockParameterAddr(Channels, "", "", 0)
%%
    %assign counteredge = LibBlockParameter(CtrEdge, "", "", 0)
    %assign countergate = LibBlockParameter(CtrGate, "", "", 0)
%%
        COUNTERINPARM parm;

        parm.edge = %<counteredge>;
        parm.gate = %<countergate>;
        RTBIO_DriverIO(%<block.RTWinBoardIdx>, COUNTERINPUT, IORESET, %<n>, %<chanptr>, NULL, &parm);
  }
        
%endfunction %% InitializeConditions



%% Function: Outputs ===========================================================
%% Abstract:
%%	Read real-time counter inputs by calling:
%%      RTBIO_DriverIO(adapter, COUNTERINPUT, <ioaction>, n, ch, val, &parm);
%%
%function Outputs(block, system) Output
%%
  /* %<Type> Block: %<Name> */
  {
    %assign n = LibBlockOutputSignalWidth(0)
    %assign chanptr = LibBlockParameterAddr(Channels, "", "", 0)
    %assign valptr = LibBlockOutputSignalAddr(0, "", "", 0)
%%
    %assign counteredge = LibBlockParameter(CtrEdge, "", "", 0)
    %assign countergate = LibBlockParameter(CtrGate, "", "", 0)
%%
        COUNTERINPARM parm;
        DRVIOACTION action;

    %if ResetMode >= 2
        int reset = %<LibBlockInputSignal(0, "", "", 0)> != 0;
    %endif
    %if ResetMode >= 3
        %assign lastreset = LibBlockIWork(LastResetInput, "", "", 0)
    %endif
%%
    %switch ResetMode
%%
      %case 0     %% NEVER
        action = IOREAD;
      %break
%%
      %case 1     %% ALWAYS
        action = IOREADWITHRESET;
      %break
%%
      %case 2     %% LEVEL
        action = reset ? IOREADWITHRESET : IOREAD;
      %break
%%
      %case 3     %% RISING
        action = (!%<lastreset> && reset) ? IOREADWITHRESET : IOREAD;
      %break
%%
      %case 4     %% FALLING
        action = (%<lastreset> && !reset) ? IOREADWITHRESET : IOREAD;
      %break
%%
      %case 5     %% EITHER
        action = (%<lastreset> != reset) ? IOREADWITHRESET : IOREAD;
      %break
%%
    %endswitch
%%
        parm.edge = %<counteredge>;
        parm.gate = %<countergate>;
        RTBIO_DriverIO(%<block.RTWinBoardIdx>, COUNTERINPUT, action, %<n>, %<chanptr>, %<valptr>, &parm);
    %if ResetMode >= 3
        %<lastreset> = reset;
    %endif
  }

%%
%endfunction %% Outputs



%% [EOF] rtwinci.tlc
