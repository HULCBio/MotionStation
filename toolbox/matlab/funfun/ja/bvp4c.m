% BVP4C  選点法によりODEsに対する境界値問題を解きます。
% 
% SOL = BVP4C('F','G',SOLINIT)は、一般的な2点境界条件 bc(y(a),y(b)) = 0
% による制約の基で、区間[a,b]で、常微分方程式 y' = F(x,y)を積分します。
% ODEFUNは、2つの引数スカラ X とベクトル Y をもつ関数です。ODEFUN(X,Y) 
% は、f(x,y) を表わす列ベクトルを出力します。BCFUN は、2つのベクトル引数
% をもつ関数です。BCFUN(YA,YB)　は、bc(y(a),y(b)) を表わす列ベクトルを出
% 力します。SOLINITは、つぎのフィールドをもつ構造体です。
% 
%    x -- SOLINIT.x(1) = a、SOLINIT.x(end) = bをもつ初期メッシュの順序付
%         けられた 節点
%    y -- 節点SOLINIT.x(i)での解とy(x(i))に対する推定SOLINIT.y(:,i)をも
%         つ解に対する初期推定
% 
% BVP4C は、区間[a,b]で連続で、その区間での1階微分が連続の解をもちます。
% 解は、BVP4C の出力 SOL と関数 BVPVAL を使って、点 XINT で計算されます。
% YINT = BVPVAL(SOL,XINT) となります。出力 SOL は、つぎのフィールドをも
% つ構造体です。
% 
%    SOL.x  -- BVP4Cで選択されるメッシュ
%    SOL.y  -- SOL.xのメッシュ点でのy(x)への近似
%    SOL.yp -- SOL.x のメッシュ点でのy'(x) への近似
%    SOL.solver -- 'bvp4c'
%
% SOL = BVP4C(ODEFUN,BCFUN,SOLINIT,OPTIONS) は、デフォルトパラメータを 
% 関数 BVPSET で作成された構造体 OPTIONS の中の値と置き換えて、上述した
% 問題を解きます。実行時間を大幅に削減するには、OPTIONS パラメータを使っ
% て、関数に ヤコビアンを与えたり、ODEFUN をベクトル化してください。詳細
% は、BVPSET を参照してください。また、上記の2つの方法を実行する例題に
% ついては、SHOCKBVP を参照してください。
% 
% SOL = BVP4C(ODEFUN,BCFUN,SOLINIT,OPTIONS,P1,P2...) は、定数、既知パラメ
% ータ P1, P2... を関数 ODEFUN と BCFUN に渡し、OPTIONS の中に指定した関
% 数すべてにも渡します。オプションを設定しない場合は、OPTIONS = [] と設定
% してください。
%   
% いくつかの境界値問題は、y(x)と共に計算される未知のパラメータベクトル p
% を含んでいます。
% 
%       y' = f(x,y,p)
%       0  = bc(y(a),y(b),p) 
% 
% このような問題に対して、フィールド SOLINIT.parameters が、未知パラメー
% タの推定を与えるために使われます。出力としては、求まったパラメータが、
% フィールド SOL.parameters に出力されます。あるパラメータ値の組を使って
% 解いた問題の解 SOL は、他のパラメータに対しては、SOLINIT として使うこと
% ができます。難しい BVPs は、連続的に解くことができる場合があります。す
% なわち、解を得ることが可能なパラメータ値を使ってスタートし、解を求め、
% 最終的に求めたいものに近いパラメータを使った計算の推定値として、最初の
% 解を使います。ユーザが希望するパラメータに対して、BVP が解けるまで、繰
% り返し計算を行います。
%
% 関数 BVPINIT は、多くの一般的な場合、推定に必要な構造体を作成します。
% すなわち、SOLINIT = BVPINIT(X,YINIT) は、SILINIT.x で記述される初期メ
% ッシュ X に対する推定と、区間[a,b]内の任意の点での解に対する推定を計算す
% る関数名(文字列)か、または、解に対する定数ベクトルを使った推定のいずれ
% かを用いる YINIT で記述される初期メッシュ X に対する推定を行います。未
% 知パラメータが存在する場合、SOLINIT = BVPINIT(X,YINIT,PARAMS)は、未知
% パラメータ用の推定に関するベクトル PARAMS を使って推定量を設定します。
% 
% BVP4Cは、つぎの形式の未知のパラメータpをもつ問題を含む、特異なクラスのBVP
% を解きます。
%       y' = S*y/x + f(x,y,p)
%       0  = bc(y(0),y(b),p) 
% 区間は、[0, b] で、b > 0である必要があります。 
% このような問題は、円筒形または球形の対称性のため、PDEの結果であるODEのス
% ムーズな解の計算のときに発生することがあります。特異な問題に対して、(定数)行
% 列Sは、BVPSETの'SingularTerm'オプションの値として指定され、ODEFUNはf(x,y,p)
% のみを実行します。境界条件は、必要条件S*y(0) = 0と一致する必要があり、初期
% 推定は、この条件を満足する必要があります。
%
% BVP4C は、多点境界値問題を解くことができます。そのような問題の場合、区間
% [a,b] 内でいくつかの境界条件があります。 一般にこれらの点は、インタフェース
% を表わし、[a,b] の領域への自然な分割を与えます。
% BVP4C は、左から右( a から b )に領域を、1 からはじまるインデックスで
% 数えます。領域 k では、BVP4C は、導関数を YP = ODEFUN(X,Y,K) と評価します。 
% 境界条件の関数 BCFUN(YLEFT,YRIGHT) では、 YLEFT(:,k) は、領域 k 'left' の
% 境界での解であり、YRIGHT(:,k) についても同様です。初期推定が
% BVPINIT(XINIT,YINIT) で作成される場合、XINIT は、各境界点に対して、
% double entries をもつ必要があります。YINIT が関数の場合、BVPINIT は、
% 領域 k の X での解に対する初期推定を得るために、Y = YINIT(X,K) をコール
% します。BVP4C により出力される解の構造体 SOL.x は、各境界点に対して、
% double entries をもちます。SOL.y の対応する列は、境界での 'left' および
% 'right' の解をそれぞれもちます。3点境界値問題 ( three-point BVP )を解く
% 例題として、THREEBVP を参照してください。
%
% 例題
%         solinit = bvpinit([0 1 2 3 4],[1 0]);
%         sol = bvp4c(@twoode,@twobc,solinit);
%
% は、微分方程式と境界値、区間[0, 4]で、関数 twoode と twobc を使って、
% そぞれ解かれます。この例題は、初期メッシュとして、[0 1 2 3 4] を使い、
% メッシュ点での解要素の初期近似として、[1 0] を使います。
% 
%         xint = linspace(0,4);
%         yint = bvpval(sol,xint);
% 
% は、区間 [0,4] で、等間隔に100区分された点で解を計算します。解の最初の
% 成分は、つぎのステートメントでプロットされます。
% 
%         plot(xint,yint(1,:));
% 
% 他の例題は、TWOBVP, FSBVP, SHOCKBVP, MAT4BVP, EMDENBVP, THREEBVP を
% 参照してください。   
%
% 参考 BVPSET, BVPGET, BVPINIT, DEVAL, @.

% BVP4C は、3ステージの LobattoIIIa 公式を実行する有限差分コードです。
% これは、選点公式を表わし、選点多項式 (collocation polynomial) は、
% [a,b] で一様な4次の精度をもつC1連続な解を与えます。
% (多点境界値問題に対して、解は各領域内で C1連続ですが、連続性は、
% 境界では自動的には課されていません。) 
% メッシュの選択と誤差制御は、連続な解の残差に基づきます。
% 代数方程式系が作成される場合に、解析的に簡約化されます。

%   Jacek Kierzenka and Lawrence F. Shampine
%   Copyright 1984-2003 The MathWorks, Inc. 

