%% File: sfun_pose2vr.tlc
%% Abstract:
%%     TLC file for SimMechanics block "sfun_pose2vr "
%%	 Transforms a DCM to VR rotation vector and angle as needed by VRML	
%%
%% Copyright 2002-2003 The MathWorks, Inc.

%% $Revision: 1.1.6.2 $ 

%implements "sfun_pose2vr" "C"

%% Function: transformToVRRotation ========================================
%% Abstract:
%%      	Takes a transformation matrix and produces the corresponding
%%         	rotation parameters for a VRML scene. It produces a four
%%          element vector defining a unit vector and a rotation about
%%          that vector in radians.                                    
%%                                                                     
%%          rotation = {a1, a2, a3, phi}                                 
%%
%function transformToVRRotation(uT, y0)

  %openfile buffer
  
  real_T sigma = 0.0;
  real_T     den;

  %% 
  %%   Make temporary variables T to keep track of indicies.
  %% 
  %% 	This algorithm assumes that the transformation matrix
  %%	coming in is the direction cosine matrix of the body 
  %%	coordinate system. This tells us the location of the world
  %%	coordinate system with respect to the body location.
  %%	Therefore, we need to transpose the incoming 
  %%	matrix here so we will end up with angle and rotation 
  %%	of the body with respect to the world.
  %%
  %%	The input matrix is stored column-wise, so we read it
  %%	in row-wise to get its tranpose.
  %%
  
  real_T	T11 = (%<uT>)[0];
  real_T	T12 = (%<uT>)[1];
  real_T	T13 = (%<uT>)[2];
  real_T	T21 = (%<uT>)[3];
  real_T	T22 = (%<uT>)[4];
  real_T	T23 = (%<uT>)[5];
  real_T	T31 = (%<uT>)[6];
  real_T	T32 = (%<uT>)[7];
  real_T	T33 = (%<uT>)[8];

  /% Calculate an intermediate variable, sigma %/
  /% sigma = sum(diag(C)); %/      
  sigma = T11 + T22 + T33;

  /% If sigma is 3 %/
  if (sigma == 3.0) {
	   /%
	    *  warning('The rotation is undefined')
	    *  rotation[3] = 0;
	    *  rotation[0 1 2] = [1 0 0]';
	    %/
	    y0[0]  = 1.0;
	    y0[1]  = 0.0;
	    y0[2]  = 0.0;
	    y0[3]  = 0.0;

	    /% ElseIf sigma is -1, %/
	    } else if (sigma == -1.0) {
	       /% Make sure that sums are >= 0. %/
            real_T  sum0 = (1 + T11)/2.0;
            real_T  sum1 = (1 + T22)/2.0;
            real_T  sum2 = (1 + T33)/2.0;
                    sum0 = sum0 >= 0.0 ? sum0 : 0.0;
                    sum1 = sum1 >= 0.0 ? sum1 : 0.0;
                    sum2 = sum2 >= 0.0 ? sum2 : 0.0;

		    /%
		    *  rotation[3] = acos((sigma - 1)/2);
		    *  rotation[0] = sqrt((1 + C(1,1))/2);
		    *  rotation[1] = sqrt((1 + C(2,2))/2);
		    *  rotation[2] = sqrt((1 + C(3,3))/2);
		    %/

		   y0[3]= acos((sigma - 1.0)/2.0);
		   y0[0] = sqrt(sum0);
		   y0[1] = sqrt(sum1);
		   y0[2]= sqrt(sum2);

		  /% 
		  * Resolve sign ambiguity in results here based on these equations.
		  * This doesn't need to be done for visulization since we are not
		  * concerned if the scene has continuous data from one step to the
		  * next.
		  *
		  * rotation[0]*rotation[1] = T12/2;
		  * rotation[1]*rotation[2] = T23/2;
		  * rotation[2]*rotation[0] = T31/2;
		  %/

		/% Else handle the general case %/
		} else {
		     y0[3] = acos((sigma - 1)/2);
		     den   = 2*sin((%<y0>)[3]);
		     y0[0] = (T23 - T32)/den;
		     y0[1] = (T31 - T13)/den;
		     y0[2] = (T12 - T21)/den;
		}

		 %closefile buffer
		 %return buffer

%endfunction 		%% transformToVRRotation


%% Function:  Outputs ================================================
%% Abstract:
%function Outputs(block, system) Output
/* %<Type> Block: %<Name> */

	 %assign rollVars = ["Y"]
	 %roll idx = RollRegions, lcv = RollThreshold, block, "Roller", rollVars
		 %assign uT = LibBlockInputSignalAddr(0,"","",0)
		 %assign y0 = LibBlockOutputSignalAddr(0,"","",0)
		 %<transformToVRRotation(uT, y0)>; 
	 %endroll
	 
%endfunction

%% [EOF] sfun_pose2vr.tlc
	       