% PULSTRAN パルス列発生器
%
% PULSTRANは、連続関数またはサンプリングされたプロトタイプパルスからパル
% ス列を生成します。
%
% 連続関数
% Y = PULSTRAN(T,D,'func')は、連続関数 'func'のサンプルに基づいてパルス
% 列を生成します。関数は、ベクトルDで定義したスカラ引数オフセットを取り
% 除いた後、配列Tに設定された引数の範囲全体について計算します。この結果、
% 関数は、length(D)回計算し、その結果の和 Y = func(t-D(1)) + func(t-D(2)) 
% + ... が出力されます。'func'は、配列Tを引数として受け取ることができる
% ベクトル 関数でなければならないことに注意してください。
%
% 1列目に設定したオフセット、2列目にそれに関連するゲインをもつ2列の行列
% として、Dを設定することにより、各遅れにオプションのゲインファクタを計
% 算に取り込むことができます。行ベクトルは、遅れを設定するものとしてのみ
% 解釈されることに注意してください。
%
% PULSTRAN(T,D,'func',P1,P2,...)は、必要に応じて追加パラメータを 'func'
% に渡すことができます。たとえば、func( T-D(1), P1, P2, ... ) のように設
% 定します。
%
% サンプル化されたプロトタイプパルス
% PULSTRAN(T,D,P,FS) は、レート FS でサンプル化したベクトル P に設定した
% プロトタイプパルスに各々の遅れを適用し、それをすべて加算することで、パ
% ルス列に生成します。T と D は、先の定義に従います。ここで、Pは、[0,
% (length(P)-1)/Fs] の時間範囲で、この範囲外ではサンプルは完全に0としま
% す。デフォルトでは、線形補間を使って遅れを生成します。
%
% PULSTRAN(T,D,P) は、Fs = 1 と仮定し、PULSTRAN(..., 'method') は、別の
% 補間法を設定します。利用可能な方法については、interp1 を参照してくださ
% い。
%
% 例題1
% 3 Hzの反復周波数と0.1秒のノコギリ幅をもつ非対称ノコギリ波を生成します。
% そして、1秒の信号の長さと1 kHzのサンプリングレートを考えます。
%
%            T = 0 : 1/1E3 : 1;  % 1 kHzのサンプリング周波数で1秒間
%            D = 0 : 1/3 : 1;    % 3 Hzの反復周波数
%            Y = pulstran(T,D,'tripuls',0.1,-1); plot(T,Y)
%
% 例題2
% 10 kHzで50%の帯域幅をもつ周期性ガウスパルスを生成します。パルスの反復
% 周波数は1 kHz、サンプリング周波数は50 kHz、またパルス列の長さは10ミリ
% 秒です。反復による振幅を毎回0.8ずつ減衰させます。 
%
%             T = 0 : 1/50E3 : 10E-3;
%             D = [0 : 1/1E3 : 10E-3 ; 0.8.^(0:10)]';
%             Y = pulstran(T,D,'gauspuls',10E3,.5); plot(T,Y)
%
% 例題3
% 10個のRayleighパルス列を生成します(Statistics Toolbox が必要です)。
%
%            (Statistics Toolbox が必要)
%             P = raylpdf((0:31)/5,1.5);  ALT: P = hamming(32)
%             T = 0:320;
%             D = (0:9)'*32;
%             Y = pulstran(T,D,P); plot(T,Y)
%
% 参考：   GAUSPULS, RECTPULS, TRIPULS, SINC.



%   Copyright 1988-2002 The MathWorks, Inc.
