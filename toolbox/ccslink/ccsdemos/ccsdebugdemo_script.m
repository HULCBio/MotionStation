%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function varargout = ccsdebugdemo_script(varargin)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% CCSDEBUGDEMO_SCRIPT Script for debugging a DSP Target implementation
%  The DSP application is executed as-is, and results are compared with
%  MATLAB simulation values. 

%   Copyright 2004 The MathWorks, Inc.

nargchk(0,2,nargin);
nargchk(0,1,nargout);
[cc,extraStep,tol] = setupDefaultParams(varargin); % defaults
if strcmp(extraStep,'viewdspcode'),  return;  end

disp(sprintf('\n------------ CCSDEBUGDEMO ------------'));

%==========================================================================
% MATLAB simulation
%==========================================================================

% Execute MATLAB simulation
[inputSignal,filterCoeffs,filterOutput,halfSpect,fftSignal,spect_magsq] = ...
    ccsdebugdemo_MLsim;

%==========================================================================
% DSP Target setup
%==========================================================================

% Run separate script to load program, open project, 
% set breakpoints, etc. 
[cc,dspname,bkPts] = targetSetup('ex1',cc);

% Run to first breakpoint, just before filter - after 'genInputSignal'
disp('Running to first breakpoint ...');
run(cc,'runtohalt');

%==========================================================================
disp('I N P U T   S I G N A L   - - - - - - - - - - - - -')
%==========================================================================

disp('Reading sinusoid + noise input signal from DSP ...')
inputSignal_tgt = read(cc,address(cc,'FilterInput'),'int16',256+65,20); % output is Q15 format
inputSignal_tgt = double(inputSignal_tgt(66:end))/(2^15);

% Plot input signal generated by the target DSP and input signal generated
% by MATLAB
t = (0:255)'/8000;
plotOutput(1,t,inputSignal_tgt,inputSignal,1,'Input Signal');

% Compare
n = computeDifference(tol,inputSignal,inputSignal_tgt);

if strcmp(extraStep,'updateFilterCoefficients')
    % From analysis, 33rd filter coefficient is wrong. Without changing the
    % DSP code and recompiling the project, modify the 33rd coefficient and
    % check if this corrects the filter output
    if useDirectMemoryAccesss(cc) % exception
        filterCoeffsAddr = address(cc,'filterCoeffs');
        write(cc,[filterCoeffsAddr(1)+32,filterCoeffsAddr(2)],int16(1191));
    else
        filterCoeffsObj = createobj(cc,'filterCoeffs');
        write(filterCoeffsObj,33,1191);
    end
end

%==========================================================================
disp('F I L T E R   - - - - - - - - - - - - - - - - - - -')
disp('Executing filter on DSP ...');
%==========================================================================

% Run to second breakpoint - after 'filter'
run(cc,'runtohalt');

% Read output from DSP 
disp('Reading filtered signal from DSP ...');
filterOutput_tgt = read(cc,address(cc,'FilterOutput'),'int16',256); % output is Q15 format
filterOutput_tgt = double(filterOutput_tgt)/(2^15);

% Plot filter
plotOutput(1,t,filterOutput_tgt,filterOutput,2,'Filter Output');

% Compare filters
n = computeDifference(tol,filterOutput,filterOutput_tgt);

% Extra code to analyze filter coefficients
if n>=tol && strcmp(extraStep,'compareFilterCoefficients')
    compareFilterCoefficients(cc,filterCoeffs);
end
if strcmp(extraStep,'updateFilterCoefficients')
    plotFilterCoefficients(cc,filterCoeffs);
end

%==========================================================================
disp('S P E C T R U M   - - - - - - - - - - - - - - - - -')
disp('Executing spectrum computation on DSP ...')
%==========================================================================

% Run to third breakpoint - after 'computeSpectrum'
run(cc,'runtohalt');

% Read output from DSP 
disp('Reading spectrum data from DSP ...')
spectrum_tgt = read(cc,address(cc,'MagSqrResult'),'uint16',512); % mag-squared
spectrum_tgt = double(spectrum_tgt);

% Plot spectra and compare
warning('off','MATLAB:log:logOfZero');
halfSpect_tgt = db(spectrum_tgt(1:length(spectrum_tgt)/2));
warning('on','MATLAB:log:logOfZero');
halfSpect = halfSpect - max(halfSpect);
fVect = ( 0:(2/256):2-(2/256) )';
halfSpect_tgt = halfSpect_tgt - max(halfSpect_tgt);
plotOutput(1,fVect,halfSpect_tgt(1:256),halfSpect(1:256),3,'Spectrum');

% Compare simulation results: MATLAB result versus target DSP result
n = computeDifference(tol,halfSpect(1:256),halfSpect_tgt(:));

%==========================================================================
% Cleanup
%==========================================================================

targetCleanup(cc,bkPts);

if nargout==1
    varargout{1} = cc;
end

disp(sprintf('-------------- DONE ---------------\n'));

%--------------------------------------------------------------------------
function varargout = ccsdebugdemo_MLsim
%===========================%
% N O I S Y   S I G N A L
%===========================%
% Get noise from data file, matching target's data
load('noiseVect.mat');
% Form input signal
t = (0:255)'/8000;
sineFreq = 100;
sineSignal = sin( sineFreq * t * 2 * pi );
inputSignal = 0.12*noiseVect + 0.2*sineSignal ;
%===========================%
% F I L T E R   
%===========================%
% Design filter:  Order 64, Lowpass
filterCoeffs = fir1(64,0.03);
% Filter data 
filterOutput = filter(filterCoeffs, 1, inputSignal);
%===========================%
% S P E C T R U M
%===========================%
% Remove initial filter delay of half the filter order
truncSignal = filterOutput( 33 : end );
% Pad resulting signal to length 1024 for smooth freq-domain curve
paddedSignal = [ truncSignal; zeros(1024-length(truncSignal), 1) ];
% Compute fft
fftSignal = fft(paddedSignal);
% Compute spectrum
spect_magsq = abs(fftSignal).^2;
% Convert to dB
spect = db(spect_magsq);
halfSpect = spect(1:length(spect)/2);
halfSpect = halfSpect - max(halfSpect); % scale to 0 dB max
%===========================%
% Output(s)
%===========================%
if nargout~=0
    varargout{1} = inputSignal;
    varargout{2} = filterCoeffs;
    varargout{3} = filterOutput;
    varargout{4} = halfSpect;
    varargout{5} = fftSignal;
    varargout{6} = spect_magsq;
end

%--------------------------------------------------------------------------
function plotOutput(num,xylim,tgtResult,simResult,subplt,titl)
figure(num);
switch num
    case 1,
        set(num,...
            'units','normalized',...
            'position',[0.3135 0.2930 0.4170 0.5885],...
            'name','MATLAB simulation vs. DSP implementation',...
            'numbertitle','off');
        if subplt==1 || subplt==2
            xylim = 1:length(xylim);
        end
		subplot(3,1,subplt);
		plot(xylim,simResult);
        if subplt==3
            ylabel('Amplitude (dB)');
            % a = axis; axis([a(1) a(2) -100 0]);
        else
    		axis([0 xylim(256) min(tgtResult) max(tgtResult)]);
        end
		title([titl '       MATLAB: blue,  DSP: red'])
		hold on;
		plot(xylim,tgtResult,'r'); grid on;
		hold off;
        drawnow;
    case 2,
        set( num ,...
            'units','normalized',...
            'Position',[0.0146    0.5586    0.2910    0.3216],...
            'name','Filter coefficients',...
            'numbertitle','off');
        h = stem(xylim,simResult,'bx'); hold on;
        stem(tgtResult,'ro'); hold off; 
        maxval = max(abs([simResult tgtResult]));
        axis([1 length(simResult) -maxval(1) maxval(1)]);
        grid on; 
        legend('MATLAB','DSP','Location','SouthWest');
        drawnow;
    case 5,
        set(num,'position',[260 200 800 400]);
        subplot(2,2,1); plot(tgtResult{1},'r'); hold on;
        plot(simResult{1},'b'); hold off;
        title('FFT (real) results (normalized), MATLAB=blue, DSP=red');
        axis tight; grid on;
        subplot(2,2,3); plot(tgtResult{1}-simResult{1}','k')
        title('FFT (real) difference');
        a = axis; axis([a(1),a(2),-0.1,0.1]); grid on;
        subplot(2,2,2); plot(tgtResult{2},'r'); hold on;
        plot(simResult{1},'b'); hold off;
        title('FFT (imag) results (normalized), MATLAB=blue, DSP=red');
        axis tight; grid on;
        subplot(2,2,4); plot(tgtResult{2}-simResult{2}','k');
        title('FFT (imag) difference');
        a = axis; axis([a(1),a(2),-0.1,0.1]); grid on;        
        drawnow;
    case 6,
        set(num,'position',[300 59 560 619]);
        subplot(2,1,1); plot(xylim,tgtResult,'r'); hold on;
        plot(xylim,simResult,'b'); hold off;
        axis tight; grid on;
        title('Magnitude-Squared of Spectrum (normalized), MATLAB: blue,  DSP: red')
        subplot(2,1,2); plot(xylim,tgtResult-simResult,'k');
        a = axis; axis([a(1),a(2),-0.01,0.01]); grid on;
        title('Difference between MATLAB sim & DSP implementation');
        drawnow;
    otherwise,
end

%--------------------------------------------------------------------------
function n = computeDifference(tol,simResult,dspResult)
n = norm(simResult(:) - dspResult(:));
if n<tol
    disp('The input signal MATCHES simulation');
else
    disp('*** The input signal DIFFERS from simulation');
end

%--------------------------------------------------------------------------
function compareFilterCoefficients(cc,filterCoeffs)
% Use the following commands to get the filter coefficients from the
% DSP and compare to MATLAB's coefficients.

if useDirectMemoryAccesss(cc) % exception
    compareFilterCoefficients_direct(cc,filterCoeffs);
    return;
end

%- Extract 'filterCoeffs' data from DSP
filterCoeffsObj = createobj(cc,'filterCoeffs');
filterCoeffs_tgt = read(filterCoeffsObj);

%- Numerically compare the filter coefficients
dif = (double(filterCoeffs_tgt) - fix(filterCoeffs*(2^15)));
dif
idx = find(dif~=0);
if ~isempty(idx),
    for i=1:length(idx),
        disp(sprintf('\n!!! Coefficient at tap location %d does not match corresponding MATLAB coefficient.\n', idx));
    end
end

%- Graphically compare the filter coefficients
plotOutput(2,(1:prod(filterCoeffsObj.size)),filterCoeffs_tgt,fix(filterCoeffs*(2^15)));

%--------------------------------------------------------------------------
function plotFilterCoefficients(cc,filterCoeffs)
% Use the following commands to get the filter coefficients from the
% DSP and compare to MATLAB's coefficients.

if useDirectMemoryAccesss(cc) % exception
    plotFilterCoefficients_direct(cc,filterCoeffs);
    return;
end

%- Extract 'filterCoeffs' data from DSP
filterCoeffsObj = createobj(cc,'filterCoeffs');
filterCoeffs_tgt = read(filterCoeffsObj);

%- Graphically compare the filter coefficients
plotOutput(2,(1:prod(filterCoeffsObj.size)),filterCoeffs_tgt,fix(filterCoeffs*(2^15)));

%--------------------------------------------------------------------------
function viewdspcode % (proc)
try
    [b,p] = boardprocsel;
    drawnow;
    cc = ccsdsp('boardnum',b,'procnum',p);
catch
    errordlg(lasterr);
    return
end
visible(cc,1);
% Open project and source files
[ccspath,srcpath] = ccsdebugdemo_getpath(cc,'ex1');
cd(cc,ccspath);
warning off; % ignore warning if the project is already open.
open(cc,'FilterFFT.pjt', 'project');
warning on;
activate(cc,'FilterFFT.pjt', 'project');
oldpath = cd(srcpath);
open(cc,'FilterFFT.c', 'text');
try
    activate(cc,'FilterFFT.c', 'text');
catch
    % nothing
end
cd(oldpath);

%--------------------------------------------------------------------------
function [cc,extraStep,tol] = setupDefaultParams(args)
cc = [];
extraStep = [];
tol = 1e-3;
numargin = length(args);
if numargin==1 && ischar(args{1})
    extraStep = args{1};
elseif numargin==2
    cc = args{2};
    extraStep = args{1};
end
if strcmp(extraStep,'viewdspcode')
    viewdspcode;
    return;
end
h = figure(1); close(h);
h = figure(2); close(h);

%--------------------------------------------------------------------------
function resp = useDirectMemoryAccesss(cc)
% if C24x or C27x, use direct memory access
resp = ~isempty(strmatch(dec2hex(cc.subfamily),{'24','27'},'exact'));
%--------------------------------------------------------------------------
function compareFilterCoefficients_direct(cc,filterCoeffs)
numTaps = 65;    
%- Extract 'filterCoeffs' data from DSP
filterCoeffsAddr = address(cc,'filterCoeffs');
filterCoeffs_tgt = read(cc,filterCoeffsAddr,'int16',numTaps);
%- Numerically compare the filter coefficients
dif = (double(filterCoeffs_tgt) - fix(filterCoeffs*(2^15)));
dif
idx = find(dif~=0);
if ~isempty(idx),
    for i=1:length(idx),
        disp(sprintf('\n!!! Coefficient at tap location %d does not match corresponding MATLAB coefficient.\n', idx));
    end
end
%- Graphically compare the filter coefficients
plotOutput(2,(1:numTaps),filterCoeffs_tgt,fix(filterCoeffs*(2^15)));
%--------------------------------------------------------------------------
function plotFilterCoefficients_direct(cc,filterCoeffs)
numTaps = 65;    
%- Extract 'filterCoeffs' data from DSP
filterCoeffsAddr = address(cc,'filterCoeffs');
filterCoeffs_tgt = read(cc,filterCoeffsAddr,'int16',numTaps);
%- Graphically compare the filter coefficients
plotOutput(2,(1:numTaps),filterCoeffs_tgt,fix(filterCoeffs*(2^15)));

% [EOF] ccsdebugdemo_script.m
