<?xml version="1.0" encoding="utf-8"?>
<MATLABInstrumentDriver>
   <FileVersion>1.0</FileVersion>
   <DriverName>D:\A\matlab\matlab\toolbox\instrument\instrument\drivers\agilent_e3648a.mdd</DriverName>
   <DriverType>MATLAB interface driver</DriverType>
   <InstrumentType>DC Power Supply</InstrumentType>
   <InstrumentManufacturer>Agilent</InstrumentManufacturer>
   <InstrumentModel>E3648A</InstrumentModel>
   <InstrumentVersion>1.0</InstrumentVersion>
   <Identify>*IDN?</Identify>
   <Reset>*RST</Reset>
   <Selftest>*TST?</Selftest>
   <Error>System:Error?</Error>
   <CreateInitCode>
      <Code>function init(obj)
% This method is called after the object is created.
% OBJ is the device object.
% End of function definition - DO NOT EDIT
		</Code>
   </CreateInitCode>
   <ConnectInitCode>
      <Type>InstrumentCommand</Type>
   </ConnectInitCode>
   <CleanupCode>
      <Type>InstrumentCommand</Type>
   </CleanupCode>
   <GroupInfo>
      <Group>
         <Name>parent</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="parent1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>TrackEnabled</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>OUTPut:TRACK:STATe</ConfigureCommand>
                     <QueryCommand>OUTPut:TRACK:STATe?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="on" Value="1"/>
                     <Enum Name="off" Value="0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Enables or disables the power supply track mode.

The device provides tracking outputs. In the track mode, two voltages of the output1 and the output2 supplies track each other within the voltage programming accuracy. The track mode is always off state when the power supply is turned off or after a remote interface reset.
</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>drivertest</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function varargout = agilent_e3648a_midtest01
%   AGILENT_E3648A_MIDTEST01 M-Code for testing a MATLAB instrument driver.
%
%   This is the machine generated code that tests a MATLAB instrument driver, 
%   
%   The test consists of multiple test steps that can test the MATLAB instrument
%   drivers functions and properties.
%   
%   The test code was generated with the MIDTEST GUI. For more information
%   on MIDTEST, type 'instrhelp midtest' at the MATLAB command prompt.
%   
% 
%   See also ICDEVICE, MIDTEST.
% 
 
%   Creation time: 17-Feb-2004 15:22:47
 

% Wrap entire test in try catch.
try
fprintf('Test: agilent_e3648a dc power supply full driver test\n');
fprintf(['Start time: ' datestr(now) '\n']);

% Initialize variables.
varargout              = {};
noErrorMsg             = '+0,"No error"';
stepWarningOccurred    = false;
warningOccurred        = false;
errorOccurred          = false;
OkToDeleteInterfaceObj = true;
 
% Construct the interface object.
interfaceObj = instrfind('Type', 'gpib', 'BoardIndex', 0, 'PrimaryAddress', 6, 'Tag', '');
if isempty(interfaceObj)
    interfaceObj = gpib('IOTech', 0, 6);
else
    okToDeleteInterfaceObj = false;
    fclose(interfaceObj);
    interfaceObj = interfaceObj(1);
end

% Construct the device object.
deviceObj = icdevice('D:\sandbox\matlab\toolbox\instrument\instrument\drivers\agilent_e3648a.mdd', interfaceObj);

% Connect the device object to the instrument.
connect(deviceObj);


% Test Step 1: Reset(1) (Function Test Step)

errorcode = false;
try
    % Execute the function.
    devicereset(deviceObj);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 2: error (Function Test Step)

errorcode = false;
try
    % Execute the function.
    [message] = geterror(deviceObj);
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, message};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 3: setTrackEnabled (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'TrackEnabled', 'on');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'TrackEnabled');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'on');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: on');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 4: set TrackEnabled (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'TrackEnabled', 'off');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'TrackEnabled');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'off');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: off');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 5: get model (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    blueEyes = get(deviceObj, 'InstrumentModel');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, blueEyes};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 6: Turn on outputon (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'Enabled', 'on');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'Enabled'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal('on');
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: on');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 7: Turn off over volt protection (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'OverVoltageProtectionEnabled', 'off');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'OverVoltageProtectionEnabled'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal('off');
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: off');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 8: measure voltage (Function Test Step)

errorcode = false;
try
    % Execute the function.
    [volts] = invoke(deviceObj, 'measure', 'voltage');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, volts};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 9: measure current (Function Test Step)

errorcode = false;
try
    % Execute the function.
    [current] = invoke(deviceObj, 'measure', 'current');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, current};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 10: self test (Function Test Step)

errorcode = false;
try
    % Execute the function.
    selftest(deviceObj)
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 11: get Count (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Calibration');
    groupObj = groupObj(1);
    blueEyes = get(groupObj, 'Count');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, blueEyes};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 12: get Cal state (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Calibration');
    groupObj = groupObj(1);
    blueEyes = get(groupObj, 'Enabled');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, blueEyes};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 13: calibrate voltage protection (Function Test Step)

% This test step generated no code. Most likely because a
% property or function to test was not selected.
fprintf('Test step status: PASSED\n');

% Test Step 14: set message 01 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Calibration');
    groupObj = groupObj(1);
    set(groupObj, 'Message', 'Frankie');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Message');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, '"Frankie"');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: "Frankie"');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 15: get message 01 (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Calibration');
    groupObj = groupObj(1);
    blueEyes = get(groupObj, 'Message');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, blueEyes};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end
 
% Verify that the queried value matches the expected value.
if (errorcode == false)
    % Compare to the expected value.
    errorcode = ~isequal(blueEyes, '"Frankie"');
    
    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The property is not configured to the expected value.');
    
        % Post actual value.
        if isnumeric(blueEyes)
            fprintf(['Actual value: ' num2str(blueEyes)]);
        else
            fprintf(['Actual value: ' blueEyes]);
        end
    
        % Post expected value.
        fprintf('Expected value: "Frankie"');
    end
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 16: set message 02 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Calibration');
    groupObj = groupObj(1);
    set(groupObj, 'Message', 'Sammy');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Message');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, '"Sammy"');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: "Sammy"');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 17: get message 02 (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Calibration');
    groupObj = groupObj(1);
    rat = get(groupObj, 'Message');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, rat};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end
 
% Verify that the queried value matches the expected value.
if (errorcode == false)
    % Compare to the expected value.
    errorcode = ~isequal(rat, '"Sammy"');
    
    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The property is not configured to the expected value.');
    
        % Post actual value.
        if isnumeric(rat)
            fprintf(['Actual value: ' num2str(rat)]);
        else
            fprintf(['Actual value: ' rat]);
        end
    
        % Post expected value.
        fprintf('Expected value: "Sammy"');
    end
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 18: set message 03 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Calibration');
    groupObj = groupObj(1);
    set(groupObj, 'Message', 'Dean');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Message');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, '"Dean"');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: "Dean"');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 19: get message 03 (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Calibration');
    groupObj = groupObj(1);
    rat = get(groupObj, 'Message');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, rat};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end
 
% Verify that the queried value matches the expected value.
if (errorcode == false)
    % Compare to the expected value.
    errorcode = ~isequal(rat, '"Dean"');
    
    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The property is not configured to the expected value.');
    
        % Post actual value.
        if isnumeric(rat)
            fprintf(['Actual value: ' num2str(rat)]);
        else
            fprintf(['Actual value: ' rat]);
        end
    
        % Post expected value.
        fprintf('Expected value: "Dean"');
    end
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 20: set message 04 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Calibration');
    groupObj = groupObj(1);
    set(groupObj, 'Message', 'Bing');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Message');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, '"Bing"');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: "Bing"');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 21: get message 04 (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Calibration');
    groupObj = groupObj(1);
    rat = get(groupObj, 'Message');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, rat};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end
 
% Verify that the queried value matches the expected value.
if (errorcode == false)
    % Compare to the expected value.
    errorcode = ~isequal(rat, '"Bing"');
    
    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The property is not configured to the expected value.');
    
        % Post actual value.
        if isnumeric(rat)
            fprintf(['Actual value: ' num2str(rat)]);
        else
            fprintf(['Actual value: ' rat]);
        end
    
        % Post expected value.
        fprintf('Expected value: "Bing"');
    end
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 22: secure device (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Calibration');
    groupObj = groupObj(1);
    invoke(groupObj, 'securedevice', 'e003648a','secure');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 23: unsecure device (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Calibration');
    groupObj = groupObj(1);
    invoke(groupObj, 'securedevice', 'e003648a','unsecure');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 24: change code (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Calibration');
    groupObj = groupObj(1);
    invoke(groupObj, 'updatecode', 'armadillo');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 25: resecure device (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Calibration');
    groupObj = groupObj(1);
    invoke(groupObj, 'securedevice', 'armadillo','secure');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 26: reunsecure device (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Calibration');
    groupObj = groupObj(1);
    invoke(groupObj, 'securedevice', 'armadillo','unsecure');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 27: change code back (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Calibration');
    groupObj = groupObj(1);
    invoke(groupObj, 'updatecode', 'e003648a');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 28: enable enabled display (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Display');
    groupObj = groupObj(1);
    set(groupObj, 'Enabled', 'on');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Enabled');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'on');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: on');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 29: get display enabled? (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Display');
    groupObj = groupObj(1);
    blueEyes = get(groupObj, 'Enabled');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, blueEyes};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end
 
% Verify that the queried value matches the expected value.
if (errorcode == false)
    % Compare to the expected value.
    errorcode = ~isequal(blueEyes, 'on');
    
    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The property is not configured to the expected value.');
    
        % Post actual value.
        if isnumeric(blueEyes)
            fprintf(['Actual value: ' num2str(blueEyes)]);
        else
            fprintf(['Actual value: ' blueEyes]);
        end
    
        % Post expected value.
        fprintf('Expected value: on');
    end
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 30: disable display (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Display');
    groupObj = groupObj(1);
    set(groupObj, 'Enabled', 'off');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Enabled');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'off');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: off');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 31: get display enabled? (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Display');
    groupObj = groupObj(1);
    blueEyes = get(groupObj, 'Enabled');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, blueEyes};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end
 
% Verify that the queried value matches the expected value.
if (errorcode == false)
    % Compare to the expected value.
    errorcode = ~isequal(blueEyes, 'off');
    
    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The property is not configured to the expected value.');
    
        % Post actual value.
        if isnumeric(blueEyes)
            fprintf(['Actual value: ' num2str(blueEyes)]);
        else
            fprintf(['Actual value: ' blueEyes]);
        end
    
        % Post expected value.
        fprintf('Expected value: off');
    end
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 32: re-enable display (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Display');
    groupObj = groupObj(1);
    set(groupObj, 'Enabled', 'on');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Enabled');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'on');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: on');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 33: set disp mode VV (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Display');
    groupObj = groupObj(1);
    set(groupObj, 'Mode', 'voltage-voltage');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Mode');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'voltage-voltage');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: voltage-voltage');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 34: get disp mode VV (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Display');
    groupObj = groupObj(1);
    blueEyes = get(groupObj, 'Mode');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, blueEyes};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end
 
% Verify that the queried value matches the expected value.
if (errorcode == false)
    % Compare to the expected value.
    errorcode = ~isequal(blueEyes, 'voltage-voltage');
    
    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The property is not configured to the expected value.');
    
        % Post actual value.
        if isnumeric(blueEyes)
            fprintf(['Actual value: ' num2str(blueEyes)]);
        else
            fprintf(['Actual value: ' blueEyes]);
        end
    
        % Post expected value.
        fprintf('Expected value: voltage-voltage');
    end
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 35: set disp mode VI (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Display');
    groupObj = groupObj(1);
    set(groupObj, 'Mode', 'voltage-current');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Mode');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'voltage-current');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: voltage-current');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 36: get disp mode VI (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Display');
    groupObj = groupObj(1);
    blueEyes = get(groupObj, 'Mode');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, blueEyes};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end
 
% Verify that the queried value matches the expected value.
if (errorcode == false)
    % Compare to the expected value.
    errorcode = ~isequal(blueEyes, 'voltage-current');
    
    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The property is not configured to the expected value.');
    
        % Post actual value.
        if isnumeric(blueEyes)
            fprintf(['Actual value: ' num2str(blueEyes)]);
        else
            fprintf(['Actual value: ' blueEyes]);
        end
    
        % Post expected value.
        fprintf('Expected value: voltage-current');
    end
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 37: set disp mode II (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Display');
    groupObj = groupObj(1);
    set(groupObj, 'Mode', 'current-current');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Mode');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'current-current');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: current-current');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 38: get disp mode II (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Display');
    groupObj = groupObj(1);
    blueEyes = get(groupObj, 'Mode');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, blueEyes};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end
 
% Verify that the queried value matches the expected value.
if (errorcode == false)
    % Compare to the expected value.
    errorcode = ~isequal(blueEyes, 'current-current');
    
    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The property is not configured to the expected value.');
    
        % Post actual value.
        if isnumeric(blueEyes)
            fprintf(['Actual value: ' num2str(blueEyes)]);
        else
            fprintf(['Actual value: ' blueEyes]);
        end
    
        % Post expected value.
        fprintf('Expected value: current-current');
    end
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 39: set CurrentLimit min (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'CurrentLimit', 'min');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'CurrentLimit'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal(0);
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: 0');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 40: get CurrentLimit (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Output');
    currentLimit = get(groupObj, {'CurrentLimit'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, currentLimit};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end
 
% Verify that the queried value matches the expected value.
if (errorcode == false)
    % Compare to the expected value.
    expectedValue = cell(size(groupObj))';
    [expectedValue{:}] = deal(0);
    errorcode = ~isequal(currentLimit, expectedValue);
    
    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The property is not configured to the expected value.');
    
        % Post actual value.
        for i=1:length(currentLimit)
            c = currentLimit{i};
            if isnumeric(c)
                fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
            else
                fprintf(['Actual value(' num2str(i) '): ' c]);
            end
        end
    
        % Post expected value.
        fprintf('Expected value: 0');
    end
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 41: set CurrentLimit max (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'CurrentLimit', 'max');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'CurrentLimit'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal(5.15);
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: 5.15');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 42: get CurrentLimit (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Output');
    currentLimit = get(groupObj, {'CurrentLimit'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, currentLimit};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end
 
% Verify that the queried value matches the expected value.
if (errorcode == false)
    % Compare to the expected value.
    expectedValue = cell(size(groupObj))';
    [expectedValue{:}] = deal(5.15);
    errorcode = ~isequal(currentLimit, expectedValue);
    
    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The property is not configured to the expected value.');
    
        % Post actual value.
        for i=1:length(currentLimit)
            c = currentLimit{i};
            if isnumeric(c)
                fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
            else
                fprintf(['Actual value(' num2str(i) '): ' c]);
            end
        end
    
        % Post expected value.
        fprintf('Expected value: 5.15');
    end
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 43: set CurrentLimit 1 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'CurrentLimit', 1);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'CurrentLimit'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal(1);
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: 1');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 44: setCurrentLimit 2.65 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'CurrentLimit', 2.65);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'CurrentLimit'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal(2.65);
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: 2.65');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 45: setCurrentLimit PI (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'CurrentLimit', 3.14159);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'CurrentLimit'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal(3.14159);
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: 3.14159');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 46: set CurrentStep .5 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'CurrentStep', 0.5);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'CurrentStep'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal(.5);
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: .5');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 47: set CurrentLimit down (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'CurrentLimit', 'down');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'CurrentLimit'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal(2.64159);
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: 2.64159');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 48: set CurrentStep def (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'CurrentStep', 'default');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 49: get CurrentStep def (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Output');
    defaultCurrentStep = get(groupObj, {'CurrentStep'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, defaultCurrentStep};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 50: set CurrentLimit down (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'CurrentLimit', 0.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 51: set CurrentStep 5.15 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'CurrentStep', 5.15);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'CurrentStep'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal(5.15);
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: 5.15');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 52: set CurrentStep .001 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'CurrentStep', 0.0010);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'CurrentStep'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal(.001);
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: .001');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 53: setCurrentLimit up (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'CurrentLimit', 0.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 54: set voltage 0 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'VoltageLevel', 0.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'VoltageLevel'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal(0);
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: 0');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 55: enable OverVoltageProtection (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'OverVoltageProtectionEnabled', 'on');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'OverVoltageProtectionEnabled'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal('on');
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: on');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 56: set OverVoltageProtectionLimitALL (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the OverVoltageProtectionLimit property.
validValues = {1.0, 3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 22.0, 'min', 'max'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Output');
        set(groupObj, 'OverVoltageProtectionLimit', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.');
            fprintf(result);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf(lasterr);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 57: disable OverVoltageProtection (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'OverVoltageProtectionEnabled', 'off');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'OverVoltageProtectionEnabled'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal('off');
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: off');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 58: set OverVoltageProtectionLimitALL (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the OverVoltageProtectionLimit property.
validValues = {1.0, 3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 22.0, 'min', 'max'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Output');
        set(groupObj, 'OverVoltageProtectionLimit', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.');
            fprintf(result);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf(lasterr);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 59: set voltage 0 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'VoltageLevel', 0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'VoltageLevel'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal(0);
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: 0');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 60: enable OverVoltageProtection (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'OverVoltageProtectionEnabled', 'on');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'OverVoltageProtectionEnabled'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal('on');
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: on');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 61: set OverVoltageProtectionLimit 2 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'OverVoltageProtectionLimit', 2.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'OverVoltageProtectionLimit'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal(2);
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: 2');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 62: enable Output (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'Enabled', 'on');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'Enabled'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal('on');
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: on');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 63: get Output state on (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Output');
    blueEyes = get(groupObj, {'State'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, blueEyes};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end
 
% Verify that the queried value matches the expected value.
if (errorcode == false)
    % Compare to the expected value.
    expectedValue = cell(size(groupObj))';
    [expectedValue{:}] = deal('on');
    errorcode = ~isequal(blueEyes, expectedValue);
    
    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The property is not configured to the expected value.');
    
        % Post actual value.
        for i=1:length(blueEyes)
            c = blueEyes{i};
            if isnumeric(c)
                fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
            else
                fprintf(['Actual value(' num2str(i) '): ' c]);
            end
        end
    
        % Post expected value.
        fprintf('Expected value: on');
    end
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 64: disable output (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'Enabled', 'off');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'Enabled'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal('off');
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: off');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 65: get Output state off (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Output');
    blueEyes = get(groupObj, {'State'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, blueEyes};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end
 
% Verify that the queried value matches the expected value.
if (errorcode == false)
    % Compare to the expected value.
    expectedValue = cell(size(groupObj))';
    [expectedValue{:}] = deal('off');
    errorcode = ~isequal(blueEyes, expectedValue);
    
    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The property is not configured to the expected value.');
    
        % Post actual value.
        for i=1:length(blueEyes)
            c = blueEyes{i};
            if isnumeric(c)
                fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
            else
                fprintf(['Actual value(' num2str(i) '): ' c]);
            end
        end
    
        % Post expected value.
        fprintf('Expected value: off');
    end
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 66: enable Output (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'Enabled', 'on');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'Enabled'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal('on');
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: on');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 67: set voltage 4.6 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'VoltageLevel', 4.6);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 68: get Output state tripped (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Output');
    blueEyes = get(groupObj, {'State'});
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, blueEyes};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 69: reset (Function Test Step)

errorcode = false;
try
    % Execute the function.
    devicereset(deviceObj);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 70: set VoltageProt Hgih (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'OverVoltageProtectionLimit', 'max');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'OverVoltageProtectionLimit'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal(22);
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: 22');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 71: disable volt protection (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'OverVoltageProtectionEnabled', 'off');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'OverVoltageProtectionEnabled'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal('off');
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: off');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 72: turn on output (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'Enabled', 'on');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'Enabled'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal('on');
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: on');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 73: TriggerCurrentLimit (1) (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    groupObj = groupObj(1);
    set(groupObj, 'TriggerCurrentLimit', 1);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'TriggerCurrentLimit');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 1);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 1');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 74: TriggerVoltageLevel (1) (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    groupObj = groupObj(1);
    set(groupObj, 'TriggerVoltageLevel', 5);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'TriggerVoltageLevel');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 5);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 5');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 75: TriggerCurrentLimit (2) (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    groupObj = groupObj(2);
    set(groupObj, 'TriggerCurrentLimit', 2);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'TriggerCurrentLimit');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 2);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 2');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 76: TriggerVoltageLevel(2) (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    groupObj = groupObj(2);
    set(groupObj, 'TriggerVoltageLevel', 6);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'TriggerVoltageLevel');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 6);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 6');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 77: TriggerSource (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'TriggerSource', 'bus');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'TriggerSource'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal('bus');
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: bus');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 78: TriggerCoupling on (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    groupObj = groupObj(1);
    set(groupObj, 'TriggerCoupling', 'on');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'TriggerCoupling');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'on');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: on');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 79: Trigger (Function Test Step)

errorcode = false;
try
    % Execute the function.
    invoke(deviceObj, 'trigger');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 80: set TriggerDelay (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the TriggerDelay property.
validValues = {0.0, 400.0, 800.0, 1200.0, 1600.0, 2000.0, 2400.0, 2800.0, 3200.0, 3600.0, 'min', 'max'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Output');
        groupObj = groupObj(1);
        set(groupObj, 'TriggerDelay', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.');
            fprintf(result);
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf(lasterr);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 81: set text 01 (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Display');
    groupObj = groupObj(1);
    invoke(groupObj, 'settext', 'Now...');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 82: set text 02 (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Display');
    groupObj = groupObj(1);
    invoke(groupObj, 'settext', 'Testing...');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 83: set text 03 (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Display');
    groupObj = groupObj(1);
    invoke(groupObj, 'settext', 'Display.');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 84: clear text (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Display');
    groupObj = groupObj(1);
    invoke(groupObj, 'clear');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 85: set Volt Range low (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'VoltageOutputRange', 'low');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 86: set Volt min (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'VoltageLevel', 'min');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'VoltageLevel'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal(0);
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: 0');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 87: set Volt max (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'VoltageLevel', 'max');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'VoltageLevel'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal(8.24);
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: 8.24');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 88: set Volt step 8.24 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'VoltageStep', 8.24);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'VoltageStep'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal(8.24);
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: 8.24');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 89: set Volt down (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'VoltageLevel', 'down');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'VoltageLevel'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal(0);
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: 0');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 90: set Volt up (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'VoltageLevel', 'up');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'VoltageLevel'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal(8.24);
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: 8.24');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 91: setVolt Range p8v (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'VoltageOutputRange', 'p8v');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'VoltageOutputRange'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal('p8v');
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: p8v');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 92: set Volt Range high (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'VoltageOutputRange', 'high');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'VoltageOutputRange'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal('p20v');
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: p20v');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 93: set Volt min (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'VoltageLevel', 'min');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'VoltageLevel'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal(0);
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: 0');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 94: set Volt Max (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'VoltageLevel', 'max');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'VoltageLevel'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal(20.6);
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: 20.6');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 95: set Volt step 8.24 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'VoltageStep', 8.24);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'VoltageStep'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal(8.24);
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: 8.24');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 96: set Volt down (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'VoltageLevel', 'down');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'VoltageLevel'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal(12.36);
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: 12.36');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 97: set Volt up (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'VoltageLevel', 'up');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'VoltageLevel'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal(20.6);
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: 20.6');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 98: set Volt Range p20v (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'VoltageOutputRange', 'p20v');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'VoltageOutputRange'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal('p20v');
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: p20v');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 99: set Volt Range 8pv (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'VoltageOutputRange', 'p8v');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'VoltageOutputRange'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal('p8v');
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: p8v');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 100: set current step default (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    groupObj = groupObj(1);
    set(groupObj, 'CurrentStep', 'default');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 101: set volt step .5 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    groupObj = groupObj(1);
    set(groupObj, 'VoltageStep', 0.5);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'VoltageStep');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, .5);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: .5');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 102: increasecurrent (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Output');
    invoke(groupObj, 'increasecurrent');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 103: set volt down (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'VoltageLevel', 2.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'VoltageLevel'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal(2);
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: 2');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 104: increase volt (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Output');
    invoke(groupObj, 'increasevoltage');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 105: decrease current (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Output');
    invoke(groupObj, 'decreasecurrent');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 106: decrease volt (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Output');
    invoke(groupObj, 'decreasevoltage');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 107: disable output (Function Test Step)

% This test step generated no code. Most likely because a
% property or function to test was not selected.
fprintf('Test step status: PASSED\n');

% Test Step 108: enable output (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Output');
    invoke(groupObj, 'enable');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 109: re-enable output (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Output');
    invoke(groupObj, 'enable');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 110: reset volt protection (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'Output');
    invoke(groupObj, 'resetvoltageprotection');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 111: get version (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'System');
    groupObj = groupObj(1);
    blueEyes = get(groupObj, 'Version');
     
    % Store the result so that it can be returned.
    varargout = {varargout{:}, blueEyes};
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 112: save state 1 (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'System');
    groupObj = groupObj(1);
    invoke(groupObj, 'savestate', 1);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 113: save state 2 (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'System');
    groupObj = groupObj(1);
    invoke(groupObj, 'savestate', 2);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 114: save state 3 (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'System');
    groupObj = groupObj(1);
    invoke(groupObj, 'savestate', 3);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 115: save state 4 (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'System');
    groupObj = groupObj(1);
    invoke(groupObj, 'savestate', 4);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 116: save state 5 (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'System');
    groupObj = groupObj(1);
    invoke(groupObj, 'savestate', 5);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 117: load state 1 (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'System');
    groupObj = groupObj(1);
    invoke(groupObj, 'loadstate', 1);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 118: load state 2 (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'System');
    groupObj = groupObj(1);
    invoke(groupObj, 'loadstate', 2);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 119: load state 3 (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'System');
    groupObj = groupObj(1);
    invoke(groupObj, 'loadstate', 3);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 120: load state 4 (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'System');
    groupObj = groupObj(1);
    invoke(groupObj, 'loadstate', 4);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 121: load state 5 (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'System');
    groupObj = groupObj(1);
    invoke(groupObj, 'loadstate', 5);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 122: range = p8v (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'VoltageOutputRange', 'p8v');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'VoltageOutputRange'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal('p8v');
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: p8v');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 123: TriggerVolt Level min (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'TriggerVoltageLevel', 'min');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'TriggerVoltageLevel'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal(0.0);
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: 0.0');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 124: TriggerVolt Level max (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'TriggerVoltageLevel', 'max');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'TriggerVoltageLevel'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal(8.24);
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: 8.24');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 125: TriggerVolt Level 1 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'TriggerVoltageLevel', 1);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'TriggerVoltageLevel'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal(1);
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: 1');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 126: Trigger Volt Level min (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'TriggerVoltageLevel', 'min');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'TriggerVoltageLevel'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal(0.0);
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: 0.0');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 127: Trigger Volt Level Max (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'TriggerVoltageLevel', 'max');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'TriggerVoltageLevel'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal(8.24);
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: 8.24');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 128: Trigger Volt Level 1 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'TriggerVoltageLevel', 1);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'TriggerVoltageLevel'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal(1);
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: 1');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 129: Trigger Volt Level 3.2 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Output');
    set(groupObj, 'TriggerVoltageLevel', 3.2);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, {'TriggerVoltageLevel'});
    
        % Compare to the expected value.
        expectedValue = cell(size(groupObj))';
        [expectedValue{:}] = deal(3.2);
        errorcode = ~isequal(currentValue, expectedValue);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            for i=1:length(currentValue)
                c = currentValue{i};
                if isnumeric(c)
                    fprintf(['Actual value(' num2str(i) '): ' num2str(c)]);
                else
                    fprintf(['Actual value(' num2str(i) '): ' c]);
                end
            end
    
            % Post expected value.
            fprintf('Expected value: 3.2');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 130: reset (Function Test Step)

errorcode = false;
try
    % Execute the function.
    devicereset(deviceObj);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 131: error check (Function Test Step)

errorcode = false;
try
    % Execute the function.
    geterror(deviceObj)
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 132: beep! (Function Test Step)

errorcode = false;
try
    % Execute the function.
    groupObj = get(deviceObj, 'System');
    groupObj = groupObj(1);
    invoke(groupObj, 'beep');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Cleanup.
disconnect(deviceObj);
delete(deviceObj);

if (okToDeleteInterfaceObj == true)
    delete(interfaceObj);
end

% Post results.
fprintf(['Stop time: ' datestr(now) '\n']);
if (errorOccurred == true)
    fprintf('Test status: FAILED\n');
elseif (warningOccurred == true)
    fprintf('Test status: PASSED with warnings\n');
else
    fprintf('Test status: PASSED\n');
end

catch
    % An error occurred while running the test.
    fprintf('An error occurred while executing the test.\n');
    fprintf(lasterr);

    % Cleanup.
    if exist('interfaceObj') &amp;&amp; (okToDeleteInterfaceObj == true)
        delete(interfaceObj)
    end

    if exist('deviceObj')
        delete(deviceObj)
    end
end

</MCode>
               </Code>
               <Description>Test the driver to make sure it works properly.</Description>
            </Method>
            <Method>
               <Name>measure</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="Measure:Scalar:&lt;type&gt;:DC?" Format="text" Output="true" ReadOutputAs="ASCII"/>
                     <Input>type</Input>
                  </Commands>
               </Code>
               <Description>MEASURE Measure the voltage or current of output signal.

OUT = INVOKE(OBJ, 'measure', 'TYPE') measures the voltage or current of the output signal of the instrument connected to device object, OBJ and returns value to OUT. If TYPE is 'voltage', the voltage is measured. If TYPE is 'current', the current is measured.</Description>
            </Method>
            <Method>
               <Name>trigger</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="INIT:IMM" Output="false"/>
                     <Line Command="*TRG" Output="false"/>
                  </Commands>
               </Code>
               <Description>TRIGGER Send a software trigger.

INVOKE(OBJ, 'trigger') sends a software trigger to the instrument connected to device object.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>calibration</Name>
         <Description>The calibration group defines properties and functions related to instrument calibration.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Calibration1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Count</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand/>
                     <QueryCommand>CAL:COUN?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Returns number of times the instrument has been calibrated.</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand/>
                     <QueryCommand>CAL:SEC:STAT?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="on" Value="1"/>
                     <Enum Name="off" Value="0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>on</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Query the secured state for calibration of the instrument.</Description>
            </Property>
            <Property>
               <Name>Message</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% Get interface
interface = get(get(obj,'parent'),'interface');

% Ask for the string
fprintf(interface,'CALibration:STRing?')

% Pluck the string
propertyValue = fscanf(interface);

% Trim the trailing character (a non-printing char such as \n)
%	and send it packing
propertyValue(length(propertyValue)) = '';
</GetMCode>
                  <SetMCode>function set(obj,propertyName, propertyValue)

% Set a property value.
%	This function is called to set the device or group object property
%	value. If the property is a group property, OBJ is the group object. If
%	the property is a base device property, OBJ is the device object.

%Error checking.
if ~ischar(propertyValue)
	error('MESSAGE must be a string.');
end

%Warning
if length(propertyValue) &gt; 40
	warning('ICDevice:longmessage',...
		'Your message may only be 40 characters, and will be truncated');
end

%Get interface
interface = get(get(obj,'parent'),'interface');

%Write command to instrument
fprintf(interface,['CAL:STR "' propertyValue '"']);
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies calibration information for the instrument.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>calibratecurrent</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function calibratecurrent(obj,minData,midData,maxData)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

%get the device
device = get(obj,'Parent');

%get the interface
interface = get(device,'Interface');

%set the min data
fprintf(interface,'CAL:CURR:LEV MIN');
fprintf(interface,'CAL:CURR:DATA ',num2str(minData)');

%set the mid data
fprintf(interface,'CAL:CURR:LEV MID');
fprintf(interface,'CAL:CURR:DATA ',num2str(midData)');

%set the max data
fprintf(interface,'CAL:CURR:LEV Max');
fprintf(interface,'CAL:CURR:DATA ',num2str(maxData)');
</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>calibratevoltage</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function calibratecurrent(obj,minData,midData,maxData)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

%get the device
device = get(obj,'Parent');

%get the interface
interface = get(device,'Interface');

%set the min data
fprintf(interface,'CAL:VOLT:LEV MIN');
fprintf(interface,'CAL:VOLT:DATA ',num2str(minData)');

%set the mid data
fprintf(interface,'CAL:VOLT:LEV MID');
fprintf(interface,'CAL:VOLT:DATA ',num2str(midData)');

%set the max data
fprintf(interface,'CAL:VOLT:LEV MAX');
fprintf(interface,'CAL:VOLT:DATA ',num2str(maxData)');</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>calibratevoltageprotection</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="CAL:VOLT:PROT" Output="false"/>
                  </Commands>
               </Code>
               <Description>CALIBRATEVOLTAGEPROTECTION Calibrate the overvoltage protection circuit of the power supply.
</Description>
            </Method>
            <Method>
               <Name>securedevice</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function securedevice(obj, calibrationCode, state)
% OBJ is the device object.
% code is the code to secure the instrument

%Get parent of object
parent = get(obj,'parent');

% Get interface.
interface = get(parent,'interface');

% Parse inputs.
switch (nargin)
case 1
    error('CALIBRATIONCODE must be specified.');
case 2
    fprintf(interface,'CALibration:SECure:STATe?');
    currentState = fscanf(interface, '%g');
case 3
    % STATE can either be 'secure' or 'unsecure'.
    if ~any(strcmpi(state, {'secure', 'unsecure'}))
        error('STATE must be either ''secure'' or ''unsecure''.');
    end
   
    % Translating State into the expected current state numeric value.
    if strcmpi(state, 'secure')
        currentState = 0;
    else
        currentState = 1;
    end
otherwise
    error('Too many input arguments.');
end

% Error checking.
if ~ischar(calibrationCode)
    error('CALIBRATIONCODE must be a string.');
end

% Unsecure or secure the instrument.
switch (currentState)
case 0
    % Secure.
    fprintf(interface,['CALibration:SECure:STATe ON, "' calibrationCode '"']);   
case 1
    % Unsecure.
    fprintf(interface,['CALibration:SECure:STATe OFF, "' calibrationCode '"']);
end
      
</MCode>
               </Code>
               <Description>SECUREDEVICE secure or unsecure the power supply for calibration

INVOKE(OBJ, 'securedevice','code', STATE) to secure or unsecure the device. Use a STATE of ‘unsecure’ to unsecure the device before initiating the calibration process. Use a STATE of 'secure' to secure the device after the calibration process is complete.




</Description>
            </Method>
            <Method>
               <Name>updatecode</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function updatecode(obj,secureCode)
% OBJ is the device object.
% SecureCode is the new code.

%Get the parent
parent = get(obj,'parent');

% Get the interface.
interface = get(parent,'interface');

% Validating the code (12-character format).
if ~(isvarname(secureCode) &amp;&amp; length(secureCode) &lt;= 12)
    error(['SECURECODE must be a character string with letters, ',...
           'digits and ' sprintf('\n') 'underscores. The first character ',...
           'in SECURECODE must be a letter.' sprintf('\n') 'The maximum length is 12 characters.']);
end

% Verifying that the device is unsecured before changing the code. 
fprintf(interface,'CALibration:SECure:STATe?')
state = fscanf(interface,'%g');

if (state == 1)
    error(['The device must be unsecured before changing the code.' sprintf('\n'),...
        'Type ''instrhelp(obj, ''securedevice'')'' for more information on how ' sprintf('\n'),...
        'to unsecure the device.']);
    return
end

% Set the secure code to the new code.
fprintf(interface,['CALibration:SECure:CODE "' secureCode '"'])</MCode>
               </Code>
               <Description>UPDATECODE Change the security code.

INVOKE(OBJ, 'updatecode' NEWCODE) updates the calibration security code.  The instrument must first be unsecured using the current security code.

See also SECUREDEVICE
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>display</Name>
         <Description>Define the behavior of the instrument front panel display.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Display1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Enabled</Name>
               <Location>display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>DISP</ConfigureCommand>
                     <QueryCommand>DISP?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="on" Value="1"/>
                     <Enum Name="off" Value="0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>on</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the state of the front panel display.</Description>
            </Property>
            <Property>
               <Name>Mode</Name>
               <Location>display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>DISP:MODE</ConfigureCommand>
                     <QueryCommand>DISP:MODE?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="voltage-voltage" Value="VV"/>
                     <Enum Name="voltage-current" Value="VI"/>
                     <Enum Name="current-current" Value="II"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>voltage-voltage</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the front panel display mode. Valid values are:

voltage-voltage         display the voltages of the two outputs
voltage-current         display the voltage and current for each output
current-current         display the currents of the two outputs</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>clear</Name>
               <Location>display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="DISP:TEXT:CLE" Output="false"/>
                  </Commands>
               </Code>
               <Description>CLEAR Clear the message displayed on the front panel.

INVOKE(OBJ, 'clear') removes any message displayed on the instrument front panel.

See also SETTEXT</Description>
            </Method>
            <Method>
               <Name>settext</Name>
               <Location>display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setText(obj,str)
% OBJ is the device object.
% str is the string to display

%get parent
parent = get(obj,'parent');

%Get interface
interface = get(parent,'interface');

% Error checking.
if ~ischar(str)
    error('STR must be a string.');
end

% Write the command to instrument.
fprintf(interface, ['Display:Text "' str '"']);


</MCode>
               </Code>
               <Description>SETTEXT Set the string displayed on the instrument front panel.

INVOKE(OBJ, 'displaytext', S) displays string, S, on the instrument's front panel.
The Display group's Enable property must be on for the text to be visible.

See also CLEAR.

</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>output</Name>
         <Description>Define the behavior and state of the outputs.</Description>
         <Command>INSTRument:NSELect  &lt;ID&gt;</Command>
         <Size>2</Size>
         <Mappings>
            <ChannelMap Command="2" Index="2"/>
            <ChannelMap Command="1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>CurrentLimit</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>Source:Current:Level:Immediate:Amplitude</ConfigureCommand>
                     <QueryCommand>Source:Current:Level:Immediate:Amplitude?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>VoltageOutputRange</DependentProperty>
                  <DependentPropertyValue>p8v</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="5.15" Min="0.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>VoltageOutputRange</DependentProperty>
                  <DependentPropertyValue>p20v</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="2.575" Min="0.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="MIN"/>
                     <Enum Name="max" Value="MAX"/>
                     <Enum Name="up" Value="UP"/>
                     <Enum Name="down" Value="DOWN"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>5</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set and query the value of the output current limit.</Description>
            </Property>
            <Property>
               <Name>CurrentStep</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>CURRent:STEP</ConfigureCommand>
                     <QueryCommand>CURRent:STEP?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>VoltageOutputRange</DependentProperty>
                  <DependentPropertyValue>p8v</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="5.15" Min="9.57505E-5"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>VoltageOutputRange</DependentProperty>
                  <DependentPropertyValue>p20v</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="2.575" Min="9.57505E-5"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="default" Value="DEF"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>default</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set and query the step size used with the increasecurrent and decreasecurrent functions.

</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>Output:State</ConfigureCommand>
                     <QueryCommand>Output:State?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="on" Value="1"/>
                     <Enum Name="off" Value="0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>on</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set and query the state of the output.</Description>
            </Property>
            <Property>
               <Name>OverVoltageProtectionEnabled</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>Source:Voltage:Protection:State</ConfigureCommand>
                     <QueryCommand>Source:Voltage:Protection:State?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="on" Value="1"/>
                     <Enum Name="off" Value="0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>on</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set and query the state of the over voltage protection feature.</Description>
            </Property>
            <Property>
               <Name>OverVoltageProtectionLimit</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>Source:Voltage:Protection:Level</ConfigureCommand>
                     <QueryCommand>Source:Voltage:Protection:Level?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="22.0" Min="1.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="MIN"/>
                     <Enum Name="max" Value="MAX"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>22.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set and query the over voltage protection limit.</Description>
            </Property>
            <Property>
               <Name>State</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% This function is called to get the group object property value.

% Get the interface
interface = get(get(obj,'parent'),'interface');

fprintf(interface,'VOLTage:PROTection:TRIPped?');
state = fscanf(interface);

% If the over voltage protection is tripped, return 'tripped'
if strncmp(state ,'1',1)
    propertyValue = 'tripped';
else    
% Otherwise return state of output
 fprintf(interface,'OUTPut:STATe?')
 state = fscanf(interface);
 if strncmp(state, '1',1)
	 propertyValue = 'on';
 elseif strncmp(state, '0',1);
	 propertyValue = 'off';
 else
	 error(['Unknown value returned by device. Accepted values for'...
		 ' State property are ''tripped'',''on'', and ''off''']);
 end	
	 
end </GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% This function is called to set the group object property value.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="tripped" Value="tripped"/>
                     <Enum Name="on" Value="on"/>
                     <Enum Name="off" Value="off"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>tripped</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Returns whether the voltage protection is tripped. </Description>
            </Property>
            <Property>
               <Name>TriggerCoupling</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>inst:coup:trig</ConfigureCommand>
                     <QueryCommand>inst:coup:trig?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="on" Value="1"/>
                     <Enum Name="off" Value="0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>Off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Enable or disable the coupling between two outputs.

The COUPLE command consists of an optional subsystem node followed by signal parameter. The only valid parameter for the subsystem node is the trigger subsystem. If no node follows the couple command, trigger subsystem is assumed to be couple.

The outputs of the power supply are considered as two logical instruments. The instrument commands provide a mechanism to identify and select an output. When one output is selected, the other one is unavailable for programming until selected.


</Description>
            </Property>
            <Property>
               <Name>TriggerCurrentLimit</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>Source:Current:Level:Triggered:Amplitude</ConfigureCommand>
                     <QueryCommand>Source:Current:Level:Triggered:Amplitude?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>VoltageOutputRange</DependentProperty>
                  <DependentPropertyValue>p8v</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="5.15" Min="0.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>VoltageOutputRange</DependentProperty>
                  <DependentPropertyValue>p20v</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="2.575" Min="0.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="max" Value="MAX"/>
                     <Enum Name="min" Value="MIN"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>5</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set or query the trigger ouput current limit.</Description>
            </Property>
            <Property>
               <Name>TriggerDelay</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>Trigger:Sequence:Delay</ConfigureCommand>
                     <QueryCommand>Trigger:Sequence:Delay?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="3600.0" Min="0.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="MIN"/>
                     <Enum Name="max" Value="MAX"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set or query the time delay between the detection of the trigger and the start of output.</Description>
            </Property>
            <Property>
               <Name>TriggerSource</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>Trigger:Source</ConfigureCommand>
                     <QueryCommand>Trigger:Source?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="bus" Value="BUS"/>
                     <Enum Name="immediate" Value="IMM"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>bus</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set or query the trigger source.</Description>
            </Property>
            <Property>
               <Name>TriggerVoltageLevel</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>Source:Voltage:Level:Triggered:Amplitude</ConfigureCommand>
                     <QueryCommand>Source:Voltage:Level:Triggered:Amplitude?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>VoltageOutputRange</DependentProperty>
                  <DependentPropertyValue>p8v</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="8.24" Min="0.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>VoltageOutputRange</DependentProperty>
                  <DependentPropertyValue>p20v</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="20.6" Min="0.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="MIN"/>
                     <Enum Name="max" Value="MAX"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set or query the trigger output voltage level.</Description>
            </Property>
            <Property>
               <Name>VoltageLevel</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>Source:Voltage:Level:Immediate:Amplitude</ConfigureCommand>
                     <QueryCommand>Source:Voltage:Level:Immediate:Amplitude?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>VoltageOutputRange</DependentProperty>
                  <DependentPropertyValue>p8v</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="8.24" Min="0.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>VoltageOutputRange</DependentProperty>
                  <DependentPropertyValue>p20v</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="20.6" Min="0.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="max" Value="MAX"/>
                     <Enum Name="min" Value="MIN"/>
                     <Enum Name="up" Value="UP"/>
                     <Enum Name="down" Value="DOWN"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set or query the trigger ouput voltage level.</Description>
            </Property>
            <Property>
               <Name>VoltageOutputRange</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>Voltage:Range</ConfigureCommand>
                     <QueryCommand>Voltage:Range?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="low" Value="LOW"/>
                     <Enum Name="high" Value="HIGH"/>
                     <Enum Name="p8v" Value="p8v"/>
                     <Enum Name="p20v" Value="p20v"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>low</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set or query the voltage output range.</Description>
            </Property>
            <Property>
               <Name>VoltageStep</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>Voltage:Step</ConfigureCommand>
                     <QueryCommand>Voltage:Step?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>VoltageOutputRange</DependentProperty>
                  <DependentPropertyValue>p8v</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="8.24" Min="9.57505E-5"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>VoltageOutputRange</DependentProperty>
                  <DependentPropertyValue>p20v</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="20.6" Min="9.57505E-5"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="default" Value="DEF"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>default</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set and query the step size used with the increasevoltage and decreasevoltage functions.

</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>decreasecurrent</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="CURR DOWN" Output="false"/>
                  </Commands>
               </Code>
               <Description>DECREASECURRENT Decrease the output current leve.

INVOKE(OBJ, 'decreasecurrent') decreases the current by the amount specified in the CurrentStep property.
</Description>
            </Method>
            <Method>
               <Name>decreasevoltage</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="VOLT DOWN" Output="false"/>
                  </Commands>
               </Code>
               <Description>DECREASEVOLTAGE Decrease the output voltage level.

INVOKE(OBJ, 'decreasevoltage') decreases the output voltage by the amount specified in the VoltageStep property.
</Description>
            </Method>
            <Method>
               <Name>disable</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="Output:State OFF" Output="false"/>
                  </Commands>
               </Code>
               <Description>DISABLE Disable specified output of the power supply.

INVOKE(OBJ, 'disable') disable device output object, OBJ. OBJ can be an array of output objects.

See also ENABLE.</Description>
            </Method>
            <Method>
               <Name>enable</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="Output:State ON" Output="false"/>
                  </Commands>
               </Code>
               <Description>ENABLE Enable device output of the instrument.

INVOKE(OBJ, 'enable') enable device output object, OBJ. OBJ can be an array of output objects.

See also DISABLE.</Description>
            </Method>
            <Method>
               <Name>increasecurrent</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="CURR UP" Output="false"/>
                  </Commands>
               </Code>
               <Description>INCREASECURRENT Increase the output current level.

INVOKE(OBJ, 'increasecurrent') increases the current level by the amount specified in the CurrentLevel property.</Description>
            </Method>
            <Method>
               <Name>increasevoltage</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="VOLT UP" Output="false"/>
                  </Commands>
               </Code>
               <Description>INCREASEVOLTAGE Increase the voltage level.

INVOKE(OBJ, 'increasevoltage') increases the voltage by the amount specified in the VoltageStep property.
</Description>
            </Method>
            <Method>
               <Name>resetvoltageprotection</Name>
               <Location>output</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="Voltage:Protection:Clear" Output="false"/>
                  </Commands>
               </Code>
               <Description>RESETVOLTAGEPROTECTION Clears the overvoltage protection state.

INVOKE(OBJ, 'resetvoltageprotection') resets the overvoltage protection state.
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>system</Name>
         <Description>General instrument system functionality.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Util1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Version</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand/>
                     <QueryCommand>SYST:VERS?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the SCPI version of the instrument.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>beep</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="SYST:BEEP" Output="false"/>
                  </Commands>
               </Code>
               <Description>BEEP Issue a beep.

INVOKE(OBJ, 'beep') issues a beep from the instrument.</Description>
            </Method>
            <Method>
               <Name>disablelocalcontrols</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function disablelocalcontrols(obj)
% OBJ is the group object.

% Get the interface
interface = get(get(obj,'parent'),'interface');

% Get the System interface
fprintf(interface,'SYSTem:INTerface?');
systemInterface =fscanf(interface);

% If the interface is not RS232, generate an error
if (strcmpi(systemInterface,'RS232')~= 1)
    error('Must be in RS232 interface to use this function');
    return
end

% Otherewise send appropriate command
fprintf(interface,'SYSTem:RWLock');
</MCode>
               </Code>
               <Description>DISABLELOCALCONTROLS Disable all front-panel buttons and knobs.

INVOKE(OBJ, 'disablelocalcontrols') 'unlocks' all front-panel keys and knobs. Valid for RS-232 mode only.</Description>
            </Method>
            <Method>
               <Name>enablelocalcontrols</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function enablelocalcontrols(obj)
% OBJ is the group object.

% Get the interface
interface = get(get(obj,'parent'),'interface');

% Get the (remote) system interface
fprintf(interface,'SYSTem:INTerface?');
systemInterface = fscanf(interface);

% If the interface is not RS232, generate an error
if (strcmpi(systemInterface,'RS232')~= 1)
    error('Must be in RS232 interface to use this function');
return
end

% Otherewise send appropriate command
fprintf(interface,'SYSTem:LOCal');
</MCode>
               </Code>
               <Description>ENABLELOCALCONTROLS Enable all front-panel buttons and knobs.

INVOKE(OBJ, 'enablelocalcontrols') 'locks' all front-panel keys and knobs. Valid for RS-232 mode only.</Description>
            </Method>
            <Method>
               <Name>loadstate</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function loadstate(obj,location)
% OBJ is the group object.
% LOCATION is the specified storage location

% Get the interface
interface = get(get(obj,'parent'),'interface');

% Error checking
    % LOCATION must be a scalar and between 1 and 5, inclusive.
    if ~isnumeric(location) 
        error('LOCATION must be numeric');
    elseif  location &gt;5 || location &lt;1
            error('LOCATION must be between 1 and 5 inclusive');
    end
    
% Send memory name query command
fprintf(interface,['*RCL ' num2str(location)])
</MCode>
               </Code>
               <Description>LOADSTATE Recall a previously saved configuration.

INVOKE(OBJ, 'loadstate', LOCATION) recalls the power supply state stored in the specified storage LOCATION.</Description>
            </Method>
            <Method>
               <Name>savestate</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function savestate(obj,location)
% OBJ is the group object.
% LOCATION is the specified storage location

% Get the interface
interface = get(get(obj,'parent'),'interface');

% Error checking
    % LOCATION must be a scalar and between 1 and 5, inclusive.
    if ~isnumeric(location) 
        error('LOCATION must be numeric');
    elseif  location &gt;5 || location &lt;1
            error('LOCATION must be between 1 and 5 inclusive');
    end
    
% Send memory name query command
fprintf(interface,['*SAV ' num2str(location)])



</MCode>
               </Code>
               <Description>SAVESTATE Store a configuration.

INVOKE(OBJ, 'savestate', LOCATION) stores the present configuration of theinstrument to the specified LOCATION. Any state previously stored in the same location is overwritten.</Description>
            </Method>
         </MethodInfo>
      </Group>
   </GroupInfo>
</MATLABInstrumentDriver>