function editconstr(this,BoundType,idx)
% Opends constraint editor for constraint #IDX of type BOUNDTYPE.

%   Author(s): P. Gahinet
%   Copyright 1990-2004 The MathWorks, Inc.
Dlg = this.EditDialog;
if isempty(Dlg) || ~ishandle(Dlg)
   Dlg = LocalCreateDlg(this);
   this.EditDialog = Dlg;
end
% Initialize dialog
c = this.Constraint;
ud = get(Dlg,'UserData');
if strcmp(BoundType(1),'L')
   xy = [c.LowerBoundX(idx,:),c.LowerBoundY(idx,:)];
   set(ud.Position,'String',mat2str(xy([1 3 2 4]),4))
   set(ud.Slider,'Value',c.LowerBoundWeight(idx))
else
   xy = [c.UpperBoundX(idx,:),c.UpperBoundY(idx,:)];
   set(ud.Position,'String',mat2str(xy([1 3 2 4]),4))
   set(ud.Slider,'Value',c.UpperBoundWeight(idx))
end
ud.BoundType = BoundType;
ud.Index = idx;
set(Dlg,'Visible','on','UserData',ud)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% LOCALCREATEDLG
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function Dlg = LocalCreateDlg(this)
% Creates dialog for editing weights
DlgH = 14;
DlgW = 60;
UIColor = get(0,'DefaultUIControlBackgroundColor');
Dlg = figure('Name','Edit Constraint', ...
    'Visible','off', ...
    'Resize','off',...
    'MenuBar','none', ...
    'Units','character',...
    'Position',[0 0 DlgW DlgH], ...
    'Color', UIColor, ...
    'IntegerHandle','off', ...
    'HandleVisibility','off',...
    'NumberTitle','off');
centerfig(Dlg,this.Parent);
set(Dlg,'CloseRequestFcn',{@localHide Dlg})

% Button group
xgap = 2;
BW = 10;  BH = 1.5; Bgap = 1;
X0 = DlgW - xgap - 4*BW - 3*Bgap;
Y0 = 0.5;
Handles.OK = uicontrol('Parent',Dlg, ...
   'Units','character', ...
   'Position',[X0 Y0 BW BH], ...
   'Callback',{@localOK Dlg this},...
   'String','OK');
X0 = X0+BW+Bgap;
uicontrol('Parent',Dlg, ...
   'Units','character', ...
   'Callback','', ...
   'Position',[X0 Y0 BW BH], ...
   'Callback',{@localHide Dlg},...
   'String','Cancel');
X0 = X0+BW+Bgap;
uicontrol('Parent',Dlg, ...
   'Units','character', ...
   'Callback','helpview([docroot ''/toolbox/sloptim/sloptim.map''],''edit'')', ...
   'Position',[X0 Y0 BW BH], ...
   'String','Help');
X0 = X0+BW+Bgap;
uicontrol('Parent',Dlg, ...
   'Units','character', ...
   'Position',[X0 0.5 BW BH], ...
   'Callback',{@localApply Dlg this},...
   'String','Apply');

y0 = Y0 + BH + 1.25;
x0 = xgap;
uicontrol(Dlg, ...
   'Style','text', ...
   'Horiz','left', ...
   'String','0 (disabled)', ...
   'Units','character',...
   'Position',[xgap y0 15 1.2]);
uicontrol(Dlg, ...
   'Style','text', ...
   'Horiz','left', ...
   'String','soft', ...
   'Units','character',...
   'Position',[0.45*DlgW y0 5 1.2]);
uicontrol(Dlg, ...
   'Style','text', ...
   'Horiz','left', ...
   'String','(hard) 1', ...
   'Units','character',...
   'Position',[DlgW-xgap-8 y0 8 1.2]);

y0 = y0+1.5;
ud.Slider  = uicontrol(Dlg,...
   'BackgroundColor',[1 1 1],...
   'Style','slider',...
   'sliderstep',[.1 .1],...
   'Units','character',...
   'Position',[xgap y0 DlgW-2*xgap 1.5],...
   'max',1,'min',0);

y0 = y0+1.8;
uicontrol('Parent',Dlg, ...
   'BackgroundColor',UIColor,...
   'Style','text', ...
   'String','Weight (0-1):', ...
   'HorizontalAlignment','left', ...
   'Units','character',...
   'Position',[xgap y0 30 1.2]);

y0 = y0+3;
ud.Position = uicontrol(Dlg, ...
   'Style','edit', ...
   'BackgroundColor','white', ...
   'HorizontalAlignment','left', ...
   'Units','character',...
   'Position',[xgap y0 DlgW-2*xgap 1.3]);

y0 = y0+1.5;
uicontrol('Parent',Dlg, ...
   'BackgroundColor',UIColor,...
   'Style','text', ...
   'String','Position [x1 y1 x2 y2]:', ...
   'HorizontalAlignment','left', ...
   'Units','character',...
   'Position',[xgap y0 40 1.2]);

% Listener to parent deletion
ud.Listener = handle.listener(this,'ObjectBeingDestroyed',{@localDelete Dlg});
% REVISIT: (src,data) delete(Dlg));

set(Dlg,'UserData',ud)


%------------------ Callbacks -----------------------

function localDelete(eventsrc,eventdata,Dlg)
% Deletes dialog when parent axes go away
delete(Dlg)


function localHide(eventsrc,eventdata,Dlg)
% Deletes dialog when parent axes go away
set(Dlg,'Visible','off')


function localOK(eventsrc,eventdata,Dlg,this)
% Deletes dialog when parent axes go away
localApply(eventsrc,eventdata,Dlg,this)
set(Dlg,'Visible','off')


function localApply(eventsrc,eventdata,Dlg,this)
% Applies specification
c = this.Constraint;
ud = get(Dlg,'UserData');
ErrorTitle = 'Edit Constraint Error';
% Read position
str = get(ud.Position,'String');
if length(str)
   Pos = evalin('base',str,'[]');
else
   Pos = [];
end
if ~isequal(size(Pos),[1 4]) || ~isreal(Pos)
   errordlg('Invalid value for Position vector.',ErrorTitle,'modal'),return
elseif Pos(1)>=Pos(3)
   errordlg('X2 must be strictly greater than X1.',ErrorTitle,'modal'),return
end
% Read weight
Weight = get(ud.Slider,'Value');

% Apply new settings
idx = ud.Index;
Transaction = ctrluis.transaction(c,'Name','Edit Constraint',...
   'OperationStore','on','InverseOperationStore','on');
BoundX = sprintf('%sX',ud.BoundType);
BoundY = sprintf('%sY',ud.BoundType);
BoundW = sprintf('%sWeight',ud.BoundType);
c.(BoundX)(idx,:) = Pos([1 3]);
if idx>1
   c.(BoundX)(idx-1,2) = Pos(1);
end
if idx<size(c.(BoundX),1)
   c.(BoundX)(idx+1,1) = Pos(3);
end
c.(BoundY)(idx,:) = Pos([2 4]);
c.(BoundW)(idx) = Weight;
commit(Transaction)

if isvalid(c)
   % Stack transaction
   this.Recorder.pushundo(Transaction)
   % Update plot
   drawconstr(this)
   this.Axes.send('ViewChanged')
else
   % Undo transaction
   undo(Transaction)
   errordlg('Invalid position: lower bound must stay below upper bound',...
      ErrorTitle,'modal')
end
