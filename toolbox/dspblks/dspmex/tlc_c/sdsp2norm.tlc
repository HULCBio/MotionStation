%% $Revision: 1.11.4.2 $
%% $RCSfile: sdsp2norm.tlc,v $
%% $Date: 2004/04/12 23:08:04 $
%%
%% Copyright 1995-2003 The MathWorks, Inc.
%%
%% Abstract: Target file for the S-Function sdsp2norm.c
%%

%implements "sdsp2norm" "C"

%% Function: BlockInstanceSetup ===============================================
%%
%% Abstract: Rename the S-Function parameter
%%
%function BlockInstanceSetup(block, system) void
  %%
  %<LibRenameParameter(block, P1, "Bias")>
  %<LibRenameParameter(block, P2, "NormType")>
  %%
%endfunction %% BlockInstanceSetup


%% Function: Outputs ==========================================================
%%
%% Abstract: Compute the norm of a vector
%%
%function Outputs(block, system) Output
    /* Signal Processing Blockset Normalization (%<ParamSettings.FunctionName>) - %<Name> */
	%%
    %assign INPORT  = 0
    %assign OUTPORT = 0
    %assign c0      = LibBlockOutputSignalIsComplex(OUTPORT)
    %assign inplace = (LibBlockInputSignalBufferDstPort(INPORT) == OUTPORT)
    %assign N       = LibDataInputPortWidth(INPORT)
    %assign b       = LibBlockParameterValue(Bias,     0)
    %assign sqr     = CAST("Number", LibBlockParameterValue(NormType, 0))
    %%
    %% NormType enumerations:
    %assign NORM   = 1
    %assign NORMSQ = 2
    %%
    %if !c0
        %% REAL
        %%
        %if(inplace)
        {
            real_T  E = 0.0;          
			real_T *y = %<LibBlockOutputSignalAddr(OUTPORT,"","", 0)>;
            int_T i;

			/* Determine energy (sum of squares): */ 
            for(i=%<N>; i-- > 0; ) {
				real_T u = *y++;
				E += u*u;
            }
            %if %<b> == 0
				%if sqr == NORM
					/* Normalize input vector by 2-norm: */
					E = 1.0 / sqrt(E);
				%else
					/* Normalize input vector by squared 2-norm: */
					E = 1.0 / E;
				%endif
            %else
				%if sqr == NORM
					/* Normalize input vector by 2-norm: */
					E = 1.0 / (sqrt(E) + %<b>);
				%else
					/* Normalize input vector by squared 2-norm: */
					E = 1.0 / (E + %<b>);
				%endif
            %endif
            %%
            y -= %<N>;
            for(i=%<N>; i-- > 0; ) {
	        *y++ *= E;
            }
         }
        %else
		%% Disontiguous
         {
	    real_T  E = 0.0; 

	    /* Determine energy (sum of squares): */ 
	    %assign rollVars = ["U"]
	    %roll sigIdx = RollRegions, lcv = RollThreshold, block, ...
					       "Roller", rollVars
		%assign u = LibBlockInputSignal(INPORT, "", lcv, sigIdx)
		E += %<u>*%<u>;
	    %endroll
            		
            %if %<b> == 0
		%if sqr == NORM
			/* Normalize input vector by 2-norm: */
			E = 1.0 / sqrt(E);
		%else
			/* Normalize input vector by squared 2-norm: */
			E = 1.0 / E;
		%endif
            %else
		%if sqr == NORM
			/* Normalize input vector by 2-norm: */
			E = 1.0 / (sqrt(E) + %<b>);
		%else
			/* Normalize input vector by squared 2-norm: */
			E = 1.0 / (E + %<b>);
		%endif
            %endif
	    %%
            {
                real_T *y = %<LibBlockOutputSignalAddr(OUTPORT,"","", 0)>;
	        %assign rollVars = ["U"]
	        %roll sigIdx = RollRegions, lcv = RollThreshold, block, ...
					           "Roller", rollVars
		        *y++ = E * %<LibBlockInputSignal(INPORT, "", lcv, sigIdx)>;
	        %endroll
            }
        }
        %endif
    %else
	%% COMPLEX
        %%
        %if(inplace)
        {
	    real_T  E = 0.0;
	    creal_T *y = %<LibBlockOutputSignalAddr(OUTPORT,"","", 0)>;
            int_T i;

	    /* Determine energy: */ 
            for(i=%<N>; i-- > 0; ) {
               const creal_T u = *y++;
               E += CMAGSQ(u);
            }           
            %if %<b> == 0
		%if sqr == NORM
			/* Normalize input vector by 2-norm: */
			E = 1.0 / sqrt(E);
		%else
			/* Normalize input vector by squared 2-norm: */
			E = 1.0 / E;
		%endif
            %else
		%if sqr == NORM
			/* Normalize input vector by 2-norm: */
			E = 1.0 / (sqrt(E) + %<b>);
		%else
			/* Normalize input vector by squared 2-norm: */
			E = 1.0 / (E + %<b>);
		%endif
            %endif
            %%
            y -= %<N>;
            for(i=%<N>; i-- > 0; ) {
			y->re *= E;
                (y++)->im *= E;
            }
        }
        %else
        {
            real_T  E = 0.0; 

            /* Determine energy: */ 
			%assign rollVars = ["U"]
			%roll sigIdx = RollRegions, lcv = RollThreshold, block, ...
							   "Roller", rollVars
				%assign u = LibBlockInputSignal(INPORT, "", lcv, sigIdx)
				E += CMAGSQ(%<u>);
			%endroll

			%%
            %if %<b> == 0
				%if sqr == NORM
					/* Normalize input vector by 2-norm: */
					E = 1.0 / sqrt(E);
				%else
					/* Normalize input vector by squared 2-norm: */
					E = 1.0 / E;
				%endif
            %else
				%if sqr == NORM
					/* Normalize input vector by 2-norm: */
					E = 1.0 / (sqrt(E) + %<b>);
				%else
				/* Normalize input vector by squared 2-norm: */
				E = 1.0 / (E + %<b>);
				%endif
            %endif
			%%
            {
            creal_T *y = %<LibBlockOutputSignalAddr(OUTPORT,"","", 0)>;
	        %assign rollVars = ["U"]
	        %roll sigIdx = RollRegions, lcv = RollThreshold, block, ...
					           "Roller", rollVars
		        %assign u = LibBlockInputSignal(INPORT, "", lcv, sigIdx)
		        y->re     = E * %<u>.re;
		        (y++)->im = E * %<u>.im;
	        %endroll
            }
        }
        %endif
    %endif

%endfunction %% Outputs

%% EOF: sdsp2norm.tlc
