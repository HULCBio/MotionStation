%% $RCSfile: sdspdiag2.tlc,v $
%% $Revision: 1.7.4.2 $ 
%% $Date: 2004/04/12 23:08:24 $
%%
%% Copyright 1995-2003 The MathWorks, Inc.
%%
%% Abstract: Create a matrix from a diagonal or extract the diag from a matrix.

%implements sdspdiag2 "C"

%% Function: Outputs ==========================================================
%%
%function Outputs(block, system) Output
  %assign INPORT    = 0
  %assign OUTPORT   = 0
  %assign need_copy = (LibBlockInputSignalBufferDstPort(INPORT) != OUTPORT)
  %%
  %if need_copy
    %assign mode      = CAST("Number",SFcnParamSettings.Mode)
    %assign Diag2Full = 1
    %assign Full2Diag = 2
    %assign a_width   = CAST("Number",LibBlockInputSignalWidth(0))
    %%
    %assign INPUT_DTYPE_NAME = LibBlockInputSignalDataTypeName(INPORT, "%<tRealPart>")
    %assign DTYPE_ID         = LibBlockInputSignalDataTypeId(INPORT)
    %assign COMPLEX_INPUT    = LibBlockInputSignalIsComplex(INPORT)
    %%
    %% Create leading comment line for appropriate library block
    %% (dual-purpose TLC code...)
    %%
    %if mode == Diag2Full
    /* Signal Processing Blockset Create Diagonal Matrix (%<ParamSettings.FunctionName>) - '%<Name>' */
    %else
    /* Signal Processing Blockset Extract Diagonal (%<ParamSettings.FunctionName>) - '%<Name>' */
    %endif
    %%
    %if a_width == 1
      %<LibBlockOutputSignal(OUTPORT, "", "", 0)> = %<LibBlockInputSignal(INPORT, "", "", 0)>;
    %else
    {    
      const byte_T *A = (byte_T *)%<LibBlockInputSignalAddr(INPORT, "", "", 0)>;
      byte_T *y       = (byte_T *)%<LibBlockOutputSignalAddr(OUTPORT, "", "", 0)>;
    %if COMPLEX_INPUT
      const int_T bytesPerElement = 2 * sizeof(%<INPUT_DTYPE_NAME>);
    %else
      const int_T bytesPerElement = sizeof(%<INPUT_DTYPE_NAME>);
    %endif
    %%
    %if mode == Diag2Full
      int_T nr                = %<a_width>;
      const byte_T  *zero_buf = y+bytesPerElement;
      %<INPUT_DTYPE_NAME> zero[2] = {%<SLibGetGroundValueFromId(DTYPE_ID)>,%<SLibGetGroundValueFromId(DTYPE_ID)>};

      memcpy(y, A, bytesPerElement); /* Copy first element */

      y += bytesPerElement; A += bytesPerElement;
      while (nr-- > 0) { /* Copy 0 til next diag elmt */
          memcpy(y, zero, bytesPerElement);
          y += bytesPerElement;
      }

      /* nr now -1 */
      while (++nr < %<a_width-2>) { %% Execute a_width-2 times
          memcpy(y, A, bytesPerElement);
          y += bytesPerElement; A += bytesPerElement;

          /* Fill in zeros up to the next diagonal element. */
          /* Use memmove since copying y to y.              */
          memmove(y, zero_buf, %<a_width>*bytesPerElement);
          y += %<a_width>*bytesPerElement;
      }

      memcpy(y, A, bytesPerElement); /* Copy last element */
    %else
      %%
      %% Full2Diag
      %%
      %assign numDims   = LibBlockInputSignalNumDimensions(INPORT)
      %assign dims      = LibBlockInputSignalDimensions(INPORT)
      %assign cols      = (numDims == 2) ? dims[1] : 1
      %assign rows      = dims[0]
      %if rows < cols
        %assign Nmin = rows
      %else
        %assign Nmin = cols
      %endif
      %%
      int_T  i = %<Nmin>;

      while (i-- > 0) {
          memcpy(y, A, bytesPerElement);
          y += bytesPerElement; A += %<rows+1>*bytesPerElement;
      }
    %endif %% mode
    }
    %endif %% scalar vs. non-scalar

  %endif %% end need_copy  
%endfunction

%% [EOF] sdspdiag2.tlc
