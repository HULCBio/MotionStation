%% $RCSfile: sdspmin.tlc,v $
%% $Revision: 1.15.4.2 $ 
%% $Date: 2004/04/12 23:09:01 $
%%
%% Copyright 1995-2003 The MathWorks, Inc.
%%
%% Abstract: Find the min value of a vector

%implements sdspmin "C"

%% Function: BlockInstanceSetup ===============================================
%%
%% Abstract:
%%      Rename the S-Function parameter for easy reference.
%%
%function BlockInstanceSetup(block, system) void
  %%
  %<LibRenameParameter(block, P1, "Fcn")>
  %<LibRenameParameter(block, P2, "Framebased")>
  %<LibRenameParameter(block, P3, "Nchans")>
  %<LibRenameParameter(block, P4, "ResetPort")>
  %%
%endfunction %% BlockInstanceSetup


%% Function: InitializeConditions =============================================
%%
%% Abstract:
%%
%function InitializeConditions(block, system) Output
  %%
  %% Function menu choices
  %assign fcnValandIdx = 1
  %assign fcnVal       = 2
  %assign fcnIdx       = 3
  %assign fcnRunning   = 4
  %%
  %assign fcn       = LibBlockParameterValue(Fcn,0)
  %%
  %if(fcn == fcnRunning)
    /* Signal Processing Blockset Minimum (%<ParamSettings.FunctionName>) - '%<Name>' */
    %%
    %<LibBlockDWork(Reset,"", "", 0)> = 1;
    %%
  %endif
%endfunction %% InitializeConditions


%% Function: Outputs ==========================================================
%%
%function Outputs(block, system) Output
  /* Signal Processing Blockset Minimum (%<ParamSettings.FunctionName>) - '%<Name>' */
  %%
  %assign fcn        = LibBlockParameterValue(Fcn,0)
  %% Function menu choices
  %assign fcnValandIdx = 1
  %assign fcnVal       = 2
  %assign fcnIdx       = 3
  %assign fcnRunning   = 4
  %%
  %assign INPORT_DATA  = 0
  %assign INPORT_RESET = 1
  %assign OUTPORT_MIN  = 0
  %assign OUTPORT_IDX  = (fcn != fcnIdx) ? 1 : 0
  %%
  %assign resetport  = LibBlockParameterValue(ResetPort,0) != 0
  %assign nchans     = CAST("Number",LibBlockParameterValue(Nchans,0))
  %assign width      = LibDataInputPortWidth(INPORT_DATA)
  %assign framebased = (LibBlockParameterValue(Framebased,0) != 0) && (width/nchans != 1)
  %assign nsamps     = (framebased) ? width/nchans : 1  
  %assign cplx       = (LibBlockInputSignalIsComplex(INPORT_DATA) != 0)
  %assign contig     = IsInputPortContiguous(block, INPORT_DATA)
  %%  
  %switch fcn
     %case  fcnRunning
       %%
       /* Output running minmum value */
       %if (framebased && !contig)
	 %<LibDiscontiguousInputError(block)>
       %endif
       %%
       %if !cplx
	  %%
	  %% Real Running
	  %%
	  {
	     %if framebased
	       real_T *u     = %<LibBlockInputSignalAddr(INPORT_DATA,"","", 0)>;
	     %endif
	     real_T    *y     = %<LibBlockOutputSignalAddr(OUTPORT_MIN,"", "", 0)>;
	     real_T    *cache = %<LibBlockDWorkAddr(Cache, "", "", 0)>;
	     boolean_T *reset = %<LibBlockDWorkAddr(Reset, "", "", 0)>;

	     %if resetport
	        if(%<LibBlockInputSignal(INPORT_RESET,"","",0)> != 0.0) {
	          *reset = 1;
	        }
	     %endif
	  %%
	  if(*reset) {
	    %%
	    %% Real Running Reset
	    %%
	    /* Reset mode where the current input is the minimum */
	    %if framebased
	       %if nchans!=1
		  int_T i = %<nchans>;
		  while(i-- > 0) {
	       %endif
	       %%
	          int_T  j    = %<nsamps - 1>;  
		  real_T tmin = *u++;

		  while(j-- > 0) {
		     const real_T val = *u++;
		     if (val < tmin) {
		       tmin = val;
		     }
		  }
               %%
	       %if nchans!=1
	          *y++ = *cache++ = tmin;
	          }
	       %else
	          *y = *cache = tmin;
	       %endif
	       %%
	    %else
	      %%
	      %if width==1
		%% This case removes the post increment from 'y' and 'cache'
		*y = *cache= %<LibBlockInputSignal(INPORT_DATA, "", "", 0)>;
	      %else
		%% Non-framebased
		/* Find the minimum */
		%assign rollVars = ["U"]
		%roll sigIdx = RollRegions, lcv = RollThreshold, \
		  block, "Roller", rollVars
		  *y++ = *cache++ = %<LibBlockInputSignal(INPORT_DATA, "", lcv, sigIdx)>;
		%endroll
	      %endif
	    %endif
	    %%
	    *reset = 0;  /* No longer in reset mode */
	    %%
	  } else {
	    %%
	    %% Real Running, not reset
	    %%
	    /* Compare latest inputs to stored minimum values: */
	    %if framebased
	      %%
	      %if nchans!=1
		 int_T i = %<nchans>;
		 while (i-- > 0) {
	      %endif
	      %%
		   int_T  j    = %<nsamps>;
		   real_T tmin = *cache;

		   while(j-- > 0) {
		      const real_T val = *u++;
		      if (val < tmin) {
		         tmin = val;
		      }
		   }
	      %if nchans != 1
		 *y++ = *cache++ = tmin;
		 }
	      %else
		 *y = *cache = tmin;
	      %endif
	    %%
	    %else
	    %%
	      %% Non-framebased
	      %if width==1
		%% This case removes the post increment from 'y' and 'cache'
		if(%<LibBlockInputSignal(INPORT_DATA, "", "", 0)> < *cache) {
		  *cache = %<LibBlockInputSignal(INPORT_DATA, "", "", 0)>;
		}
		*y = *cache;
	      %else
		%assign rollVars = ["U"]
		%roll sigIdx = RollRegions, lcv = RollThreshold, \
		                    block, "Roller", rollVars
		  %assign val = LibBlockInputSignal(INPORT_DATA, "", lcv, sigIdx)
		  if (%<val> < *cache) {
		    *cache = %<val>;
		  }
		  *y++ = *cache++;
		%endroll
	      %endif
	    %endif
	  }
	}
      %else
	%%
	%% COMPLEX Running
	%%
	{
	  typedef struct {
	    real_T  magsq; 
	    creal_T cmplx;
	  } minmax_cache;
	  
	  %if framebased
	    creal_T *u     = %<LibBlockInputSignalAddr(INPORT_DATA,"","", 0)>;
	  %endif
	  creal_T    *y     = %<LibBlockOutputSignalAddr(OUTPORT_MIN,"", "", 0)>;
	  minmax_cache  *cache = (minmax_cache *)%<LibBlockDWorkAddr(Cache, "", "", 0)>;
	  boolean_T *reset = %<LibBlockDWorkAddr(Reset, "", "", 0)>;

	  %if resetport
	    if(%<LibBlockInputSignal(INPORT_RESET,"","",0)> != 0.0) {
	      *reset = 1;
	    }
	  %endif
	  %%	  
	  
	  if(*reset) {
	    %%
	    %% Complex Running Reset
	    %%
	    /* Reset mode where the current input is the minimum */
	    %if(framebased)
	      %if nchans!=1
		int_T i = %<nchans>;
		while(i-- > 0) {
	      %endif
		  int_T  j    = %<nsamps - 1>;  
		  real_T  minmag = CMAGSQ(*u);
		  creal_T minval = *u++;

		  while(j-- > 0) {
		    const creal_T newval = *u++;
		    const real_T newmag = CMAGSQ(newval);
		  
		    if (newmag < minmag) {
		      minval = newval;
		      minmag = newmag;
		    }
		  }
		
	      %if nchans!=1
		*y++ = cache->cmplx = minval;
		(cache++)->magsq = minmag;
	      }
	      %else
		*y = cache->cmplx = minval;
		cache->magsq = minmag;
	      %endif
	    %%
	    %else
	      %% Non-framebased
	      %if width == 1
		%% This case removes the post increment from 'y' and 'cache'
		*y = cache->cmplx = %<LibBlockInputSignal(INPORT_DATA, "", "", 0)>;
		cache->magsq = CMAGSQ(%<LibBlockInputSignal(INPORT_DATA, "", "", 0)>);
	      %else
		%assign rollVars = ["U"]
		%roll sigIdx = RollRegions, lcv = RollThreshold, \
		                     block, "Roller", rollVars
		  %assign newval = LibBlockInputSignal(INPORT_DATA, "", lcv, sigIdx)
		  *y++ = cache->cmplx = %<newval>;
		  (cache++)->magsq = CMAGSQ(%<newval>);
	      %endroll
	      %endif
	    %endif
	    %%
	    *reset = 0;  /* No longer in reset mode */
	    %%  
	    %%
	  } else {
	    %%
	    %% Complex Running, not reset
	    %%
	    /* Compare latest inputs to stored minimum values: */
	    %if(framebased)
	      %if nchans!=1
		int_T i = %<nchans>;
		while (i-- > 0) {
	      %endif
		  int_T  j    = %<nsamps>;
		  real_T  minmag = cache->magsq;
		  creal_T minval = cache->cmplx;

		  while(j-- > 0) {
		     const creal_T newval = *u++;
		     const real_T   newmag = CMAGSQ(newval);
		  
		     if (newmag < minmag) {
		        minval = newval;
		        minmag = newmag;
		     }
		  }
	      %%
	      %if nchans != 1
		*y++ = cache->cmplx     = minval;
		(cache++)->magsq = minmag;
	      }
	      %else
		*y = cache->cmplx = minval;
		 cache->magsq = minmag;
	      %endif
	    %%
	    %else
	    %%
	      %% Non-framebased
	      %if width==1
		%% This case removes the post increment from 'y' and 'cache'
		{
		   real_T newmag = CMAGSQ(%<LibBlockInputSignal(INPORT_DATA, "", "", 0)>);
		   if(newmag < cache->magsq) {
		     cache->cmplx = %<LibBlockInputSignal(INPORT_DATA, "", "", 0)>;
		     cache->magsq = newmag;
		   }
		   *y = cache->cmplx;
		}
	      %else
		%assign rollVars = ["U"]
		%roll sigIdx = RollRegions, lcv = RollThreshold, \
		  block, "Roller", rollVars
		  %assign newval = LibBlockInputSignal(INPORT_DATA, "", lcv, sigIdx)
		  { 
		    real_T newmag = CMAGSQ(%<newval>);
		    if (newmag < cache->magsq) {
		      cache->cmplx = %<newval>;
		      cache->magsq = newmag;
		    }
		    *y++ = (cache++)->cmplx;
		  }
		%endroll
	      %endif
	    %endif
	  }
	}  %% end complex running
	%endif  %% end complex running
	%break
	%%
        %%
    %case fcnVal
	/* Output minimun value. */
    %case fcnIdx
        /* Output index of minimum value. */      
    %case fcnValandIdx
        /* Output the minimum value and it's index. */
      %if width==1
	%%
	%% When width is 1, the min output equals the input
	%% and the index can only be 1.
	%%
	%if fcn != fcnIdx
	  %<LibBlockOutputSignal(OUTPORT_MIN, "","", 0)> = %<LibBlockInputSignal(0,"","",0)>;
	%endif
	%if fcn != fcnVal
	  %<LibBlockOutputSignal(OUTPORT_IDX, "","", 0)> = 1.0;
	%endif
      %else	
	%%
	%if !cplx
	  %% REAL
	  {	 
	  %if fcn != fcnVal
	    int_T m_idx = 0;
	  %endif
	  real_T m_val = %<LibBlockInputSignal(0,"","",0)>;
	  %assign rollRegions1 = LibClipRollRegions(RollRegions, 2, -1)
	  %% Loop roll over input port elements:
	  %%
	  %assign rollVars = ["U"]
	  %roll sigIdx = rollRegions1, lcv = RollThreshold, block, "Roller", rollVars
	    if (%<LibBlockInputSignal(INPORT_DATA, "", lcv, sigIdx)> < m_val) {
	      m_val  = %<LibBlockInputSignal(INPORT_DATA, "", lcv, sigIdx)>;
	      %if fcn != fcnVal
		m_idx = i1+1;
	      %endif	      
	    }
	  %endroll
	  %if fcn != fcnIdx
	    %<LibBlockOutputSignal(OUTPORT_MIN, "","", 0)> = m_val;
	  %endif
	  %if fcn != fcnVal
	    %<LibBlockOutputSignal(OUTPORT_IDX, "","", 0)> = (real_T)(m_idx+1);  /* Convert to 1-based indexing: */
	  %endif
	}
      %else
	%% COMPLEX
	{
	  int_T m_idx = 0;
	  %if contig
	    real_T m_val = CMAGSQ(%<LibBlockInputSignal(0,"","",0)>);
	  %else
	    %%
	    %% We cannot use the min_idx to index into the input for
	    %% retrieving the complex minimum value if the input is
	    %% discontigous.  This forces us to keep around the complex
	    %% minimum value in an extra variable called "cm_val".
	    %%
	    creal_T cm_val = %<LibBlockInputSignal(0,"","",0)>;
	    real_T  m_val = CMAGSQ(cm_val);
	  %endif
	  %%
	  %assign rollRegions1 = LibClipRollRegions(RollRegions, 2, -1)
	  %% Loop roll over input port elements:
	  %%
	  %assign rollVars = ["U"]
	  %roll sigIdx = rollRegions1, lcv = RollThreshold, block, "Roller", rollVars
	    {
	      %if contig
		const real_T val = CMAGSQ(%<LibBlockInputSignal(INPORT_DATA, "", lcv, sigIdx)>);
	      %else
		const creal_T cval = %<LibBlockInputSignal(INPORT_DATA, "", lcv, sigIdx)>;
		const real_T val = CMAGSQ(cval);
	      %endif
	      %%
	      if (val < m_val) {
		%if !contig
		  cm_val = cval;  %% Extra variable needed for discontiguous
		%endif
		m_val  = val;
		m_idx  = i1+1;    %% We need to use m_idx below, so don't convert to 1-based indices yet...
	      }
	    }
	  %endroll
	  %if fcn != fcnIdx
	    %if contig
	      %% We can use the m_idx to get the complex min value if the input is contiguous
	      %<LibBlockOutputSignal(OUTPORT_MIN, "","", 0)> = \
	      %<LibBlockInputSignal(0,"m_idx","","0")>;
	    %else
	      %<LibBlockOutputSignal(OUTPORT_MIN, "","", 0)> = cm_val;		  		  		    
	    %endif
	  %endif
	  %%
	  %if fcn != fcnVal
	    %<LibBlockOutputSignal(OUTPORT_IDX, "","", 0)> = (real_T)(m_idx+1);  /* Convert to 1-based indexing: */
	  %endif
	}      	
      %endif
    %endif %% if width==1
    %break
%endswitch 

%endfunction

%% [EOF] sdspmin.tlc

