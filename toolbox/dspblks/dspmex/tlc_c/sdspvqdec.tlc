%% sdspvqdec.tlc
%% Abstract: TLC for Signal Processing Blockset block to do decoding for vector quantization. (sdspvqdec)
%%
%% Copyright 1995-2003 The MathWorks, Inc.
%% $Revision: 1.1.6.2 $ $Date: 2003/12/06 15:28:33 $


%implements "sdspvqdec" "C"
%include "dsplib.tlc"

%% Function: BlockInstanceSetup ===============================================
%%
%function BlockInstanceSetup(block, system) void

  %assign INPORT_IDX = 0
  %assign INPORT_CB  = 1
  %assign OUTPORT_CW = 0

  %assign IdxDTypeName  = LibBlockInputSignalDataTypeName(INPORT_IDX,"")
  %assign IdxDTypeID    = LibBlockInputSignalDataTypeId(INPORT_IDX)
  %assign CBfromMask    = %<SFcnParamSettings.IsCBSourceMask>
  %assign NumChans      = LibBlockInputSignalWidth(INPORT_IDX)
  %assign CodewordVectorLength = SFcnParamSettings.CodewordVectorLength
  %assign BytesPerOutputCWEle = SFcnParamSettings.BytesPerOutputCWEle %% see below
  %assign MaxAllowableZeroBasedIdxValue = SFcnParamSettings.MaxAllowableZeroBasedIdxValue
  %assign block         = block + INPORT_IDX  + INPORT_CB + OUTPORT_CW ...
                                + IdxDTypeName + IdxDTypeID + CBfromMask + NumChans ...
				+ CodewordVectorLength + BytesPerOutputCWEle + MaxAllowableZeroBasedIdxValue
 
%endfunction %% BlockInstanceSetup


%% Function: Outputs ==========================================================
%%
%% Abstract:
%%
%function Outputs(block, system) Output
    %% 
    /* Signal Processing Blockset Vector Quantizer Decoder:  (%<ParamSettings.FunctionName>) - '%<Name>' */
    {
        %%%%   const int_T BytesPerOutputCWEle = sizeof(%<CWDTypeName>);
	const %<IdxDTypeName>  *u_IdxPtr = %<LibBlockInputSignalAddr(INPORT_IDX, "", "", 0)>;
        %if (CBfromMask)
          const byte_T *u_CBPtr  = (const byte_T *)%<LibBlockParameterAddr(Codebook,"","",0)>; 
        %else
          const byte_T *u_CBPtr  = (const byte_T *)%<LibBlockInputSignalAddr(INPORT_CB, "", "", 0)>;
        %endif
        byte_T *y_CW = (byte_T *)%<LibBlockOutputSignalAddr(OUTPORT_CW, "", "", 0)>;
        %%
        %if NumChans > 1
          int_T i, chStride = 0;
          for (i = 0; i < %<NumChans>; i++) {
              /* Clip the value of index if necessary */
              %<IdxDTypeName> validIdx = u_IdxPtr[i];
	      %%
	      %if (IdxDTypeID ==tSS_UINT8 || IdxDTypeID ==tSS_UINT16 || IdxDTypeID ==tSS_UINT32)
	       if (validIdx > %<MaxAllowableZeroBasedIdxValue>) validIdx = %<MaxAllowableZeroBasedIdxValue>;
              %else
               if (validIdx < 0) validIdx = 0;
               else if (validIdx > %<MaxAllowableZeroBasedIdxValue>) validIdx = %<MaxAllowableZeroBasedIdxValue>;
              %endif
              /* Quantized value */
              memcpy((y_CW+chStride*%<BytesPerOutputCWEle>), 
                     (u_CBPtr + (validIdx *%<CodewordVectorLength>)*%<BytesPerOutputCWEle>), 
                     (%<CodewordVectorLength>*%<BytesPerOutputCWEle>)
                    ); 
              chStride += %<CodewordVectorLength>;
                                            }
        %else
            /* Clip the value of index if necessary */
	       %<IdxDTypeName> validIdx = u_IdxPtr[0];
	       %if (IdxDTypeID ==tSS_UINT8 || IdxDTypeID ==tSS_UINT16 || IdxDTypeID ==tSS_UINT32)
	        if (validIdx > %<MaxAllowableZeroBasedIdxValue>) validIdx = %<MaxAllowableZeroBasedIdxValue>;
               %else
	        if (validIdx < 0) validIdx = 0;
	        else if (validIdx > %<MaxAllowableZeroBasedIdxValue>) validIdx = %<MaxAllowableZeroBasedIdxValue>;
               %endif
	       /* Quantized value */
	       memcpy(y_CW, 
		      (u_CBPtr + ((int_T)validIdx *%<CodewordVectorLength>)*%<BytesPerOutputCWEle>), 
		      (%<CodewordVectorLength>*%<BytesPerOutputCWEle>)
		     ); 
        %endif
    }
%endfunction %% Outputs

%% EOF: sdspvqdec.tlc
