%% sdspzc.tlc
%% Abstract: TLC for Signal Processing Blockset Zero Crossing (sdspzc)
%%
%% Copyright 1995-2003 The MathWorks, Inc.
%% $Revision: 1.1.6.1 $Date: 

%implements sdspzc "C"
%include "dsplib.tlc"

%% Function: BlockInstanceSetup ================================================
%%
%function BlockInstanceSetup(block, system) void
    %% All fixed-point blocks call the fixed-point setup function
    %%
    %<FixPt_Setup(block, system)>
    %%
    %% Get the input port
    %assign INPORT          = 0
    %assign BUFF_DWORK      = 0
    %assign PEAKS_FOUND     = 0
    %assign UdTypeName      = LibBlockInputSignalDataTypeName(INPORT,"")

    %%Get the order of input
    %assign N      = LibBlockInputSignalWidth(INPORT)

    %% I/O port data types
    %assign inUdTYPE       = FixPt_GetInputDataType(INPORT)
    %assign inUcplx        = LibBlockInputSignalIsComplex(INPORT)
    
    %% Propagate all these assignments to the block
    %assign block = block + INPORT + PEAKS_FOUND + N + BUFF_DWORK
    %assign block = block + inUdTYPE + UdTypeName + inUcplx

%endfunction %% BlockInstanceSetup

%% Function: Outputs ==========================================================
%%
%function Outputs(block, system) Output
  %%
  /* Signal Processing Blockset Zero Crossing (%<ParamSettings.FunctionName>) - '%<Name>' */
  %%
  %if FixPt_DataTypeIsFloat(inUdTYPE)
    %%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% FLOATING POINT CODE GENERATION  %%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%
    {
    %<FltPtInlineCode(block)>
    }
    %%
  %else
    %%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% FIXED-POINT CODE GENERATION     %%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%
    {
    %<FixPtInlineCode(block)>
    }
    %%
  %endif
%%
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Subfunction: FltPtInlineCode
%%
%% FLOATING POINT CODE GENERATION             
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%function FltPtInlineCode(block) Output
    const %<UdTypeName> *u  = %<LibBlockInputSignalAddr(INPORT, "", "", 0)>;
    uint32_T      *numZc    = %<LibBlockOutputSignalAddr(PEAKS_FOUND, "", "",0)>;
    %<UdTypeName> *Dw       = %<LibBlockDWorkAddr(InputBuffer, "", "", 0)>;
    uint32_T              i, count=0;
    for (i=0; i < %<N>; i++) {
        if (u[i] * Dw[1] < 0.0) {count++;}
        else  {
            if ( (Dw[1] == 0.0) &&(u[i] * Dw[0] < 0.0) ) {count++;}
        } 
        Dw[0]=Dw[1]; Dw[1]=u[i];
    }
    *numZc = count;
%endfunction  %% FltPtInlineCode

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Subfunction: FixPtInlineCode
%%
%% FIXED POINT CODE GENERATION             
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%function FixPtInlineCode(block) Output
%% 
    %createrecord RndSat { roundingMode FixPtRoundingMode; ...
                          overflowMode FixPtSaturationMode}
    %assign Dw0   = LibBlockDWork(InputBuffer, "0", "", 0)
    %createrecord dw0_Rec { label    Dw0 ; ...
                      dTypeRec inUdTYPE ; ...
                      isComplex inUcplx}
    %assign Dw1   = LibBlockDWork(InputBuffer, "1", "", 0)
    %createrecord dw1_Rec { label    Dw1 ; ...
                      dTypeRec inUdTYPE ; ...
                      isComplex inUcplx}
    %assign uLabel_0 = LibBlockInputSignal(INPORT, "i", "", 0)
    %createrecord u_Rec { label    uLabel_0 ; ...
                      dTypeRec inUdTYPE ; ...
                      isComplex inUcplx}
    %assign Hprod = "prod"
    %assign prodDT = FixPt_GetParameterDataType(PROD_DATA_TYPE, 0, 0)
    %createrecord Hprod_Rec { label    Hprod ; ...
                      dTypeRec prodDT ; ...
                      isComplex 0}
    uint32_T *numZc = %<LibBlockOutputSignalAddr(PEAKS_FOUND, "", "",0)>;
    uint32_T              i, count=0;
    %<prodDT.Name> %<Hprod_Rec.label>;
    for (i=0; i < %<N>; i++) {
      %<DSPFixptLibTimes(Hprod_Rec, u_Rec, dw1_Rec, RndSat)>
      if (%<Hprod> < 0) {count++;}
      else {
            %<DSPFixptLibTimes(Hprod_Rec, u_Rec, dw0_Rec, RndSat)>
            if ( (%<Dw1> == 0) && (%<Hprod> < 0) ) {count++;}
      }
      %<DSPFixptLibEquals(dw0_Rec,dw1_Rec, RndSat)>
      %<DSPFixptLibEquals(dw1_Rec,u_Rec, RndSat)>
    }
    *numZc = count;	
%endfunction    %%FixPtInlineCode

%% [EOF] sdsppeaks.tlc