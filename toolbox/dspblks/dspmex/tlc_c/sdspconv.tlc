%% $Revision: 1.11.4.2 $
%% $RCSfile: sdspconv.tlc,v $
%% $Date: 2004/04/12 23:08:16 $
%%
%% J. Faneuff, April 22, 1998
%% Copyright 1995-2003 The MathWorks, Inc.
%%
%% Abstract: Target file for the S-Function sdsp2norm.c
%%

%implements "sdspconv" "C"

%% Function: Outputs ==========================================================
%%
%% Abstract:
%%
%function Outputs(block, system) Output
    /* Signal Processing Blockset Convolution (%<ParamSettings.FunctionName>) - '%<Name>' */
    %%
    %assign INPORT0 = 0
    %assign INPORT1 = 1
    %assign OUTPORT = 0
    %assign M       = LibDataInputPortWidth(INPORT0) 
    %assign N       = LibDataInputPortWidth(INPORT1) 
    %assign L       = LibDataOutputPortWidth(OUTPORT) 
    %assign c0      = LibBlockInputSignalIsComplex(INPORT0)
    %assign c1      = LibBlockInputSignalIsComplex(INPORT1)
    %assign contig0 = IsInputPortContiguous(block,INPORT0)
    %assign contig1 = IsInputPortContiguous(block,INPORT1)
    %%
    %if !contig0 || !contig1
      %<LibDiscontiguousInputError(block)>
    %endif
    %%
    %if !c0 && !c1
       %% Both ports are real:
       {
        real_T *u0 = %<LibBlockInputSignalAddr(INPORT0, "", "", 0)>;
        real_T *u1 = %<LibBlockInputSignalAddr(INPORT1, "", "", 0)>;
        real_T *y  = %<LibBlockOutputSignalAddr(OUTPORT,"","",0)>;
		int_T   i;

        for (i = 0; i < %<L>; i++) {
            const int_T j_end = MIN(i, %<M-1>);
            real_T      sum   = 0.0;
            int_T       j;
	
	    for (j = MAX(0, i-%<N-1>); j <= j_end; j++) {
                sum += u0[j] * u1[i-j];
	    }
	    *y++ = sum;
        }
       }
    %%
    %elseif c0 && c1  
    %%
       %% Both ports are complex:
       {
            creal_T *u0 = %<LibBlockInputSignalAddr(INPORT0, "", "", 0)>;
            creal_T *u1 = %<LibBlockInputSignalAddr(INPORT1, "", "", 0)>;
            creal_T *y  = %<LibBlockOutputSignalAddr(OUTPORT,"","", 0)>;
            int_T    i;
	        
	    for (i = 0; i < %<L>; i++) {
                const int_T j_end = MIN(i, %<M-1>);
                creal_T     sum   = {0.0, 0.0};
                int_T       j;

	        for (j = MAX(0, i-%<N-1>); j <= j_end; j++) {
                    const creal_T val0 = u0[j];
                    const creal_T val1 = u1[i-j];
                    sum.re += CMULT_RE(val0, val1);
		    sum.im += CMULT_IM(val0, val1);
	        }
                *y++ = sum;
	    }
       }
    %else
       {
        %% Mixed case (one port is complex, the other port is real)
        %%
        %% Two possible cases here:
        %%  if c0 -> First port complex, second port real
        %%  if c1 -> First port real,    second port complex
        %%
        %%  uptr0 will always point to the complex input
        %%  uptr1 will always point to the real input
        %%
        %if c0
            creal_T *u0 = %<LibBlockInputSignalAddr(INPORT0, "", "", 0)>;
            real_T  *u1 = %<LibBlockInputSignalAddr(INPORT1, "", "", 0)>;
            %assign MM = M
            %assign NN = N
        %else
            creal_T *u0 = %<LibBlockInputSignalAddr(INPORT1,"", "", 0)>;
            real_T  *u1 = %<LibBlockInputSignalAddr(INPORT0,"", "", 0)>;
            %assign MM = N
            %assign NN = M
        %endif
        %%
        creal_T	*y = %<LibBlockOutputSignalAddr(OUTPORT,"","", 0)>;
        int_T  i;

	    for (i = 0; i < %<L>; i++) {
	        const int_T j_end = MIN(i, %<MM-1>);
                creal_T     sum   = {0.0, 0.0};
	        int_T       j;

	        for (j = MAX(0, i-%<NN-1>); j <= j_end; j++) {
		    const creal_T *uu0 = u0+j;
		    const real_T   uv1 = u1[i-j];
		    sum.re += uu0->re * uv1;
		    sum.im += uu0->im * uv1;
	        }
	        *y++ = sum;
	    }
       }
    %endif

%endfunction %% Outputs

%% EOF: sdspconv.tlc
