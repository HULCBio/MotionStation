%% sdspsrt2.tlc
%% Abstract: TLC for DSP Blockset Sort block, found in Statistics library. (sdspsrt2)
%%
%% Copyright 1995-2003 The MathWorks, Inc.
%% $Revision: 1.10.4.2 $ $Date: 2004/04/12 23:09:46 $

%implements sdspsrt2 "C"
%include "dsplib.tlc"

%% Function: BlockTypeSetup ================================================
%function BlockTypeSetup(block, system) void

    %<Include_rt_header(block,"dspsrt_rt")>

%endfunction  %%BlockTypeSetup

%% Function: BlockInstanceSetup ===============================================
%%
%function BlockInstanceSetup(block, system) void
    %%
    %% All fixed-point blocks call the fixed-point setup function
    %%
    %<FixPt_Setup(block, system)>
    %%
    %% I/O port data types
    %assign inDT  = FixPt_GetInputDataType(0)
    %assign isFixPt = !FixPt_DataTypeIsFloat(inDT)
    %assign block = block + isFixPt
    %%
    %assign Ascend  = 1
    %assign Descend = 2
    %%
    %assign QuickSort = 1
    %assign InsertionSort = 2
    %%
    %assign outVal_and_Idx = 1
    %assign outVal         = 2
    %assign outIdx         = 3
    %%
    %assign direction = CAST("Number",SFcnParamSettings.Direction)
    %assign outType   = CAST("Number",SFcnParamSettings.Output_Type)
    %assign sortAlgorithm = CAST("Number",SFcnParamSettings.Sort_Type)
    %assign inPlace   = SFcnParamSettings.In_Place
    %assign INPORT_DATA  = 0
    %assign OUTPORT_DATA = 0
    %assign OUTPORT_IDX  = (outType == outIdx) ? 0 : 1
    %%
    %assign dtype       = LibBlockInputSignalDataTypeName(INPORT_DATA,"")
    %assign dtype_real  = LibBlockInputSignalDataTypeName(INPORT_DATA,"%<tRealPart>")
    %assign inSingle    = ((dtype == "real32_T") || (dtype == "creal32_T")) ? 1 : 0
    %assign cplx        = (LibBlockInputSignalIsComplex(INPORT_DATA) != 0)
    %if (isFixPt && cplx)
        %assign accDT  = FixPt_GetParameterDataType(ACC_DATA_TYPE, 0, 0)
        %assign prodDT = FixPt_GetParameterDataType(PROD_DATA_TYPE, 0, 0)
        %assign block  = block + accDT + prodDT +inDT
    %endif
    %assign width       = LibBlockInputSignalWidth(INPORT_DATA)
    %assign numDims     = LibBlockInputSignalNumDimensions(INPORT_DATA)
    %assign dims        = LibBlockInputSignalDimensions(INPORT_DATA)  
    %%
    %assign isFullMatrix = LibBlockInputSignalIsFullMatrix(INPORT_DATA)
    %assign frame        = LibBlockInputSignalIsFrameData(INPORT_DATA)
    %assign nChans       = (frame || isFullMatrix) ? dims[1] : 1
    %assign nSamps       = (frame || isFullMatrix) ? dims[0] : width
    %%
    %assign block = block + INPORT_DATA + OUTPORT_DATA + OUTPORT_IDX + inSingle ... 
                    + dtype + cplx + Ascend + Descend + outVal_and_Idx + dtype_real ...
                    + outVal + outIdx + nChans + nSamps + width + direction + outType ...
                    + inPlace + QuickSort + InsertionSort + sortAlgorithm
%endfunction %% BlockInstanceSetup


%% Function: Outputs ==========================================================
%%
%function Outputs(block, system) Output
/* DSP Blockset Sort (%<ParamSettings.FunctionName>) - '%<Name>' */
%%
%if (!isFixPt)
    %assign dTypeStr = inSingle ? "_R" : "_D"
%elseif (isFixPt && cplx)
    %if (accDT.Name == "int8_T")   
        %assign dTypeStr = "_S08"
    %elseif (accDT.Name == "uint8_T")  
        %assign dTypeStr = "_U08"
    %elseif (accDT.Name == "int16_T")  
        %assign dTypeStr = "_S16"
    %elseif (accDT.Name == "uint16_T") 
        %assign dTypeStr = "_U16"
    %elseif (accDT.Name == "int32_T")  
        %assign dTypeStr = "_S32"
    %elseif (accDT.Name == "uint32_T") 
        %assign dTypeStr = "_U32"
    %else
        %error "Code generation not supported for input data type."
    %endif
%else
    %if (dtype_real == "int8_T")   
        %assign dTypeStr = "_S08"
    %elseif (dtype_real == "uint8_T")  
        %assign dTypeStr = "_U08"
    %elseif (dtype_real == "int16_T")  
        %assign dTypeStr = "_S16"
    %elseif (dtype_real == "uint16_T") 
        %assign dTypeStr = "_U16"
    %elseif (dtype_real == "int32_T")  
        %assign dTypeStr = "_S32"
    %elseif (dtype_real == "uint32_T") 
        %assign dTypeStr = "_U32"
    %else
        %error "Code generation not supported for accumulator data type."
    %endif
%endif
%%
%if (outType == outVal) && (!cplx)
    %assign sortMethodStr = "_Val"
%else
    %assign sortMethodStr = "_Idx"
%endif
%%
%assign str = sortMethodStr + dTypeStr
%%
%%
%if ( outType == outVal )
    %<QkSortVal(block, str)>
%else
    %<QkSortIdx(block, str)>
%endif

%endfunction  %% Outputs

%% Subfunction: QkSortVal ======================================
%%
%function QkSortVal(block, str) Output
{
%if (nSamps > 1)
    %if (!inPlace)
    const %<dtype> *u = %<LibBlockInputSignalAddr(INPORT_DATA, "", "", 0)>;
    %endif
    %<dtype> *y = %<LibBlockOutputSignalAddr(OUTPORT_DATA, "","", 0)>;
    %%
    %if (nChans > 1)
        int_T i;
        for(i=0; i<%<nChans>; i++) {
            int_T start = i * %<nSamps>;
            %assign nSampsMinusOne = nSamps-1
            %if (!inPlace)
                %if (cplx)
                    uint32_T index[%<nSamps>];
                    %<calculateMagSq(block, "start+k")> \
                    for(k=0; k<%<nSamps>; k++) {
                        index[k] = k;    
                    }
                %else
                    memcpy(y+start, u+start, %<nSamps>*sizeof(%<dtype>));
                %endif
            %endif
            %%
            %<genSortFcnCall(block, str)>
            %%
            %if (cplx)
                for(k=0; k<%<nSamps>; k++) {
                     y[start+k] = u[start+index[k]];
                }
            %endif
            %if (direction == Descend)
                /* Reverse sorted value order */
                {
                    int_T k;
                    int_T range = (%<nSamps> >> 1);
                    for (k=0; k<range; k++) {
                        %<dtype> tmp = y[start+k];
                        y[start+k] = y[start+%<nSampsMinusOne>-k];
                        y[start+%<nSampsMinusOne>-k]  = tmp;
                    }
                }
            %endif
        } %% end channel loop
    %else
    %% single channel optimization
    %%
        %if (!inPlace)
            %if (cplx)  %% Sfunction disallows in-place when cplx 
                uint32_T index[%<nSamps>];
                %<calculateMagSq(block, "k")> \
                for(k=0; k<%<nSamps>; k++) {
                    index[k] = k;    
                }
            %else
                memcpy(y, u, %<nSamps>*sizeof(%<dtype>));
            %endif
        %endif
        %%
        %<genSortFcnCall(block, str)>
        %%
        %if (cplx)
            for(k=0; k<%<nSamps>; k++) {
                 y[k] = u[index[k]];
            }
        %endif
        %if (direction == Descend)
            %assign stop = nSamps-1
            /* Reverse sorted value order */
            {
                int_T k;
                int_T range = (%<nSamps> >> 1);
                for (k=0; k<range; k++) {
                    %<dtype> tmp = y[k];
                    y[k] = y[%<stop>-k];
                    y[%<stop>-k]  = tmp;
                }
            }
        %endif
    %endif
%%
%else   
%% nSamps == 1 optimization
%%
    %if (!inPlace)
        const %<dtype> *u = %<LibBlockInputSignalAddr(INPORT_DATA, "", "", 0)>;
        %<dtype> *y = %<LibBlockOutputSignalAddr(OUTPORT_DATA, "","", 0)>;
        %if (nChans > 1)
            int_T i;
            for(i=0; i<%<nChans>; i++) {
                y[i] = u[i];
            }
        %else
            *y = *u;
        %endif
    %endif
%endif

}
%endfunction

%% Subfunction: QkSortIdx ======================================
%%
%function QkSortIdx(block, str) Output
{
    %if !( (outType == outIdx) && (nSamps == 1) )
    const %<dtype> *u = %<LibBlockInputSignalAddr(INPORT_DATA, "", "", 0)>;
    %endif
    uint32_T *index = %<LibBlockOutputSignalAddr(OUTPORT_IDX,"","",0)>;
    %if (outType != outIdx)
    %<dtype> *y = %<LibBlockOutputSignalAddr(OUTPORT_DATA, "","", 0)>;
    %endif
    %%
    %if (nChans > 1)
    int_T i;
    for(i=0; i<%<nChans>; i++) {
        %if (nSamps > 1)
            int_T start = i * %<nSamps>;
            %%int_T stop  = (i+1) * %<nSamps> - 1;
            %assign len = nSamps - 1
            int_T j;
            for(j=0; j<%<nSamps>; j++) {
              index[j+start] = j+start;    
            }
            %%
            %if cplx
                {
                    %<calculateMagSq(block, "start+k")> \
                    %<genSortFcnCall(block, str)>
                }
            %else
                %<genSortFcnCall(block, str)>
            %endif
            %if (direction == Descend)
                %<reverseChanIdx(block, "start+k", "start+%<len>-k")>
            %endif
            for(j=0; j<%<nSamps>; j++) {
                %if (outType == outVal_and_Idx)
                 y[j+start] = u[index[j+start]];
                %endif
                index[j+start] += (1-start); /* Convert to MATLAB 1-based indexing */
            }
        %else
            %if (outType == outVal_and_Idx)
            *y++ = *u++;
            %endif
            *index++ = 1; /* Convert to MATLAB 1-based indexing */
        %endif
        %%
    } %% end channel loop
    %else
        %if (nSamps > 1)
            %assign stop  = nSamps-1
            int_T j;
            for(j=0; j<%<nSamps>; j++) {
              index[j] = j;    
            }
            %%
            %if cplx
                {
                    %<calculateMagSq(block, "k")> \
                    %<genSortFcnCall(block, str)>
                }
            %else
                %<genSortFcnCall(block, str)>
            %endif
            %%
            %if (direction == Descend)
                %assign nSampsMinusOne = nSamps - 1
                %<reverseChanIdx(block, "k", "%<nSampsMinusOne>-k")>
            %endif
            for(j=0; j<%<nSamps>; j++) {
                %if (outType == outVal_and_Idx)
                 y[j] = u[index[j]];
                %endif
                index[j] += 1; /* Convert to MATLAB 1-based indexing */
            }
        %else
            %if (outType == outVal_and_Idx)
            *y = *u;
            %endif
            *index = 1; /* Convert to MATLAB 1-based indexing */
        %endif
        %%
    %endif
}
%endfunction

%% QkSort helper function: calculateMagSq ======================================
%%
%% only call this function when input is complex
%%
%function calculateMagSq(block, inIdxStr) Output
%%
    %if (isFixPt)
        %createrecord rndSatRec {roundingMode FixPtRoundingMode; ...
          overflowMode FixPtSaturationMode}
        %createrecord accRec {label "inputMagSqVal[k]"; ...
          dTypeRec accDT; isComplex 0}
        %createrecord prodRec {label "prod"; ...
          dTypeRec prodDT; isComplex 0}
        %assign inRealLabel = "u[%<inIdxStr>].re"
        %assign inImagLabel = "u[%<inIdxStr>].im"
        %createrecord inRealRec {label inRealLabel; ...
          dTypeRec inDT; isComplex 0}
        %createrecord inImagRec {label inImagLabel; ...
          dTypeRec inDT; isComplex 0}
        %%
        %<accDT.Name> inputMagSqVal[%<nSamps>];
        %<prodDT.Name> prod;
        int_T k;
        for (k=0; k<%<nSamps>; k++) {
          %<FixptMAC(accRec, "=",  prodRec, inRealRec, inRealRec, rndSatRec)>
          %<FixptMAC(accRec, "+=", prodRec, inImagRec, inImagRec, rndSatRec)>          
        }
    %else
        %<dtype_real> inputMagSqVal[%<nSamps>];
        int_T k;
        for (k=0; k<%<nSamps>; k++) {
            inputMagSqVal[k] = CMAGSQ(u[%<inIdxStr>]);
        }
    %endif
%%
%endfunction

%% QkSort helper function: reverseChanIdx ======================================
%%
%function reverseChanIdx(block, startIdxStr, stopIdxStr) Output
{
    int_T range = (%<nSamps> >> 1);
    int_T k;
    for (k=0; k<range; k++) {
        uint32_T tmp = index[%<startIdxStr>];
        index[%<startIdxStr>] = index[%<stopIdxStr>];
        index[%<stopIdxStr>] = tmp;
    }
}
%endfunction

%% Sort helper function: genSortFcnCall ======================================
%%
%function genSortFcnCall(block, str) Output
%%
%if (sortAlgorithm == QuickSort)
    %assign nSampsMinusOne = nSamps - 1
    %%
    %if (outType == outVal)
        %if (nChans > 1)
            %assign arg = (cplx) ? "(inputMagSqVal, index, 0, %<nSampsMinusOne>)" : "(y, start, start+%<nSampsMinusOne>)"
        %else
            %assign arg = (cplx) ? "(inputMagSqVal, index, 0, %<nSampsMinusOne>)" : "(y, 0, %<nSampsMinusOne>)"
        %endif
    %else
        %if (nChans > 1)
            %assign arg = (cplx) ? "((inputMagSqVal-start), index, start, start+%<nSampsMinusOne>)" : "(u, index, start, start+%<nSampsMinusOne>)"
        %else
            %assign arg = (cplx) ? "(inputMagSqVal, index, 0, %<nSampsMinusOne>)" : "(u, index, 0, %<nSampsMinusOne>)"
        %endif
    %endif
    %%
    MWDSP_Sort_Qk%<str>%<arg>;
    %%
%else
    %assign nElemToSort = nSamps
    %if (outType == outVal)
        %if (nChans > 1)
            %assign arg = (cplx) ? "(inputMagSqVal, index, %<nElemToSort>)" : "(y+start, %<nElemToSort>)"
        %else
            %assign arg = (cplx) ? "(inputMagSqVal, index, %<nElemToSort>)" : "(y, %<nElemToSort>)"
        %endif
    %else
        %if (nChans > 1)
            %assign arg = (cplx) ? "((inputMagSqVal-start), index+start, %<nElemToSort>)" : "(u, index+start, %<nElemToSort>)"
        %else
            %assign arg = (cplx) ? "(inputMagSqVal, index, %<nElemToSort>)" : "(u, index, %<nElemToSort>)"
        %endif
    %endif
    %%
    MWDSP_Sort_Ins%<str>%<arg>;
    %%
%endif
%%
%endfunction

%% [EOF] sdspsrt2.tlc
