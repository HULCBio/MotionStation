%% Copyright 1995-2003 The MathWorks, Inc.
%% 
%% Abstract: DSPMPCLK2 Multiphase clock generator C-MEX S-Function
%%            for the Signal Processing Blockset.
%%
%implements "sdspmpclk2" "C"
%% Function: BlockInstanceSetup ===============================================
%%
%function BlockInstanceSetup(block, system) void
%%
%assign OUTPORT = 0
%assign CLKPHASE_IDX = 1
%assign OutputType   = LibBlockOutputSignalDataTypeName(OUTPORT,"") 
%assign block = block + CLKPHASE_IDX + OutputType + OUTPORT
%endfunction 
%% BlockInstanceSetup========================================================


%% Function: InitializeConditions =============================================
%%
%function InitializeConditions(block, system) Output
{
/* Signal Processing Blockset Multiphase clock generator  (%<ParamSettings.FunctionName>) - %<Name> */
%%
%assign trig = LibBlockParameter(TRIGGER,"","",0)
%assign dcycle = LibBlockParameter(DCYCLE,"","",0)
%assign sphase = LibBlockParameter(SPHASE,"","",0)
%assign NValue = SFcnParamSettings.Numphases
%assign dcycle = SFcnParamSettings.Dcycle
%%
int_T hi,index;
%<OutputType> *circbuffer =(%<LibBlockDWorkAddr(Circbuffer,"","",0)>);

if (%<trig> == 1)
    hi = 1;
else
    hi = 0;

%roll Idx = [0:%<NValue - 1>], lcv = RollThreshold, block, "InlineRoller"
            %assign loopArg = (lcv == "") ? Idx : lcv
             circbuffer[%<loopArg>] = (1-hi);
%endroll    

%roll Idx2 = [0:%<dcycle-1>], lcv2 = RollThreshold, block, "InlineRoller"
    %assign loopArg2 = (lcv2 == "") ? Idx2 : lcv2
    index = %<sphase> - 2 - %<loopArg2>;
    if (index < 0)(index += %<NValue>);
    circbuffer[index] = (hi);
%endroll


%<LibBlockDWork(Clkphase,"","",0)> = (int32_T)0;
%%
}
%endfunction
%%InitializeConditions==================================================



%%%%%%%%%%%%%%%%%%%%% 
%% Function: Outputs ================================================================================
%%
%function Outputs(block, system) Output   
{
/* Signal Processing Blockset Multiphase clock generator  (%<ParamSettings.FunctionName>) - %<Name> */
%assign NValue = SFcnParamSettings.Numphases
%<OutputType>   *circbuffer  =  (%<LibBlockDWorkAddr(Circbuffer, "", "", 0)>); 
%<OutputType>   *y =  (%<LibBlockOutputSignalAddr(OUTPORT,"","",0)>);
%%
%if NValue > 1
{ 
    int32_T *Clk_Phase  = %<LibBlockDWorkAddr(Clkphase, "", "", 0)>;
    const int32_T Phase = *Clk_Phase;
    const int_T idx   = %<NValue>-1-Phase;
    const int_T n1    = %<NValue>-idx;
    const int_T n2    = idx;
    %<OutputType> *x;       
        int_T i = n1;
        x = (circbuffer+idx);
        while (i-- > 0){
            *y++ = (*x++);
        }
        
        x = circbuffer;
        i = n2;
        while (i-- > 0){
            *y++ = (*x++);
        }        
    *Clk_Phase = (Phase+1) % (%<NValue>);
} 
%else
{
    *y = (%<OutputType>) circbuffer[0];
    circbuffer[0] = 1 - circbuffer[0];
}
%endif  
}
%endfunction
%%Outputs ================================================== 

%% [EOF] sdspmpclk2.tlc
