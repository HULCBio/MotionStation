%% $RCSfile: sdspupsamp2.tlc,v $
%% $Revision: 1.7.4.3 $  $Date: 2004/04/12 23:10:08 $
%%
%% Copyright 1995-2004 The MathWorks, Inc.
%%
%% Abstract: Increases the sampling rate of a signal by 
%%           inserting zeros into the signal.

%implements sdspupsamp2 "C"

%include "dsplib.tlc"
%include "dsp_intbounds.tlc"

%% Function: BlockTypeSetup ==============================================
%function BlockTypeSetup(block, system) void

    %<Include_rt_header(block,"dsp_ic_rt")>

%endfunction %% BlockTypeSetup


%% Function: BlockInstanceSetup ===============================================
%%
%function BlockInstanceSetup(block, system) void

  %assign OUTPORT  = 0
  %assign INPORT   = 0

  %assign cplx   = (LibBlockInputSignalIsComplex(INPORT) != 0)
  %assign DType_ID = LibBlockOutputSignalDataTypeId(OUTPORT)
  %assign inWidth  = CAST("Number",LibDataInputPortWidth(INPORT))
  %assign outWidth = CAST("Number",LibDataOutputPortWidth(OUTPORT))

  %assign outportIsComplex = (LibBlockOutputSignalIsComplex(OUTPORT) != 0)
  %assign outportDTypeName = LibBlockOutputSignalDataTypeName(OUTPORT, "%<tRealPart>")
  %assign bytesPerElement  = (outportIsComplex) \
                           ? "(2 * sizeof(%<outportDTypeName>))" \
                           : "sizeof(%<outportDTypeName>)"
                           
  %assign numDims = LibBlockInputSignalNumDimensions(INPORT)
  %assign dims    = LibBlockInputSignalDimensions(INPORT)
  %assign COLS    = (numDims == 2) ? dims[1] : 1
  %assign ROWS    = dims[0]
    
  %assign frame   = LibBlockInputSignalIsFrameData(INPORT)
  %assign nChans  = frame ? COLS : inWidth
  %assign chanLen = CAST("Number", inWidth / nChans)
  
  %assign SamplesPerInputFrame  = CAST("Number", inWidth  / nChans)
  %assign SamplesPerOutputFrame = CAST("Number", outWidth / nChans)

  %assign outmode    = CAST("Number",SFcnParamSettings.OUTMODE[0])
  %assign convfactor = CAST("Number",SFcnParamSettings.CONVFACTOR[0])
  %assign phase      = CAST("Number",SFcnParamSettings.PHASE[0])
  
  %assign isSingleRate = LibIsSFcnSingleRate(block)
  %assign isMultiTasking = IsModelMultiTasking()
  
  %assign block = block + OUTPORT + INPORT + cplx + \
                  bytesPerElement + inWidth + outWidth + \ 
		  frame + nChans + chanLen + DType_ID + \
                  SamplesPerInputFrame + SamplesPerOutputFrame + \
                  outmode + convfactor + phase + \
		  isSingleRate + isMultiTasking
		  
%endfunction %% BlockInstanceSetup


%% Function: InitializeConditions =============================================
%%
%function InitializeConditions(block, system) Output
  /* Signal Processing Blockset Upsample (%<ParamSettings.FunctionName>) - '%<Name>' */
  %%
  %% Note regarding DWorks:  
  %% ----------------------
  %% Counter is needed in any mode
  %% Input index is needed in all multirate modes
  %% ICs are needed only in multirate, multi-tasking mode
  %%
  %if isSingleRate
    %<LibBlockDWork(Count,"", "", 0)> = %<(phase == 0) ? 0 : (convfactor-phase)>;
  %else
    %assign IC_dims        = IC.Dimensions
    %assign numICs         = IC_dims[0] * IC_dims[1]
    %assign inBuf = "(byte_T *)" + LibBlockDWorkAddr(Buffer,"","",0)
    %assign pIC = "(const byte_T *)" + LibBlockParameterAddr(IC,"","",0)
    %%
    %if isMultiTasking 
      %%
      %<LibBlockDWork(InputIdx,"", "", 0)> = 0;
      %<LibBlockDWork(Count,"", "", 0)> = %<(phase == 0) ? 0 : (convfactor-phase)>;
      %%
      %if (numICs == 1)
        %%
        %% Scalar initial condition
        %%
        MWDSP_CopyScalarICs(%<inBuf>, %<pIC>, %<inWidth>, %<bytesPerElement>);
      %elseif (numICs > 1)
        %%
        %% Vector of initial conditions
        %%
        MWDSP_CopyMatrixICs(%<inBuf>, %<pIC>, %<inWidth>, %<bytesPerElement>);
      %endif
      %%
      %% Save input/output pointers to buffer
      %% 
      %assign buffer =  LibBlockDWorkAddr(Buffer,"","", 0)
      %<LibBlockPWork(pOutBuf,"","",0)> = (byte_T *)%<buffer>;
      %<LibBlockPWork(pInBuf,"","",0)> =((byte_T *)%<buffer>) + %<inWidth>*%<bytesPerElement>;
    %else
    %%
      if (%<LibBlockDWork(EnableSysFlag,"", "", 0)> == 0) {
        %<LibBlockDWork(InputIdx,"", "", 0)> = 0;
        %<LibBlockDWork(Count,"", "", 0)> = %<(phase == 0) ? 0 : (convfactor-phase)>;
      }
      %if (numICs == 1)
        MWDSP_CopyScalarICs(%<inBuf>, %<pIC>, %<inWidth>, %<bytesPerElement>);
      %else
        MWDSP_CopyMatrixICs(%<inBuf>, %<pIC>, %<inWidth>, %<bytesPerElement>);
      %endif
    %endif
  %endif
%endfunction %% InitializeConditions


%% Function: Outputs ==========================================================
%%
%function Outputs(block, system) Output
  /* Signal Processing Blockset Upsample (%<ParamSettings.FunctionName>) - '%<Name>' */
  %%
  {
    const int_T bpe = %<bytesPerElement>;
  %if (isSingleRate)
    %<SingleRateCode(block)>
  %else
    %if (isMultiTasking)
      %<MultiRate_MultiTasking_Code(block)>
    %else
      %<MultiRate_SingleTasking_Code(block)>
    %endif
  %endif
  }
%endfunction
  

%% Function: OutputsForTID =====================================================
%% This function is called only in multi-rate, multi-tasking ert mode
%function OutputsForTID(block, system, tid) Output
  /* Signal Processing Blockset Upsample (%<ParamSettings.FunctionName>) - '%<Name>' */
{
    const int_T bpe = %<bytesPerElement>;
    %if (tid == %<LibGetGlobalTIDFromLocalSFcnTID("InputPortIdx0")>)
        %<inputHitCode(block)>
    %endif
    %if (tid == %<LibGetGlobalTIDFromLocalSFcnTID("OutputPortIdx0")>)
        %<outputHitCode(block)>
    %endif
}
%endfunction %% OutputsForTID


%% Function: Start ==========================================================
%%
%function Start(block, system) Output
{
%if (!isSingleRate && !isMultiTasking )
  /* Signal Processing Blockset Upsample (%<ParamSettings.FunctionName>) - '%<Name>' */
  %<LibBlockDWork(EnableSysFlag,"", "", 0)> = 0;
%endif
}
%endfunction %% Start


%% Function: Enable ==========================================================
%%
%function Enable(block, system) Output
%% Enable/Disable functions are not needed for trig subsystem.
%% TLC function LibGetGlobalTIDFromLocalSFcnTID("InputPortIdx0") errors out inside trig subsystem
%if ISEQUAL(TID,"triggered")
  %return
%endif
{
%if (!isSingleRate && !isMultiTasking )
  /* Signal Processing Blockset Upsample (%<ParamSettings.FunctionName>) - '%<Name>' */
  %if (SLibClockTickIsUnit32Pair(LibGetGlobalTIDFromLocalSFcnTID("OutputPortIdx0")))
    uint32_T currentOutportTick = (uint32_T)%<LocalLibGetClockTick(LibGetGlobalTIDFromLocalSFcnTID("OutputPortIdx0"))>;
    uint32_T lastOutportTick = (uint32_T)%<LibBlockDWork(DisableTimeTick,"", "", 0)>;
    uint32_T OutportTickElapsed = (lastOutportTick<=currentOutportTick)  \
                                ? currentOutportTick - lastOutportTick   \
                                : (uint32_T)(pow(2,32) - lastOutportTick + currentOutportTick);
  %else
    uint32_T OutportTickElapsed = \
      (uint32_T)%<LocalLibGetClockTick(LibGetGlobalTIDFromLocalSFcnTID("OutputPortIdx0"))> - \
      (uint32_T)%<LibBlockDWork(DisableTimeTick,"", "", 0)>;
  %endif
  int32_T missedOutputSamps = %<SamplesPerOutputFrame> * OutportTickElapsed;
  int32_T counter = %<LibBlockDWork(Count,"", "", 0)>;
  int32_T inCnt   = %<LibBlockDWork(InputIdx,"", "", 0)>;
  int_T   i;
  for (i=0; i<missedOutputSamps; i++) {
    if (counter++ == 0) inCnt++;
    if (counter == %<convfactor>) counter = 0; 
    if (inCnt   == %<SamplesPerOutputFrame>) inCnt = 0;
  }
  %<LibBlockDWork(Count,"", "", 0)> = counter;
  %<LibBlockDWork(InputIdx,"", "", 0)> = inCnt;
%%
%endif
}
%endfunction %% Enable


%% Function: Disable ==========================================================
%%
%function Disable(block, system) Output
%% Enable/Disable functions are not needed for trig subsystem.
%% TLC function LibGetGlobalTIDFromLocalSFcnTID("InputPortIdx0") errors out inside trig subsystem
%if ISEQUAL(TID,"triggered")
  %return
%endif
{
%if (!isSingleRate && !isMultiTasking )
  /* Signal Processing Blockset Upsample (%<ParamSettings.FunctionName>) - '%<Name>' */
  %<LibBlockDWork(DisableTimeTick,"", "", 0)> = (uint32_T)%<LocalLibGetClockTick(LibGetGlobalTIDFromLocalSFcnTID("OutputPortIdx0"))>;
  %<LibBlockDWork(EnableSysFlag,"", "", 0)> = 1;
%endif
}
%endfunction %% Disable

%% LocalLibGetClockTick ===================
%% Abstract:
%%   Return ClockTick of the tid .   
%%
%function LocalLibGetClockTick(tid) void
  %assert TYPE(tid) == "Number" && tid >= 0
  %if ClockTickForTIDIsReqFcn(tid) 
    %return RTMGet("ClockTick%<tid>")
  %else
    %% only used in accelerator mode
    %assign retStr = ...
      "ceil(%<LibGetT()> / %<SampleTime[tid].ClockTickStepSize>)"
    %return retStr
  %endif
%endfunction %% LocalLibGetClockTick


%% Function: SingleRateCode ==========================================================
%%
%function SingleRateCode(block) Output
  %%
  /* Single-rate */
  {
    byte_T  *y    = (byte_T *)%<LibBlockOutputSignalAddr(OUTPORT,"", "", 0)>;
    byte_T  *uptr = (byte_T *)(%<LibBlockInputSignalAddr(INPORT, "", "", 0)>);
    int_T n;  
    int_T c;
    
    for (n=0; n<%<nChans>; n++) {
      int_T i;
      
      c = %<LibBlockDWork(Count,"", "", 0)>; /* Reset counter for each channel */
      
      for (i=0; i<%<SamplesPerOutputFrame>; i++) {
	if (c++ == 0) {
          memcpy(y,uptr,bpe);
          uptr += bpe;
          y += bpe;
        }
        else {
          %assign DType_Name = LibBlockInputSignalDataTypeName(0,"")
          %if cplx
            %<DType_Name> zeroVal;
            zeroVal.re = %<SLibGetGroundValueFromId(DType_ID)>;
            zeroVal.im = %<SLibGetGroundValueFromId(DType_ID)>;
          %else
            %<DType_Name> zeroVal = %<SLibGetGroundValueFromId(DType_ID)>;
          %endif
          memcpy(y,&zeroVal,bpe);
          y += bpe;
        }
	if (c == %<convfactor>) c = 0;
      }
    }
    %<LibBlockDWork(Count,"", "", 0)> = c; /* Update counter for next sample hit */
  }
  
%endfunction %% SingleRateCode


%% Function: MultiRate_MultiTasking_Code =======================================
%%
%function MultiRate_MultiTasking_Code(block) Output
  /* Multi-rate, multi-tasking */
  if (%<LibIsSFcnSampleHit("OutputPortIdx0")>) {
    %<outputHitCode(block)>
  }  %% end output sample hit
  if (%<LibIsSFcnSampleHit("InputPortIdx0")>) {
    %<inputHitCode(block)>
  } %% end input sample hit
%endfunction  %% MultiRate_MultiTasking_Code


%% Function: outputHitCode =====================================================
%%
%function outputHitCode(block) Output
    byte_T *y        = (byte_T *)(%<LibBlockOutputSignalAddr(OUTPORT,"", "", 0)>);
    byte_T *outBuf   = (byte_T *)(%<LibBlockPWork(pOutBuf,"","",0)>);
    int_T   inCnt;
    int_T   n;  
    int_T   c;

    for (n=0; n<%<nChans>; n++) {
      byte_T *Buf = outBuf + n*%<SamplesPerOutputFrame>*bpe;
      int_T i;
      
      c = %<LibBlockDWork(Count,"", "", 0)>; /* Reset counter for each channel */
      inCnt = %<LibBlockDWork(InputIdx,"", "", 0)>; /* Reset input index for each channel */
      
      for (i=0; i<%<SamplesPerOutputFrame>; i++) {
	if (c++ == 0) {
          memcpy(y,Buf+inCnt*bpe,bpe);
          y += bpe;
          inCnt++;
        }
        else {
          %assign DType_Name = LibBlockInputSignalDataTypeName(0,"")
          %if cplx
            %<DType_Name> zeroVal;
            zeroVal.re = %<SLibGetGroundValueFromId(DType_ID)>;
            zeroVal.im = %<SLibGetGroundValueFromId(DType_ID)>;
          %else
            %<DType_Name> zeroVal = %<SLibGetGroundValueFromId(DType_ID)>;
          %endif
          memcpy(y,&zeroVal,bpe);
          y += bpe;
        }
        if (c == %<convfactor>) c = 0;
      }
    }
    %<LibBlockDWork(Count,"", "", 0)> = c; /* Update counter for next sample hit */
    %%             
    
    /* Update input index for next sample hit */       
    if (inCnt == %<SamplesPerOutputFrame>) {
      inCnt = 0;
      outBuf += %<inWidth>*bpe;
    }
    %<LibBlockDWork(InputIdx,"", "", 0)> = inCnt;
    
    /* Update Output pointer buffer */
    {
      byte_T *aBuf =  (byte_T *)%<LibBlockDWorkAddr(Buffer,"", "", 0)>;
      if (outBuf == aBuf + %<2*inWidth>*bpe) {
	outBuf = aBuf;
      }
      %<LibBlockPWork(pOutBuf,"","",0)> = outBuf;
    }
    %%
%endfunction %% outputHitCode


%% Function: inputHitCode ======================================================
%%
%function inputHitCode(block) Output
    %if convfactor > 1 
      %%
      byte_T *inBuf = (byte_T *)%<LibBlockPWork(pInBuf,"","", 0)>;
      %%
      %if inWidth > 1
      {
        const byte_T *u = (const byte_T *)%<LibBlockInputSignalAddr(INPORT, "", "", 0)>;
        int_T ind;
        for (ind = 0; ind < %<inWidth>; ind++) {
          memcpy(inBuf, \
                 u + ind*bpe, \
                 bpe);
          inBuf += bpe;
        }
      }  
      %else
        memcpy(inBuf,%<LibBlockInputSignalAddr(INPORT, "", "", 0)>,bpe);
        inBuf += bpe;
      %endif
      %%
      /* Update Input pointer buffer */
      {
	byte_T *aBuf = (byte_T *)%<LibBlockDWorkAddr(Buffer,"", "", 0)>;
	if (inBuf == aBuf + %<2*inWidth>*bpe) {
	  inBuf = aBuf; 
	}
      }
      %<LibBlockPWork(pInBuf,"","",0)>  = inBuf;
      %%
    %else  %% convfactor == 1
      %%
      %% Upsampling by  one is just copying inputs to outputs
      %%
      %<LibBLockCopyInputsToOutputs(INPORT,OUTPORT)>
    %endif
%endfunction %% inputHitCode


%% Function: MultiRate_SingleTasking_Code ======================================
%%
%function MultiRate_SingleTasking_Code(block) Output
  %%
  /* Multi-rate, single-tasking */
    if (%<LibIsSFcnSampleHit("InputPortIdx0")>) {
        memcpy((byte_T *)%<LibBlockDWorkAddr(Buffer,"", "", 0)>, 
                (const byte_T *)%<LibBlockInputSignalAddr(INPORT, "", "", 0)>, 
                %<inWidth> * bpe);
    }

  if (%<LibIsSFcnSampleHit("OutputPortIdx0")>) {
    byte_T *y = (byte_T *)(%<LibBlockOutputSignalAddr(OUTPORT,"", "", 0)>);
    byte_T *buf = (byte_T *)(%<LibBlockDWorkAddr(Buffer,"", "", 0)>);
    int_T inCnt = %<LibBlockDWork(InputIdx,"", "", 0)>;
    int_T n;  
    int32_T c;
    
    for (n=0; n<%<nChans>; n++) {
      int_T i;
      int_T currentChannel = n*%<SamplesPerOutputFrame>;
      
      c = %<LibBlockDWork(Count,"", "", 0)>; /* Reset counter for each channel */
      inCnt = %<LibBlockDWork(InputIdx,"", "", 0)>;
      
      for (i=0; i<%<SamplesPerOutputFrame>; i++) {
	if (c++ == 0) {
          memcpy(y,buf+(currentChannel+inCnt)*bpe,bpe);
          y += bpe;
          inCnt++;
        }
        else{
          %assign DType_Name = LibBlockInputSignalDataTypeName(0,"")
          %if cplx
            %<DType_Name> zeroVal;
            zeroVal.re = %<SLibGetGroundValueFromId(DType_ID)>;
            zeroVal.im = %<SLibGetGroundValueFromId(DType_ID)>;
          %else
            %<DType_Name> zeroVal = %<SLibGetGroundValueFromId(DType_ID)>;
          %endif
          memcpy(y,&zeroVal,bpe);
          y += bpe;
        }
        if (c == %<convfactor>) c = 0;
      }
    }
    /* Update counter for next sample hit */
    %<LibBlockDWork(Count,"", "", 0)> = c;
    
    /* Update input index */
    if (inCnt >= %<SamplesPerOutputFrame>) inCnt = 0;
    %<LibBlockDWork(InputIdx,"", "", 0)> = inCnt;
    %%
  } %% end if(LibIsSFcnSampleHit(Output))

%endfunction  %% MultiRate_SingleTasking_Code

  
%% [EOF] sdspupsamp.tlc









