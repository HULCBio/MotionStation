%% sdspqre2.tlc
%% Abstract: TLC for Signal Processing Blockset QR Factorization block. (sdspqre2)
%%
%% Copyright 1995-2003 The MathWorks, Inc.
%% $Revision: 1.2.4.2 $ $Date: 2004/04/12 23:09:26 $


%implements "sdspqre2" "C"
%include "dsplib.tlc"

%% Function: BlockInstanceSetup ===============================================
%%
%function BlockInstanceSetup(block, system) void

  %assign INPORT_A  = 0
  %assign OUTPORT_Q = 0
  %assign OUTPORT_R = 1
  %assign OUTPORT_E = 2
  %assign dtype    = LibBlockInputSignalDataTypeName(INPORT_A,"")
  %assign inSingle = ((dtype == "real32_T") || (dtype == "creal32_T"))? 1 : 0
  %assign cplx     = LibBlockInputSignalIsComplex(INPORT_A)
  %assign M       = %<SFcnParamSettings.orderM>
  %assign N       = %<SFcnParamSettings.orderN>
  %assign MN      = %<SFcnParamSettings.prodMN>
  %assign needCpy = %<SFcnParamSettings.NeedCopy>

  %<LibDefineIWork(block, "Jpvt", N)>  

  %assign block = block + INPORT_A + OUTPORT_Q + OUTPORT_R + OUTPORT_E + dtype + inSingle + cplx ...
                        + M + N + MN + needCpy

%endfunction %% BlockInstanceSetup

%% Function: BlockTypeSetup ================================================
%function BlockTypeSetup(block, system) void

    %<Include_rt_header(block,"dspqrdc_rt")>

%endfunction  %%BlockTypeSetup


%% Function: Outputs ==========================================================
%%
%% Abstract:
%%
%function Outputs(block, system) Output
    %%
    /* Signal Processing Blockset QR Factorization (%<ParamSettings.FunctionName>) - '%<Name>' */
    %% inline code for G1 and G2 evaluation
    %assign str  = (inSingle) ? (cplx ? "C" : "R") : (cplx ? "Z" : "D")
    {
      %if needCpy  
        const %<dtype> *pA = %<LibBlockInputSignalAddr(INPORT_A,"","",0)>;
        %if M > N
            %<dtype> *pS        = %<LibBlockDWorkAddr(Sindx, "", "", "")>;
            int_T mn = %<MN>;
            while (mn-- > 0) {
                *pS++ = *pA++;
            }
        %else
            %<dtype> *pR        = %<LibBlockOutputSignalAddr(OUTPORT_R,"","",0)>;
            int_T mn = %<MN>;
            while (mn-- > 0) {
                *pR++ = *pA++;
            }
        %endif
      %endif
        memset(&%<LibBlockIWork(Jpvt,"", "", 0)>, 0, %<N> * sizeof(int_T));
        %if M > N
          MWDSP_QRE_%<str>(%<M>, %<N>, %<LibBlockOutputSignalAddr(OUTPORT_Q,"","",0)> , 
                            %<LibBlockDWorkAddr(Sindx, "", "", "")>,
                            %<LibBlockOutputSignalAddr(OUTPORT_E,"","",0)>,
                            %<LibBlockDWorkAddr(QRaux, "", "", "")>,
                            %<LibBlockDWorkAddr(Work, "", "", "")>,
                            &%<LibBlockIWork(Jpvt,"", "", 0)>,
                            %<LibBlockOutputSignalAddr(OUTPORT_R,"","",0)>);
        %else
          MWDSP_QRE_%<str>(%<M>, %<N>, %<LibBlockOutputSignalAddr(OUTPORT_Q,"","",0)> , 
                            %<LibBlockOutputSignalAddr(OUTPORT_R,"","",0)> ,
                            %<LibBlockOutputSignalAddr(OUTPORT_E,"","",0)>,
                            %<LibBlockDWorkAddr(QRaux, "", "", "")>,
                            %<LibBlockDWorkAddr(Work, "", "", "")>,
                            &%<LibBlockIWork(Jpvt,"", "", 0)>,
                            (void *)0);
        %endif
   }
%endfunction %% Outputs

%% EOF: sdspqre2.tlc
