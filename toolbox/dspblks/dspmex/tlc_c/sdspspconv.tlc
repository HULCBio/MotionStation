%% $RCSfile: sdspspconv.tlc,v $
%% $Revision: 1.1.6.2 $ 
%% $Date: 2003/12/06 15:28:03 $
%%
%% Copyright 1995-2003 The MathWorks, Inc.
%%
%% Abstract: TLC Code generation for Signal Processing Blockset Sparse Convolution block (for dspcelpcoder demo)
%%

%implements sdspspconv "C"

%%%%%%%%%%%%%%%%%%%%% 
%% Function: Outputs ===========================================================
%%
%function Outputs(block, system) Output
  %assign INPORT_ASIGN  = 0
  %assign INPORT_AIDX   = 1
  %assign INPORT_B      = 2
  %assign OUTPORT    = 0
  /* Signal Processing Blockset Sparse Convolution (%<ParamSettings.FunctionName>) - '%<Name>' - Output */
  %%  
  {
	int32_T    *uASign = %<LibBlockInputSignalAddr(INPORT_ASIGN, "", "", 0)>;
	int32_T    *uAIdx  = %<LibBlockInputSignalAddr(INPORT_AIDX, "", "", 0)>;
	real_T     *uB     = %<LibBlockInputSignalAddr(INPORT_B, "", "", 0)>;
	real_T     *y      = %<LibBlockOutputSignalAddr(OUTPORT, "", "", 0)>;
	int_T mLengthAVal = 4;
	int_T mLengthB    = 40;
	int_T mLengthOut  =40;
	int_T mBytesPerOutputElement = sizeof(real_T);
	/* Indices are zero based; Indices need not be sorted */
	memset ((byte_T *)y,0,mLengthOut*mBytesPerOutputElement);
	{
	    int_T m=0;
	    int_T k;
	    for (k=0; k<mLengthAVal;k++)
	    {
		 int_T i=0;
		 int_T tmp = (int_T)uAIdx[m];  
		 while(i<mLengthB && tmp<mLengthOut && m<mLengthAVal)
		 {
		    y[tmp++] += (real_T)(uASign[k]*uB[i++]);
		 }
		 m++;
	    }
	}
   }
%endfunction  %% Outputs    

%% [EOF] sdspspconv.tlc

