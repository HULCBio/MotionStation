%% $RCSfile: sdsppolyval2.tlc,v $
%% $Revision: 1.6.4.3 $ 
%% $Date: 2004/04/12 23:09:25 $
%%
%% Copyright 1995-2004 The MathWorks, Inc.
%%
%% Abstract: Polynomial evaluation S-function block for sdsppolyval2.c
%%

%implements sdsppolyval2 "C"

%% Function: BlockTypeSetup ====================================================
%function BlockTypeSetup(block, system) void

    %<Include_rt_header(block,"dsppolyval_rt")>

%endfunction %% BlockTypeSetup

%% Function: BlockInstanceSetup ===============================================
%%
%function BlockInstanceSetup(block, system) void
  %%
  %assign INPORT1 = 0
  %assign INPORT2 = 1
  %assign OUTPORT = 0
  %%
  %assign useParamCoeffs = SFcnParamSettings.UseConstCoeffsNotInport
   
  %%Get data type and complexity profiles
  %assign DTYPE_ID_INP1    = LibBlockInputSignalDataTypeId(INPORT1)
  %assign coeffsAreComplex = (useParamCoeffs)                     \
                           ? LibBlockParameterIsComplex(Coeffs)   \
                           : LibBlockInputSignalIsComplex(INPORT2)
  %assign INP1_COMPLEX     = LibBlockInputSignalIsComplex(INPORT1)  

  %%Get the order of input
  %assign N                = LibBlockInputSignalWidth(INPORT1)
  %assign numCoeffs        = (useParamCoeffs)                     \
                           ? LibBlockParameterSize(Coeffs)[1]     \
                           : LibDataInputPortWidth(INPORT2)
  %%
  %assign block = block + INPORT1 + INPORT2 + OUTPORT
  %assign block = block + useParamCoeffs  
  %assign block = block + DTYPE_ID_INP1 + coeffsAreComplex + INP1_COMPLEX
  %assign block = block + N + numCoeffs
  %%
%endfunction %% BlockInstanceSetup


%%%%%%%%%%%%%%%%%%%%% 
%% Function: Outputs ===========================================================
%%
%function Outputs(block, system) Output
/* Signal Processing Blockset Polyval (%<ParamSettings.FunctionName>) - '%<Name>' - Output */
{

%%Call run-time function based on data type and ftype
    %assign dcast  = ["real32_T *", "creal32_T *", "real_T *", "creal_T *"]
    %assign dnam   = ["R", "C", "D", "Z"]                  %% Data type
    %assign INP1_SINGLE = (DTYPE_ID_INP1 == tSS_SINGLE)? 0 : 2    %% Double or single
    %assign dCTi    = dcast[INP1_SINGLE+INP1_COMPLEX]	    %% Find the right character
    %assign dCTc    = dcast[INP1_SINGLE+coeffsAreComplex]	    %% Find the right character
    %if (INP1_COMPLEX ||coeffsAreComplex) 
      %assign OUT_COMPLEX = 1
     %else  
      %assign OUT_COMPLEX = 0
    %endif
    %assign dCTo    = dcast[INP1_SINGLE+OUT_COMPLEX]
    %assign dFUNC   = dnam[INP1_SINGLE+INP1_COMPLEX]+dnam[INP1_SINGLE+coeffsAreComplex] 
    
%%Create function name based on above identified types
        
          MWDSP_polyval_%<dFUNC>(\
          (const %<dCTi>)%<LibBlockInputSignalAddr(INPORT1, "", "", 0)>,\
                (%<dCTo>)%<LibBlockOutputSignalAddr(OUTPORT,  "", "", 0)>,\          
	  %if useParamCoeffs	  
	        (const %<dCTc>)%<LibBlockParameterAddr(Coeffs,  "", "", 0)>,\
          %else
	        (const %<dCTc>)%<LibBlockInputSignalAddr(INPORT2, "", "", 0)>,\
	  %endif 	  
	  %<numCoeffs>, %<N> );  
}
%endfunction  %% Outputs    
    
%% [EOF] sdsppolyval2.tlc
